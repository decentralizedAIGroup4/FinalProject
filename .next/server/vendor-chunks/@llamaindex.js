"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@llamaindex";
exports.ids = ["vendor-chunks/@llamaindex"];
exports.modules = {

/***/ "(rsc)/./node_modules/@llamaindex/core/decorator/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@llamaindex/core/decorator/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lazyInitHash: () => (/* binding */ lazyInitHash),\n/* harmony export */   wrapEventCaller: () => (/* binding */ wrapEventCaller),\n/* harmony export */   wrapLLMEvent: () => (/* binding */ wrapLLMEvent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\nfunction wrapEventCaller(originalMethod, context) {\n    const name = context.name;\n    context.addInitializer(function() {\n        // @ts-expect-error - this is a valid assignment\n        const fn = this[name].bind(this);\n        // @ts-expect-error - this is a valid assignment\n        this[name] = (...args)=>{\n            return (0,_global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.withEventCaller)(this, ()=>fn(...args));\n        };\n    });\n    return function(...args) {\n        const result = originalMethod.call(this, ...args);\n        // patch for iterators because AsyncLocalStorage doesn't work with them\n        if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isAsyncIterable)(result)) {\n            const iter = result[Symbol.asyncIterator]();\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            return async function* asyncGeneratorWrapper() {\n                while(true){\n                    const { value, done } = await snapshot(()=>iter.next());\n                    if (done) {\n                        break;\n                    }\n                    yield value;\n                }\n            }();\n        } else if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isIterable)(result)) {\n            const iter = result[Symbol.iterator]();\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            return function* generatorWrapper() {\n                while(true){\n                    const { value, done } = snapshot(()=>iter.next());\n                    if (done) {\n                        break;\n                    }\n                    yield value;\n                }\n            }();\n        }\n        return result;\n    };\n}\n\nfunction lazyInitHash(value, _context) {\n    return {\n        get () {\n            const oldValue = value.get.call(this);\n            if (oldValue === \"\") {\n                const hash = this.generateHash();\n                value.set.call(this, hash);\n            }\n            return value.get.call(this);\n        },\n        set (newValue) {\n            value.set.call(this, newValue);\n        },\n        init (value) {\n            return value;\n        }\n    };\n}\n\nfunction wrapLLMEvent(originalMethod, _context) {\n    return async function withLLMEvent(...params) {\n        const id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-start\", {\n            id,\n            messages: params[0].messages\n        });\n        const response = await originalMethod.call(this, ...params);\n        if (Symbol.asyncIterator in response) {\n            // save snapshot to restore it after the response is done\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            const originalAsyncIterator = {\n                [Symbol.asyncIterator]: response[Symbol.asyncIterator].bind(response)\n            };\n            response[Symbol.asyncIterator] = async function*() {\n                const finalResponse = {\n                    raw: [],\n                    message: {\n                        content: \"\",\n                        role: \"assistant\",\n                        options: {}\n                    }\n                };\n                let firstOne = false;\n                for await (const chunk of originalAsyncIterator){\n                    if (!firstOne) {\n                        firstOne = true;\n                        finalResponse.message.content = chunk.delta;\n                    } else {\n                        finalResponse.message.content += chunk.delta;\n                    }\n                    if (chunk.options) {\n                        finalResponse.message.options = {\n                            ...finalResponse.message.options,\n                            ...chunk.options\n                        };\n                    }\n                    _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-stream\", {\n                        id,\n                        chunk\n                    });\n                    finalResponse.raw.push(chunk);\n                    yield chunk;\n                }\n                snapshot(()=>{\n                    _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-end\", {\n                        id,\n                        response: finalResponse\n                    });\n                });\n            };\n        } else {\n            _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-end\", {\n                id,\n                response\n            });\n        }\n        return response;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9kZWNvcmF0b3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0U7QUFDTztBQUNDOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzRUFBZTtBQUNsQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFFQUFlO0FBQzNCO0FBQ0EsNkJBQTZCLDhEQUFpQjtBQUM5QztBQUNBO0FBQ0EsNEJBQTRCLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixVQUFVLFNBQVMsZ0VBQVU7QUFDN0I7QUFDQSw2QkFBNkIsOERBQWlCO0FBQzlDO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQiwyREFBVTtBQUM3QixRQUFRLDJEQUFRO0FBQ2hCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDhEQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkRBQVE7QUFDNUI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyREFBUTtBQUM1QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBLFVBQVU7QUFDVixZQUFZLDJEQUFRO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRXVEIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvZGVjb3JhdG9yL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2UsIHJhbmRvbVVVSUQgfSBmcm9tICdAbGxhbWFpbmRleC9lbnYnO1xuaW1wb3J0IHsgd2l0aEV2ZW50Q2FsbGVyLCBTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2dsb2JhbC9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSwgaXNJdGVyYWJsZSB9IGZyb20gJy4uLy4uL3V0aWxzL2Rpc3QvaW5kZXguanMnO1xuXG5mdW5jdGlvbiB3cmFwRXZlbnRDYWxsZXIob3JpZ2luYWxNZXRob2QsIGNvbnRleHQpIHtcbiAgICBjb25zdCBuYW1lID0gY29udGV4dC5uYW1lO1xuICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSB0aGlzIGlzIGEgdmFsaWQgYXNzaWdubWVudFxuICAgICAgICBjb25zdCBmbiA9IHRoaXNbbmFtZV0uYmluZCh0aGlzKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHRoaXMgaXMgYSB2YWxpZCBhc3NpZ25tZW50XG4gICAgICAgIHRoaXNbbmFtZV0gPSAoLi4uYXJncyk9PntcbiAgICAgICAgICAgIHJldHVybiB3aXRoRXZlbnRDYWxsZXIodGhpcywgKCk9PmZuKC4uLmFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBvcmlnaW5hbE1ldGhvZC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAvLyBwYXRjaCBmb3IgaXRlcmF0b3JzIGJlY2F1c2UgQXN5bmNMb2NhbFN0b3JhZ2UgZG9lc24ndCB3b3JrIHdpdGggdGhlbVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSByZXN1bHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IEFzeW5jTG9jYWxTdG9yYWdlLnNuYXBzaG90KCk7XG4gICAgICAgICAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24qIGFzeW5jR2VuZXJhdG9yV3JhcHBlcigpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSh0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgc25hcHNob3QoKCk9Pml0ZXIubmV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0l0ZXJhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSByZXN1bHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBBc3luY0xvY2FsU3RvcmFnZS5zbmFwc2hvdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKiBnZW5lcmF0b3JXcmFwcGVyKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBzbmFwc2hvdCgoKT0+aXRlci5uZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbGF6eUluaXRIYXNoKHZhbHVlLCBfY29udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHZhbHVlLmdldC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IHRoaXMuZ2VuZXJhdGVIYXNoKCk7XG4gICAgICAgICAgICAgICAgdmFsdWUuc2V0LmNhbGwodGhpcywgaGFzaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlLnNldC5jYWxsKHRoaXMsIG5ld1ZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdCAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdyYXBMTE1FdmVudChvcmlnaW5hbE1ldGhvZCwgX2NvbnRleHQpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gd2l0aExMTUV2ZW50KC4uLnBhcmFtcykge1xuICAgICAgICBjb25zdCBpZCA9IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgU2V0dGluZ3MuY2FsbGJhY2tNYW5hZ2VyLmRpc3BhdGNoRXZlbnQoXCJsbG0tc3RhcnRcIiwge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlczogcGFyYW1zWzBdLm1lc3NhZ2VzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yaWdpbmFsTWV0aG9kLmNhbGwodGhpcywgLi4ucGFyYW1zKTtcbiAgICAgICAgaWYgKFN5bWJvbC5hc3luY0l0ZXJhdG9yIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAvLyBzYXZlIHNuYXBzaG90IHRvIHJlc3RvcmUgaXQgYWZ0ZXIgdGhlIHJlc3BvbnNlIGlzIGRvbmVcbiAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gQXN5bmNMb2NhbFN0b3JhZ2Uuc25hcHNob3QoKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQXN5bmNJdGVyYXRvciA9IHtcbiAgICAgICAgICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiByZXNwb25zZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0uYmluZChyZXNwb25zZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNwb25zZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBhc3luYyBmdW5jdGlvbiooKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmluYWxSZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmF3OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RPbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIG9yaWdpbmFsQXN5bmNJdGVyYXRvcil7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RPbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0T25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsUmVzcG9uc2UubWVzc2FnZS5jb250ZW50ID0gY2h1bmsuZGVsdGE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFJlc3BvbnNlLm1lc3NhZ2UuY29udGVudCArPSBjaHVuay5kZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmsub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxSZXNwb25zZS5tZXNzYWdlLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmluYWxSZXNwb25zZS5tZXNzYWdlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2h1bmsub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1zdHJlYW1cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxSZXNwb25zZS5yYXcucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIGNodW5rO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzbmFwc2hvdCgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1lbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogZmluYWxSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1lbmRcIiwge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgbGF6eUluaXRIYXNoLCB3cmFwRXZlbnRDYWxsZXIsIHdyYXBMTE1FdmVudCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/core/decorator/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/core/global/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@llamaindex/core/global/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   DEFAULT_BASE_URL: () => (/* binding */ DEFAULT_BASE_URL),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP: () => (/* binding */ DEFAULT_CHUNK_OVERLAP),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP_RATIO: () => (/* binding */ DEFAULT_CHUNK_OVERLAP_RATIO),\n/* harmony export */   DEFAULT_CHUNK_SIZE: () => (/* binding */ DEFAULT_CHUNK_SIZE),\n/* harmony export */   DEFAULT_COLLECTION: () => (/* binding */ DEFAULT_COLLECTION),\n/* harmony export */   DEFAULT_CONTEXT_WINDOW: () => (/* binding */ DEFAULT_CONTEXT_WINDOW),\n/* harmony export */   DEFAULT_DOC_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_DOC_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_GRAPH_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_GRAPH_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_INDEX_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_INDEX_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   DEFAULT_NUM_OUTPUTS: () => (/* binding */ DEFAULT_NUM_OUTPUTS),\n/* harmony export */   DEFAULT_PADDING: () => (/* binding */ DEFAULT_PADDING),\n/* harmony export */   DEFAULT_PERSIST_DIR: () => (/* binding */ DEFAULT_PERSIST_DIR),\n/* harmony export */   DEFAULT_PROJECT_NAME: () => (/* binding */ DEFAULT_PROJECT_NAME),\n/* harmony export */   DEFAULT_VECTOR_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_VECTOR_STORE_PERSIST_FILENAME),\n/* harmony export */   EventCaller: () => (/* binding */ EventCaller),\n/* harmony export */   Settings: () => (/* binding */ Settings),\n/* harmony export */   getEventCaller: () => (/* binding */ getEventCaller),\n/* harmony export */   withEventCaller: () => (/* binding */ withEventCaller)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n\n\n\n//#region llm\nconst DEFAULT_CONTEXT_WINDOW = 3900;\nconst DEFAULT_NUM_OUTPUTS = 256;\nconst DEFAULT_CHUNK_SIZE = 1024;\nconst DEFAULT_CHUNK_OVERLAP = 20;\nconst DEFAULT_CHUNK_OVERLAP_RATIO = 0.1;\nconst DEFAULT_PADDING = 5;\n//#endregion\n//#region storage\nconst DEFAULT_COLLECTION = \"data\";\nconst DEFAULT_PERSIST_DIR = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.join(\"./storage\");\nconst DEFAULT_INDEX_STORE_PERSIST_FILENAME = \"index_store.json\";\nconst DEFAULT_DOC_STORE_PERSIST_FILENAME = \"doc_store.json\";\nconst DEFAULT_VECTOR_STORE_PERSIST_FILENAME = \"vector_store.json\";\nconst DEFAULT_GRAPH_STORE_PERSIST_FILENAME = \"graph_store.json\";\nconst DEFAULT_NAMESPACE = \"docstore\";\n//#endregion\n//#region llama cloud\nconst DEFAULT_PROJECT_NAME = \"Default\";\nconst DEFAULT_BASE_URL = \"https://api.cloud.llamaindex.ai\"; //#endregion\n\nconst eventReasonAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\n/**\n * EventCaller is used to track the caller of an event.\n */ class EventCaller {\n    constructor(caller, parent){\n        this.caller = caller;\n        this.parent = parent;\n        this.id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        this.#computedCallers = null;\n    }\n    #computedCallers;\n    get computedCallers() {\n        if (this.#computedCallers != null) {\n            return this.#computedCallers;\n        }\n        const callers = [\n            this.caller\n        ];\n        let parent = this.parent;\n        while(parent != null){\n            callers.push(parent.caller);\n            parent = parent.parent;\n        }\n        this.#computedCallers = callers;\n        return callers;\n    }\n    static create(caller, parent) {\n        return new EventCaller(caller, parent);\n    }\n}\nfunction getEventCaller() {\n    return eventReasonAsyncLocalStorage.getStore() ?? null;\n}\n/**\n * @param caller who is calling this function, pass in `this` if it's a class method\n * @param fn\n */ function withEventCaller(caller, fn) {\n    // create a chain of event callers\n    const parentCaller = getEventCaller();\n    return eventReasonAsyncLocalStorage.run(EventCaller.create(caller, parentCaller), fn);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass LlamaIndexCustomEvent extends _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.CustomEvent {\n    constructor(event, options){\n        super(event, options), this.reason = null;\n        this.reason = options?.reason ?? null;\n    }\n    static fromEvent(type, detail) {\n        return new LlamaIndexCustomEvent(type, {\n            detail: detail,\n            reason: getEventCaller()\n        });\n    }\n}\nclass CallbackManager {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    #handlers;\n    on(event, handler) {\n        if (!this.#handlers.has(event)) {\n            this.#handlers.set(event, []);\n        }\n        this.#handlers.get(event).push(handler);\n        return this;\n    }\n    off(event, handler) {\n        if (!this.#handlers.has(event)) {\n            return this;\n        }\n        const cbs = this.#handlers.get(event);\n        const index = cbs.indexOf(handler);\n        if (index > -1) {\n            cbs.splice(index, 1);\n        }\n        return this;\n    }\n    dispatchEvent(event, detail, sync = false) {\n        const cbs = this.#handlers.get(event);\n        if (!cbs) {\n            return;\n        }\n        if (typeof queueMicrotask === \"undefined\") {\n            console.warn(\"queueMicrotask is not available, dispatching synchronously\");\n            sync = true;\n        }\n        if (sync) {\n            cbs.forEach((handler)=>handler(LlamaIndexCustomEvent.fromEvent(event, {\n                    ...detail\n                })));\n        } else {\n            queueMicrotask(()=>{\n                cbs.forEach((handler)=>handler(LlamaIndexCustomEvent.fromEvent(event, {\n                        ...detail\n                    })));\n            });\n        }\n    }\n    constructor(){\n        this.#handlers = new Map();\n    }\n}\nconst globalCallbackManager = new CallbackManager();\nconst callbackManagerAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet currentCallbackManager = globalCallbackManager;\nfunction getCallbackManager() {\n    return callbackManagerAsyncLocalStorage.getStore() ?? currentCallbackManager;\n}\nfunction setCallbackManager(callbackManager) {\n    currentCallbackManager = callbackManager;\n}\nfunction withCallbackManager(callbackManager, fn) {\n    return callbackManagerAsyncLocalStorage.run(callbackManager, fn);\n}\n\nconst chunkSizeAsyncLocalStorage$1 = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalChunkSize = 1024;\nfunction getChunkSize() {\n    return chunkSizeAsyncLocalStorage$1.getStore() ?? globalChunkSize;\n}\nfunction setChunkSize(chunkSize) {\n    if (chunkSize !== undefined) {\n        globalChunkSize = chunkSize;\n    }\n}\nfunction withChunkSize(embeddedModel, fn) {\n    return chunkSizeAsyncLocalStorage$1.run(embeddedModel, fn);\n}\n\nconst embeddedModelAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalEmbeddedModel = null;\nfunction getEmbeddedModel() {\n    const currentEmbeddedModel = embeddedModelAsyncLocalStorage.getStore() ?? globalEmbeddedModel;\n    if (!currentEmbeddedModel) {\n        throw new Error(\"Cannot find Embedding, please set `Settings.embedModel = ...` on the top of your code\");\n    }\n    return currentEmbeddedModel;\n}\nfunction setEmbeddedModel(embeddedModel) {\n    globalEmbeddedModel = embeddedModel;\n}\nfunction withEmbeddedModel(embeddedModel, fn) {\n    return embeddedModelAsyncLocalStorage.run(embeddedModel, fn);\n}\n\nconst llmAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalLLM;\nfunction getLLM() {\n    const currentLLM = llmAsyncLocalStorage.getStore() ?? globalLLM;\n    if (!currentLLM) {\n        throw new Error(\"Cannot find LLM, please set `Settings.llm = ...` on the top of your code\");\n    }\n    return currentLLM;\n}\nfunction setLLM(llm) {\n    globalLLM = llm;\n}\nfunction withLLM(llm, fn) {\n    return llmAsyncLocalStorage.run(llm, fn);\n}\n\nconst chunkSizeAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalTokenizer = _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_1__.tokenizers.tokenizer();\nfunction getTokenizer() {\n    return chunkSizeAsyncLocalStorage.getStore() ?? globalTokenizer;\n}\nfunction setTokenizer(tokenizer) {\n    if (tokenizer !== undefined) {\n        globalTokenizer = tokenizer;\n    }\n}\nfunction withTokenizer(tokenizer, fn) {\n    return chunkSizeAsyncLocalStorage.run(tokenizer, fn);\n}\n\nconst Settings = {\n    get llm () {\n        return getLLM();\n    },\n    set llm (llm){\n        setLLM(llm);\n    },\n    withLLM (llm1, fn) {\n        return withLLM(llm1, fn);\n    },\n    get embedModel () {\n        return getEmbeddedModel();\n    },\n    set embedModel (embedModel){\n        setEmbeddedModel(embedModel);\n    },\n    withEmbedModel (embedModel1, fn) {\n        return withEmbeddedModel(embedModel1, fn);\n    },\n    get tokenizer () {\n        return getTokenizer();\n    },\n    set tokenizer (tokenizer){\n        setTokenizer(tokenizer);\n    },\n    withTokenizer (tokenizer1, fn) {\n        return withTokenizer(tokenizer1, fn);\n    },\n    get chunkSize () {\n        return getChunkSize();\n    },\n    set chunkSize (chunkSize){\n        setChunkSize(chunkSize);\n    },\n    withChunkSize (chunkSize1, fn) {\n        return withChunkSize(chunkSize1, fn);\n    },\n    get callbackManager () {\n        return getCallbackManager();\n    },\n    set callbackManager (callbackManager){\n        setCallbackManager(callbackManager);\n    },\n    withCallbackManager (callbackManager1, fn) {\n        return withCallbackManager(callbackManager1, fn);\n    },\n    get debug () {\n        let debug = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)(\"DEBUG\");\n        if (typeof window !== \"undefined\") {\n            debug ||= window.localStorage.debug;\n        }\n        return Boolean(debug) && debug?.includes(\"llamaindex\") || debug === \"*\" || debug === \"true\";\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/core/global/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@llamaindex/core/schema/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseNode: () => (/* binding */ BaseNode),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   EngineResponse: () => (/* binding */ EngineResponse),\n/* harmony export */   FileReader: () => (/* binding */ FileReader),\n/* harmony export */   ImageDocument: () => (/* binding */ ImageDocument),\n/* harmony export */   ImageNode: () => (/* binding */ ImageNode),\n/* harmony export */   IndexNode: () => (/* binding */ IndexNode),\n/* harmony export */   MetadataMode: () => (/* binding */ MetadataMode),\n/* harmony export */   ModalityType: () => (/* binding */ ModalityType),\n/* harmony export */   NodeRelationship: () => (/* binding */ NodeRelationship),\n/* harmony export */   ObjectType: () => (/* binding */ ObjectType),\n/* harmony export */   TextNode: () => (/* binding */ TextNode),\n/* harmony export */   TransformComponent: () => (/* binding */ TransformComponent),\n/* harmony export */   anyFunctionSchema: () => (/* binding */ anyFunctionSchema),\n/* harmony export */   baseToolSchema: () => (/* binding */ baseToolSchema),\n/* harmony export */   baseToolWithCallSchema: () => (/* binding */ baseToolWithCallSchema),\n/* harmony export */   buildNodeFromSplits: () => (/* binding */ buildNodeFromSplits),\n/* harmony export */   jsonToNode: () => (/* binding */ jsonToNode),\n/* harmony export */   sentenceSplitterSchema: () => (/* binding */ sentenceSplitterSchema),\n/* harmony export */   sentenceWindowNodeParserSchema: () => (/* binding */ sentenceWindowNodeParserSchema),\n/* harmony export */   splitNodesByType: () => (/* binding */ splitNodesByType),\n/* harmony export */   toolMetadataSchema: () => (/* binding */ toolMetadataSchema)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../decorator/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n\n\n\n\n\nfunction chunkSizeCheck(contentGetter, _context) {\n    return function(...args) {\n        const content = contentGetter.call(this, ...args);\n        const chunkSize = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.chunkSize;\n        const enableChunkSizeCheck = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)(\"ENABLE_CHUNK_SIZE_CHECK\") === \"true\";\n        if (enableChunkSizeCheck && chunkSize !== undefined && content.length > chunkSize) {\n            console.warn(`Node (${this.id_}) is larger than chunk size: ${content.length} > ${chunkSize}`);\n            {\n                console.warn(\"Will truncate the content if it is larger than chunk size\");\n                console.warn(\"If you want to disable this behavior:\");\n                console.warn(\"  1. Set Settings.chunkSize = undefined\");\n                console.warn(\"  2. Set Settings.chunkSize to a larger value\");\n                console.warn(\"  3. Change the way of splitting content into smaller chunks\");\n            }\n            return content.slice(0, chunkSize);\n        }\n        return content;\n    };\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _init_hash, _initProto, _initProto1;\nvar NodeRelationship = /*#__PURE__*/ function(NodeRelationship) {\n    NodeRelationship[\"SOURCE\"] = \"SOURCE\";\n    NodeRelationship[\"PREVIOUS\"] = \"PREVIOUS\";\n    NodeRelationship[\"NEXT\"] = \"NEXT\";\n    NodeRelationship[\"PARENT\"] = \"PARENT\";\n    NodeRelationship[\"CHILD\"] = \"CHILD\";\n    return NodeRelationship;\n}({});\nvar ObjectType = /*#__PURE__*/ function(ObjectType) {\n    ObjectType[\"TEXT\"] = \"TEXT\";\n    ObjectType[\"IMAGE\"] = \"IMAGE\";\n    ObjectType[\"INDEX\"] = \"INDEX\";\n    ObjectType[\"DOCUMENT\"] = \"DOCUMENT\";\n    ObjectType[\"IMAGE_DOCUMENT\"] = \"IMAGE_DOCUMENT\";\n    return ObjectType;\n}({});\nvar MetadataMode = /*#__PURE__*/ function(MetadataMode) {\n    MetadataMode[\"ALL\"] = \"ALL\";\n    MetadataMode[\"EMBED\"] = \"EMBED\";\n    MetadataMode[\"LLM\"] = \"LLM\";\n    MetadataMode[\"NONE\"] = \"NONE\";\n    return MetadataMode;\n}({});\n/**\n * Generic abstract class for retrievable nodes\n */ class BaseNode {\n    static{\n        ({ e: [_init_hash, _initProto] } = _apply_decs_2203_r(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.lazyInitHash,\n                1,\n                \"hash\"\n            ]\n        ], []));\n    }\n    #___private_hash_1;\n    get hash() {\n        return this.#___private_hash_1;\n    }\n    set hash(_v) {\n        this.#___private_hash_1 = _v;\n    }\n    constructor(init){\n        this.#___private_hash_1 = (_initProto(this), _init_hash(this, \"\"));\n        const { id_, metadata, excludedEmbedMetadataKeys, excludedLlmMetadataKeys, relationships, hash, embedding } = init || {};\n        this.id_ = id_ ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        this.metadata = metadata ?? {};\n        this.excludedEmbedMetadataKeys = excludedEmbedMetadataKeys ?? [];\n        this.excludedLlmMetadataKeys = excludedLlmMetadataKeys ?? [];\n        this.relationships = relationships ?? {};\n        this.embedding = embedding;\n    }\n    get sourceNode() {\n        const relationship = this.relationships[\"SOURCE\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Source object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get prevNode() {\n        const relationship = this.relationships[\"PREVIOUS\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Previous object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get nextNode() {\n        const relationship = this.relationships[\"NEXT\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Next object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get parentNode() {\n        const relationship = this.relationships[\"PARENT\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Parent object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get childNodes() {\n        const relationship = this.relationships[\"CHILD\"];\n        if (!Array.isArray(relationship)) {\n            throw new Error(\"Child object must be a an array of RelatedNodeInfo objects\");\n        }\n        return relationship;\n    }\n    getEmbedding() {\n        if (this.embedding === undefined) {\n            throw new Error(\"Embedding not set\");\n        }\n        return this.embedding;\n    }\n    asRelatedNodeInfo() {\n        return {\n            nodeId: this.id_,\n            metadata: this.metadata,\n            hash: this.hash\n        };\n    }\n    /**\n   * Called by built in JSON.stringify (see https://javascript.info/json)\n   * Properties are read-only as they are not deep-cloned (not necessary for stringification).\n   * @see toMutableJSON - use to return a mutable JSON instead\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        return {\n            ...this,\n            type: this.type,\n            // hash is an accessor property, so it's not included in the rest operator\n            hash: this.hash\n        };\n    }\n    clone() {\n        return jsonToNode(this.toMutableJSON());\n    }\n    /**\n   * Converts the object to a JSON representation.\n   * Properties can be safely modified as a deep clone of the properties are created.\n   * @return {Record<string, any>} - The JSON representation of the object.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toMutableJSON() {\n        return structuredClone(this.toJSON());\n    }\n}\n/**\n * TextNode is the default node type for text. Most common node type in LlamaIndex.TS\n */ class TextNode extends BaseNode {\n    static{\n        ({ e: [_initProto1] } = _apply_decs_2203_r(this, [\n            [\n                chunkSizeCheck,\n                2,\n                \"getContent\"\n            ]\n        ], []));\n    }\n    constructor(init = {}){\n        super(init), _initProto1(this);\n        const { text, textTemplate, startCharIdx, endCharIdx, metadataSeparator } = init;\n        this.text = text ?? \"\";\n        this.textTemplate = textTemplate ?? \"\";\n        if (startCharIdx) {\n            this.startCharIdx = startCharIdx;\n        }\n        if (endCharIdx) {\n            this.endCharIdx = endCharIdx;\n        }\n        this.metadataSeparator = metadataSeparator ?? \"\\n\";\n    }\n    /**\n   * Generate a hash of the text node.\n   * The ID is not part of the hash as it can change independent of content.\n   * @returns\n   */ generateHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        hashFunction.update(`type=${this.type}`);\n        hashFunction.update(`startCharIdx=${this.startCharIdx} endCharIdx=${this.endCharIdx}`);\n        hashFunction.update(this.getContent(\"ALL\"));\n        return hashFunction.digest();\n    }\n    get type() {\n        return \"TEXT\";\n    }\n    getContent(metadataMode = \"NONE\") {\n        const metadataStr = this.getMetadataStr(metadataMode).trim();\n        return `${metadataStr}\\n\\n${this.text}`.trim();\n    }\n    getMetadataStr(metadataMode) {\n        if (metadataMode === \"NONE\") {\n            return \"\";\n        }\n        const usableMetadataKeys = new Set(Object.keys(this.metadata).sort());\n        if (metadataMode === \"LLM\") {\n            for (const key of this.excludedLlmMetadataKeys){\n                usableMetadataKeys.delete(key);\n            }\n        } else if (metadataMode === \"EMBED\") {\n            for (const key of this.excludedEmbedMetadataKeys){\n                usableMetadataKeys.delete(key);\n            }\n        }\n        return [\n            ...usableMetadataKeys\n        ].map((key)=>`${key}: ${this.metadata[key]}`).join(this.metadataSeparator);\n    }\n    setContent(value) {\n        this.text = value;\n        this.hash = this.generateHash();\n    }\n    getNodeInfo() {\n        return {\n            start: this.startCharIdx,\n            end: this.endCharIdx\n        };\n    }\n    getText() {\n        return this.getContent(\"NONE\");\n    }\n}\nclass IndexNode extends TextNode {\n    constructor(init){\n        super(init);\n        const { indexId } = init || {};\n        this.indexId = indexId ?? \"\";\n    }\n    get type() {\n        return \"INDEX\";\n    }\n}\n/**\n * A document is just a special text node with a docId.\n */ class Document extends TextNode {\n    constructor(init){\n        super(init);\n    }\n    get type() {\n        return \"DOCUMENT\";\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonToNode(json, type) {\n    if (!json.type && !type) {\n        throw new Error(\"Node type not found\");\n    }\n    const nodeType = type || json.type;\n    switch(nodeType){\n        case \"TEXT\":\n            return new TextNode(json);\n        case \"INDEX\":\n            return new IndexNode(json);\n        case \"DOCUMENT\":\n            return new Document(json);\n        case \"IMAGE_DOCUMENT\":\n            return new ImageDocument(json);\n        default:\n            throw new Error(`Invalid node type: ${nodeType}`);\n    }\n}\nclass ImageNode extends TextNode {\n    constructor(init){\n        super(init);\n        const { image } = init;\n        this.image = image;\n    }\n    get type() {\n        return \"IMAGE\";\n    }\n    getUrl() {\n        // id_ stores the relative path, convert it to the URL of the file\n        const absPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.resolve(this.id_);\n        return new URL(`file://${absPath}`);\n    }\n    // Calculates the image part of the hash\n    generateImageHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        if (this.image instanceof Blob) {\n            // TODO: ideally we should use the blob's content to calculate the hash:\n            // hashFunction.update(new Uint8Array(await this.image.arrayBuffer()));\n            // as this is async, we're using the node's ID for the time being\n            hashFunction.update(this.id_);\n        } else if (this.image instanceof URL) {\n            hashFunction.update(this.image.toString());\n        } else if (typeof this.image === \"string\") {\n            hashFunction.update(this.image);\n        } else {\n            throw new Error(`Unknown image type: ${typeof this.image}. Can't calculate hash`);\n        }\n        return hashFunction.digest();\n    }\n    generateHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        // calculates hash based on hash of both components (image and text)\n        hashFunction.update(super.generateHash());\n        hashFunction.update(this.generateImageHash());\n        return hashFunction.digest();\n    }\n}\nclass ImageDocument extends ImageNode {\n    constructor(init){\n        super(init);\n    }\n    get type() {\n        return \"IMAGE_DOCUMENT\";\n    }\n}\nvar ModalityType = /*#__PURE__*/ function(ModalityType) {\n    ModalityType[\"TEXT\"] = \"TEXT\";\n    ModalityType[\"IMAGE\"] = \"IMAGE\";\n    return ModalityType;\n}({});\nfunction splitNodesByType(nodes) {\n    const result = {};\n    for (const node of nodes){\n        let type;\n        if (node.type === \"IMAGE\" || node.type === \"IMAGE_DOCUMENT\") {\n            type = \"IMAGE\";\n        } else if (node.type === \"TEXT\" || node.type === \"DOCUMENT\" || node.type === \"INDEX\") {\n            type = \"TEXT\";\n        } else {\n            throw new Error(`Unknown node type: ${node.type}`);\n        }\n        if (type in result) {\n            result[type]?.push(node);\n        } else {\n            result[type] = [\n                node\n            ];\n        }\n    }\n    return result;\n}\nfunction buildNodeFromSplits(textSplits, doc, refDoc = doc, idGenerator = ()=>(0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)()) {\n    const nodes = [];\n    const relationships = {\n        [\"SOURCE\"]: refDoc.asRelatedNodeInfo()\n    };\n    textSplits.forEach((textChunk, i)=>{\n        if (doc.type === \"IMAGE\" || doc.type === \"IMAGE_DOCUMENT\") {\n            const imageDoc = doc;\n            const imageNode = new ImageNode({\n                id_: idGenerator(i, imageDoc),\n                text: textChunk,\n                image: imageDoc.image,\n                embedding: imageDoc.embedding,\n                excludedEmbedMetadataKeys: [\n                    ...imageDoc.excludedEmbedMetadataKeys\n                ],\n                excludedLlmMetadataKeys: [\n                    ...imageDoc.excludedLlmMetadataKeys\n                ],\n                metadataSeparator: imageDoc.metadataSeparator,\n                textTemplate: imageDoc.textTemplate,\n                relationships: {\n                    ...relationships\n                }\n            });\n            nodes.push(imageNode);\n        } else if (doc.type === \"DOCUMENT\" || doc.type === \"TEXT\") {\n            const textDoc = doc;\n            const node = new TextNode({\n                id_: idGenerator(i, textDoc),\n                text: textChunk,\n                embedding: textDoc.embedding,\n                excludedEmbedMetadataKeys: [\n                    ...textDoc.excludedEmbedMetadataKeys\n                ],\n                excludedLlmMetadataKeys: [\n                    ...textDoc.excludedLlmMetadataKeys\n                ],\n                metadataSeparator: textDoc.metadataSeparator,\n                textTemplate: textDoc.textTemplate,\n                relationships: {\n                    ...relationships\n                }\n            });\n            nodes.push(node);\n        } else {\n            throw new Error(`Unknown document type: ${doc.type}`);\n        }\n    });\n    return nodes;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TransformComponent {\n    constructor(transformFn){\n        Object.defineProperties(transformFn, Object.getOwnPropertyDescriptors(this.constructor.prototype));\n        const transform = function transform(...args) {\n            return transformFn(...args);\n        };\n        Reflect.setPrototypeOf(transform, new.target.prototype);\n        transform.id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        return transform;\n    }\n}\n/**\n * A FileReader takes file paths and imports data into Document objects.\n */ class FileReader {\n    async loadData(filePath) {\n        const fileContent = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(filePath);\n        const filename = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(filePath);\n        const docs = await this.loadDataAsContent(fileContent, filename);\n        docs.forEach(FileReader.addMetaData(filePath));\n        return docs;\n    }\n    static addMetaData(filePath) {\n        return (doc, index)=>{\n            // generate id as loadDataAsContent is only responsible for the content\n            doc.id_ = `${filePath}_${index + 1}`;\n            doc.metadata[\"file_path\"] = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.resolve(filePath);\n            doc.metadata[\"file_name\"] = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(filePath);\n        };\n    }\n}\n\nclass EngineResponse {\n    constructor(chatResponse, stream, sourceNodes){\n        this.metadata = {};\n        this.message = chatResponse.message;\n        this.raw = chatResponse.raw;\n        this.sourceNodes = sourceNodes;\n        this.stream = stream;\n    }\n    static fromResponse(response, stream, sourceNodes) {\n        return new EngineResponse(EngineResponse.toChatResponse(response), stream, sourceNodes);\n    }\n    static toChatResponse(response, raw = null) {\n        return {\n            message: {\n                content: response,\n                role: \"assistant\"\n            },\n            raw\n        };\n    }\n    static fromChatResponse(chatResponse, sourceNodes) {\n        return new EngineResponse(chatResponse, false, sourceNodes);\n    }\n    static fromChatResponseChunk(chunk, sourceNodes) {\n        return new EngineResponse(EngineResponse.toChatResponse(chunk.delta, chunk.raw), true, sourceNodes);\n    }\n    /**\n   * @deprecated Use `message` instead.\n   */ get response() {\n        return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.extractText)(this.message.content);\n    }\n    get delta() {\n        if (!this.stream) {\n            console.warn(\"delta is only available for streaming responses. Consider using 'message' instead.\");\n        }\n        return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.extractText)(this.message.content);\n    }\n    toString() {\n        return this.response ?? \"\";\n    }\n}\n\nconst anyFunctionSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.function(zod__WEBPACK_IMPORTED_MODULE_4__.z.tuple([]).rest(zod__WEBPACK_IMPORTED_MODULE_4__.z.any()), zod__WEBPACK_IMPORTED_MODULE_4__.z.any());\nconst toolMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    description: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    parameters: zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.any())\n});\nconst baseToolSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    call: anyFunctionSchema.optional(),\n    metadata: toolMetadataSchema\n});\nconst baseToolWithCallSchema = baseToolSchema.extend({\n    call: zod__WEBPACK_IMPORTED_MODULE_4__.z.function()\n});\nconst sentenceSplitterSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    chunkSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The token chunk size for each chunk.\"\n    }).gt(0).optional().default(()=>_global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.chunkSize ?? 1024),\n    chunkOverlap: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The token overlap of each chunk when splitting.\"\n    }).gte(0).optional().default(200),\n    separator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Default separator for splitting into words\"\n    }).default(\" \"),\n    paragraphSeparator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Separator between paragraphs.\"\n    }).optional().default(\"\\n\\n\\n\"),\n    secondaryChunkingRegex: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Backup regex for splitting into sentences.\"\n    }).optional().default(\"[^,.;。？！]+[,.;。？！]?\")\n}).refine((data)=>data.chunkOverlap < data.chunkSize, \"Chunk overlap must be less than chunk size.\");\nconst sentenceWindowNodeParserSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    windowSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The number of sentences on each side of a sentence to capture.\"\n    }).gt(0).default(3),\n    windowMetadataKey: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"The metadata key to store the sentence window under.\"\n    }).default(\"window\"),\n    originalTextMetadataKey: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"The metadata key to store the original sentence in.\"\n    }).default(\"originalText\")\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/core/utils/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@llamaindex/core/utils/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockLLM: () => (/* binding */ MockLLM),\n/* harmony export */   extractDataUrlComponents: () => (/* binding */ extractDataUrlComponents),\n/* harmony export */   extractImage: () => (/* binding */ extractImage),\n/* harmony export */   extractSingleText: () => (/* binding */ extractSingleText),\n/* harmony export */   extractText: () => (/* binding */ extractText),\n/* harmony export */   imageToDataUrl: () => (/* binding */ imageToDataUrl),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   messagesToHistory: () => (/* binding */ messagesToHistory),\n/* harmony export */   objectEntries: () => (/* binding */ objectEntries),\n/* harmony export */   prettifyError: () => (/* binding */ prettifyError),\n/* harmony export */   streamCallbacks: () => (/* binding */ streamCallbacks),\n/* harmony export */   streamConverter: () => (/* binding */ streamConverter),\n/* harmony export */   streamReducer: () => (/* binding */ streamReducer),\n/* harmony export */   stringifyJSONToMessageContent: () => (/* binding */ stringifyJSONToMessageContent),\n/* harmony export */   toToolDescriptions: () => (/* binding */ toToolDescriptions)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! magic-bytes.js */ \"(rsc)/./node_modules/magic-bytes.js/dist/index.js\");\n\n\n\n/**\n * Extracts just the text whether from\n *  a multi-modal message\n *  a single text message\n *  or a query\n *\n * @param message The message to extract text from.\n * @returns The extracted text\n */ function extractText(message) {\n    if (typeof message === \"object\" && \"query\" in message) {\n        return extractText(message.query);\n    }\n    if (typeof message !== \"string\" && !Array.isArray(message)) {\n        console.warn(\"extractText called with non-MessageContent message, this is likely a bug.\");\n        return `${message}`;\n    } else if (typeof message !== \"string\" && Array.isArray(message)) {\n        // message is of type MessageContentDetail[] - retrieve just the text parts and concatenate them\n        // so we can pass them to the context generator\n        return message.filter((c)=>c.type === \"text\").map((c)=>c.text).join(\"\\n\\n\");\n    } else {\n        return message;\n    }\n}\n/**\n * Extracts a single text from a multi-modal message content\n *\n * @param message The message to extract images from.\n * @returns The extracted images\n */ function extractSingleText(message) {\n    if (message.type === \"text\") {\n        return message.text;\n    }\n    return null;\n}\n/**\n * Extracts an image from a multi-modal message content\n *\n * @param message The message to extract images from.\n * @returns The extracted images\n */ function extractImage(message) {\n    if (message.type === \"image_url\") {\n        return new URL(message.image_url.url);\n    }\n    return null;\n}\nconst extractDataUrlComponents = (dataUrl)=>{\n    const parts = dataUrl.split(\";base64,\");\n    if (parts.length !== 2 || !parts[0].startsWith(\"data:\")) {\n        throw new Error(\"Invalid data URL\");\n    }\n    const mimeType = parts[0].slice(5);\n    const base64 = parts[1];\n    return {\n        mimeType,\n        base64\n    };\n};\nfunction messagesToHistory(messages) {\n    return messages.reduce((acc, message)=>{\n        acc += acc ? \"\\n\" : \"\";\n        if (message.role === \"user\") {\n            acc += `Human: ${message.content}`;\n        } else {\n            acc += `Assistant: ${message.content}`;\n        }\n        return acc;\n    }, \"\");\n}\nfunction toToolDescriptions(tools) {\n    const toolsObj = tools.reduce((acc, tool)=>{\n        acc[tool.name] = tool.description;\n        return acc;\n    }, {});\n    return JSON.stringify(toolsObj, null, 4);\n}\nasync function blobToDataUrl(input) {\n    const buffer = Buffer.from(await input.arrayBuffer());\n    const mimes = (0,magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__.filetypemime)(buffer);\n    if (mimes.length < 1) {\n        throw new Error(\"Unsupported image type\");\n    }\n    return \"data:\" + mimes[0] + \";base64,\" + buffer.toString(\"base64\");\n}\nasync function imageToDataUrl(input) {\n    // first ensure, that the input is a Blob\n    if (input instanceof URL && input.protocol === \"file:\" || typeof input === \"string\") {\n        // string or file URL\n        const dataBuffer = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(input instanceof URL ? input.pathname : input);\n        input = new Blob([\n            dataBuffer\n        ]);\n    } else if (!(input instanceof Blob)) {\n        if (input instanceof URL) {\n            throw new Error(`Unsupported URL with protocol: ${input.protocol}`);\n        } else if (input instanceof Uint8Array) {\n            input = new Blob([\n                input\n            ]); // convert Uint8Array to Blob\n        } else {\n            throw new Error(`Unsupported input type: ${typeof input}`);\n        }\n    }\n    return await blobToDataUrl(input);\n}\n\nclass BaseLLM {\n    async complete(params) {\n        const { prompt, stream } = params;\n        if (stream) {\n            const stream = await this.chat({\n                messages: [\n                    {\n                        content: prompt,\n                        role: \"user\"\n                    }\n                ],\n                stream: true\n            });\n            return streamConverter(stream, (chunk)=>{\n                return {\n                    raw: null,\n                    text: chunk.delta\n                };\n            });\n        }\n        const chatResponse = await this.chat({\n            messages: [\n                {\n                    content: prompt,\n                    role: \"user\"\n                }\n            ]\n        });\n        return {\n            text: extractText(chatResponse.message.content),\n            raw: chatResponse.raw\n        };\n    }\n}\nclass ToolCallLLM extends BaseLLM {\n}\n\n// TODO: move to a test package\nclass MockLLM extends ToolCallLLM {\n    constructor(options){\n        super(), this.supportToolCall = false;\n        this.options = {\n            timeBetweenToken: options?.timeBetweenToken ?? 20,\n            responseMessage: options?.responseMessage ?? \"This is a mock response\"\n        };\n        this.metadata = options?.metadata ?? {\n            model: \"MockLLM\",\n            temperature: 0.5,\n            topP: 0.5,\n            contextWindow: 1024,\n            tokenizer: undefined\n        };\n    }\n    async chat(params) {\n        const responseMessage = this.options.responseMessage;\n        const timeBetweenToken = this.options.timeBetweenToken;\n        if (params.stream) {\n            return async function*() {\n                for (const char of responseMessage){\n                    yield {\n                        delta: char,\n                        raw: {}\n                    };\n                    await new Promise((resolve)=>setTimeout(resolve, timeBetweenToken));\n                }\n            }();\n        }\n        return {\n            message: {\n                content: responseMessage,\n                role: \"assistant\"\n            },\n            raw: {}\n        };\n    }\n    async complete(params) {\n        const responseMessage = this.options.responseMessage;\n        const timeBetweenToken = this.options.timeBetweenToken;\n        if (params.stream) {\n            return async function*() {\n                for (const char of responseMessage){\n                    yield {\n                        delta: char,\n                        text: char,\n                        raw: {}\n                    };\n                    await new Promise((resolve)=>setTimeout(resolve, timeBetweenToken));\n                }\n            }();\n        }\n        return {\n            text: responseMessage,\n            raw: {}\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n/**\n * Type safe version of `Object.entries`\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction objectEntries(obj) {\n    return Object.entries(obj);\n}\n\nconst isPromise = (obj)=>{\n    return obj != null && typeof obj === \"object\" && \"then\" in obj;\n};\nconst isAsyncIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.asyncIterator in obj;\n};\nconst isIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.iterator in obj;\n};\nasync function* streamConverter(stream, converter) {\n    for await (const data of stream){\n        const newData = converter(data);\n        if (newData === null) {\n            return;\n        }\n        yield newData;\n    }\n}\nasync function* streamCallbacks(stream, callbacks) {\n    let value;\n    for await (value of stream){\n        yield value;\n    }\n    if (callbacks.finished) {\n        callbacks.finished(value);\n    }\n}\nasync function* streamReducer(params) {\n    let value = params.initialValue;\n    for await (const data of params.stream){\n        value = params.reducer(value, data);\n        yield data;\n    }\n    if (params.finished) {\n        params.finished(value);\n    }\n}\n/**\n * Prettify an error for AI to read\n */ function prettifyError(error) {\n    if (error instanceof Error) {\n        return `Error(${error.name}): ${error.message}`;\n    } else {\n        return `${error}`;\n    }\n}\nfunction stringifyJSONToMessageContent(value) {\n    return JSON.stringify(value, null, 2).replace(/\"([^\"]*)\"/g, \"$1\");\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/core/utils/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/env/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@llamaindex/env/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorage: () => (/* reexport safe */ node_async_hooks__WEBPACK_IMPORTED_MODULE_8__.AsyncLocalStorage),\n/* harmony export */   CustomEvent: () => (/* binding */ defaultCustomEvent),\n/* harmony export */   EOL: () => (/* reexport safe */ node_os__WEBPACK_IMPORTED_MODULE_2__.EOL),\n/* harmony export */   NotSupportCurrentRuntimeClass: () => (/* binding */ NotSupportCurrentRuntimeClass),\n/* harmony export */   Readable: () => (/* reexport safe */ node_stream__WEBPACK_IMPORTED_MODULE_4__.Readable),\n/* harmony export */   consoleLogger: () => (/* binding */ consoleLogger),\n/* harmony export */   createSHA256: () => (/* binding */ createSHA256),\n/* harmony export */   createWriteStream: () => (/* reexport safe */ node_fs__WEBPACK_IMPORTED_MODULE_6__.createWriteStream),\n/* harmony export */   emptyLogger: () => (/* binding */ emptyLogger),\n/* harmony export */   fileURLToPath: () => (/* reexport safe */ node_url__WEBPACK_IMPORTED_MODULE_5__.fileURLToPath),\n/* harmony export */   fs: () => (/* reexport default export from named module */ node_fs_promises__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   ok: () => (/* reexport safe */ node_assert__WEBPACK_IMPORTED_MODULE_0__.ok),\n/* harmony export */   path: () => (/* reexport default export from named module */ node_path__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   process: () => (/* binding */ process$1),\n/* harmony export */   randomUUID: () => (/* reexport safe */ node_crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID),\n/* harmony export */   setEnvs: () => (/* binding */ setEnvs)\n/* harmony export */ });\n/* harmony import */ var node_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:assert */ \"node:assert\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\n/* harmony import */ var node_async_hooks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\n\n\n\n\n\n\n\n\n\n\n\nclass NotSupportCurrentRuntimeClass {\n    constructor(runtime){\n        throw new Error(`Current environment ${runtime} is not supported`);\n    }\n    static bind(runtime) {\n        return class extends NotSupportCurrentRuntimeClass {\n            constructor(...args){\n                super(runtime);\n            }\n        };\n    }\n}\n// This is a workaround for the lack of globalThis in some environments\n// It's being used across multiple places inside the `env` package\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst glo = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {};\n\nconst importIdentifier = \"__ $@llamaindex/env$ __\";\nif (glo[importIdentifier] === true) {\n    /**\n   * Dear reader of this message. Please take this seriously.\n   *\n   * If you see this message, make sure that you only import one version of llamaindex. In many cases,\n   * your package manager installs two versions of llamaindex that are used by different packages within your project.\n   * Another reason for this message is that some parts of your project use the CJS version of llamaindex\n   * and others use the ESM version of llamaindex.\n   *\n   * This often leads to issues that are hard to debug. We often need to perform constructor checks,\n   * e.g. `node instanceof TextNode`. If you imported different versions of llamaindex, it is impossible for us to\n   * do the constructor checks anymore - which might break the functionality of your application.\n   */ console.error(\"llamaindex was already imported. This breaks constructor checks and will lead to issues!\");\n}\nglo[importIdentifier] = true;\n\nfunction noop() {}\nconst emptyLogger = Object.freeze({\n    log: noop,\n    error: noop,\n    warn: noop\n});\nconst consoleLogger = Object.freeze({\n    log: console.log.bind(console),\n    error: console.error.bind(console),\n    warn: console.warn.bind(console)\n});\n\n// DO NOT EXPOSE THIS VARIABLE TO PUBLIC, IT IS USED INTERNALLY FOR CLOUDFLARE WORKER\nconst INTERNAL_ENV = {};\n/**\n * Set environment variables before using llamaindex, because some LLM need to access API key before running.\n *\n * You have to set the environment variables in Cloudflare Worker environment,\n * because it doesn't have any global environment variables.\n *\n * @example\n * ```ts\n * export default {\n *   async fetch(\n *     request: Request,\n *     env: Env,\n *     ctx: ExecutionContext,\n *   ): Promise<Response> {\n *     const { setEnvs } = await import(\"@llamaindex/env\");\n *     setEnvs(env);\n *     // ...\n *     return new Response(\"Hello, World!\");\n *   },\n * };\n * ```\n *\n * @param envs Environment variables\n */ function setEnvs(envs) {\n    Object.assign(INTERNAL_ENV, envs);\n}\nfunction getEnv(name) {\n    if (INTERNAL_ENV[name]) {\n        return INTERNAL_ENV[name];\n    }\n    if (typeof process === \"undefined\" || typeof process.env === \"undefined\") {\n        // @ts-expect-error Deno is not defined\n        if (typeof Deno === \"undefined\") {\n            throw new Error(\"Current environment is not supported\");\n        } else {\n            // @ts-expect-error Deno is not defined\n            return Deno.env.get(name);\n        }\n    }\n    return process.env[name];\n}\n// Node.js 18 doesn't have CustomEvent by default\n// Refs: https://github.com/nodejs/node/issues/40678\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass CustomEvent extends Event {\n    #detail;\n    get detail() {\n        return this.#detail;\n    }\n    constructor(event, options){\n        super(event, options);\n        this.#detail = options?.detail;\n    }\n    /**\n   * @deprecated This method is not supported\n   */ initCustomEvent() {\n        throw new Error(\"initCustomEvent is not supported\");\n    }\n}\nconst defaultCustomEvent = // eslint-disable-next-line @typescript-eslint/no-explicit-any\nglobalThis.CustomEvent || CustomEvent;\n\nfunction createSHA256() {\n    const hash = (0,node_crypto__WEBPACK_IMPORTED_MODULE_1__.createHash)(\"sha256\");\n    return {\n        update (data) {\n            hash.update(data);\n        },\n        digest () {\n            return hash.digest(\"base64\");\n        }\n    };\n}\nconst process$1 = globalThis.process;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvZW52L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDUTtBQUNBO0FBQ1g7QUFDYztBQUNMO0FBQ0U7QUFDRztBQUNLO0FBQ0k7O0FBRXJEO0FBQ0E7QUFDQSwrQ0FBK0MsU0FBUztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsdURBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkoiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvZW52L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgb2sgfSBmcm9tICdub2RlOmFzc2VydCc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ25vZGU6Y3J5cHRvJztcbmV4cG9ydCB7IEVPTCB9IGZyb20gJ25vZGU6b3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXRoIH0gZnJvbSAnbm9kZTpwYXRoJztcbmV4cG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnbm9kZTpzdHJlYW0nO1xuZXhwb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcbmV4cG9ydCB7IGNyZWF0ZVdyaXRlU3RyZWFtIH0gZnJvbSAnbm9kZTpmcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZzIH0gZnJvbSAnbm9kZTpmcy9wcm9taXNlcyc7XG5leHBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZSB9IGZyb20gJ25vZGU6YXN5bmNfaG9va3MnO1xuXG5jbGFzcyBOb3RTdXBwb3J0Q3VycmVudFJ1bnRpbWVDbGFzcyB7XG4gICAgY29uc3RydWN0b3IocnVudGltZSl7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ3VycmVudCBlbnZpcm9ubWVudCAke3J1bnRpbWV9IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgICB9XG4gICAgc3RhdGljIGJpbmQocnVudGltZSkge1xuICAgICAgICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBOb3RTdXBwb3J0Q3VycmVudFJ1bnRpbWVDbGFzcyB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgICAgICAgICBzdXBlcihydW50aW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgdGhlIGxhY2sgb2YgZ2xvYmFsVGhpcyBpbiBzb21lIGVudmlyb25tZW50c1xuLy8gSXQncyBiZWluZyB1c2VkIGFjcm9zcyBtdWx0aXBsZSBwbGFjZXMgaW5zaWRlIHRoZSBgZW52YCBwYWNrYWdlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgZ2xvID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fTtcblxuY29uc3QgaW1wb3J0SWRlbnRpZmllciA9IFwiX18gJEBsbGFtYWluZGV4L2VudiQgX19cIjtcbmlmIChnbG9baW1wb3J0SWRlbnRpZmllcl0gPT09IHRydWUpIHtcbiAgICAvKipcbiAgICogRGVhciByZWFkZXIgb2YgdGhpcyBtZXNzYWdlLiBQbGVhc2UgdGFrZSB0aGlzIHNlcmlvdXNseS5cbiAgICpcbiAgICogSWYgeW91IHNlZSB0aGlzIG1lc3NhZ2UsIG1ha2Ugc3VyZSB0aGF0IHlvdSBvbmx5IGltcG9ydCBvbmUgdmVyc2lvbiBvZiBsbGFtYWluZGV4LiBJbiBtYW55IGNhc2VzLFxuICAgKiB5b3VyIHBhY2thZ2UgbWFuYWdlciBpbnN0YWxscyB0d28gdmVyc2lvbnMgb2YgbGxhbWFpbmRleCB0aGF0IGFyZSB1c2VkIGJ5IGRpZmZlcmVudCBwYWNrYWdlcyB3aXRoaW4geW91ciBwcm9qZWN0LlxuICAgKiBBbm90aGVyIHJlYXNvbiBmb3IgdGhpcyBtZXNzYWdlIGlzIHRoYXQgc29tZSBwYXJ0cyBvZiB5b3VyIHByb2plY3QgdXNlIHRoZSBDSlMgdmVyc2lvbiBvZiBsbGFtYWluZGV4XG4gICAqIGFuZCBvdGhlcnMgdXNlIHRoZSBFU00gdmVyc2lvbiBvZiBsbGFtYWluZGV4LlxuICAgKlxuICAgKiBUaGlzIG9mdGVuIGxlYWRzIHRvIGlzc3VlcyB0aGF0IGFyZSBoYXJkIHRvIGRlYnVnLiBXZSBvZnRlbiBuZWVkIHRvIHBlcmZvcm0gY29uc3RydWN0b3IgY2hlY2tzLFxuICAgKiBlLmcuIGBub2RlIGluc3RhbmNlb2YgVGV4dE5vZGVgLiBJZiB5b3UgaW1wb3J0ZWQgZGlmZmVyZW50IHZlcnNpb25zIG9mIGxsYW1haW5kZXgsIGl0IGlzIGltcG9zc2libGUgZm9yIHVzIHRvXG4gICAqIGRvIHRoZSBjb25zdHJ1Y3RvciBjaGVja3MgYW55bW9yZSAtIHdoaWNoIG1pZ2h0IGJyZWFrIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqLyBjb25zb2xlLmVycm9yKFwibGxhbWFpbmRleCB3YXMgYWxyZWFkeSBpbXBvcnRlZC4gVGhpcyBicmVha3MgY29uc3RydWN0b3IgY2hlY2tzIGFuZCB3aWxsIGxlYWQgdG8gaXNzdWVzIVwiKTtcbn1cbmdsb1tpbXBvcnRJZGVudGlmaWVyXSA9IHRydWU7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuY29uc3QgZW1wdHlMb2dnZXIgPSBPYmplY3QuZnJlZXplKHtcbiAgICBsb2c6IG5vb3AsXG4gICAgZXJyb3I6IG5vb3AsXG4gICAgd2Fybjogbm9vcFxufSk7XG5jb25zdCBjb25zb2xlTG9nZ2VyID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgbG9nOiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLFxuICAgIGVycm9yOiBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSksXG4gICAgd2FybjogY29uc29sZS53YXJuLmJpbmQoY29uc29sZSlcbn0pO1xuXG4vLyBETyBOT1QgRVhQT1NFIFRISVMgVkFSSUFCTEUgVE8gUFVCTElDLCBJVCBJUyBVU0VEIElOVEVSTkFMTFkgRk9SIENMT1VERkxBUkUgV09SS0VSXG5jb25zdCBJTlRFUk5BTF9FTlYgPSB7fTtcbi8qKlxuICogU2V0IGVudmlyb25tZW50IHZhcmlhYmxlcyBiZWZvcmUgdXNpbmcgbGxhbWFpbmRleCwgYmVjYXVzZSBzb21lIExMTSBuZWVkIHRvIGFjY2VzcyBBUEkga2V5IGJlZm9yZSBydW5uaW5nLlxuICpcbiAqIFlvdSBoYXZlIHRvIHNldCB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGluIENsb3VkZmxhcmUgV29ya2VyIGVudmlyb25tZW50LFxuICogYmVjYXVzZSBpdCBkb2Vzbid0IGhhdmUgYW55IGdsb2JhbCBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBleHBvcnQgZGVmYXVsdCB7XG4gKiAgIGFzeW5jIGZldGNoKFxuICogICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gKiAgICAgZW52OiBFbnYsXG4gKiAgICAgY3R4OiBFeGVjdXRpb25Db250ZXh0LFxuICogICApOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gKiAgICAgY29uc3QgeyBzZXRFbnZzIH0gPSBhd2FpdCBpbXBvcnQoXCJAbGxhbWFpbmRleC9lbnZcIik7XG4gKiAgICAgc2V0RW52cyhlbnYpO1xuICogICAgIC8vIC4uLlxuICogICAgIHJldHVybiBuZXcgUmVzcG9uc2UoXCJIZWxsbywgV29ybGQhXCIpO1xuICogICB9LFxuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZzIEVudmlyb25tZW50IHZhcmlhYmxlc1xuICovIGZ1bmN0aW9uIHNldEVudnMoZW52cykge1xuICAgIE9iamVjdC5hc3NpZ24oSU5URVJOQUxfRU5WLCBlbnZzKTtcbn1cbmZ1bmN0aW9uIGdldEVudihuYW1lKSB7XG4gICAgaWYgKElOVEVSTkFMX0VOVltuYW1lXSkge1xuICAgICAgICByZXR1cm4gSU5URVJOQUxfRU5WW25hbWVdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIHByb2Nlc3MuZW52ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgRGVubyBpcyBub3QgZGVmaW5lZFxuICAgICAgICBpZiAodHlwZW9mIERlbm8gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkN1cnJlbnQgZW52aXJvbm1lbnQgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgRGVubyBpcyBub3QgZGVmaW5lZFxuICAgICAgICAgICAgcmV0dXJuIERlbm8uZW52LmdldChuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5lbnZbbmFtZV07XG59XG4vLyBOb2RlLmpzIDE4IGRvZXNuJ3QgaGF2ZSBDdXN0b21FdmVudCBieSBkZWZhdWx0XG4vLyBSZWZzOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzQwNjc4XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY2xhc3MgQ3VzdG9tRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgI2RldGFpbDtcbiAgICBnZXQgZGV0YWlsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGV0YWlsO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihldmVudCwgb3B0aW9ucyl7XG4gICAgICAgIHN1cGVyKGV2ZW50LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy4jZGV0YWlsID0gb3B0aW9ucz8uZGV0YWlsO1xuICAgIH1cbiAgICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZFxuICAgKi8gaW5pdEN1c3RvbUV2ZW50KCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbml0Q3VzdG9tRXZlbnQgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG59XG5jb25zdCBkZWZhdWx0Q3VzdG9tRXZlbnQgPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZ2xvYmFsVGhpcy5DdXN0b21FdmVudCB8fCBDdXN0b21FdmVudDtcblxuZnVuY3Rpb24gY3JlYXRlU0hBMjU2KCkge1xuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKFwic2hhMjU2XCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVwZGF0ZSAoZGF0YSkge1xuICAgICAgICAgICAgaGFzaC51cGRhdGUoZGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRpZ2VzdCAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzaC5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgICAgIH1cbiAgICB9O1xufVxuY29uc3QgcHJvY2VzcyQxID0gZ2xvYmFsVGhpcy5wcm9jZXNzO1xuXG5leHBvcnQgeyBkZWZhdWx0Q3VzdG9tRXZlbnQgYXMgQ3VzdG9tRXZlbnQsIE5vdFN1cHBvcnRDdXJyZW50UnVudGltZUNsYXNzLCBjb25zb2xlTG9nZ2VyLCBjcmVhdGVTSEEyNTYsIGVtcHR5TG9nZ2VyLCBnZXRFbnYsIHByb2Nlc3MkMSBhcyBwcm9jZXNzLCBzZXRFbnZzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/env/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/env/multi-model/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@llamaindex/env/multi-model/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadTransformers: () => (/* binding */ loadTransformers),\n/* harmony export */   setTransformers: () => (/* binding */ setTransformers)\n/* harmony export */ });\nlet transformer = null;\nfunction getTransformers() {\n    return transformer;\n}\nfunction setTransformers(t) {\n    transformer = t;\n}\n\nasync function loadTransformers(onLoad) {\n    const nodeVersions = process.versions.node.split(\".\");\n    if (nodeVersions[0] && parseInt(nodeVersions[0], 10) < 20) {\n        throw new Error(\"@huggingface/transformers is not supported on Node.js versions below 20\");\n    }\n    if (getTransformers() === null) {\n        setTransformers(await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @huggingface/transformers */ \"@huggingface/transformers\")));\n    } else {\n        return getTransformers();\n    }\n    const transformer = getTransformers();\n    onLoad(transformer);\n    return transformer;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvZW52L211bHRpLW1vZGVsL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0pBQW1DO0FBQ2pFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZDIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2Vudi9tdWx0aS1tb2RlbC9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0cmFuc2Zvcm1lciA9IG51bGw7XG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1lcnMoKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyO1xufVxuZnVuY3Rpb24gc2V0VHJhbnNmb3JtZXJzKHQpIHtcbiAgICB0cmFuc2Zvcm1lciA9IHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRUcmFuc2Zvcm1lcnMob25Mb2FkKSB7XG4gICAgY29uc3Qgbm9kZVZlcnNpb25zID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAobm9kZVZlcnNpb25zWzBdICYmIHBhcnNlSW50KG5vZGVWZXJzaW9uc1swXSwgMTApIDwgMjApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQGh1Z2dpbmdmYWNlL3RyYW5zZm9ybWVycyBpcyBub3Qgc3VwcG9ydGVkIG9uIE5vZGUuanMgdmVyc2lvbnMgYmVsb3cgMjBcIik7XG4gICAgfVxuICAgIGlmIChnZXRUcmFuc2Zvcm1lcnMoKSA9PT0gbnVsbCkge1xuICAgICAgICBzZXRUcmFuc2Zvcm1lcnMoYXdhaXQgaW1wb3J0KCdAaHVnZ2luZ2ZhY2UvdHJhbnNmb3JtZXJzJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXRUcmFuc2Zvcm1lcnMoKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBnZXRUcmFuc2Zvcm1lcnMoKTtcbiAgICBvbkxvYWQodHJhbnNmb3JtZXIpO1xuICAgIHJldHVybiB0cmFuc2Zvcm1lcjtcbn1cblxuZXhwb3J0IHsgbG9hZFRyYW5zZm9ybWVycywgc2V0VHJhbnNmb3JtZXJzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/env/multi-model/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@llamaindex/env/tokenizers/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tokenizers: () => (/* binding */ Tokenizers),\n/* harmony export */   tokenizers: () => (/* binding */ tokenizers)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken */ \"(rsc)/./node_modules/js-tiktoken/dist/index.js\");\n/* harmony import */ var node_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:module */ \"node:module\");\n\n\n\nvar Tokenizers = /*#__PURE__*/ function(Tokenizers) {\n    Tokenizers[\"CL100K_BASE\"] = \"cl100k_base\";\n    return Tokenizers;\n}({});\n\nconst require = node_module__WEBPACK_IMPORTED_MODULE_1__.createRequire(\"file:///home/brent/Downloads/EncodeDEAI/FinalProject/node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n\nfunction tryLoadGptTokenizer() {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        return require(\"gpt-tokenizer\"); // using require for CommonJS compatibility\n    } catch (e) {\n        return null;\n    }\n}\nconst gptTokenizerModule = tryLoadGptTokenizer();\nclass TokenizerSingleton {\n    #defaultTokenizer;\n    constructor(){\n        // Use gpt-tokenizer if available, otherwise use js-tiktoken\n        if (gptTokenizerModule) {\n            this.#defaultTokenizer = {\n                encode: (text)=>{\n                    return new Uint32Array(gptTokenizerModule.encode(text));\n                },\n                decode: (tokens)=>{\n                    return gptTokenizerModule.decode(Array.from(tokens));\n                }\n            };\n        } else {\n            // Fall back to js-tiktoken which is always available\n            // Note: js-tiktoken it's 60x slower than gpt-tokenizer\n            const encoding = (0,js_tiktoken__WEBPACK_IMPORTED_MODULE_0__.getEncoding)(\"cl100k_base\");\n            this.#defaultTokenizer = {\n                encode: (text)=>{\n                    return new Uint32Array(encoding.encode(text));\n                },\n                decode: (tokens)=>{\n                    const numberArray = Array.from(tokens);\n                    const text = encoding.decode(numberArray);\n                    const uint8Array = new TextEncoder().encode(text);\n                    return new TextDecoder().decode(uint8Array);\n                }\n            };\n        }\n    }\n    tokenizer(encoding) {\n        if (encoding && encoding !== Tokenizers.CL100K_BASE) {\n            throw new Error(`Tokenizer encoding ${encoding} not yet supported`);\n        }\n        return this.#defaultTokenizer;\n    }\n}\nconst tokenizers = new TokenizerSingleton();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvZW52L3Rva2VuaXplcnMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ0M7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLENBQUMsR0FBRzs7QUFFSixnQkFBZ0Isc0RBQThCLENBQUMsNEdBQWU7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSw2QkFBNkIsd0RBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsVUFBVTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9lbnYvdG9rZW5pemVycy9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVuY29kaW5nIH0gZnJvbSAnanMtdGlrdG9rZW4nO1xuaW1wb3J0IF9fbm9kZV9janNNb2R1bGUgZnJvbSAnbm9kZTptb2R1bGUnO1xuXG52YXIgVG9rZW5pemVycyA9IC8qI19fUFVSRV9fKi8gZnVuY3Rpb24oVG9rZW5pemVycykge1xuICAgIFRva2VuaXplcnNbXCJDTDEwMEtfQkFTRVwiXSA9IFwiY2wxMDBrX2Jhc2VcIjtcbiAgICByZXR1cm4gVG9rZW5pemVycztcbn0oe30pO1xuXG5jb25zdCByZXF1aXJlID0gX19ub2RlX2Nqc01vZHVsZS5jcmVhdGVSZXF1aXJlKGltcG9ydC5tZXRhLnVybCk7XG5cbmZ1bmN0aW9uIHRyeUxvYWRHcHRUb2tlbml6ZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCJncHQtdG9rZW5pemVyXCIpOyAvLyB1c2luZyByZXF1aXJlIGZvciBDb21tb25KUyBjb21wYXRpYmlsaXR5XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5jb25zdCBncHRUb2tlbml6ZXJNb2R1bGUgPSB0cnlMb2FkR3B0VG9rZW5pemVyKCk7XG5jbGFzcyBUb2tlbml6ZXJTaW5nbGV0b24ge1xuICAgICNkZWZhdWx0VG9rZW5pemVyO1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIC8vIFVzZSBncHQtdG9rZW5pemVyIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIHVzZSBqcy10aWt0b2tlblxuICAgICAgICBpZiAoZ3B0VG9rZW5pemVyTW9kdWxlKSB7XG4gICAgICAgICAgICB0aGlzLiNkZWZhdWx0VG9rZW5pemVyID0ge1xuICAgICAgICAgICAgICAgIGVuY29kZTogKHRleHQpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoZ3B0VG9rZW5pemVyTW9kdWxlLmVuY29kZSh0ZXh0KSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZWNvZGU6ICh0b2tlbnMpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBncHRUb2tlbml6ZXJNb2R1bGUuZGVjb2RlKEFycmF5LmZyb20odG9rZW5zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGwgYmFjayB0byBqcy10aWt0b2tlbiB3aGljaCBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgICAgICAgICAvLyBOb3RlOiBqcy10aWt0b2tlbiBpdCdzIDYweCBzbG93ZXIgdGhhbiBncHQtdG9rZW5pemVyXG4gICAgICAgICAgICBjb25zdCBlbmNvZGluZyA9IGdldEVuY29kaW5nKFwiY2wxMDBrX2Jhc2VcIik7XG4gICAgICAgICAgICB0aGlzLiNkZWZhdWx0VG9rZW5pemVyID0ge1xuICAgICAgICAgICAgICAgIGVuY29kZTogKHRleHQpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoZW5jb2RpbmcuZW5jb2RlKHRleHQpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlY29kZTogKHRva2Vucyk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtYmVyQXJyYXkgPSBBcnJheS5mcm9tKHRva2Vucyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBlbmNvZGluZy5kZWNvZGUobnVtYmVyQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1aW50OEFycmF5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHVpbnQ4QXJyYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9rZW5pemVyKGVuY29kaW5nKSB7XG4gICAgICAgIGlmIChlbmNvZGluZyAmJiBlbmNvZGluZyAhPT0gVG9rZW5pemVycy5DTDEwMEtfQkFTRSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb2tlbml6ZXIgZW5jb2RpbmcgJHtlbmNvZGluZ30gbm90IHlldCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4jZGVmYXVsdFRva2VuaXplcjtcbiAgICB9XG59XG5jb25zdCB0b2tlbml6ZXJzID0gbmV3IFRva2VuaXplclNpbmdsZXRvbigpO1xuXG5leHBvcnQgeyBUb2tlbml6ZXJzLCB0b2tlbml6ZXJzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HuggingFaceEmbedding: () => (/* binding */ HuggingFaceEmbedding),\n/* harmony export */   HuggingFaceEmbeddingModelType: () => (/* binding */ HuggingFaceEmbeddingModelType),\n/* harmony export */   HuggingFaceInferenceAPI: () => (/* binding */ HuggingFaceInferenceAPI),\n/* harmony export */   HuggingFaceInferenceAPIEmbedding: () => (/* binding */ HuggingFaceInferenceAPIEmbedding),\n/* harmony export */   HuggingFaceLLM: () => (/* binding */ HuggingFaceLLM),\n/* harmony export */   huggingface: () => (/* binding */ huggingface)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/embeddings */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/embeddings/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_env_multi_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/env/multi-model */ \"(rsc)/./node_modules/@llamaindex/env/multi-model/dist/index.js\");\n/* harmony import */ var _huggingface_inference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @huggingface/inference */ \"(rsc)/./node_modules/@huggingface/inference/dist/index.js\");\n/* harmony import */ var _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/decorator */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @llamaindex/core/llms */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/llms/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\n\n\n\n\nfunction applyDecs2203RFactory$1() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r$1(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r$1 = applyDecs2203RFactory$1())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto$1;\nvar HuggingFaceEmbeddingModelType = /*#__PURE__*/ function(HuggingFaceEmbeddingModelType) {\n    HuggingFaceEmbeddingModelType[\"XENOVA_ALL_MINILM_L6_V2\"] = \"Xenova/all-MiniLM-L6-v2\";\n    HuggingFaceEmbeddingModelType[\"XENOVA_ALL_MPNET_BASE_V2\"] = \"Xenova/all-mpnet-base-v2\";\n    return HuggingFaceEmbeddingModelType;\n}({});\n/**\n * Uses feature extraction from Hugging Face's Inference API to generate embeddings.\n *\n * Set the `model` and `accessToken` parameter in the constructor, e.g.:\n * ```\n * new HuggingFaceInferenceAPIEmbedding({\n *     model: HuggingFaceEmbeddingModelType.XENOVA_ALL_MPNET_BASE_V2,\n *     accessToken: \"<your-access-token>\"\n * });\n * ```\n *\n * @extends BaseEmbedding\n */ class HuggingFaceInferenceAPIEmbedding extends _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_0__.BaseEmbedding {\n    constructor(init){\n        super(), this.getTextEmbeddings = async (texts)=>{\n            const res = await this.hf.featureExtraction({\n                model: this.model,\n                inputs: texts\n            });\n            return res;\n        };\n        const { model, accessToken, endpoint, ...hfInferenceOpts } = init;\n        this.hf = new _huggingface_inference__WEBPACK_IMPORTED_MODULE_3__.HfInference(accessToken, hfInferenceOpts);\n        this.model = model;\n        if (endpoint) this.hf.endpoint(endpoint);\n    }\n    async getTextEmbedding(text) {\n        const res = await this.hf.featureExtraction({\n            model: this.model,\n            inputs: text\n        });\n        return res;\n    }\n}\nconst DEFAULT_PARAMS = {\n    temperature: 0.1,\n    topP: 1,\n    maxTokens: undefined,\n    contextWindow: 3900\n};\n/**\n    Wrapper on the Hugging Face's Inference API.\n    API Docs: https://huggingface.co/docs/huggingface.js/inference/README\n    List of tasks with models: huggingface.co/api/tasks\n\n    Note that Conversational API is not yet supported by the Inference API.\n    They recommend using the text generation API instead.\n    See: https://github.com/huggingface/huggingface.js/issues/586#issuecomment-2024059308\n */ class HuggingFaceInferenceAPI extends _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_5__.BaseLLM {\n    static{\n        ({ e: [_initProto$1] } = _apply_decs_2203_r$1(this, [\n            [\n                _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_4__.wrapLLMEvent,\n                2,\n                \"chat\"\n            ]\n        ], []));\n    }\n    constructor(init){\n        super(), _initProto$1(this);\n        const { model, temperature, topP, maxTokens, contextWindow, accessToken, endpoint, ...hfInferenceOpts } = init;\n        this.hf = new _huggingface_inference__WEBPACK_IMPORTED_MODULE_3__.HfInference(accessToken, hfInferenceOpts);\n        this.model = model;\n        this.temperature = temperature ?? DEFAULT_PARAMS.temperature;\n        this.topP = topP ?? DEFAULT_PARAMS.topP;\n        this.maxTokens = maxTokens ?? DEFAULT_PARAMS.maxTokens;\n        this.contextWindow = contextWindow ?? DEFAULT_PARAMS.contextWindow;\n        if (endpoint) this.hf.endpoint(endpoint);\n    }\n    get metadata() {\n        return {\n            model: this.model,\n            temperature: this.temperature,\n            topP: this.topP,\n            maxTokens: this.maxTokens,\n            contextWindow: this.contextWindow,\n            tokenizer: undefined,\n            structuredOutput: false\n        };\n    }\n    async chat(params) {\n        if (params.stream) return this.streamChat(params);\n        return this.nonStreamChat(params);\n    }\n    messagesToPrompt(messages) {\n        let prompt = \"\";\n        for (const message of messages){\n            if (message.role === \"system\") {\n                prompt += `<|system|>\\n${message.content}</s>\\n`;\n            } else if (message.role === \"user\") {\n                prompt += `<|user|>\\n${message.content}</s>\\n`;\n            } else if (message.role === \"assistant\") {\n                prompt += `<|assistant|>\\n${message.content}</s>\\n`;\n            }\n        }\n        // ensure we start with a system prompt, insert blank if needed\n        if (!prompt.startsWith(\"<|system|>\\n\")) {\n            prompt = \"<|system|>\\n</s>\\n\" + prompt;\n        }\n        // add final assistant prompt\n        prompt = prompt + \"<|assistant|>\\n\";\n        return prompt;\n    }\n    async nonStreamChat(params) {\n        const res = await this.hf.textGeneration({\n            model: this.model,\n            inputs: this.messagesToPrompt(params.messages),\n            parameters: this.metadata\n        });\n        return {\n            raw: res,\n            message: {\n                content: res.generated_text,\n                role: \"assistant\"\n            }\n        };\n    }\n    async *streamChat(params) {\n        const stream = this.hf.textGenerationStream({\n            model: this.model,\n            inputs: this.messagesToPrompt(params.messages),\n            parameters: this.metadata\n        });\n        yield* (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_6__.streamConverter)(stream, (chunk)=>({\n                delta: chunk.token.text,\n                raw: chunk\n            }));\n    }\n}\n\n/**\n * Uses feature extraction from '@xenova/transformers' to generate embeddings.\n * Per default the model [XENOVA_ALL_MINILM_L6_V2](https://huggingface.co/Xenova/all-MiniLM-L6-v2) is used.\n *\n * Can be changed by setting the `modelType` parameter in the constructor, e.g.:\n * ```\n * new HuggingFaceEmbedding({\n *     modelType: HuggingFaceEmbeddingModelType.XENOVA_ALL_MPNET_BASE_V2,\n * });\n * ```\n *\n * @extends BaseEmbedding\n */ class HuggingFaceEmbedding extends _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_0__.BaseEmbedding {\n    constructor(params = {}){\n        super(), this.modelType = HuggingFaceEmbeddingModelType.XENOVA_ALL_MINILM_L6_V2, this.modelOptions = {}, this.extractor = null;\n        if (params.modelType) {\n            this.modelType = params.modelType;\n        }\n        if (params.modelOptions) {\n            this.modelOptions = params.modelOptions;\n        }\n    }\n    async getExtractor() {\n        if (!this.extractor) {\n            const { pipeline } = await (0,_llamaindex_env_multi_model__WEBPACK_IMPORTED_MODULE_2__.loadTransformers)((transformer)=>{\n                _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"load-transformers\", {\n                    transformer\n                }, true);\n            });\n            this.extractor = await pipeline(\"feature-extraction\", this.modelType, this.modelOptions);\n        }\n        return this.extractor;\n    }\n    async getTextEmbedding(text) {\n        const extractor = await this.getExtractor();\n        const output = await extractor(text, {\n            pooling: \"mean\",\n            normalize: true\n        });\n        return Array.from(output.data);\n    }\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto;\nconst DEFAULT_HUGGINGFACE_MODEL = \"stabilityai/stablelm-tuned-alpha-3b\";\nclass HuggingFaceLLM extends _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_5__.BaseLLM {\n    static{\n        ({ e: [_initProto] } = _apply_decs_2203_r(this, [\n            [\n                _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_4__.wrapLLMEvent,\n                2,\n                \"chat\"\n            ]\n        ], []));\n    }\n    constructor(init){\n        super(), this.tokenizer = (_initProto(this), null), this.model = null;\n        this.modelName = init?.modelName ?? DEFAULT_HUGGINGFACE_MODEL;\n        this.tokenizerName = init?.tokenizerName ?? DEFAULT_HUGGINGFACE_MODEL;\n        this.temperature = init?.temperature ?? DEFAULT_PARAMS.temperature;\n        this.topP = init?.topP ?? DEFAULT_PARAMS.topP;\n        this.maxTokens = init?.maxTokens ?? DEFAULT_PARAMS.maxTokens;\n        this.contextWindow = init?.contextWindow ?? DEFAULT_PARAMS.contextWindow;\n    }\n    get metadata() {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            topP: this.topP,\n            maxTokens: this.maxTokens,\n            contextWindow: this.contextWindow,\n            tokenizer: undefined,\n            structuredOutput: false\n        };\n    }\n    async getTokenizer() {\n        const { AutoTokenizer } = await (0,_llamaindex_env_multi_model__WEBPACK_IMPORTED_MODULE_2__.loadTransformers)((transformer)=>{\n            _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"load-transformers\", {\n                transformer\n            }, true);\n        });\n        if (!this.tokenizer) {\n            this.tokenizer = await AutoTokenizer.from_pretrained(this.tokenizerName);\n        }\n        return this.tokenizer;\n    }\n    async getModel() {\n        const { AutoModelForCausalLM } = await (0,_llamaindex_env_multi_model__WEBPACK_IMPORTED_MODULE_2__.loadTransformers)((transformer)=>{\n            _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"load-transformers\", {\n                transformer\n            }, true);\n        });\n        if (!this.model) {\n            this.model = await AutoModelForCausalLM.from_pretrained(this.modelName);\n        }\n        return this.model;\n    }\n    async chat(params) {\n        if (params.stream) return this.streamChat(params);\n        return this.nonStreamChat(params);\n    }\n    async nonStreamChat(params) {\n        const tokenizer = await this.getTokenizer();\n        const model = await this.getModel();\n        const messageInputs = params.messages.map((msg)=>({\n                role: msg.role,\n                content: msg.content\n            }));\n        const inputs = tokenizer.apply_chat_template(messageInputs, {\n            add_generation_prompt: true,\n            ...this.metadata\n        });\n        // TODO: the input for model.generate should be updated when using @xenova/transformers v3\n        // We should add `stopping_criteria` also when it's supported in v3\n        // See: https://github.com/xenova/transformers.js/blob/3260640b192b3e06a10a1f4dc004b1254fdf1b80/src/models.js#L1248C9-L1248C27\n        const outputs = await model.generate({\n            inputs,\n            ...this.metadata\n        });\n        const outputText = tokenizer.batch_decode(outputs, {\n            skip_special_tokens: false\n        });\n        return {\n            raw: outputs,\n            message: {\n                content: outputText.join(\"\"),\n                role: \"assistant\"\n            }\n        };\n    }\n    async streamChat(params) {\n        // @xenova/transformers v2 doesn't support streaming generation yet\n        // they are working on it in v3\n        // See: https://github.com/xenova/transformers.js/blob/3260640b192b3e06a10a1f4dc004b1254fdf1b80/src/models.js#L1249\n        throw new Error(\"Method not implemented.\");\n    }\n}\n/**\n * Convenience function to create a new HuggingFaceLLM instance.\n * @param init - Optional initialization parameters for the HuggingFaceLLM instance.\n * @returns A new HuggingFaceLLM instance.\n */ const huggingface = (init)=>new HuggingFaceLLM(init);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/decorator/dist/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/decorator/dist/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lazyInitHash: () => (/* binding */ lazyInitHash),\n/* harmony export */   wrapEventCaller: () => (/* binding */ wrapEventCaller),\n/* harmony export */   wrapLLMEvent: () => (/* binding */ wrapLLMEvent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\nfunction wrapEventCaller(originalMethod, context) {\n    const name = context.name;\n    context.addInitializer(function() {\n        // @ts-expect-error - this is a valid assignment\n        const fn = this[name].bind(this);\n        // @ts-expect-error - this is a valid assignment\n        this[name] = (...args)=>{\n            return (0,_global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.withEventCaller)(this, ()=>fn(...args));\n        };\n    });\n    return function(...args) {\n        const result = originalMethod.call(this, ...args);\n        // patch for iterators because AsyncLocalStorage doesn't work with them\n        if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isAsyncIterable)(result)) {\n            const iter = result[Symbol.asyncIterator]();\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            return async function* asyncGeneratorWrapper() {\n                while(true){\n                    const { value, done } = await snapshot(()=>iter.next());\n                    if (done) {\n                        break;\n                    }\n                    yield value;\n                }\n            }();\n        } else if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isIterable)(result)) {\n            const iter = result[Symbol.iterator]();\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            return function* generatorWrapper() {\n                while(true){\n                    const { value, done } = snapshot(()=>iter.next());\n                    if (done) {\n                        break;\n                    }\n                    yield value;\n                }\n            }();\n        }\n        return result;\n    };\n}\n\nfunction lazyInitHash(value, _context) {\n    return {\n        get () {\n            const oldValue = value.get.call(this);\n            if (oldValue === \"\") {\n                const hash = this.generateHash();\n                value.set.call(this, hash);\n            }\n            return value.get.call(this);\n        },\n        set (newValue) {\n            value.set.call(this, newValue);\n        },\n        init (value) {\n            return value;\n        }\n    };\n}\n\nfunction wrapLLMEvent(originalMethod, _context) {\n    return async function withLLMEvent(...params) {\n        const id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-start\", {\n            id,\n            messages: params[0].messages\n        });\n        const response = await originalMethod.call(this, ...params);\n        if (Symbol.asyncIterator in response) {\n            // save snapshot to restore it after the response is done\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            const originalAsyncIterator = {\n                [Symbol.asyncIterator]: response[Symbol.asyncIterator].bind(response)\n            };\n            response[Symbol.asyncIterator] = async function*() {\n                const finalResponse = {\n                    raw: [],\n                    message: {\n                        content: \"\",\n                        role: \"assistant\",\n                        options: {}\n                    }\n                };\n                let firstOne = false;\n                for await (const chunk of originalAsyncIterator){\n                    if (!firstOne) {\n                        firstOne = true;\n                        finalResponse.message.content = chunk.delta;\n                    } else {\n                        finalResponse.message.content += chunk.delta;\n                    }\n                    if (chunk.options) {\n                        finalResponse.message.options = {\n                            ...finalResponse.message.options,\n                            ...chunk.options\n                        };\n                    }\n                    _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-stream\", {\n                        id,\n                        chunk\n                    });\n                    finalResponse.raw.push(chunk);\n                    yield chunk;\n                }\n                snapshot(()=>{\n                    _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-end\", {\n                        id,\n                        response: finalResponse\n                    });\n                });\n            };\n        } else {\n            _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-end\", {\n                id,\n                response\n            });\n        }\n        return response;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvaHVnZ2luZ2ZhY2Uvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvZGVjb3JhdG9yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdFO0FBQ087QUFDQzs7QUFFeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0VBQWU7QUFDbEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxRUFBZTtBQUMzQjtBQUNBLDZCQUE2Qiw4REFBaUI7QUFDOUM7QUFDQTtBQUNBLDRCQUE0QixjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsVUFBVSxTQUFTLGdFQUFVO0FBQzdCO0FBQ0EsNkJBQTZCLDhEQUFpQjtBQUM5QztBQUNBO0FBQ0EsNEJBQTRCLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsMkRBQVU7QUFDN0IsUUFBUSwyREFBUTtBQUNoQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4REFBaUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJEQUFRO0FBQzVCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkRBQVE7QUFDNUI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQSxVQUFVO0FBQ1YsWUFBWSwyREFBUTtBQUNwQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUV1RCIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9odWdnaW5nZmFjZS9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9kZWNvcmF0b3IvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZSwgcmFuZG9tVVVJRCB9IGZyb20gJ0BsbGFtYWluZGV4L2Vudic7XG5pbXBvcnQgeyB3aXRoRXZlbnRDYWxsZXIsIFNldHRpbmdzIH0gZnJvbSAnLi4vLi4vZ2xvYmFsL2Rpc3QvaW5kZXguanMnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlLCBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGlzdC9pbmRleC5qcyc7XG5cbmZ1bmN0aW9uIHdyYXBFdmVudENhbGxlcihvcmlnaW5hbE1ldGhvZCwgY29udGV4dCkge1xuICAgIGNvbnN0IG5hbWUgPSBjb250ZXh0Lm5hbWU7XG4gICAgY29udGV4dC5hZGRJbml0aWFsaXplcihmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHRoaXMgaXMgYSB2YWxpZCBhc3NpZ25tZW50XG4gICAgICAgIGNvbnN0IGZuID0gdGhpc1tuYW1lXS5iaW5kKHRoaXMpO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhpcyBpcyBhIHZhbGlkIGFzc2lnbm1lbnRcbiAgICAgICAgdGhpc1tuYW1lXSA9ICguLi5hcmdzKT0+e1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhFdmVudENhbGxlcih0aGlzLCAoKT0+Zm4oLi4uYXJncykpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG9yaWdpbmFsTWV0aG9kLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgIC8vIHBhdGNoIGZvciBpdGVyYXRvcnMgYmVjYXVzZSBBc3luY0xvY2FsU3RvcmFnZSBkb2Vzbid0IHdvcmsgd2l0aCB0aGVtXG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IHJlc3VsdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gQXN5bmNMb2NhbFN0b3JhZ2Uuc25hcHNob3QoKTtcbiAgICAgICAgICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiogYXN5bmNHZW5lcmF0b3JXcmFwcGVyKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBzbmFwc2hvdCgoKT0+aXRlci5uZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSXRlcmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IHJlc3VsdFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IEFzeW5jTG9jYWxTdG9yYWdlLnNuYXBzaG90KCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24qIGdlbmVyYXRvcldyYXBwZXIoKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IHNuYXBzaG90KCgpPT5pdGVyLm5leHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBsYXp5SW5pdEhhc2godmFsdWUsIF9jb250ZXh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdmFsdWUuZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5nZW5lcmF0ZUhhc2goKTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5zZXQuY2FsbCh0aGlzLCBoYXNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5nZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUuc2V0LmNhbGwodGhpcywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBpbml0ICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gd3JhcExMTUV2ZW50KG9yaWdpbmFsTWV0aG9kLCBfY29udGV4dCkge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiB3aXRoTExNRXZlbnQoLi4ucGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IGlkID0gcmFuZG9tVVVJRCgpO1xuICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1zdGFydFwiLCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBwYXJhbXNbMF0ubWVzc2FnZXNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3JpZ2luYWxNZXRob2QuY2FsbCh0aGlzLCAuLi5wYXJhbXMpO1xuICAgICAgICBpZiAoU3ltYm9sLmFzeW5jSXRlcmF0b3IgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgc25hcHNob3QgdG8gcmVzdG9yZSBpdCBhZnRlciB0aGUgcmVzcG9uc2UgaXMgZG9uZVxuICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBBc3luY0xvY2FsU3RvcmFnZS5zbmFwc2hvdCgpO1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxBc3luY0l0ZXJhdG9yID0ge1xuICAgICAgICAgICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IHJlc3BvbnNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXS5iaW5kKHJlc3BvbnNlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3BvbnNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGFzeW5jIGZ1bmN0aW9uKigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5hbFJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICByYXc6IFtdLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGxldCBmaXJzdE9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygb3JpZ2luYWxBc3luY0l0ZXJhdG9yKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdE9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RPbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxSZXNwb25zZS5tZXNzYWdlLmNvbnRlbnQgPSBjaHVuay5kZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsUmVzcG9uc2UubWVzc2FnZS5jb250ZW50ICs9IGNodW5rLmRlbHRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaHVuay5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFJlc3BvbnNlLm1lc3NhZ2Uub3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5maW5hbFJlc3BvbnNlLm1lc3NhZ2Uub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jaHVuay5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFNldHRpbmdzLmNhbGxiYWNrTWFuYWdlci5kaXNwYXRjaEV2ZW50KFwibGxtLXN0cmVhbVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBmaW5hbFJlc3BvbnNlLnJhdy5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgY2h1bms7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNuYXBzaG90KCgpPT57XG4gICAgICAgICAgICAgICAgICAgIFNldHRpbmdzLmNhbGxiYWNrTWFuYWdlci5kaXNwYXRjaEV2ZW50KFwibGxtLWVuZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBmaW5hbFJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFNldHRpbmdzLmNhbGxiYWNrTWFuYWdlci5kaXNwYXRjaEV2ZW50KFwibGxtLWVuZFwiLCB7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9O1xufVxuXG5leHBvcnQgeyBsYXp5SW5pdEhhc2gsIHdyYXBFdmVudENhbGxlciwgd3JhcExMTUV2ZW50IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/decorator/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/embeddings/dist/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/embeddings/dist/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEmbedding: () => (/* binding */ BaseEmbedding),\n/* harmony export */   DEFAULT_SIMILARITY_TOP_K: () => (/* binding */ DEFAULT_SIMILARITY_TOP_K),\n/* harmony export */   MultiModalEmbedding: () => (/* binding */ MultiModalEmbedding),\n/* harmony export */   SimilarityType: () => (/* binding */ SimilarityType),\n/* harmony export */   batchEmbeddings: () => (/* binding */ batchEmbeddings),\n/* harmony export */   getTopKEmbeddings: () => (/* binding */ getTopKEmbeddings),\n/* harmony export */   getTopKMMREmbeddings: () => (/* binding */ getTopKMMREmbeddings),\n/* harmony export */   similarity: () => (/* binding */ similarity),\n/* harmony export */   truncateMaxTokens: () => (/* binding */ truncateMaxTokens)\n/* harmony export */ });\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n\n\n\n\nfunction truncateMaxTokens(tokenizer, value, maxTokens) {\n    // the maximum number of tokens per one character is 2 (e.g. 爨)\n    if (value.length * 2 < maxTokens) return value;\n    const t = _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_2__.tokenizers.tokenizer(tokenizer);\n    let tokens = t.encode(value);\n    if (tokens.length > maxTokens) {\n        // truncate tokens\n        tokens = tokens.slice(0, maxTokens);\n        value = t.decode(tokens);\n        // if we truncate at an UTF-8 boundary (some characters have more than one token), tiktoken returns a � character - remove it\n        return value.replace(\"�\", \"\");\n    }\n    return value;\n}\n\nconst DEFAULT_SIMILARITY_TOP_K = 2;\n/**\n * Similarity type\n * Default is cosine similarity. Dot product and negative Euclidean distance are also supported.\n */ var SimilarityType = /*#__PURE__*/ function(SimilarityType) {\n    SimilarityType[\"DEFAULT\"] = \"cosine\";\n    SimilarityType[\"DOT_PRODUCT\"] = \"dot_product\";\n    SimilarityType[\"EUCLIDEAN\"] = \"euclidean\";\n    return SimilarityType;\n}({});\n/**\n * The similarity between two embeddings.\n * @param embedding1\n * @param embedding2\n * @param mode\n * @returns similarity score with higher numbers meaning the two embeddings are more similar\n */ function similarity(embedding1, embedding2, mode = \"cosine\") {\n    if (embedding1.length !== embedding2.length) {\n        throw new Error(\"Embedding length mismatch\");\n    }\n    // NOTE I've taken enough Kahan to know that we should probably leave the\n    // numeric programming to numeric programmers. The naive approach here\n    // will probably cause some avoidable loss of floating point precision\n    // ml-distance is worth watching although they currently also use the naive\n    // formulas\n    function norm(x) {\n        let result = 0;\n        for(let i = 0; i < x.length; i++){\n            result += x[i] * x[i];\n        }\n        return Math.sqrt(result);\n    }\n    switch(mode){\n        case \"euclidean\":\n            {\n                const difference = embedding1.map((x, i)=>x - embedding2[i]);\n                return -norm(difference);\n            }\n        case \"dot_product\":\n            {\n                let result = 0;\n                for(let i = 0; i < embedding1.length; i++){\n                    result += embedding1[i] * embedding2[i];\n                }\n                return result;\n            }\n        case \"cosine\":\n            {\n                return similarity(embedding1, embedding2, \"dot_product\") / (norm(embedding1) * norm(embedding2));\n            }\n        default:\n            throw new Error(\"Not implemented yet\");\n    }\n}\n/**\n * Get the top K embeddings from a list of embeddings ordered by similarity to the query.\n * @param queryEmbedding\n * @param embeddings list of embeddings to consider\n * @param similarityTopK max number of embeddings to return, default 2\n * @param embeddingIds ids of embeddings in the embeddings list\n * @param similarityCutoff minimum similarity score\n * @returns\n */ function getTopKEmbeddings(queryEmbedding, embeddings, similarityTopK = 2, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nembeddingIds = null, similarityCutoff = null) {\n    if (embeddingIds == null) {\n        embeddingIds = Array(embeddings.length).map((_, i)=>i);\n    }\n    if (embeddingIds.length !== embeddings.length) {\n        throw new Error(\"getTopKEmbeddings: embeddings and embeddingIds length mismatch\");\n    }\n    const similarities = [];\n    for(let i = 0; i < embeddings.length; i++){\n        const sim = similarity(queryEmbedding, embeddings[i]);\n        if (similarityCutoff == null || sim > similarityCutoff) {\n            similarities.push({\n                similarity: sim,\n                id: embeddingIds[i]\n            });\n        }\n    }\n    similarities.sort((a, b)=>b.similarity - a.similarity); // Reverse sort\n    const resultSimilarities = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const resultIds = [];\n    for(let i = 0; i < similarityTopK; i++){\n        if (i >= similarities.length) {\n            break;\n        }\n        resultSimilarities.push(similarities[i].similarity);\n        resultIds.push(similarities[i].id);\n    }\n    return [\n        resultSimilarities,\n        resultIds\n    ];\n}\nfunction getTopKMMREmbeddings(queryEmbedding, embeddings, similarityFn = null, similarityTopK = null, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nembeddingIds = null, _similarityCutoff = null, mmrThreshold = null) {\n    const threshold = mmrThreshold || 0.5;\n    similarityFn = similarityFn || similarity;\n    if (embeddingIds === null || embeddingIds.length === 0) {\n        embeddingIds = Array.from({\n            length: embeddings.length\n        }, (_, i)=>i);\n    }\n    const fullEmbedMap = new Map(embeddingIds.map((value, i)=>[\n            value,\n            i\n        ]));\n    const embedMap = new Map(fullEmbedMap);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const embedSimilarity = new Map();\n    let score = Number.NEGATIVE_INFINITY;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let highScoreId = null;\n    for(let i = 0; i < embeddings.length; i++){\n        const emb = embeddings[i];\n        const similarity = similarityFn(queryEmbedding, emb);\n        embedSimilarity.set(embeddingIds[i], similarity);\n        if (similarity * threshold > score) {\n            highScoreId = embeddingIds[i];\n            score = similarity * threshold;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const results = [];\n    const embeddingLength = embeddings.length;\n    const similarityTopKCount = similarityTopK || embeddingLength;\n    while(results.length < Math.min(similarityTopKCount, embeddingLength)){\n        results.push([\n            score,\n            highScoreId\n        ]);\n        embedMap.delete(highScoreId);\n        const recentEmbeddingId = highScoreId;\n        score = Number.NEGATIVE_INFINITY;\n        for (const embedId of Array.from(embedMap.keys())){\n            const overlapWithRecent = similarityFn(embeddings[embedMap.get(embedId)], embeddings[fullEmbedMap.get(recentEmbeddingId)]);\n            if (threshold * embedSimilarity.get(embedId) - (1 - threshold) * overlapWithRecent > score) {\n                score = threshold * embedSimilarity.get(embedId) - (1 - threshold) * overlapWithRecent;\n                highScoreId = embedId;\n            }\n        }\n    }\n    const resultSimilarities = results.map(([s, _])=>s);\n    const resultIds = results.map(([_, n])=>n);\n    return [\n        resultSimilarities,\n        resultIds\n    ];\n}\n\nconst DEFAULT_EMBED_BATCH_SIZE = 10;\nclass BaseEmbedding extends _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.TransformComponent {\n    constructor(transformFn){\n        if (transformFn) {\n            super(transformFn), this.embedBatchSize = DEFAULT_EMBED_BATCH_SIZE, /**\n   * Optionally override this method to retrieve multiple embeddings in a single request\n   * @param texts\n   */ this.getTextEmbeddings = async (texts)=>{\n                const embeddings = [];\n                for (const text of texts){\n                    const embedding = await this.getTextEmbedding(text);\n                    embeddings.push(embedding);\n                }\n                return embeddings;\n            };\n        } else {\n            super(async (nodes, options)=>{\n                const texts = nodes.map((node)=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.EMBED));\n                const embeddings = await this.getTextEmbeddingsBatch(texts, options);\n                for(let i = 0; i < nodes.length; i++){\n                    nodes[i].embedding = embeddings[i];\n                }\n                return nodes;\n            }), this.embedBatchSize = DEFAULT_EMBED_BATCH_SIZE, this.getTextEmbeddings = async (texts)=>{\n                const embeddings = [];\n                for (const text of texts){\n                    const embedding = await this.getTextEmbedding(text);\n                    embeddings.push(embedding);\n                }\n                return embeddings;\n            };\n        }\n    }\n    similarity(embedding1, embedding2, mode = SimilarityType.DEFAULT) {\n        return similarity(embedding1, embedding2, mode);\n    }\n    async getQueryEmbedding(query) {\n        const text = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.extractSingleText)(query);\n        if (text) {\n            return await this.getTextEmbedding(text);\n        }\n        return null;\n    }\n    /**\n   * Get embeddings for a batch of texts\n   * @param texts\n   * @param options\n   */ async getTextEmbeddingsBatch(texts, options) {\n        return await batchEmbeddings(texts, this.getTextEmbeddings, this.embedBatchSize, options);\n    }\n    truncateMaxTokens(input) {\n        return input.map((s)=>{\n            // truncate to max tokens\n            if (!(this.embedInfo?.tokenizer && this.embedInfo?.maxTokens)) return s;\n            return truncateMaxTokens(this.embedInfo.tokenizer, s, this.embedInfo.maxTokens);\n        });\n    }\n}\nasync function batchEmbeddings(values, embedFunc, chunkSize, options) {\n    const resultEmbeddings = [];\n    const queue = values;\n    const curBatch = [];\n    for(let i = 0; i < queue.length; i++){\n        curBatch.push(queue[i]);\n        if (i == queue.length - 1 || curBatch.length == chunkSize) {\n            const embeddings = await embedFunc(curBatch);\n            resultEmbeddings.push(...embeddings);\n            if (options?.logProgress) {\n                console.log(`getting embedding progress: ${i} / ${queue.length}`);\n            }\n            curBatch.length = 0;\n        }\n    }\n    return resultEmbeddings;\n}\n\n/*\n * Base class for Multi Modal embeddings.\n */ class MultiModalEmbedding extends BaseEmbedding {\n    constructor(){\n        super(async (nodes, options)=>{\n            const nodeMap = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.splitNodesByType)(nodes);\n            const imageNodes = nodeMap[_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ModalityType.IMAGE] ?? [];\n            const textNodes = nodeMap[_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ModalityType.TEXT] ?? [];\n            const embeddings = await batchEmbeddings(textNodes.map((node)=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.EMBED)), this.getTextEmbeddings.bind(this), this.embedBatchSize, options);\n            for(let i = 0; i < textNodes.length; i++){\n                textNodes[i].embedding = embeddings[i];\n            }\n            const imageEmbeddings = await batchEmbeddings(imageNodes.map((n)=>n.image), this.getImageEmbeddings.bind(this), this.embedBatchSize, options);\n            for(let i = 0; i < imageNodes.length; i++){\n                imageNodes[i].embedding = imageEmbeddings[i];\n            }\n            return nodes;\n        });\n    }\n    /**\n   * Optionally override this method to retrieve multiple image embeddings in a single request\n   * @param images\n   */ async getImageEmbeddings(images) {\n        return Promise.all(images.map((imgFilePath)=>this.getImageEmbedding(imgFilePath)));\n    }\n    async getQueryEmbedding(query) {\n        const image = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.extractImage)(query);\n        if (image) {\n            return await this.getImageEmbedding(image);\n        }\n        const text = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.extractSingleText)(query);\n        if (text) {\n            return await this.getTextEmbedding(text);\n        }\n        return null;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvaHVnZ2luZ2ZhY2Uvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvZW1iZWRkaW5ncy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUE4RztBQUNsQztBQUNwQjs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrRUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGNBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsdUJBQXVCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHFFQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLGdFQUFnRSwrREFBWTtBQUM1RTtBQUNBLCtCQUErQixrQkFBa0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVFQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrQkFBa0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxHQUFHLElBQUksYUFBYTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1RUFBZ0I7QUFDNUMsdUNBQXVDLCtEQUFZO0FBQ25ELHNDQUFzQywrREFBWTtBQUNsRCwyRkFBMkYsK0RBQVk7QUFDdkcsMkJBQTJCLHNCQUFzQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUJBQXVCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtFQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1RUFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpTCIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9odWdnaW5nZmFjZS9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9lbWJlZGRpbmdzL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNmb3JtQ29tcG9uZW50LCBNZXRhZGF0YU1vZGUsIHNwbGl0Tm9kZXNCeVR5cGUsIE1vZGFsaXR5VHlwZSB9IGZyb20gJy4uLy4uL3NjaGVtYS9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IGV4dHJhY3RTaW5nbGVUZXh0LCBleHRyYWN0SW1hZ2UgfSBmcm9tICcuLi8uLi91dGlscy9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IHRva2VuaXplcnMgfSBmcm9tICdAbGxhbWFpbmRleC9lbnYvdG9rZW5pemVycyc7XG5cbmZ1bmN0aW9uIHRydW5jYXRlTWF4VG9rZW5zKHRva2VuaXplciwgdmFsdWUsIG1heFRva2Vucykge1xuICAgIC8vIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgcGVyIG9uZSBjaGFyYWN0ZXIgaXMgMiAoZS5nLiDniKgpXG4gICAgaWYgKHZhbHVlLmxlbmd0aCAqIDIgPCBtYXhUb2tlbnMpIHJldHVybiB2YWx1ZTtcbiAgICBjb25zdCB0ID0gdG9rZW5pemVycy50b2tlbml6ZXIodG9rZW5pemVyKTtcbiAgICBsZXQgdG9rZW5zID0gdC5lbmNvZGUodmFsdWUpO1xuICAgIGlmICh0b2tlbnMubGVuZ3RoID4gbWF4VG9rZW5zKSB7XG4gICAgICAgIC8vIHRydW5jYXRlIHRva2Vuc1xuICAgICAgICB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoMCwgbWF4VG9rZW5zKTtcbiAgICAgICAgdmFsdWUgPSB0LmRlY29kZSh0b2tlbnMpO1xuICAgICAgICAvLyBpZiB3ZSB0cnVuY2F0ZSBhdCBhbiBVVEYtOCBib3VuZGFyeSAoc29tZSBjaGFyYWN0ZXJzIGhhdmUgbW9yZSB0aGFuIG9uZSB0b2tlbiksIHRpa3Rva2VuIHJldHVybnMgYSDvv70gY2hhcmFjdGVyIC0gcmVtb3ZlIGl0XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKFwi77+9XCIsIFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IERFRkFVTFRfU0lNSUxBUklUWV9UT1BfSyA9IDI7XG4vKipcbiAqIFNpbWlsYXJpdHkgdHlwZVxuICogRGVmYXVsdCBpcyBjb3NpbmUgc2ltaWxhcml0eS4gRG90IHByb2R1Y3QgYW5kIG5lZ2F0aXZlIEV1Y2xpZGVhbiBkaXN0YW5jZSBhcmUgYWxzbyBzdXBwb3J0ZWQuXG4gKi8gdmFyIFNpbWlsYXJpdHlUeXBlID0gLyojX19QVVJFX18qLyBmdW5jdGlvbihTaW1pbGFyaXR5VHlwZSkge1xuICAgIFNpbWlsYXJpdHlUeXBlW1wiREVGQVVMVFwiXSA9IFwiY29zaW5lXCI7XG4gICAgU2ltaWxhcml0eVR5cGVbXCJET1RfUFJPRFVDVFwiXSA9IFwiZG90X3Byb2R1Y3RcIjtcbiAgICBTaW1pbGFyaXR5VHlwZVtcIkVVQ0xJREVBTlwiXSA9IFwiZXVjbGlkZWFuXCI7XG4gICAgcmV0dXJuIFNpbWlsYXJpdHlUeXBlO1xufSh7fSk7XG4vKipcbiAqIFRoZSBzaW1pbGFyaXR5IGJldHdlZW4gdHdvIGVtYmVkZGluZ3MuXG4gKiBAcGFyYW0gZW1iZWRkaW5nMVxuICogQHBhcmFtIGVtYmVkZGluZzJcbiAqIEBwYXJhbSBtb2RlXG4gKiBAcmV0dXJucyBzaW1pbGFyaXR5IHNjb3JlIHdpdGggaGlnaGVyIG51bWJlcnMgbWVhbmluZyB0aGUgdHdvIGVtYmVkZGluZ3MgYXJlIG1vcmUgc2ltaWxhclxuICovIGZ1bmN0aW9uIHNpbWlsYXJpdHkoZW1iZWRkaW5nMSwgZW1iZWRkaW5nMiwgbW9kZSA9IFwiY29zaW5lXCIpIHtcbiAgICBpZiAoZW1iZWRkaW5nMS5sZW5ndGggIT09IGVtYmVkZGluZzIubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtYmVkZGluZyBsZW5ndGggbWlzbWF0Y2hcIik7XG4gICAgfVxuICAgIC8vIE5PVEUgSSd2ZSB0YWtlbiBlbm91Z2ggS2FoYW4gdG8ga25vdyB0aGF0IHdlIHNob3VsZCBwcm9iYWJseSBsZWF2ZSB0aGVcbiAgICAvLyBudW1lcmljIHByb2dyYW1taW5nIHRvIG51bWVyaWMgcHJvZ3JhbW1lcnMuIFRoZSBuYWl2ZSBhcHByb2FjaCBoZXJlXG4gICAgLy8gd2lsbCBwcm9iYWJseSBjYXVzZSBzb21lIGF2b2lkYWJsZSBsb3NzIG9mIGZsb2F0aW5nIHBvaW50IHByZWNpc2lvblxuICAgIC8vIG1sLWRpc3RhbmNlIGlzIHdvcnRoIHdhdGNoaW5nIGFsdGhvdWdoIHRoZXkgY3VycmVudGx5IGFsc28gdXNlIHRoZSBuYWl2ZVxuICAgIC8vIGZvcm11bGFzXG4gICAgZnVuY3Rpb24gbm9ybSh4KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICByZXN1bHQgKz0geFtpXSAqIHhbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChyZXN1bHQpO1xuICAgIH1cbiAgICBzd2l0Y2gobW9kZSl7XG4gICAgICAgIGNhc2UgXCJldWNsaWRlYW5cIjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gZW1iZWRkaW5nMS5tYXAoKHgsIGkpPT54IC0gZW1iZWRkaW5nMltpXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1ub3JtKGRpZmZlcmVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZG90X3Byb2R1Y3RcIjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZW1iZWRkaW5nMS5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBlbWJlZGRpbmcxW2ldICogZW1iZWRkaW5nMltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvc2luZVwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBzaW1pbGFyaXR5KGVtYmVkZGluZzEsIGVtYmVkZGluZzIsIFwiZG90X3Byb2R1Y3RcIikgLyAobm9ybShlbWJlZGRpbmcxKSAqIG5vcm0oZW1iZWRkaW5nMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkIHlldFwiKTtcbiAgICB9XG59XG4vKipcbiAqIEdldCB0aGUgdG9wIEsgZW1iZWRkaW5ncyBmcm9tIGEgbGlzdCBvZiBlbWJlZGRpbmdzIG9yZGVyZWQgYnkgc2ltaWxhcml0eSB0byB0aGUgcXVlcnkuXG4gKiBAcGFyYW0gcXVlcnlFbWJlZGRpbmdcbiAqIEBwYXJhbSBlbWJlZGRpbmdzIGxpc3Qgb2YgZW1iZWRkaW5ncyB0byBjb25zaWRlclxuICogQHBhcmFtIHNpbWlsYXJpdHlUb3BLIG1heCBudW1iZXIgb2YgZW1iZWRkaW5ncyB0byByZXR1cm4sIGRlZmF1bHQgMlxuICogQHBhcmFtIGVtYmVkZGluZ0lkcyBpZHMgb2YgZW1iZWRkaW5ncyBpbiB0aGUgZW1iZWRkaW5ncyBsaXN0XG4gKiBAcGFyYW0gc2ltaWxhcml0eUN1dG9mZiBtaW5pbXVtIHNpbWlsYXJpdHkgc2NvcmVcbiAqIEByZXR1cm5zXG4gKi8gZnVuY3Rpb24gZ2V0VG9wS0VtYmVkZGluZ3MocXVlcnlFbWJlZGRpbmcsIGVtYmVkZGluZ3MsIHNpbWlsYXJpdHlUb3BLID0gMiwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmVtYmVkZGluZ0lkcyA9IG51bGwsIHNpbWlsYXJpdHlDdXRvZmYgPSBudWxsKSB7XG4gICAgaWYgKGVtYmVkZGluZ0lkcyA9PSBudWxsKSB7XG4gICAgICAgIGVtYmVkZGluZ0lkcyA9IEFycmF5KGVtYmVkZGluZ3MubGVuZ3RoKS5tYXAoKF8sIGkpPT5pKTtcbiAgICB9XG4gICAgaWYgKGVtYmVkZGluZ0lkcy5sZW5ndGggIT09IGVtYmVkZGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImdldFRvcEtFbWJlZGRpbmdzOiBlbWJlZGRpbmdzIGFuZCBlbWJlZGRpbmdJZHMgbGVuZ3RoIG1pc21hdGNoXCIpO1xuICAgIH1cbiAgICBjb25zdCBzaW1pbGFyaXRpZXMgPSBbXTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZW1iZWRkaW5ncy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNpbSA9IHNpbWlsYXJpdHkocXVlcnlFbWJlZGRpbmcsIGVtYmVkZGluZ3NbaV0pO1xuICAgICAgICBpZiAoc2ltaWxhcml0eUN1dG9mZiA9PSBudWxsIHx8IHNpbSA+IHNpbWlsYXJpdHlDdXRvZmYpIHtcbiAgICAgICAgICAgIHNpbWlsYXJpdGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzaW1pbGFyaXR5OiBzaW0sXG4gICAgICAgICAgICAgICAgaWQ6IGVtYmVkZGluZ0lkc1tpXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2ltaWxhcml0aWVzLnNvcnQoKGEsIGIpPT5iLnNpbWlsYXJpdHkgLSBhLnNpbWlsYXJpdHkpOyAvLyBSZXZlcnNlIHNvcnRcbiAgICBjb25zdCByZXN1bHRTaW1pbGFyaXRpZXMgPSBbXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHJlc3VsdElkcyA9IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaW1pbGFyaXR5VG9wSzsgaSsrKXtcbiAgICAgICAgaWYgKGkgPj0gc2ltaWxhcml0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0U2ltaWxhcml0aWVzLnB1c2goc2ltaWxhcml0aWVzW2ldLnNpbWlsYXJpdHkpO1xuICAgICAgICByZXN1bHRJZHMucHVzaChzaW1pbGFyaXRpZXNbaV0uaWQpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICByZXN1bHRTaW1pbGFyaXRpZXMsXG4gICAgICAgIHJlc3VsdElkc1xuICAgIF07XG59XG5mdW5jdGlvbiBnZXRUb3BLTU1SRW1iZWRkaW5ncyhxdWVyeUVtYmVkZGluZywgZW1iZWRkaW5ncywgc2ltaWxhcml0eUZuID0gbnVsbCwgc2ltaWxhcml0eVRvcEsgPSBudWxsLCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZW1iZWRkaW5nSWRzID0gbnVsbCwgX3NpbWlsYXJpdHlDdXRvZmYgPSBudWxsLCBtbXJUaHJlc2hvbGQgPSBudWxsKSB7XG4gICAgY29uc3QgdGhyZXNob2xkID0gbW1yVGhyZXNob2xkIHx8IDAuNTtcbiAgICBzaW1pbGFyaXR5Rm4gPSBzaW1pbGFyaXR5Rm4gfHwgc2ltaWxhcml0eTtcbiAgICBpZiAoZW1iZWRkaW5nSWRzID09PSBudWxsIHx8IGVtYmVkZGluZ0lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZW1iZWRkaW5nSWRzID0gQXJyYXkuZnJvbSh7XG4gICAgICAgICAgICBsZW5ndGg6IGVtYmVkZGluZ3MubGVuZ3RoXG4gICAgICAgIH0sIChfLCBpKT0+aSk7XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxFbWJlZE1hcCA9IG5ldyBNYXAoZW1iZWRkaW5nSWRzLm1hcCgodmFsdWUsIGkpPT5bXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGlcbiAgICAgICAgXSkpO1xuICAgIGNvbnN0IGVtYmVkTWFwID0gbmV3IE1hcChmdWxsRW1iZWRNYXApO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgZW1iZWRTaW1pbGFyaXR5ID0gbmV3IE1hcCgpO1xuICAgIGxldCBzY29yZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBoaWdoU2NvcmVJZCA9IG51bGw7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGVtYmVkZGluZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBlbWIgPSBlbWJlZGRpbmdzW2ldO1xuICAgICAgICBjb25zdCBzaW1pbGFyaXR5ID0gc2ltaWxhcml0eUZuKHF1ZXJ5RW1iZWRkaW5nLCBlbWIpO1xuICAgICAgICBlbWJlZFNpbWlsYXJpdHkuc2V0KGVtYmVkZGluZ0lkc1tpXSwgc2ltaWxhcml0eSk7XG4gICAgICAgIGlmIChzaW1pbGFyaXR5ICogdGhyZXNob2xkID4gc2NvcmUpIHtcbiAgICAgICAgICAgIGhpZ2hTY29yZUlkID0gZW1iZWRkaW5nSWRzW2ldO1xuICAgICAgICAgICAgc2NvcmUgPSBzaW1pbGFyaXR5ICogdGhyZXNob2xkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGNvbnN0IGVtYmVkZGluZ0xlbmd0aCA9IGVtYmVkZGluZ3MubGVuZ3RoO1xuICAgIGNvbnN0IHNpbWlsYXJpdHlUb3BLQ291bnQgPSBzaW1pbGFyaXR5VG9wSyB8fCBlbWJlZGRpbmdMZW5ndGg7XG4gICAgd2hpbGUocmVzdWx0cy5sZW5ndGggPCBNYXRoLm1pbihzaW1pbGFyaXR5VG9wS0NvdW50LCBlbWJlZGRpbmdMZW5ndGgpKXtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFtcbiAgICAgICAgICAgIHNjb3JlLFxuICAgICAgICAgICAgaGlnaFNjb3JlSWRcbiAgICAgICAgXSk7XG4gICAgICAgIGVtYmVkTWFwLmRlbGV0ZShoaWdoU2NvcmVJZCk7XG4gICAgICAgIGNvbnN0IHJlY2VudEVtYmVkZGluZ0lkID0gaGlnaFNjb3JlSWQ7XG4gICAgICAgIHNjb3JlID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICBmb3IgKGNvbnN0IGVtYmVkSWQgb2YgQXJyYXkuZnJvbShlbWJlZE1hcC5rZXlzKCkpKXtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXBXaXRoUmVjZW50ID0gc2ltaWxhcml0eUZuKGVtYmVkZGluZ3NbZW1iZWRNYXAuZ2V0KGVtYmVkSWQpXSwgZW1iZWRkaW5nc1tmdWxsRW1iZWRNYXAuZ2V0KHJlY2VudEVtYmVkZGluZ0lkKV0pO1xuICAgICAgICAgICAgaWYgKHRocmVzaG9sZCAqIGVtYmVkU2ltaWxhcml0eS5nZXQoZW1iZWRJZCkgLSAoMSAtIHRocmVzaG9sZCkgKiBvdmVybGFwV2l0aFJlY2VudCA+IHNjb3JlKSB7XG4gICAgICAgICAgICAgICAgc2NvcmUgPSB0aHJlc2hvbGQgKiBlbWJlZFNpbWlsYXJpdHkuZ2V0KGVtYmVkSWQpIC0gKDEgLSB0aHJlc2hvbGQpICogb3ZlcmxhcFdpdGhSZWNlbnQ7XG4gICAgICAgICAgICAgICAgaGlnaFNjb3JlSWQgPSBlbWJlZElkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdFNpbWlsYXJpdGllcyA9IHJlc3VsdHMubWFwKChbcywgX10pPT5zKTtcbiAgICBjb25zdCByZXN1bHRJZHMgPSByZXN1bHRzLm1hcCgoW18sIG5dKT0+bik7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgcmVzdWx0U2ltaWxhcml0aWVzLFxuICAgICAgICByZXN1bHRJZHNcbiAgICBdO1xufVxuXG5jb25zdCBERUZBVUxUX0VNQkVEX0JBVENIX1NJWkUgPSAxMDtcbmNsYXNzIEJhc2VFbWJlZGRpbmcgZXh0ZW5kcyBUcmFuc2Zvcm1Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zZm9ybUZuKXtcbiAgICAgICAgaWYgKHRyYW5zZm9ybUZuKSB7XG4gICAgICAgICAgICBzdXBlcih0cmFuc2Zvcm1GbiksIHRoaXMuZW1iZWRCYXRjaFNpemUgPSBERUZBVUxUX0VNQkVEX0JBVENIX1NJWkUsIC8qKlxuICAgKiBPcHRpb25hbGx5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHJldHJpZXZlIG11bHRpcGxlIGVtYmVkZGluZ3MgaW4gYSBzaW5nbGUgcmVxdWVzdFxuICAgKiBAcGFyYW0gdGV4dHNcbiAgICovIHRoaXMuZ2V0VGV4dEVtYmVkZGluZ3MgPSBhc3luYyAodGV4dHMpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgZW1iZWRkaW5ncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGV4dCBvZiB0ZXh0cyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYmVkZGluZyA9IGF3YWl0IHRoaXMuZ2V0VGV4dEVtYmVkZGluZyh0ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgZW1iZWRkaW5ncy5wdXNoKGVtYmVkZGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbWJlZGRpbmdzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyKGFzeW5jIChub2Rlcywgb3B0aW9ucyk9PntcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0cyA9IG5vZGVzLm1hcCgobm9kZSk9Pm5vZGUuZ2V0Q29udGVudChNZXRhZGF0YU1vZGUuRU1CRUQpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbWJlZGRpbmdzID0gYXdhaXQgdGhpcy5nZXRUZXh0RW1iZWRkaW5nc0JhdGNoKHRleHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS5lbWJlZGRpbmcgPSBlbWJlZGRpbmdzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICAgICAgICB9KSwgdGhpcy5lbWJlZEJhdGNoU2l6ZSA9IERFRkFVTFRfRU1CRURfQkFUQ0hfU0laRSwgdGhpcy5nZXRUZXh0RW1iZWRkaW5ncyA9IGFzeW5jICh0ZXh0cyk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBlbWJlZGRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0ZXh0IG9mIHRleHRzKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1iZWRkaW5nID0gYXdhaXQgdGhpcy5nZXRUZXh0RW1iZWRkaW5nKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICBlbWJlZGRpbmdzLnB1c2goZW1iZWRkaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtYmVkZGluZ3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNpbWlsYXJpdHkoZW1iZWRkaW5nMSwgZW1iZWRkaW5nMiwgbW9kZSA9IFNpbWlsYXJpdHlUeXBlLkRFRkFVTFQpIHtcbiAgICAgICAgcmV0dXJuIHNpbWlsYXJpdHkoZW1iZWRkaW5nMSwgZW1iZWRkaW5nMiwgbW9kZSk7XG4gICAgfVxuICAgIGFzeW5jIGdldFF1ZXJ5RW1iZWRkaW5nKHF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBleHRyYWN0U2luZ2xlVGV4dChxdWVyeSk7XG4gICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRUZXh0RW1iZWRkaW5nKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICogR2V0IGVtYmVkZGluZ3MgZm9yIGEgYmF0Y2ggb2YgdGV4dHNcbiAgICogQHBhcmFtIHRleHRzXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqLyBhc3luYyBnZXRUZXh0RW1iZWRkaW5nc0JhdGNoKHRleHRzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBiYXRjaEVtYmVkZGluZ3ModGV4dHMsIHRoaXMuZ2V0VGV4dEVtYmVkZGluZ3MsIHRoaXMuZW1iZWRCYXRjaFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB0cnVuY2F0ZU1heFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQubWFwKChzKT0+e1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdG8gbWF4IHRva2Vuc1xuICAgICAgICAgICAgaWYgKCEodGhpcy5lbWJlZEluZm8/LnRva2VuaXplciAmJiB0aGlzLmVtYmVkSW5mbz8ubWF4VG9rZW5zKSkgcmV0dXJuIHM7XG4gICAgICAgICAgICByZXR1cm4gdHJ1bmNhdGVNYXhUb2tlbnModGhpcy5lbWJlZEluZm8udG9rZW5pemVyLCBzLCB0aGlzLmVtYmVkSW5mby5tYXhUb2tlbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBiYXRjaEVtYmVkZGluZ3ModmFsdWVzLCBlbWJlZEZ1bmMsIGNodW5rU2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3VsdEVtYmVkZGluZ3MgPSBbXTtcbiAgICBjb25zdCBxdWV1ZSA9IHZhbHVlcztcbiAgICBjb25zdCBjdXJCYXRjaCA9IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGN1ckJhdGNoLnB1c2gocXVldWVbaV0pO1xuICAgICAgICBpZiAoaSA9PSBxdWV1ZS5sZW5ndGggLSAxIHx8IGN1ckJhdGNoLmxlbmd0aCA9PSBjaHVua1NpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVtYmVkZGluZ3MgPSBhd2FpdCBlbWJlZEZ1bmMoY3VyQmF0Y2gpO1xuICAgICAgICAgICAgcmVzdWx0RW1iZWRkaW5ncy5wdXNoKC4uLmVtYmVkZGluZ3MpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnM/LmxvZ1Byb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGdldHRpbmcgZW1iZWRkaW5nIHByb2dyZXNzOiAke2l9IC8gJHtxdWV1ZS5sZW5ndGh9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJCYXRjaC5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRFbWJlZGRpbmdzO1xufVxuXG4vKlxuICogQmFzZSBjbGFzcyBmb3IgTXVsdGkgTW9kYWwgZW1iZWRkaW5ncy5cbiAqLyBjbGFzcyBNdWx0aU1vZGFsRW1iZWRkaW5nIGV4dGVuZHMgQmFzZUVtYmVkZGluZyB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc3VwZXIoYXN5bmMgKG5vZGVzLCBvcHRpb25zKT0+e1xuICAgICAgICAgICAgY29uc3Qgbm9kZU1hcCA9IHNwbGl0Tm9kZXNCeVR5cGUobm9kZXMpO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VOb2RlcyA9IG5vZGVNYXBbTW9kYWxpdHlUeXBlLklNQUdFXSA/PyBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRleHROb2RlcyA9IG5vZGVNYXBbTW9kYWxpdHlUeXBlLlRFWFRdID8/IFtdO1xuICAgICAgICAgICAgY29uc3QgZW1iZWRkaW5ncyA9IGF3YWl0IGJhdGNoRW1iZWRkaW5ncyh0ZXh0Tm9kZXMubWFwKChub2RlKT0+bm9kZS5nZXRDb250ZW50KE1ldGFkYXRhTW9kZS5FTUJFRCkpLCB0aGlzLmdldFRleHRFbWJlZGRpbmdzLmJpbmQodGhpcyksIHRoaXMuZW1iZWRCYXRjaFNpemUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRleHROb2Rlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGVzW2ldLmVtYmVkZGluZyA9IGVtYmVkZGluZ3NbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpbWFnZUVtYmVkZGluZ3MgPSBhd2FpdCBiYXRjaEVtYmVkZGluZ3MoaW1hZ2VOb2Rlcy5tYXAoKG4pPT5uLmltYWdlKSwgdGhpcy5nZXRJbWFnZUVtYmVkZGluZ3MuYmluZCh0aGlzKSwgdGhpcy5lbWJlZEJhdGNoU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgaW1hZ2VOb2Rlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaW1hZ2VOb2Rlc1tpXS5lbWJlZGRpbmcgPSBpbWFnZUVtYmVkZGluZ3NbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICogT3B0aW9uYWxseSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byByZXRyaWV2ZSBtdWx0aXBsZSBpbWFnZSBlbWJlZGRpbmdzIGluIGEgc2luZ2xlIHJlcXVlc3RcbiAgICogQHBhcmFtIGltYWdlc1xuICAgKi8gYXN5bmMgZ2V0SW1hZ2VFbWJlZGRpbmdzKGltYWdlcykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaW1hZ2VzLm1hcCgoaW1nRmlsZVBhdGgpPT50aGlzLmdldEltYWdlRW1iZWRkaW5nKGltZ0ZpbGVQYXRoKSkpO1xuICAgIH1cbiAgICBhc3luYyBnZXRRdWVyeUVtYmVkZGluZyhxdWVyeSkge1xuICAgICAgICBjb25zdCBpbWFnZSA9IGV4dHJhY3RJbWFnZShxdWVyeSk7XG4gICAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0SW1hZ2VFbWJlZGRpbmcoaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRleHQgPSBleHRyYWN0U2luZ2xlVGV4dChxdWVyeSk7XG4gICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRUZXh0RW1iZWRkaW5nKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQmFzZUVtYmVkZGluZywgREVGQVVMVF9TSU1JTEFSSVRZX1RPUF9LLCBNdWx0aU1vZGFsRW1iZWRkaW5nLCBTaW1pbGFyaXR5VHlwZSwgYmF0Y2hFbWJlZGRpbmdzLCBnZXRUb3BLRW1iZWRkaW5ncywgZ2V0VG9wS01NUkVtYmVkZGluZ3MsIHNpbWlsYXJpdHksIHRydW5jYXRlTWF4VG9rZW5zIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/embeddings/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/global/dist/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/global/dist/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   DEFAULT_BASE_URL: () => (/* binding */ DEFAULT_BASE_URL),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP: () => (/* binding */ DEFAULT_CHUNK_OVERLAP),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP_RATIO: () => (/* binding */ DEFAULT_CHUNK_OVERLAP_RATIO),\n/* harmony export */   DEFAULT_CHUNK_SIZE: () => (/* binding */ DEFAULT_CHUNK_SIZE),\n/* harmony export */   DEFAULT_COLLECTION: () => (/* binding */ DEFAULT_COLLECTION),\n/* harmony export */   DEFAULT_CONTEXT_WINDOW: () => (/* binding */ DEFAULT_CONTEXT_WINDOW),\n/* harmony export */   DEFAULT_DOC_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_DOC_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_EU_BASE_URL: () => (/* binding */ DEFAULT_EU_BASE_URL),\n/* harmony export */   DEFAULT_GRAPH_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_GRAPH_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_INDEX_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_INDEX_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   DEFAULT_NUM_OUTPUTS: () => (/* binding */ DEFAULT_NUM_OUTPUTS),\n/* harmony export */   DEFAULT_PADDING: () => (/* binding */ DEFAULT_PADDING),\n/* harmony export */   DEFAULT_PERSIST_DIR: () => (/* binding */ DEFAULT_PERSIST_DIR),\n/* harmony export */   DEFAULT_PROJECT_NAME: () => (/* binding */ DEFAULT_PROJECT_NAME),\n/* harmony export */   DEFAULT_VECTOR_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_VECTOR_STORE_PERSIST_FILENAME),\n/* harmony export */   EventCaller: () => (/* binding */ EventCaller),\n/* harmony export */   Settings: () => (/* binding */ Settings),\n/* harmony export */   getEventCaller: () => (/* binding */ getEventCaller),\n/* harmony export */   withEventCaller: () => (/* binding */ withEventCaller)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n\n\n\n//#region llm\nconst DEFAULT_CONTEXT_WINDOW = 3900;\nconst DEFAULT_NUM_OUTPUTS = 256;\nconst DEFAULT_CHUNK_SIZE = 1024;\nconst DEFAULT_CHUNK_OVERLAP = 20;\nconst DEFAULT_CHUNK_OVERLAP_RATIO = 0.1;\nconst DEFAULT_PADDING = 5;\n//#endregion\n//#region storage\nconst DEFAULT_COLLECTION = \"data\";\nconst DEFAULT_PERSIST_DIR = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.join(\"./storage\");\nconst DEFAULT_INDEX_STORE_PERSIST_FILENAME = \"index_store.json\";\nconst DEFAULT_DOC_STORE_PERSIST_FILENAME = \"doc_store.json\";\nconst DEFAULT_VECTOR_STORE_PERSIST_FILENAME = \"vector_store.json\";\nconst DEFAULT_GRAPH_STORE_PERSIST_FILENAME = \"graph_store.json\";\nconst DEFAULT_NAMESPACE = \"docstore\";\n//#endregion\n//#region llama cloud\nconst DEFAULT_PROJECT_NAME = \"Default\";\nconst DEFAULT_BASE_URL = \"https://api.cloud.llamaindex.ai\";\nconst DEFAULT_EU_BASE_URL = \"https://api.cloud.eu.llamaindex.ai\"; //#endregion\n\nconst eventReasonAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\n/**\n * EventCaller is used to track the caller of an event.\n */ class EventCaller {\n    constructor(caller, parent){\n        this.caller = caller;\n        this.parent = parent;\n        this.id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        this.#computedCallers = null;\n    }\n    #computedCallers;\n    get computedCallers() {\n        if (this.#computedCallers != null) {\n            return this.#computedCallers;\n        }\n        const callers = [\n            this.caller\n        ];\n        let parent = this.parent;\n        while(parent != null){\n            callers.push(parent.caller);\n            parent = parent.parent;\n        }\n        this.#computedCallers = callers;\n        return callers;\n    }\n    static create(caller, parent) {\n        return new EventCaller(caller, parent);\n    }\n}\nfunction getEventCaller() {\n    return eventReasonAsyncLocalStorage.getStore() ?? null;\n}\n/**\n * @param caller who is calling this function, pass in `this` if it's a class method\n * @param fn\n */ function withEventCaller(caller, fn) {\n    // create a chain of event callers\n    const parentCaller = getEventCaller();\n    return eventReasonAsyncLocalStorage.run(EventCaller.create(caller, parentCaller), fn);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass LlamaIndexCustomEvent extends _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.CustomEvent {\n    constructor(event, options){\n        super(event, options), this.reason = null;\n        this.reason = options?.reason ?? null;\n    }\n    static fromEvent(type, detail) {\n        return new LlamaIndexCustomEvent(type, {\n            detail: detail,\n            reason: getEventCaller()\n        });\n    }\n}\nclass CallbackManager {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    #handlers;\n    on(event, handler) {\n        if (!this.#handlers.has(event)) {\n            this.#handlers.set(event, []);\n        }\n        this.#handlers.get(event).push(handler);\n        return this;\n    }\n    off(event, handler) {\n        if (!this.#handlers.has(event)) {\n            return this;\n        }\n        const cbs = this.#handlers.get(event);\n        const index = cbs.indexOf(handler);\n        if (index > -1) {\n            cbs.splice(index, 1);\n        }\n        return this;\n    }\n    dispatchEvent(event, detail, sync = false) {\n        const cbs = this.#handlers.get(event);\n        if (!cbs) {\n            return;\n        }\n        if (typeof queueMicrotask === \"undefined\") {\n            console.warn(\"queueMicrotask is not available, dispatching synchronously\");\n            sync = true;\n        }\n        if (sync) {\n            cbs.forEach((handler)=>handler(LlamaIndexCustomEvent.fromEvent(event, {\n                    ...detail\n                })));\n        } else {\n            queueMicrotask(()=>{\n                cbs.forEach((handler)=>handler(LlamaIndexCustomEvent.fromEvent(event, {\n                        ...detail\n                    })));\n            });\n        }\n    }\n    constructor(){\n        this.#handlers = new Map();\n    }\n}\nconst globalCallbackManager = new CallbackManager();\nconst callbackManagerAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet currentCallbackManager = globalCallbackManager;\nfunction getCallbackManager() {\n    return callbackManagerAsyncLocalStorage.getStore() ?? currentCallbackManager;\n}\nfunction setCallbackManager(callbackManager) {\n    currentCallbackManager = callbackManager;\n}\nfunction withCallbackManager(callbackManager, fn) {\n    return callbackManagerAsyncLocalStorage.run(callbackManager, fn);\n}\n\nconst chunkSizeAsyncLocalStorage$1 = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalChunkSize = 1024;\nfunction getChunkSize() {\n    return chunkSizeAsyncLocalStorage$1.getStore() ?? globalChunkSize;\n}\nfunction setChunkSize(chunkSize) {\n    if (chunkSize !== undefined) {\n        globalChunkSize = chunkSize;\n    }\n}\nfunction withChunkSize(embeddedModel, fn) {\n    return chunkSizeAsyncLocalStorage$1.run(embeddedModel, fn);\n}\n\nconst embeddedModelAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalEmbeddedModel = null;\nfunction getEmbeddedModel() {\n    const currentEmbeddedModel = embeddedModelAsyncLocalStorage.getStore() ?? globalEmbeddedModel;\n    if (!currentEmbeddedModel) {\n        throw new Error(\"Cannot find Embedding, please set `Settings.embedModel = ...` on the top of your code\");\n    }\n    return currentEmbeddedModel;\n}\nfunction setEmbeddedModel(embeddedModel) {\n    globalEmbeddedModel = embeddedModel;\n}\nfunction withEmbeddedModel(embeddedModel, fn) {\n    return embeddedModelAsyncLocalStorage.run(embeddedModel, fn);\n}\n\nconst llmAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalLLM;\nfunction getLLM() {\n    const currentLLM = llmAsyncLocalStorage.getStore() ?? globalLLM;\n    if (!currentLLM) {\n        throw new Error(\"Cannot find LLM, please set `Settings.llm = ...` on the top of your code\");\n    }\n    return currentLLM;\n}\nfunction setLLM(llm) {\n    globalLLM = llm;\n}\nfunction withLLM(llm, fn) {\n    return llmAsyncLocalStorage.run(llm, fn);\n}\n\nconst chunkSizeAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalTokenizer = _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_1__.tokenizers.tokenizer();\nfunction getTokenizer() {\n    return chunkSizeAsyncLocalStorage.getStore() ?? globalTokenizer;\n}\nfunction setTokenizer(tokenizer) {\n    if (tokenizer !== undefined) {\n        globalTokenizer = tokenizer;\n    }\n}\nfunction withTokenizer(tokenizer, fn) {\n    return chunkSizeAsyncLocalStorage.run(tokenizer, fn);\n}\n\nconst Settings = {\n    get llm () {\n        return getLLM();\n    },\n    set llm (llm){\n        setLLM(llm);\n    },\n    withLLM (llm1, fn) {\n        return withLLM(llm1, fn);\n    },\n    get embedModel () {\n        return getEmbeddedModel();\n    },\n    set embedModel (embedModel){\n        setEmbeddedModel(embedModel);\n    },\n    withEmbedModel (embedModel1, fn) {\n        return withEmbeddedModel(embedModel1, fn);\n    },\n    get tokenizer () {\n        return getTokenizer();\n    },\n    set tokenizer (tokenizer){\n        setTokenizer(tokenizer);\n    },\n    withTokenizer (tokenizer1, fn) {\n        return withTokenizer(tokenizer1, fn);\n    },\n    get chunkSize () {\n        return getChunkSize();\n    },\n    set chunkSize (chunkSize){\n        setChunkSize(chunkSize);\n    },\n    withChunkSize (chunkSize1, fn) {\n        return withChunkSize(chunkSize1, fn);\n    },\n    get callbackManager () {\n        return getCallbackManager();\n    },\n    set callbackManager (callbackManager){\n        setCallbackManager(callbackManager);\n    },\n    withCallbackManager (callbackManager1, fn) {\n        return withCallbackManager(callbackManager1, fn);\n    },\n    get debug () {\n        let debug = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)(\"DEBUG\");\n        if (typeof window !== \"undefined\") {\n            debug ||= window.localStorage.debug;\n        }\n        return Boolean(debug) && debug?.includes(\"llamaindex\") || debug === \"*\" || debug === \"true\";\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/global/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/llms/dist/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/llms/dist/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLM: () => (/* binding */ BaseLLM),\n/* harmony export */   ToolCallLLM: () => (/* binding */ ToolCallLLM)\n/* harmony export */ });\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\nclass BaseLLM {\n    async complete(params) {\n        const { prompt, stream, responseFormat } = params;\n        if (stream) {\n            const stream = await this.chat({\n                messages: [\n                    {\n                        content: prompt,\n                        role: \"user\"\n                    }\n                ],\n                stream: true,\n                ...responseFormat ? {\n                    responseFormat\n                } : {}\n            });\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.streamConverter)(stream, (chunk)=>{\n                return {\n                    raw: null,\n                    text: chunk.delta\n                };\n            });\n        }\n        const chatResponse = await this.chat({\n            messages: [\n                {\n                    content: prompt,\n                    role: \"user\"\n                }\n            ],\n            ...responseFormat ? {\n                responseFormat\n            } : {}\n        });\n        return {\n            text: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.extractText)(chatResponse.message.content),\n            raw: chatResponse.raw\n        };\n    }\n}\nclass ToolCallLLM extends BaseLLM {\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvaHVnZ2luZ2ZhY2Uvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvbGxtcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RTs7QUFFekU7QUFDQTtBQUNBLGdCQUFnQixpQ0FBaUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2IsbUJBQW1CLHFFQUFlO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLFNBQVM7QUFDVDtBQUNBLGtCQUFrQixpRUFBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdDIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2h1Z2dpbmdmYWNlL25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9jb3JlL2xsbXMvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJlYW1Db252ZXJ0ZXIsIGV4dHJhY3RUZXh0IH0gZnJvbSAnLi4vLi4vdXRpbHMvZGlzdC9pbmRleC5qcyc7XG5cbmNsYXNzIEJhc2VMTE0ge1xuICAgIGFzeW5jIGNvbXBsZXRlKHBhcmFtcykge1xuICAgICAgICBjb25zdCB7IHByb21wdCwgc3RyZWFtLCByZXNwb25zZUZvcm1hdCB9ID0gcGFyYW1zO1xuICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCB0aGlzLmNoYXQoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHByb21wdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwidXNlclwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHN0cmVhbTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZUZvcm1hdCA/IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VGb3JtYXRcbiAgICAgICAgICAgICAgICB9IDoge31cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbUNvbnZlcnRlcihzdHJlYW0sIChjaHVuayk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByYXc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGNodW5rLmRlbHRhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXRSZXNwb25zZSA9IGF3YWl0IHRoaXMuY2hhdCh7XG4gICAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcHJvbXB0LFxuICAgICAgICAgICAgICAgICAgICByb2xlOiBcInVzZXJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAuLi5yZXNwb25zZUZvcm1hdCA/IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZUZvcm1hdFxuICAgICAgICAgICAgfSA6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogZXh0cmFjdFRleHQoY2hhdFJlc3BvbnNlLm1lc3NhZ2UuY29udGVudCksXG4gICAgICAgICAgICByYXc6IGNoYXRSZXNwb25zZS5yYXdcbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBUb29sQ2FsbExMTSBleHRlbmRzIEJhc2VMTE0ge1xufVxuXG5leHBvcnQgeyBCYXNlTExNLCBUb29sQ2FsbExMTSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/llms/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/schema/dist/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/schema/dist/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseNode: () => (/* binding */ BaseNode),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   EngineResponse: () => (/* binding */ EngineResponse),\n/* harmony export */   FileReader: () => (/* binding */ FileReader),\n/* harmony export */   ImageDocument: () => (/* binding */ ImageDocument),\n/* harmony export */   ImageNode: () => (/* binding */ ImageNode),\n/* harmony export */   IndexNode: () => (/* binding */ IndexNode),\n/* harmony export */   MetadataMode: () => (/* binding */ MetadataMode),\n/* harmony export */   ModalityType: () => (/* binding */ ModalityType),\n/* harmony export */   NodeRelationship: () => (/* binding */ NodeRelationship),\n/* harmony export */   ObjectType: () => (/* binding */ ObjectType),\n/* harmony export */   TextNode: () => (/* binding */ TextNode),\n/* harmony export */   TransformComponent: () => (/* binding */ TransformComponent),\n/* harmony export */   anyFunctionSchema: () => (/* binding */ anyFunctionSchema),\n/* harmony export */   baseToolSchema: () => (/* binding */ baseToolSchema),\n/* harmony export */   baseToolWithCallSchema: () => (/* binding */ baseToolWithCallSchema),\n/* harmony export */   buildNodeFromSplits: () => (/* binding */ buildNodeFromSplits),\n/* harmony export */   jsonToNode: () => (/* binding */ jsonToNode),\n/* harmony export */   sentenceSplitterSchema: () => (/* binding */ sentenceSplitterSchema),\n/* harmony export */   sentenceWindowNodeParserSchema: () => (/* binding */ sentenceWindowNodeParserSchema),\n/* harmony export */   splitNodesByType: () => (/* binding */ splitNodesByType),\n/* harmony export */   toolMetadataSchema: () => (/* binding */ toolMetadataSchema)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../decorator/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n\n\n\n\n\nfunction chunkSizeCheck(contentGetter, _context) {\n    return function(...args) {\n        const content = contentGetter.call(this, ...args);\n        const chunkSize = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.chunkSize;\n        const enableChunkSizeCheck = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)(\"ENABLE_CHUNK_SIZE_CHECK\") === \"true\";\n        if (enableChunkSizeCheck && chunkSize !== undefined && content.length > chunkSize) {\n            console.warn(`Node (${this.id_}) is larger than chunk size: ${content.length} > ${chunkSize}`);\n            {\n                console.warn(\"Will truncate the content if it is larger than chunk size\");\n                console.warn(\"If you want to disable this behavior:\");\n                console.warn(\"  1. Set Settings.chunkSize = undefined\");\n                console.warn(\"  2. Set Settings.chunkSize to a larger value\");\n                console.warn(\"  3. Change the way of splitting content into smaller chunks\");\n            }\n            return content.slice(0, chunkSize);\n        }\n        return content;\n    };\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _init_hash, _initProto, _initProto1;\nvar NodeRelationship = /*#__PURE__*/ function(NodeRelationship) {\n    NodeRelationship[\"SOURCE\"] = \"SOURCE\";\n    NodeRelationship[\"PREVIOUS\"] = \"PREVIOUS\";\n    NodeRelationship[\"NEXT\"] = \"NEXT\";\n    NodeRelationship[\"PARENT\"] = \"PARENT\";\n    NodeRelationship[\"CHILD\"] = \"CHILD\";\n    return NodeRelationship;\n}({});\nvar ObjectType = /*#__PURE__*/ function(ObjectType) {\n    ObjectType[\"TEXT\"] = \"TEXT\";\n    ObjectType[\"IMAGE\"] = \"IMAGE\";\n    ObjectType[\"INDEX\"] = \"INDEX\";\n    ObjectType[\"DOCUMENT\"] = \"DOCUMENT\";\n    ObjectType[\"IMAGE_DOCUMENT\"] = \"IMAGE_DOCUMENT\";\n    return ObjectType;\n}({});\nvar MetadataMode = /*#__PURE__*/ function(MetadataMode) {\n    MetadataMode[\"ALL\"] = \"ALL\";\n    MetadataMode[\"EMBED\"] = \"EMBED\";\n    MetadataMode[\"LLM\"] = \"LLM\";\n    MetadataMode[\"NONE\"] = \"NONE\";\n    return MetadataMode;\n}({});\n/**\n * Generic abstract class for retrievable nodes\n */ class BaseNode {\n    static{\n        ({ e: [_init_hash, _initProto] } = _apply_decs_2203_r(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.lazyInitHash,\n                1,\n                \"hash\"\n            ]\n        ], []));\n    }\n    #___private_hash_1;\n    get hash() {\n        return this.#___private_hash_1;\n    }\n    set hash(_v) {\n        this.#___private_hash_1 = _v;\n    }\n    constructor(init){\n        this.#___private_hash_1 = (_initProto(this), _init_hash(this, \"\"));\n        const { id_, metadata, excludedEmbedMetadataKeys, excludedLlmMetadataKeys, relationships, hash, embedding } = init || {};\n        this.id_ = id_ ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        this.metadata = metadata ?? {};\n        this.excludedEmbedMetadataKeys = excludedEmbedMetadataKeys ?? [];\n        this.excludedLlmMetadataKeys = excludedLlmMetadataKeys ?? [];\n        this.relationships = relationships ?? {};\n        this.embedding = embedding;\n    }\n    get sourceNode() {\n        const relationship = this.relationships[\"SOURCE\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Source object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get prevNode() {\n        const relationship = this.relationships[\"PREVIOUS\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Previous object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get nextNode() {\n        const relationship = this.relationships[\"NEXT\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Next object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get parentNode() {\n        const relationship = this.relationships[\"PARENT\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Parent object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get childNodes() {\n        const relationship = this.relationships[\"CHILD\"];\n        if (!Array.isArray(relationship)) {\n            throw new Error(\"Child object must be a an array of RelatedNodeInfo objects\");\n        }\n        return relationship;\n    }\n    getEmbedding() {\n        if (this.embedding === undefined) {\n            throw new Error(\"Embedding not set\");\n        }\n        return this.embedding;\n    }\n    asRelatedNodeInfo() {\n        return {\n            nodeId: this.id_,\n            metadata: this.metadata,\n            hash: this.hash\n        };\n    }\n    /**\n   * Called by built in JSON.stringify (see https://javascript.info/json)\n   * Properties are read-only as they are not deep-cloned (not necessary for stringification).\n   * @see toMutableJSON - use to return a mutable JSON instead\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        return {\n            ...this,\n            type: this.type,\n            // hash is an accessor property, so it's not included in the rest operator\n            hash: this.hash\n        };\n    }\n    clone() {\n        return jsonToNode(this.toMutableJSON());\n    }\n    /**\n   * Converts the object to a JSON representation.\n   * Properties can be safely modified as a deep clone of the properties are created.\n   * @return {Record<string, any>} - The JSON representation of the object.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toMutableJSON() {\n        return structuredClone(this.toJSON());\n    }\n}\n/**\n * TextNode is the default node type for text. Most common node type in LlamaIndex.TS\n */ class TextNode extends BaseNode {\n    static{\n        ({ e: [_initProto1] } = _apply_decs_2203_r(this, [\n            [\n                chunkSizeCheck,\n                2,\n                \"getContent\"\n            ]\n        ], []));\n    }\n    constructor(init = {}){\n        super(init), _initProto1(this);\n        const { text, textTemplate, startCharIdx, endCharIdx, metadataSeparator } = init;\n        this.text = text ?? \"\";\n        this.textTemplate = textTemplate ?? \"\";\n        if (startCharIdx) {\n            this.startCharIdx = startCharIdx;\n        }\n        if (endCharIdx) {\n            this.endCharIdx = endCharIdx;\n        }\n        this.metadataSeparator = metadataSeparator ?? \"\\n\";\n    }\n    /**\n   * Generate a hash of the text node.\n   * The ID is not part of the hash as it can change independent of content.\n   * @returns\n   */ generateHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        hashFunction.update(`type=${this.type}`);\n        hashFunction.update(`startCharIdx=${this.startCharIdx} endCharIdx=${this.endCharIdx}`);\n        hashFunction.update(this.getContent(\"ALL\"));\n        return hashFunction.digest();\n    }\n    get type() {\n        return \"TEXT\";\n    }\n    getContent(metadataMode = \"NONE\") {\n        const metadataStr = this.getMetadataStr(metadataMode).trim();\n        return `${metadataStr}\\n\\n${this.text}`.trim();\n    }\n    getMetadataStr(metadataMode) {\n        if (metadataMode === \"NONE\") {\n            return \"\";\n        }\n        const usableMetadataKeys = new Set(Object.keys(this.metadata).sort());\n        if (metadataMode === \"LLM\") {\n            for (const key of this.excludedLlmMetadataKeys){\n                usableMetadataKeys.delete(key);\n            }\n        } else if (metadataMode === \"EMBED\") {\n            for (const key of this.excludedEmbedMetadataKeys){\n                usableMetadataKeys.delete(key);\n            }\n        }\n        return [\n            ...usableMetadataKeys\n        ].map((key)=>`${key}: ${this.metadata[key]}`).join(this.metadataSeparator);\n    }\n    setContent(value) {\n        this.text = value;\n        this.hash = this.generateHash();\n    }\n    getNodeInfo() {\n        return {\n            start: this.startCharIdx,\n            end: this.endCharIdx\n        };\n    }\n    getText() {\n        return this.getContent(\"NONE\");\n    }\n}\nclass IndexNode extends TextNode {\n    constructor(init){\n        super(init);\n        const { indexId } = init || {};\n        this.indexId = indexId ?? \"\";\n    }\n    get type() {\n        return \"INDEX\";\n    }\n}\n/**\n * A document is just a special text node with a docId.\n */ class Document extends TextNode {\n    constructor(init){\n        super(init);\n    }\n    get type() {\n        return \"DOCUMENT\";\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonToNode(json, type) {\n    if (!json.type && !type) {\n        throw new Error(\"Node type not found\");\n    }\n    const nodeType = type || json.type;\n    switch(nodeType){\n        case \"TEXT\":\n            return new TextNode(json);\n        case \"INDEX\":\n            return new IndexNode(json);\n        case \"DOCUMENT\":\n            return new Document(json);\n        case \"IMAGE_DOCUMENT\":\n            return new ImageDocument(json);\n        default:\n            throw new Error(`Invalid node type: ${nodeType}`);\n    }\n}\nclass ImageNode extends TextNode {\n    constructor(init){\n        super(init);\n        const { image } = init;\n        this.image = image;\n    }\n    get type() {\n        return \"IMAGE\";\n    }\n    getUrl() {\n        // id_ stores the relative path, convert it to the URL of the file\n        const absPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.resolve(this.id_);\n        return new URL(`file://${absPath}`);\n    }\n    // Calculates the image part of the hash\n    generateImageHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        if (this.image instanceof Blob) {\n            // TODO: ideally we should use the blob's content to calculate the hash:\n            // hashFunction.update(new Uint8Array(await this.image.arrayBuffer()));\n            // as this is async, we're using the node's ID for the time being\n            hashFunction.update(this.id_);\n        } else if (this.image instanceof URL) {\n            hashFunction.update(this.image.toString());\n        } else if (typeof this.image === \"string\") {\n            hashFunction.update(this.image);\n        } else {\n            throw new Error(`Unknown image type: ${typeof this.image}. Can't calculate hash`);\n        }\n        return hashFunction.digest();\n    }\n    generateHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        // calculates hash based on hash of both components (image and text)\n        hashFunction.update(super.generateHash());\n        hashFunction.update(this.generateImageHash());\n        return hashFunction.digest();\n    }\n}\nclass ImageDocument extends ImageNode {\n    constructor(init){\n        super(init);\n    }\n    get type() {\n        return \"IMAGE_DOCUMENT\";\n    }\n}\nvar ModalityType = /*#__PURE__*/ function(ModalityType) {\n    ModalityType[\"TEXT\"] = \"TEXT\";\n    ModalityType[\"IMAGE\"] = \"IMAGE\";\n    return ModalityType;\n}({});\nfunction splitNodesByType(nodes) {\n    const result = {};\n    for (const node of nodes){\n        let type;\n        if (node.type === \"IMAGE\" || node.type === \"IMAGE_DOCUMENT\") {\n            type = \"IMAGE\";\n        } else if (node.type === \"TEXT\" || node.type === \"DOCUMENT\" || node.type === \"INDEX\") {\n            type = \"TEXT\";\n        } else {\n            throw new Error(`Unknown node type: ${node.type}`);\n        }\n        if (type in result) {\n            result[type]?.push(node);\n        } else {\n            result[type] = [\n                node\n            ];\n        }\n    }\n    return result;\n}\nfunction buildNodeFromSplits(textSplits, doc, refDoc = doc, idGenerator = ()=>(0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)()) {\n    const nodes = [];\n    const relationships = {\n        [\"SOURCE\"]: refDoc.asRelatedNodeInfo()\n    };\n    textSplits.forEach((textChunk, i)=>{\n        if (doc.type === \"IMAGE\" || doc.type === \"IMAGE_DOCUMENT\") {\n            const imageDoc = doc;\n            const imageNode = new ImageNode({\n                id_: idGenerator(i, imageDoc),\n                text: textChunk,\n                image: imageDoc.image,\n                embedding: imageDoc.embedding,\n                excludedEmbedMetadataKeys: [\n                    ...imageDoc.excludedEmbedMetadataKeys\n                ],\n                excludedLlmMetadataKeys: [\n                    ...imageDoc.excludedLlmMetadataKeys\n                ],\n                metadataSeparator: imageDoc.metadataSeparator,\n                textTemplate: imageDoc.textTemplate,\n                relationships: {\n                    ...relationships\n                }\n            });\n            nodes.push(imageNode);\n        } else if (doc.type === \"DOCUMENT\" || doc.type === \"TEXT\") {\n            const textDoc = doc;\n            const node = new TextNode({\n                id_: idGenerator(i, textDoc),\n                text: textChunk,\n                embedding: textDoc.embedding,\n                excludedEmbedMetadataKeys: [\n                    ...textDoc.excludedEmbedMetadataKeys\n                ],\n                excludedLlmMetadataKeys: [\n                    ...textDoc.excludedLlmMetadataKeys\n                ],\n                metadataSeparator: textDoc.metadataSeparator,\n                textTemplate: textDoc.textTemplate,\n                relationships: {\n                    ...relationships\n                }\n            });\n            nodes.push(node);\n        } else {\n            throw new Error(`Unknown document type: ${doc.type}`);\n        }\n    });\n    return nodes;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TransformComponent {\n    constructor(transformFn){\n        Object.defineProperties(transformFn, Object.getOwnPropertyDescriptors(this.constructor.prototype));\n        const transform = function transform(...args) {\n            return transformFn(...args);\n        };\n        Reflect.setPrototypeOf(transform, new.target.prototype);\n        transform.id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        return transform;\n    }\n}\n/**\n * A FileReader takes file paths and imports data into Document objects.\n */ class FileReader {\n    async loadData(filePath) {\n        let fileContent;\n        let filename;\n        // Check if filePath is a URL\n        if (filePath.startsWith(\"http://\") || filePath.startsWith(\"https://\")) {\n            // Handle URL\n            const response = await fetch(filePath);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch URL: ${filePath}, status: ${response.status}`);\n            }\n            const buffer = await response.arrayBuffer();\n            fileContent = new Uint8Array(buffer);\n            // Extract filename from URL\n            const url = new URL(filePath);\n            filename = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(url.pathname) || \"url_document\";\n        } else {\n            // Handle local file\n            fileContent = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(filePath);\n            filename = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(filePath);\n        }\n        const docs = await this.loadDataAsContent(fileContent, filename);\n        docs.forEach(FileReader.addMetaData(filePath));\n        return docs;\n    }\n    static addMetaData(filePath) {\n        return (doc, index)=>{\n            // generate id as loadDataAsContent is only responsible for the content\n            doc.id_ = `${filePath}_${index + 1}`;\n            doc.metadata[\"file_path\"] = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.resolve(filePath);\n            doc.metadata[\"file_name\"] = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(filePath);\n        };\n    }\n}\n\nclass EngineResponse {\n    constructor(chatResponse, stream, sourceNodes){\n        this.metadata = {};\n        this.message = chatResponse.message;\n        this.raw = chatResponse.raw;\n        this.sourceNodes = sourceNodes;\n        this.stream = stream;\n    }\n    static fromResponse(response, stream, sourceNodes) {\n        return new EngineResponse(EngineResponse.toChatResponse(response), stream, sourceNodes);\n    }\n    static toChatResponse(response, raw = null) {\n        return {\n            message: {\n                content: response,\n                role: \"assistant\"\n            },\n            raw\n        };\n    }\n    static fromChatResponse(chatResponse, sourceNodes) {\n        return new EngineResponse(chatResponse, false, sourceNodes);\n    }\n    static fromChatResponseChunk(chunk, sourceNodes) {\n        return new EngineResponse(EngineResponse.toChatResponse(chunk.delta, chunk.raw), true, sourceNodes);\n    }\n    /**\n   * @deprecated Use `message` instead.\n   */ get response() {\n        return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.extractText)(this.message.content);\n    }\n    get delta() {\n        if (!this.stream) {\n            console.warn(\"delta is only available for streaming responses. Consider using 'message' instead.\");\n        }\n        return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.extractText)(this.message.content);\n    }\n    toString() {\n        return this.response ?? \"\";\n    }\n}\n\nconst anyFunctionSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.function(zod__WEBPACK_IMPORTED_MODULE_4__.z.tuple([]).rest(zod__WEBPACK_IMPORTED_MODULE_4__.z.any()), zod__WEBPACK_IMPORTED_MODULE_4__.z.any());\nconst toolMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    description: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    parameters: zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.any())\n});\nconst baseToolSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    call: anyFunctionSchema.optional(),\n    metadata: toolMetadataSchema\n});\nconst baseToolWithCallSchema = baseToolSchema.extend({\n    call: zod__WEBPACK_IMPORTED_MODULE_4__.z.function()\n});\nconst sentenceSplitterSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    chunkSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The token chunk size for each chunk.\"\n    }).gt(0).optional().default(()=>_global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.chunkSize ?? 1024),\n    chunkOverlap: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The token overlap of each chunk when splitting.\"\n    }).gte(0).optional().default(200),\n    separator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Default separator for splitting into words\"\n    }).default(\" \"),\n    paragraphSeparator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Separator between paragraphs.\"\n    }).optional().default(\"\\n\\n\\n\"),\n    secondaryChunkingRegex: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Backup regex for splitting into sentences.\"\n    }).optional().default(\"[^,.;。？！]+[,.;。？！]?\")\n}).refine((data)=>data.chunkOverlap < data.chunkSize, \"Chunk overlap must be less than chunk size.\");\nconst sentenceWindowNodeParserSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    windowSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The number of sentences on each side of a sentence to capture.\"\n    }).gt(0).default(3),\n    windowMetadataKey: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"The metadata key to store the sentence window under.\"\n    }).default(\"window\"),\n    originalTextMetadataKey: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"The metadata key to store the original sentence in.\"\n    }).default(\"originalText\")\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvaHVnZ2luZ2ZhY2Uvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvc2NoZW1hL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZFO0FBQ2hCO0FBQ1A7QUFDRTtBQUNoQzs7QUFFeEI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJEQUFRO0FBQ2xDLHFDQUFxQyx1REFBTTtBQUMzQztBQUNBLGtDQUFrQyxTQUFTLCtCQUErQixnQkFBZ0IsSUFBSSxVQUFVO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFlLGlFQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCLGtDQUFDLFVBQVUsa0NBQUMsZ0JBQWdCLGtDQUFDLFNBQVMsa0NBQUM7QUFDakUsMkJBQTJCLGtDQUFDO0FBQzVCLGlCQUFpQixrQ0FBQztBQUNsQixVQUFVLGtDQUFDO0FBQ1gsZ0JBQWdCLGtDQUFDLFFBQVEsa0NBQUM7QUFDMUIsQ0FBQztBQUNELHVCQUF1QixrQ0FBQztBQUN4QjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsVUFBVSxrQ0FBQztBQUNYLENBQUM7QUFDRCwrQkFBK0Isa0NBQUM7QUFDaEMsZUFBZSxrQ0FBQztBQUNoQjtBQUNBLEtBQUssK0JBQStCLDJEQUFRO0FBQzVDLGtCQUFrQixrQ0FBQztBQUNuQjtBQUNBLEtBQUs7QUFDTCxlQUFlLGtDQUFDO0FBQ2hCO0FBQ0EsS0FBSztBQUNMLHdCQUF3QixrQ0FBQztBQUN6QjtBQUNBLEtBQUs7QUFDTCw0QkFBNEIsa0NBQUM7QUFDN0I7QUFDQSxLQUFLLDJCQUEyQixTQUFTO0FBQ3pDLENBQUM7QUFDRCx1Q0FBdUMsa0NBQUM7QUFDeEMsZ0JBQWdCLGtDQUFDO0FBQ2pCO0FBQ0EsS0FBSztBQUNMLHVCQUF1QixrQ0FBQztBQUN4QjtBQUNBLEtBQUs7QUFDTCw2QkFBNkIsa0NBQUM7QUFDOUI7QUFDQSxLQUFLO0FBQ0wsQ0FBQzs7QUFFZ1giLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvaHVnZ2luZ2ZhY2Uvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvc2NoZW1hL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RW52LCByYW5kb21VVUlELCBjcmVhdGVTSEEyNTYsIHBhdGgsIGZzIH0gZnJvbSAnQGxsYW1haW5kZXgvZW52JztcbmltcG9ydCB7IGxhenlJbml0SGFzaCB9IGZyb20gJy4uLy4uL2RlY29yYXRvci9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi4vLi4vZ2xvYmFsL2Rpc3QvaW5kZXguanMnO1xuaW1wb3J0IHsgZXh0cmFjdFRleHQgfSBmcm9tICcuLi8uLi91dGlscy9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG5mdW5jdGlvbiBjaHVua1NpemVDaGVjayhjb250ZW50R2V0dGVyLCBfY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjb250ZW50R2V0dGVyLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IFNldHRpbmdzLmNodW5rU2l6ZTtcbiAgICAgICAgY29uc3QgZW5hYmxlQ2h1bmtTaXplQ2hlY2sgPSBnZXRFbnYoXCJFTkFCTEVfQ0hVTktfU0laRV9DSEVDS1wiKSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIGlmIChlbmFibGVDaHVua1NpemVDaGVjayAmJiBjaHVua1NpemUgIT09IHVuZGVmaW5lZCAmJiBjb250ZW50Lmxlbmd0aCA+IGNodW5rU2l6ZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBOb2RlICgke3RoaXMuaWRffSkgaXMgbGFyZ2VyIHRoYW4gY2h1bmsgc2l6ZTogJHtjb250ZW50Lmxlbmd0aH0gPiAke2NodW5rU2l6ZX1gKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJXaWxsIHRydW5jYXRlIHRoZSBjb250ZW50IGlmIGl0IGlzIGxhcmdlciB0aGFuIGNodW5rIHNpemVcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiSWYgeW91IHdhbnQgdG8gZGlzYWJsZSB0aGlzIGJlaGF2aW9yOlwiKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCIgIDEuIFNldCBTZXR0aW5ncy5jaHVua1NpemUgPSB1bmRlZmluZWRcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiICAyLiBTZXQgU2V0dGluZ3MuY2h1bmtTaXplIHRvIGEgbGFyZ2VyIHZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIiAgMy4gQ2hhbmdlIHRoZSB3YXkgb2Ygc3BsaXR0aW5nIGNvbnRlbnQgaW50byBzbWFsbGVyIGNodW5rc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZW50LnNsaWNlKDAsIGNodW5rU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYXBwbHlEZWNzMjIwM1JGYWN0b3J5KCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZEluaXRpYWxpemVyTWV0aG9kKGluaXRpYWxpemVycywgZGVjb3JhdG9yRmluaXNoZWRSZWYpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFkZEluaXRpYWxpemVyKGluaXRpYWxpemVyKSB7XG4gICAgICAgICAgICBhc3NlcnROb3RGaW5pc2hlZChkZWNvcmF0b3JGaW5pc2hlZFJlZiwgXCJhZGRJbml0aWFsaXplclwiKTtcbiAgICAgICAgICAgIGFzc2VydENhbGxhYmxlKGluaXRpYWxpemVyLCBcIkFuIGluaXRpYWxpemVyXCIpO1xuICAgICAgICAgICAgaW5pdGlhbGl6ZXJzLnB1c2goaW5pdGlhbGl6ZXIpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZW1iZXJEZWMoZGVjLCBuYW1lLCBkZXNjLCBpbml0aWFsaXplcnMsIGtpbmQsIGlzU3RhdGljLCBpc1ByaXZhdGUsIG1ldGFkYXRhLCB2YWx1ZSkge1xuICAgICAgICB2YXIga2luZFN0cjtcbiAgICAgICAgc3dpdGNoKGtpbmQpe1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGtpbmRTdHIgPSBcImFjY2Vzc29yXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAga2luZFN0ciA9IFwibWV0aG9kXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAga2luZFN0ciA9IFwiZ2V0dGVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAga2luZFN0ciA9IFwic2V0dGVyXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGtpbmRTdHIgPSBcImZpZWxkXCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN0eCA9IHtcbiAgICAgICAgICAgIGtpbmQ6IGtpbmRTdHIsXG4gICAgICAgICAgICBuYW1lOiBpc1ByaXZhdGUgPyBcIiNcIiArIG5hbWUgOiBuYW1lLFxuICAgICAgICAgICAgc3RhdGljOiBpc1N0YXRpYyxcbiAgICAgICAgICAgIHByaXZhdGU6IGlzUHJpdmF0ZSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZGVjb3JhdG9yRmluaXNoZWRSZWYgPSB7XG4gICAgICAgICAgICB2OiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBjdHguYWRkSW5pdGlhbGl6ZXIgPSBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChpbml0aWFsaXplcnMsIGRlY29yYXRvckZpbmlzaGVkUmVmKTtcbiAgICAgICAgdmFyIGdldCwgc2V0O1xuICAgICAgICBpZiAoa2luZCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgICAgIGdldCA9IGRlc2MuZ2V0O1xuICAgICAgICAgICAgICAgIHNldCA9IGRlc2Muc2V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXQgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB2O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gMikge1xuICAgICAgICAgICAgZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGtpbmQgPT09IDEgfHwga2luZCA9PT0gMykge1xuICAgICAgICAgICAgICAgIGdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IDEgfHwga2luZCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHNldCA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzYy5zZXQuY2FsbCh0aGlzLCB2KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5hY2Nlc3MgPSBnZXQgJiYgc2V0ID8ge1xuICAgICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgICBzZXQ6IHNldFxuICAgICAgICB9IDogZ2V0ID8ge1xuICAgICAgICAgICAgZ2V0OiBnZXRcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIHNldDogc2V0XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjKHZhbHVlLCBjdHgpO1xuICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICBkZWNvcmF0b3JGaW5pc2hlZFJlZi52ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnROb3RGaW5pc2hlZChkZWNvcmF0b3JGaW5pc2hlZFJlZiwgZm5OYW1lKSB7XG4gICAgICAgIGlmIChkZWNvcmF0b3JGaW5pc2hlZFJlZi52KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdHRlbXB0ZWQgdG8gY2FsbCBcIiArIGZuTmFtZSArIFwiIGFmdGVyIGRlY29yYXRpb24gd2FzIGZpbmlzaGVkXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzc2VydENhbGxhYmxlKGZuLCBoaW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihoaW50ICsgXCIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkUmV0dXJuVmFsdWUoa2luZCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICAgIGlmIChraW5kID09PSAxKSB7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhY2Nlc3NvciBkZWNvcmF0b3JzIG11c3QgcmV0dXJuIGFuIG9iamVjdCB3aXRoIGdldCwgc2V0LCBvciBpbml0IHByb3BlcnRpZXMgb3Igdm9pZCAwXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlLmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Q2FsbGFibGUodmFsdWUuZ2V0LCBcImFjY2Vzc29yLmdldFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS5zZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFzc2VydENhbGxhYmxlKHZhbHVlLnNldCwgXCJhY2Nlc3Nvci5zZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUuaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Q2FsbGFibGUodmFsdWUuaW5pdCwgXCJhY2Nlc3Nvci5pbml0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIGhpbnQ7XG4gICAgICAgICAgICBpZiAoa2luZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGhpbnQgPSBcImZpZWxkXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtpbmQgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgaGludCA9IFwiY2xhc3NcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGludCA9IFwibWV0aG9kXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGhpbnQgKyBcIiBkZWNvcmF0b3JzIG11c3QgcmV0dXJuIGEgZnVuY3Rpb24gb3Igdm9pZCAwXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFwcGx5TWVtYmVyRGVjKHJldCwgYmFzZSwgZGVjSW5mbywgbmFtZSwga2luZCwgaXNTdGF0aWMsIGlzUHJpdmF0ZSwgaW5pdGlhbGl6ZXJzLCBtZXRhZGF0YSkge1xuICAgICAgICB2YXIgZGVjcyA9IGRlY0luZm9bMF07XG4gICAgICAgIHZhciBkZXNjLCBpbml0LCB2YWx1ZTtcbiAgICAgICAgaWYgKGlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgaWYgKGtpbmQgPT09IDAgfHwga2luZCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGRlc2MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZGVjSW5mb1szXSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBkZWNJbmZvWzRdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gMykge1xuICAgICAgICAgICAgICAgIGRlc2MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZGVjSW5mb1szXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtpbmQgPT09IDQpIHtcbiAgICAgICAgICAgICAgICBkZXNjID0ge1xuICAgICAgICAgICAgICAgICAgICBzZXQ6IGRlY0luZm9bM11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXNjID0ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGVjSW5mb1szXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2luZCAhPT0gMCkge1xuICAgICAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtpbmQgPT09IDEpIHtcbiAgICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgICAgIGdldDogZGVzYy5nZXQsXG4gICAgICAgICAgICAgICAgc2V0OiBkZXNjLnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAyKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlc2MudmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gMykge1xuICAgICAgICAgICAgdmFsdWUgPSBkZXNjLmdldDtcbiAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSA0KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlc2Muc2V0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdWYWx1ZSwgZ2V0LCBzZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgZGVjcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG1lbWJlckRlYyhkZWNzLCBuYW1lLCBkZXNjLCBpbml0aWFsaXplcnMsIGtpbmQsIGlzU3RhdGljLCBpc1ByaXZhdGUsIG1ldGFkYXRhLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkUmV0dXJuVmFsdWUoa2luZCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXQgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtpbmQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG5ld1ZhbHVlLmluaXQ7XG4gICAgICAgICAgICAgICAgICAgIGdldCA9IG5ld1ZhbHVlLmdldCB8fCB2YWx1ZS5nZXQ7XG4gICAgICAgICAgICAgICAgICAgIHNldCA9IG5ld1ZhbHVlLnNldCB8fCB2YWx1ZS5zZXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gZGVjcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgdmFyIGRlYyA9IGRlY3NbaV07XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBtZW1iZXJEZWMoZGVjLCBuYW1lLCBkZXNjLCBpbml0aWFsaXplcnMsIGtpbmQsIGlzU3RhdGljLCBpc1ByaXZhdGUsIG1ldGFkYXRhLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWRSZXR1cm5WYWx1ZShraW5kLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJbml0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5pdCA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtpbmQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luaXQgPSBuZXdWYWx1ZS5pbml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0ID0gbmV3VmFsdWUuZ2V0IHx8IHZhbHVlLmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCA9IG5ld1ZhbHVlLnNldCB8fCB2YWx1ZS5zZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luaXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXQgPSBuZXdJbml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5pdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXQucHVzaChuZXdJbml0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoa2luZCA9PT0gMCB8fCBraW5kID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBpbml0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbml0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3duSW5pdGlhbGl6ZXJzID0gaW5pdDtcbiAgICAgICAgICAgICAgICBpbml0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIGluaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaW5pdDtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IG93bkluaXRpYWxpemVycy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG93bkluaXRpYWxpemVyc1tpXS5jYWxsKGluc3RhbmNlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbEluaXRpYWxpemVyID0gaW5pdDtcbiAgICAgICAgICAgICAgICBpbml0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIGluaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSW5pdGlhbGl6ZXIuY2FsbChpbnN0YW5jZSwgaW5pdCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldC5wdXNoKGluaXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChraW5kICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAoa2luZCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGRlc2MuZ2V0ID0gdmFsdWUuZ2V0O1xuICAgICAgICAgICAgICAgIGRlc2Muc2V0ID0gdmFsdWUuc2V0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZGVzYy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAzKSB7XG4gICAgICAgICAgICAgICAgZGVzYy5nZXQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGRlc2Muc2V0ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNQcml2YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtpbmQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goZnVuY3Rpb24oaW5zdGFuY2UsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5nZXQuY2FsbChpbnN0YW5jZSwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChmdW5jdGlvbihpbnN0YW5jZSwgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNldC5jYWxsKGluc3RhbmNlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChmdW5jdGlvbihpbnN0YW5jZSwgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmNhbGwoaW5zdGFuY2UsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiYXNlLCBuYW1lLCBkZXNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseU1lbWJlckRlY3MoQ2xhc3MsIGRlY0luZm9zLCBtZXRhZGF0YSkge1xuICAgICAgICB2YXIgcmV0ID0gW107XG4gICAgICAgIHZhciBwcm90b0luaXRpYWxpemVycztcbiAgICAgICAgdmFyIHN0YXRpY0luaXRpYWxpemVycztcbiAgICAgICAgdmFyIGV4aXN0aW5nUHJvdG9Ob25GaWVsZHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciBleGlzdGluZ1N0YXRpY05vbkZpZWxkcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGRlY0luZm9zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBkZWNJbmZvID0gZGVjSW5mb3NbaV07XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGVjSW5mbykpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIGtpbmQgPSBkZWNJbmZvWzFdO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBkZWNJbmZvWzJdO1xuICAgICAgICAgICAgdmFyIGlzUHJpdmF0ZSA9IGRlY0luZm8ubGVuZ3RoID4gMztcbiAgICAgICAgICAgIHZhciBpc1N0YXRpYyA9IGtpbmQgPj0gNTtcbiAgICAgICAgICAgIHZhciBiYXNlO1xuICAgICAgICAgICAgdmFyIGluaXRpYWxpemVycztcbiAgICAgICAgICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICAgICAgICAgIGJhc2UgPSBDbGFzcztcbiAgICAgICAgICAgICAgICBraW5kID0ga2luZCAtIDU7XG4gICAgICAgICAgICAgICAgc3RhdGljSW5pdGlhbGl6ZXJzID0gc3RhdGljSW5pdGlhbGl6ZXJzIHx8IFtdO1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVycyA9IHN0YXRpY0luaXRpYWxpemVycztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmFzZSA9IENsYXNzLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICBwcm90b0luaXRpYWxpemVycyA9IHByb3RvSW5pdGlhbGl6ZXJzIHx8IFtdO1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVycyA9IHByb3RvSW5pdGlhbGl6ZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtpbmQgIT09IDAgJiYgIWlzUHJpdmF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ05vbkZpZWxkcyA9IGlzU3RhdGljID8gZXhpc3RpbmdTdGF0aWNOb25GaWVsZHMgOiBleGlzdGluZ1Byb3RvTm9uRmllbGRzO1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0tpbmQgPSBleGlzdGluZ05vbkZpZWxkcy5nZXQobmFtZSkgfHwgMDtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdLaW5kID09PSB0cnVlIHx8IGV4aXN0aW5nS2luZCA9PT0gMyAmJiBraW5kICE9PSA0IHx8IGV4aXN0aW5nS2luZCA9PT0gNCAmJiBraW5kICE9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBkZWNvcmF0ZSBhIHB1YmxpYyBtZXRob2QvYWNjZXNzb3IgdGhhdCBoYXMgdGhlIHNhbWUgbmFtZSBhcyBhIHByZXZpb3VzbHkgZGVjb3JhdGVkIHB1YmxpYyBtZXRob2QvYWNjZXNzb3IuIFRoaXMgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgdGhlIGRlY29yYXRvcnMgcGx1Z2luLiBQcm9wZXJ0eSBuYW1lIHdhczogXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFleGlzdGluZ0tpbmQgJiYga2luZCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdOb25GaWVsZHMuc2V0KG5hbWUsIGtpbmQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTm9uRmllbGRzLnNldChuYW1lLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcHBseU1lbWJlckRlYyhyZXQsIGJhc2UsIGRlY0luZm8sIG5hbWUsIGtpbmQsIGlzU3RhdGljLCBpc1ByaXZhdGUsIGluaXRpYWxpemVycywgbWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hJbml0aWFsaXplcnMocmV0LCBwcm90b0luaXRpYWxpemVycyk7XG4gICAgICAgIHB1c2hJbml0aWFsaXplcnMocmV0LCBzdGF0aWNJbml0aWFsaXplcnMpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwdXNoSW5pdGlhbGl6ZXJzKHJldCwgaW5pdGlhbGl6ZXJzKSB7XG4gICAgICAgIGlmIChpbml0aWFsaXplcnMpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVyc1tpXS5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXBwbHlDbGFzc0RlY3ModGFyZ2V0Q2xhc3MsIGNsYXNzRGVjcywgbWV0YWRhdGEpIHtcbiAgICAgICAgaWYgKGNsYXNzRGVjcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbGl6ZXJzID0gW107XG4gICAgICAgICAgICB2YXIgbmV3Q2xhc3MgPSB0YXJnZXRDbGFzcztcbiAgICAgICAgICAgIHZhciBuYW1lID0gdGFyZ2V0Q2xhc3MubmFtZTtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IGNsYXNzRGVjcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRvckZpbmlzaGVkUmVmID0ge1xuICAgICAgICAgICAgICAgICAgICB2OiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHROZXdDbGFzcyA9IGNsYXNzRGVjc1tpXShuZXdDbGFzcywge1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogXCJjbGFzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEluaXRpYWxpemVyOiBjcmVhdGVBZGRJbml0aWFsaXplck1ldGhvZChpbml0aWFsaXplcnMsIGRlY29yYXRvckZpbmlzaGVkUmVmKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdG9yRmluaXNoZWRSZWYudiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0TmV3Q2xhc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZFJldHVyblZhbHVlKDEwLCBuZXh0TmV3Q2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICBuZXdDbGFzcyA9IG5leHROZXdDbGFzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGRlZmluZU1ldGFkYXRhKG5ld0NsYXNzLCBtZXRhZGF0YSksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZXJzW2ldLmNhbGwobmV3Q2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShDbGFzcywgbWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGFzcywgU3ltYm9sLm1ldGFkYXRhIHx8IFN5bWJvbC5mb3IoXCJTeW1ib2wubWV0YWRhdGFcIiksIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbWV0YWRhdGFcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBhcHBseURlY3MyMjAzUih0YXJnZXRDbGFzcywgbWVtYmVyRGVjcywgY2xhc3NEZWNzLCBwYXJlbnRDbGFzcykge1xuICAgICAgICBpZiAocGFyZW50Q2xhc3MgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE1ldGFkYXRhID0gcGFyZW50Q2xhc3NbU3ltYm9sLm1ldGFkYXRhIHx8IFN5bWJvbC5mb3IoXCJTeW1ib2wubWV0YWRhdGFcIildO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZXRhZGF0YSA9IE9iamVjdC5jcmVhdGUocGFyZW50TWV0YWRhdGEgPT09IHZvaWQgMCA/IG51bGwgOiBwYXJlbnRNZXRhZGF0YSk7XG4gICAgICAgIHZhciBlID0gYXBwbHlNZW1iZXJEZWNzKHRhcmdldENsYXNzLCBtZW1iZXJEZWNzLCBtZXRhZGF0YSk7XG4gICAgICAgIGlmICghY2xhc3NEZWNzLmxlbmd0aCkgZGVmaW5lTWV0YWRhdGEodGFyZ2V0Q2xhc3MsIG1ldGFkYXRhKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgICBnZXQgYyAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcGx5Q2xhc3NEZWNzKHRhcmdldENsYXNzLCBjbGFzc0RlY3MsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuZnVuY3Rpb24gX2FwcGx5X2RlY3NfMjIwM19yKHRhcmdldENsYXNzLCBtZW1iZXJEZWNzLCBjbGFzc0RlY3MsIHBhcmVudENsYXNzKSB7XG4gICAgcmV0dXJuIChfYXBwbHlfZGVjc18yMjAzX3IgPSBhcHBseURlY3MyMjAzUkZhY3RvcnkoKSkodGFyZ2V0Q2xhc3MsIG1lbWJlckRlY3MsIGNsYXNzRGVjcywgcGFyZW50Q2xhc3MpO1xufVxudmFyIF9pbml0X2hhc2gsIF9pbml0UHJvdG8sIF9pbml0UHJvdG8xO1xudmFyIE5vZGVSZWxhdGlvbnNoaXAgPSAvKiNfX1BVUkVfXyovIGZ1bmN0aW9uKE5vZGVSZWxhdGlvbnNoaXApIHtcbiAgICBOb2RlUmVsYXRpb25zaGlwW1wiU09VUkNFXCJdID0gXCJTT1VSQ0VcIjtcbiAgICBOb2RlUmVsYXRpb25zaGlwW1wiUFJFVklPVVNcIl0gPSBcIlBSRVZJT1VTXCI7XG4gICAgTm9kZVJlbGF0aW9uc2hpcFtcIk5FWFRcIl0gPSBcIk5FWFRcIjtcbiAgICBOb2RlUmVsYXRpb25zaGlwW1wiUEFSRU5UXCJdID0gXCJQQVJFTlRcIjtcbiAgICBOb2RlUmVsYXRpb25zaGlwW1wiQ0hJTERcIl0gPSBcIkNISUxEXCI7XG4gICAgcmV0dXJuIE5vZGVSZWxhdGlvbnNoaXA7XG59KHt9KTtcbnZhciBPYmplY3RUeXBlID0gLyojX19QVVJFX18qLyBmdW5jdGlvbihPYmplY3RUeXBlKSB7XG4gICAgT2JqZWN0VHlwZVtcIlRFWFRcIl0gPSBcIlRFWFRcIjtcbiAgICBPYmplY3RUeXBlW1wiSU1BR0VcIl0gPSBcIklNQUdFXCI7XG4gICAgT2JqZWN0VHlwZVtcIklOREVYXCJdID0gXCJJTkRFWFwiO1xuICAgIE9iamVjdFR5cGVbXCJET0NVTUVOVFwiXSA9IFwiRE9DVU1FTlRcIjtcbiAgICBPYmplY3RUeXBlW1wiSU1BR0VfRE9DVU1FTlRcIl0gPSBcIklNQUdFX0RPQ1VNRU5UXCI7XG4gICAgcmV0dXJuIE9iamVjdFR5cGU7XG59KHt9KTtcbnZhciBNZXRhZGF0YU1vZGUgPSAvKiNfX1BVUkVfXyovIGZ1bmN0aW9uKE1ldGFkYXRhTW9kZSkge1xuICAgIE1ldGFkYXRhTW9kZVtcIkFMTFwiXSA9IFwiQUxMXCI7XG4gICAgTWV0YWRhdGFNb2RlW1wiRU1CRURcIl0gPSBcIkVNQkVEXCI7XG4gICAgTWV0YWRhdGFNb2RlW1wiTExNXCJdID0gXCJMTE1cIjtcbiAgICBNZXRhZGF0YU1vZGVbXCJOT05FXCJdID0gXCJOT05FXCI7XG4gICAgcmV0dXJuIE1ldGFkYXRhTW9kZTtcbn0oe30pO1xuLyoqXG4gKiBHZW5lcmljIGFic3RyYWN0IGNsYXNzIGZvciByZXRyaWV2YWJsZSBub2Rlc1xuICovIGNsYXNzIEJhc2VOb2RlIHtcbiAgICBzdGF0aWN7XG4gICAgICAgICh7IGU6IFtfaW5pdF9oYXNoLCBfaW5pdFByb3RvXSB9ID0gX2FwcGx5X2RlY3NfMjIwM19yKHRoaXMsIFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBsYXp5SW5pdEhhc2gsXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICBcImhhc2hcIlxuICAgICAgICAgICAgXVxuICAgICAgICBdLCBbXSkpO1xuICAgIH1cbiAgICAjX19fcHJpdmF0ZV9oYXNoXzE7XG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNfX19wcml2YXRlX2hhc2hfMTtcbiAgICB9XG4gICAgc2V0IGhhc2goX3YpIHtcbiAgICAgICAgdGhpcy4jX19fcHJpdmF0ZV9oYXNoXzEgPSBfdjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaW5pdCl7XG4gICAgICAgIHRoaXMuI19fX3ByaXZhdGVfaGFzaF8xID0gKF9pbml0UHJvdG8odGhpcyksIF9pbml0X2hhc2godGhpcywgXCJcIikpO1xuICAgICAgICBjb25zdCB7IGlkXywgbWV0YWRhdGEsIGV4Y2x1ZGVkRW1iZWRNZXRhZGF0YUtleXMsIGV4Y2x1ZGVkTGxtTWV0YWRhdGFLZXlzLCByZWxhdGlvbnNoaXBzLCBoYXNoLCBlbWJlZGRpbmcgfSA9IGluaXQgfHwge307XG4gICAgICAgIHRoaXMuaWRfID0gaWRfID8/IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhID8/IHt9O1xuICAgICAgICB0aGlzLmV4Y2x1ZGVkRW1iZWRNZXRhZGF0YUtleXMgPSBleGNsdWRlZEVtYmVkTWV0YWRhdGFLZXlzID8/IFtdO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVkTGxtTWV0YWRhdGFLZXlzID0gZXhjbHVkZWRMbG1NZXRhZGF0YUtleXMgPz8gW107XG4gICAgICAgIHRoaXMucmVsYXRpb25zaGlwcyA9IHJlbGF0aW9uc2hpcHMgPz8ge307XG4gICAgICAgIHRoaXMuZW1iZWRkaW5nID0gZW1iZWRkaW5nO1xuICAgIH1cbiAgICBnZXQgc291cmNlTm9kZSgpIHtcbiAgICAgICAgY29uc3QgcmVsYXRpb25zaGlwID0gdGhpcy5yZWxhdGlvbnNoaXBzW1wiU09VUkNFXCJdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWxhdGlvbnNoaXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb3VyY2Ugb2JqZWN0IG11c3QgYmUgYSBzaW5nbGUgUmVsYXRlZE5vZGVJbmZvIG9iamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVsYXRpb25zaGlwO1xuICAgIH1cbiAgICBnZXQgcHJldk5vZGUoKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aW9uc2hpcCA9IHRoaXMucmVsYXRpb25zaGlwc1tcIlBSRVZJT1VTXCJdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWxhdGlvbnNoaXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcmV2aW91cyBvYmplY3QgbXVzdCBiZSBhIHNpbmdsZSBSZWxhdGVkTm9kZUluZm8gb2JqZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWxhdGlvbnNoaXA7XG4gICAgfVxuICAgIGdldCBuZXh0Tm9kZSgpIHtcbiAgICAgICAgY29uc3QgcmVsYXRpb25zaGlwID0gdGhpcy5yZWxhdGlvbnNoaXBzW1wiTkVYVFwiXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVsYXRpb25zaGlwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmV4dCBvYmplY3QgbXVzdCBiZSBhIHNpbmdsZSBSZWxhdGVkTm9kZUluZm8gb2JqZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWxhdGlvbnNoaXA7XG4gICAgfVxuICAgIGdldCBwYXJlbnROb2RlKCkge1xuICAgICAgICBjb25zdCByZWxhdGlvbnNoaXAgPSB0aGlzLnJlbGF0aW9uc2hpcHNbXCJQQVJFTlRcIl07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlbGF0aW9uc2hpcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcmVudCBvYmplY3QgbXVzdCBiZSBhIHNpbmdsZSBSZWxhdGVkTm9kZUluZm8gb2JqZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWxhdGlvbnNoaXA7XG4gICAgfVxuICAgIGdldCBjaGlsZE5vZGVzKCkge1xuICAgICAgICBjb25zdCByZWxhdGlvbnNoaXAgPSB0aGlzLnJlbGF0aW9uc2hpcHNbXCJDSElMRFwiXTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlbGF0aW9uc2hpcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoaWxkIG9iamVjdCBtdXN0IGJlIGEgYW4gYXJyYXkgb2YgUmVsYXRlZE5vZGVJbmZvIG9iamVjdHNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbGF0aW9uc2hpcDtcbiAgICB9XG4gICAgZ2V0RW1iZWRkaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5lbWJlZGRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1iZWRkaW5nIG5vdCBzZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZW1iZWRkaW5nO1xuICAgIH1cbiAgICBhc1JlbGF0ZWROb2RlSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGVJZDogdGhpcy5pZF8sXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgICAgIGhhc2g6IHRoaXMuaGFzaFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICogQ2FsbGVkIGJ5IGJ1aWx0IGluIEpTT04uc3RyaW5naWZ5IChzZWUgaHR0cHM6Ly9qYXZhc2NyaXB0LmluZm8vanNvbilcbiAgICogUHJvcGVydGllcyBhcmUgcmVhZC1vbmx5IGFzIHRoZXkgYXJlIG5vdCBkZWVwLWNsb25lZCAobm90IG5lY2Vzc2FyeSBmb3Igc3RyaW5naWZpY2F0aW9uKS5cbiAgICogQHNlZSB0b011dGFibGVKU09OIC0gdXNlIHRvIHJldHVybiBhIG11dGFibGUgSlNPTiBpbnN0ZWFkXG4gICAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnRoaXMsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICAvLyBoYXNoIGlzIGFuIGFjY2Vzc29yIHByb3BlcnR5LCBzbyBpdCdzIG5vdCBpbmNsdWRlZCBpbiB0aGUgcmVzdCBvcGVyYXRvclxuICAgICAgICAgICAgaGFzaDogdGhpcy5oYXNoXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4ganNvblRvTm9kZSh0aGlzLnRvTXV0YWJsZUpTT04oKSk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgb2JqZWN0IHRvIGEgSlNPTiByZXByZXNlbnRhdGlvbi5cbiAgICogUHJvcGVydGllcyBjYW4gYmUgc2FmZWx5IG1vZGlmaWVkIGFzIGEgZGVlcCBjbG9uZSBvZiB0aGUgcHJvcGVydGllcyBhcmUgY3JlYXRlZC5cbiAgICogQHJldHVybiB7UmVjb3JkPHN0cmluZywgYW55Pn0gLSBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0LlxuICAgKi8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0b011dGFibGVKU09OKCkge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHRoaXMudG9KU09OKCkpO1xuICAgIH1cbn1cbi8qKlxuICogVGV4dE5vZGUgaXMgdGhlIGRlZmF1bHQgbm9kZSB0eXBlIGZvciB0ZXh0LiBNb3N0IGNvbW1vbiBub2RlIHR5cGUgaW4gTGxhbWFJbmRleC5UU1xuICovIGNsYXNzIFRleHROb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHN0YXRpY3tcbiAgICAgICAgKHsgZTogW19pbml0UHJvdG8xXSB9ID0gX2FwcGx5X2RlY3NfMjIwM19yKHRoaXMsIFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBjaHVua1NpemVDaGVjayxcbiAgICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICAgIFwiZ2V0Q29udGVudFwiXG4gICAgICAgICAgICBdXG4gICAgICAgIF0sIFtdKSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGluaXQgPSB7fSl7XG4gICAgICAgIHN1cGVyKGluaXQpLCBfaW5pdFByb3RvMSh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB0ZXh0LCB0ZXh0VGVtcGxhdGUsIHN0YXJ0Q2hhcklkeCwgZW5kQ2hhcklkeCwgbWV0YWRhdGFTZXBhcmF0b3IgfSA9IGluaXQ7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQgPz8gXCJcIjtcbiAgICAgICAgdGhpcy50ZXh0VGVtcGxhdGUgPSB0ZXh0VGVtcGxhdGUgPz8gXCJcIjtcbiAgICAgICAgaWYgKHN0YXJ0Q2hhcklkeCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydENoYXJJZHggPSBzdGFydENoYXJJZHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZENoYXJJZHgpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kQ2hhcklkeCA9IGVuZENoYXJJZHg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZXRhZGF0YVNlcGFyYXRvciA9IG1ldGFkYXRhU2VwYXJhdG9yID8/IFwiXFxuXCI7XG4gICAgfVxuICAgIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGhhc2ggb2YgdGhlIHRleHQgbm9kZS5cbiAgICogVGhlIElEIGlzIG5vdCBwYXJ0IG9mIHRoZSBoYXNoIGFzIGl0IGNhbiBjaGFuZ2UgaW5kZXBlbmRlbnQgb2YgY29udGVudC5cbiAgICogQHJldHVybnNcbiAgICovIGdlbmVyYXRlSGFzaCgpIHtcbiAgICAgICAgY29uc3QgaGFzaEZ1bmN0aW9uID0gY3JlYXRlU0hBMjU2KCk7XG4gICAgICAgIGhhc2hGdW5jdGlvbi51cGRhdGUoYHR5cGU9JHt0aGlzLnR5cGV9YCk7XG4gICAgICAgIGhhc2hGdW5jdGlvbi51cGRhdGUoYHN0YXJ0Q2hhcklkeD0ke3RoaXMuc3RhcnRDaGFySWR4fSBlbmRDaGFySWR4PSR7dGhpcy5lbmRDaGFySWR4fWApO1xuICAgICAgICBoYXNoRnVuY3Rpb24udXBkYXRlKHRoaXMuZ2V0Q29udGVudChcIkFMTFwiKSk7XG4gICAgICAgIHJldHVybiBoYXNoRnVuY3Rpb24uZGlnZXN0KCk7XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gXCJURVhUXCI7XG4gICAgfVxuICAgIGdldENvbnRlbnQobWV0YWRhdGFNb2RlID0gXCJOT05FXCIpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGFTdHIgPSB0aGlzLmdldE1ldGFkYXRhU3RyKG1ldGFkYXRhTW9kZSkudHJpbSgpO1xuICAgICAgICByZXR1cm4gYCR7bWV0YWRhdGFTdHJ9XFxuXFxuJHt0aGlzLnRleHR9YC50cmltKCk7XG4gICAgfVxuICAgIGdldE1ldGFkYXRhU3RyKG1ldGFkYXRhTW9kZSkge1xuICAgICAgICBpZiAobWV0YWRhdGFNb2RlID09PSBcIk5PTkVcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXNhYmxlTWV0YWRhdGFLZXlzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLm1ldGFkYXRhKS5zb3J0KCkpO1xuICAgICAgICBpZiAobWV0YWRhdGFNb2RlID09PSBcIkxMTVwiKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmV4Y2x1ZGVkTGxtTWV0YWRhdGFLZXlzKXtcbiAgICAgICAgICAgICAgICB1c2FibGVNZXRhZGF0YUtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGFNb2RlID09PSBcIkVNQkVEXCIpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5cyl7XG4gICAgICAgICAgICAgICAgdXNhYmxlTWV0YWRhdGFLZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi51c2FibGVNZXRhZGF0YUtleXNcbiAgICAgICAgXS5tYXAoKGtleSk9PmAke2tleX06ICR7dGhpcy5tZXRhZGF0YVtrZXldfWApLmpvaW4odGhpcy5tZXRhZGF0YVNlcGFyYXRvcik7XG4gICAgfVxuICAgIHNldENvbnRlbnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuaGFzaCA9IHRoaXMuZ2VuZXJhdGVIYXNoKCk7XG4gICAgfVxuICAgIGdldE5vZGVJbmZvKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc3RhcnRDaGFySWR4LFxuICAgICAgICAgICAgZW5kOiB0aGlzLmVuZENoYXJJZHhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udGVudChcIk5PTkVcIik7XG4gICAgfVxufVxuY2xhc3MgSW5kZXhOb2RlIGV4dGVuZHMgVGV4dE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGluaXQpe1xuICAgICAgICBzdXBlcihpbml0KTtcbiAgICAgICAgY29uc3QgeyBpbmRleElkIH0gPSBpbml0IHx8IHt9O1xuICAgICAgICB0aGlzLmluZGV4SWQgPSBpbmRleElkID8/IFwiXCI7XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gXCJJTkRFWFwiO1xuICAgIH1cbn1cbi8qKlxuICogQSBkb2N1bWVudCBpcyBqdXN0IGEgc3BlY2lhbCB0ZXh0IG5vZGUgd2l0aCBhIGRvY0lkLlxuICovIGNsYXNzIERvY3VtZW50IGV4dGVuZHMgVGV4dE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGluaXQpe1xuICAgICAgICBzdXBlcihpbml0KTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIkRPQ1VNRU5UXCI7XG4gICAgfVxufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGpzb25Ub05vZGUoanNvbiwgdHlwZSkge1xuICAgIGlmICghanNvbi50eXBlICYmICF0eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vZGUgdHlwZSBub3QgZm91bmRcIik7XG4gICAgfVxuICAgIGNvbnN0IG5vZGVUeXBlID0gdHlwZSB8fCBqc29uLnR5cGU7XG4gICAgc3dpdGNoKG5vZGVUeXBlKXtcbiAgICAgICAgY2FzZSBcIlRFWFRcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dE5vZGUoanNvbik7XG4gICAgICAgIGNhc2UgXCJJTkRFWFwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbmRleE5vZGUoanNvbik7XG4gICAgICAgIGNhc2UgXCJET0NVTUVOVFwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudChqc29uKTtcbiAgICAgICAgY2FzZSBcIklNQUdFX0RPQ1VNRU5UXCI6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEltYWdlRG9jdW1lbnQoanNvbik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbm9kZSB0eXBlOiAke25vZGVUeXBlfWApO1xuICAgIH1cbn1cbmNsYXNzIEltYWdlTm9kZSBleHRlbmRzIFRleHROb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0KXtcbiAgICAgICAgc3VwZXIoaW5pdCk7XG4gICAgICAgIGNvbnN0IHsgaW1hZ2UgfSA9IGluaXQ7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIklNQUdFXCI7XG4gICAgfVxuICAgIGdldFVybCgpIHtcbiAgICAgICAgLy8gaWRfIHN0b3JlcyB0aGUgcmVsYXRpdmUgcGF0aCwgY29udmVydCBpdCB0byB0aGUgVVJMIG9mIHRoZSBmaWxlXG4gICAgICAgIGNvbnN0IGFic1BhdGggPSBwYXRoLnJlc29sdmUodGhpcy5pZF8pO1xuICAgICAgICByZXR1cm4gbmV3IFVSTChgZmlsZTovLyR7YWJzUGF0aH1gKTtcbiAgICB9XG4gICAgLy8gQ2FsY3VsYXRlcyB0aGUgaW1hZ2UgcGFydCBvZiB0aGUgaGFzaFxuICAgIGdlbmVyYXRlSW1hZ2VIYXNoKCkge1xuICAgICAgICBjb25zdCBoYXNoRnVuY3Rpb24gPSBjcmVhdGVTSEEyNTYoKTtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2UgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBpZGVhbGx5IHdlIHNob3VsZCB1c2UgdGhlIGJsb2IncyBjb250ZW50IHRvIGNhbGN1bGF0ZSB0aGUgaGFzaDpcbiAgICAgICAgICAgIC8vIGhhc2hGdW5jdGlvbi51cGRhdGUobmV3IFVpbnQ4QXJyYXkoYXdhaXQgdGhpcy5pbWFnZS5hcnJheUJ1ZmZlcigpKSk7XG4gICAgICAgICAgICAvLyBhcyB0aGlzIGlzIGFzeW5jLCB3ZSdyZSB1c2luZyB0aGUgbm9kZSdzIElEIGZvciB0aGUgdGltZSBiZWluZ1xuICAgICAgICAgICAgaGFzaEZ1bmN0aW9uLnVwZGF0ZSh0aGlzLmlkXyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbWFnZSBpbnN0YW5jZW9mIFVSTCkge1xuICAgICAgICAgICAgaGFzaEZ1bmN0aW9uLnVwZGF0ZSh0aGlzLmltYWdlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmltYWdlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBoYXNoRnVuY3Rpb24udXBkYXRlKHRoaXMuaW1hZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGltYWdlIHR5cGU6ICR7dHlwZW9mIHRoaXMuaW1hZ2V9LiBDYW4ndCBjYWxjdWxhdGUgaGFzaGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoRnVuY3Rpb24uZGlnZXN0KCk7XG4gICAgfVxuICAgIGdlbmVyYXRlSGFzaCgpIHtcbiAgICAgICAgY29uc3QgaGFzaEZ1bmN0aW9uID0gY3JlYXRlU0hBMjU2KCk7XG4gICAgICAgIC8vIGNhbGN1bGF0ZXMgaGFzaCBiYXNlZCBvbiBoYXNoIG9mIGJvdGggY29tcG9uZW50cyAoaW1hZ2UgYW5kIHRleHQpXG4gICAgICAgIGhhc2hGdW5jdGlvbi51cGRhdGUoc3VwZXIuZ2VuZXJhdGVIYXNoKCkpO1xuICAgICAgICBoYXNoRnVuY3Rpb24udXBkYXRlKHRoaXMuZ2VuZXJhdGVJbWFnZUhhc2goKSk7XG4gICAgICAgIHJldHVybiBoYXNoRnVuY3Rpb24uZGlnZXN0KCk7XG4gICAgfVxufVxuY2xhc3MgSW1hZ2VEb2N1bWVudCBleHRlbmRzIEltYWdlTm9kZSB7XG4gICAgY29uc3RydWN0b3IoaW5pdCl7XG4gICAgICAgIHN1cGVyKGluaXQpO1xuICAgIH1cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSU1BR0VfRE9DVU1FTlRcIjtcbiAgICB9XG59XG52YXIgTW9kYWxpdHlUeXBlID0gLyojX19QVVJFX18qLyBmdW5jdGlvbihNb2RhbGl0eVR5cGUpIHtcbiAgICBNb2RhbGl0eVR5cGVbXCJURVhUXCJdID0gXCJURVhUXCI7XG4gICAgTW9kYWxpdHlUeXBlW1wiSU1BR0VcIl0gPSBcIklNQUdFXCI7XG4gICAgcmV0dXJuIE1vZGFsaXR5VHlwZTtcbn0oe30pO1xuZnVuY3Rpb24gc3BsaXROb2Rlc0J5VHlwZShub2Rlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcyl7XG4gICAgICAgIGxldCB0eXBlO1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSBcIklNQUdFXCIgfHwgbm9kZS50eXBlID09PSBcIklNQUdFX0RPQ1VNRU5UXCIpIHtcbiAgICAgICAgICAgIHR5cGUgPSBcIklNQUdFXCI7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcIlRFWFRcIiB8fCBub2RlLnR5cGUgPT09IFwiRE9DVU1FTlRcIiB8fCBub2RlLnR5cGUgPT09IFwiSU5ERVhcIikge1xuICAgICAgICAgICAgdHlwZSA9IFwiVEVYVFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIG5vZGUgdHlwZTogJHtub2RlLnR5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHRbdHlwZV0/LnB1c2gobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbdHlwZV0gPSBbXG4gICAgICAgICAgICAgICAgbm9kZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gYnVpbGROb2RlRnJvbVNwbGl0cyh0ZXh0U3BsaXRzLCBkb2MsIHJlZkRvYyA9IGRvYywgaWRHZW5lcmF0b3IgPSAoKT0+cmFuZG9tVVVJRCgpKSB7XG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICBjb25zdCByZWxhdGlvbnNoaXBzID0ge1xuICAgICAgICBbXCJTT1VSQ0VcIl06IHJlZkRvYy5hc1JlbGF0ZWROb2RlSW5mbygpXG4gICAgfTtcbiAgICB0ZXh0U3BsaXRzLmZvckVhY2goKHRleHRDaHVuaywgaSk9PntcbiAgICAgICAgaWYgKGRvYy50eXBlID09PSBcIklNQUdFXCIgfHwgZG9jLnR5cGUgPT09IFwiSU1BR0VfRE9DVU1FTlRcIikge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VEb2MgPSBkb2M7XG4gICAgICAgICAgICBjb25zdCBpbWFnZU5vZGUgPSBuZXcgSW1hZ2VOb2RlKHtcbiAgICAgICAgICAgICAgICBpZF86IGlkR2VuZXJhdG9yKGksIGltYWdlRG9jKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0Q2h1bmssXG4gICAgICAgICAgICAgICAgaW1hZ2U6IGltYWdlRG9jLmltYWdlLFxuICAgICAgICAgICAgICAgIGVtYmVkZGluZzogaW1hZ2VEb2MuZW1iZWRkaW5nLFxuICAgICAgICAgICAgICAgIGV4Y2x1ZGVkRW1iZWRNZXRhZGF0YUtleXM6IFtcbiAgICAgICAgICAgICAgICAgICAgLi4uaW1hZ2VEb2MuZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5c1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZXhjbHVkZWRMbG1NZXRhZGF0YUtleXM6IFtcbiAgICAgICAgICAgICAgICAgICAgLi4uaW1hZ2VEb2MuZXhjbHVkZWRMbG1NZXRhZGF0YUtleXNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhU2VwYXJhdG9yOiBpbWFnZURvYy5tZXRhZGF0YVNlcGFyYXRvcixcbiAgICAgICAgICAgICAgICB0ZXh0VGVtcGxhdGU6IGltYWdlRG9jLnRleHRUZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICByZWxhdGlvbnNoaXBzOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnJlbGF0aW9uc2hpcHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goaW1hZ2VOb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2MudHlwZSA9PT0gXCJET0NVTUVOVFwiIHx8IGRvYy50eXBlID09PSBcIlRFWFRcIikge1xuICAgICAgICAgICAgY29uc3QgdGV4dERvYyA9IGRvYztcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgVGV4dE5vZGUoe1xuICAgICAgICAgICAgICAgIGlkXzogaWRHZW5lcmF0b3IoaSwgdGV4dERvYyksXG4gICAgICAgICAgICAgICAgdGV4dDogdGV4dENodW5rLFxuICAgICAgICAgICAgICAgIGVtYmVkZGluZzogdGV4dERvYy5lbWJlZGRpbmcsXG4gICAgICAgICAgICAgICAgZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5czogW1xuICAgICAgICAgICAgICAgICAgICAuLi50ZXh0RG9jLmV4Y2x1ZGVkRW1iZWRNZXRhZGF0YUtleXNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGV4Y2x1ZGVkTGxtTWV0YWRhdGFLZXlzOiBbXG4gICAgICAgICAgICAgICAgICAgIC4uLnRleHREb2MuZXhjbHVkZWRMbG1NZXRhZGF0YUtleXNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhU2VwYXJhdG9yOiB0ZXh0RG9jLm1ldGFkYXRhU2VwYXJhdG9yLFxuICAgICAgICAgICAgICAgIHRleHRUZW1wbGF0ZTogdGV4dERvYy50ZXh0VGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgcmVsYXRpb25zaGlwczoge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWxhdGlvbnNoaXBzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGRvY3VtZW50IHR5cGU6ICR7ZG9jLnR5cGV9YCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbm9kZXM7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWRlY2xhcmF0aW9uLW1lcmdpbmdcbmNsYXNzIFRyYW5zZm9ybUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IodHJhbnNmb3JtRm4pe1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0cmFuc2Zvcm1GbiwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1GbiguLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0cmFuc2Zvcm0sIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgdHJhbnNmb3JtLmlkID0gcmFuZG9tVVVJRCgpO1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtO1xuICAgIH1cbn1cbi8qKlxuICogQSBGaWxlUmVhZGVyIHRha2VzIGZpbGUgcGF0aHMgYW5kIGltcG9ydHMgZGF0YSBpbnRvIERvY3VtZW50IG9iamVjdHMuXG4gKi8gY2xhc3MgRmlsZVJlYWRlciB7XG4gICAgYXN5bmMgbG9hZERhdGEoZmlsZVBhdGgpIHtcbiAgICAgICAgbGV0IGZpbGVDb250ZW50O1xuICAgICAgICBsZXQgZmlsZW5hbWU7XG4gICAgICAgIC8vIENoZWNrIGlmIGZpbGVQYXRoIGlzIGEgVVJMXG4gICAgICAgIGlmIChmaWxlUGF0aC5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCBmaWxlUGF0aC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBVUkxcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmlsZVBhdGgpO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIFVSTDogJHtmaWxlUGF0aH0sIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgICAgZmlsZUNvbnRlbnQgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgLy8gRXh0cmFjdCBmaWxlbmFtZSBmcm9tIFVSTFxuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChmaWxlUGF0aCk7XG4gICAgICAgICAgICBmaWxlbmFtZSA9IHBhdGguYmFzZW5hbWUodXJsLnBhdGhuYW1lKSB8fCBcInVybF9kb2N1bWVudFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGxvY2FsIGZpbGVcbiAgICAgICAgICAgIGZpbGVDb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb2NzID0gYXdhaXQgdGhpcy5sb2FkRGF0YUFzQ29udGVudChmaWxlQ29udGVudCwgZmlsZW5hbWUpO1xuICAgICAgICBkb2NzLmZvckVhY2goRmlsZVJlYWRlci5hZGRNZXRhRGF0YShmaWxlUGF0aCkpO1xuICAgICAgICByZXR1cm4gZG9jcztcbiAgICB9XG4gICAgc3RhdGljIGFkZE1ldGFEYXRhKGZpbGVQYXRoKSB7XG4gICAgICAgIHJldHVybiAoZG9jLCBpbmRleCk9PntcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIGlkIGFzIGxvYWREYXRhQXNDb250ZW50IGlzIG9ubHkgcmVzcG9uc2libGUgZm9yIHRoZSBjb250ZW50XG4gICAgICAgICAgICBkb2MuaWRfID0gYCR7ZmlsZVBhdGh9XyR7aW5kZXggKyAxfWA7XG4gICAgICAgICAgICBkb2MubWV0YWRhdGFbXCJmaWxlX3BhdGhcIl0gPSBwYXRoLnJlc29sdmUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgZG9jLm1ldGFkYXRhW1wiZmlsZV9uYW1lXCJdID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5jbGFzcyBFbmdpbmVSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IoY2hhdFJlc3BvbnNlLCBzdHJlYW0sIHNvdXJjZU5vZGVzKXtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBjaGF0UmVzcG9uc2UubWVzc2FnZTtcbiAgICAgICAgdGhpcy5yYXcgPSBjaGF0UmVzcG9uc2UucmF3O1xuICAgICAgICB0aGlzLnNvdXJjZU5vZGVzID0gc291cmNlTm9kZXM7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJlc3BvbnNlKHJlc3BvbnNlLCBzdHJlYW0sIHNvdXJjZU5vZGVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW5naW5lUmVzcG9uc2UoRW5naW5lUmVzcG9uc2UudG9DaGF0UmVzcG9uc2UocmVzcG9uc2UpLCBzdHJlYW0sIHNvdXJjZU5vZGVzKTtcbiAgICB9XG4gICAgc3RhdGljIHRvQ2hhdFJlc3BvbnNlKHJlc3BvbnNlLCByYXcgPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJhd1xuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUNoYXRSZXNwb25zZShjaGF0UmVzcG9uc2UsIHNvdXJjZU5vZGVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW5naW5lUmVzcG9uc2UoY2hhdFJlc3BvbnNlLCBmYWxzZSwgc291cmNlTm9kZXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUNoYXRSZXNwb25zZUNodW5rKGNodW5rLCBzb3VyY2VOb2Rlcykge1xuICAgICAgICByZXR1cm4gbmV3IEVuZ2luZVJlc3BvbnNlKEVuZ2luZVJlc3BvbnNlLnRvQ2hhdFJlc3BvbnNlKGNodW5rLmRlbHRhLCBjaHVuay5yYXcpLCB0cnVlLCBzb3VyY2VOb2Rlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYG1lc3NhZ2VgIGluc3RlYWQuXG4gICAqLyBnZXQgcmVzcG9uc2UoKSB7XG4gICAgICAgIHJldHVybiBleHRyYWN0VGV4dCh0aGlzLm1lc3NhZ2UuY29udGVudCk7XG4gICAgfVxuICAgIGdldCBkZWx0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0cmVhbSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiZGVsdGEgaXMgb25seSBhdmFpbGFibGUgZm9yIHN0cmVhbWluZyByZXNwb25zZXMuIENvbnNpZGVyIHVzaW5nICdtZXNzYWdlJyBpbnN0ZWFkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0cmFjdFRleHQodGhpcy5tZXNzYWdlLmNvbnRlbnQpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2UgPz8gXCJcIjtcbiAgICB9XG59XG5cbmNvbnN0IGFueUZ1bmN0aW9uU2NoZW1hID0gei5mdW5jdGlvbih6LnR1cGxlKFtdKS5yZXN0KHouYW55KCkpLCB6LmFueSgpKTtcbmNvbnN0IHRvb2xNZXRhZGF0YVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIHBhcmFtZXRlcnM6IHoucmVjb3JkKHouYW55KCkpXG59KTtcbmNvbnN0IGJhc2VUb29sU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIGNhbGw6IGFueUZ1bmN0aW9uU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE6IHRvb2xNZXRhZGF0YVNjaGVtYVxufSk7XG5jb25zdCBiYXNlVG9vbFdpdGhDYWxsU2NoZW1hID0gYmFzZVRvb2xTY2hlbWEuZXh0ZW5kKHtcbiAgICBjYWxsOiB6LmZ1bmN0aW9uKClcbn0pO1xuY29uc3Qgc2VudGVuY2VTcGxpdHRlclNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBjaHVua1NpemU6IHoubnVtYmVyKHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIHRva2VuIGNodW5rIHNpemUgZm9yIGVhY2ggY2h1bmsuXCJcbiAgICB9KS5ndCgwKS5vcHRpb25hbCgpLmRlZmF1bHQoKCk9PlNldHRpbmdzLmNodW5rU2l6ZSA/PyAxMDI0KSxcbiAgICBjaHVua092ZXJsYXA6IHoubnVtYmVyKHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIHRva2VuIG92ZXJsYXAgb2YgZWFjaCBjaHVuayB3aGVuIHNwbGl0dGluZy5cIlxuICAgIH0pLmd0ZSgwKS5vcHRpb25hbCgpLmRlZmF1bHQoMjAwKSxcbiAgICBzZXBhcmF0b3I6IHouc3RyaW5nKHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRGVmYXVsdCBzZXBhcmF0b3IgZm9yIHNwbGl0dGluZyBpbnRvIHdvcmRzXCJcbiAgICB9KS5kZWZhdWx0KFwiIFwiKSxcbiAgICBwYXJhZ3JhcGhTZXBhcmF0b3I6IHouc3RyaW5nKHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU2VwYXJhdG9yIGJldHdlZW4gcGFyYWdyYXBocy5cIlxuICAgIH0pLm9wdGlvbmFsKCkuZGVmYXVsdChcIlxcblxcblxcblwiKSxcbiAgICBzZWNvbmRhcnlDaHVua2luZ1JlZ2V4OiB6LnN0cmluZyh7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t1cCByZWdleCBmb3Igc3BsaXR0aW5nIGludG8gc2VudGVuY2VzLlwiXG4gICAgfSkub3B0aW9uYWwoKS5kZWZhdWx0KFwiW14sLjvjgILvvJ/vvIFdK1ssLjvjgILvvJ/vvIFdP1wiKVxufSkucmVmaW5lKChkYXRhKT0+ZGF0YS5jaHVua092ZXJsYXAgPCBkYXRhLmNodW5rU2l6ZSwgXCJDaHVuayBvdmVybGFwIG11c3QgYmUgbGVzcyB0aGFuIGNodW5rIHNpemUuXCIpO1xuY29uc3Qgc2VudGVuY2VXaW5kb3dOb2RlUGFyc2VyU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHdpbmRvd1NpemU6IHoubnVtYmVyKHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIG51bWJlciBvZiBzZW50ZW5jZXMgb24gZWFjaCBzaWRlIG9mIGEgc2VudGVuY2UgdG8gY2FwdHVyZS5cIlxuICAgIH0pLmd0KDApLmRlZmF1bHQoMyksXG4gICAgd2luZG93TWV0YWRhdGFLZXk6IHouc3RyaW5nKHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIG1ldGFkYXRhIGtleSB0byBzdG9yZSB0aGUgc2VudGVuY2Ugd2luZG93IHVuZGVyLlwiXG4gICAgfSkuZGVmYXVsdChcIndpbmRvd1wiKSxcbiAgICBvcmlnaW5hbFRleHRNZXRhZGF0YUtleTogei5zdHJpbmcoe1xuICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgbWV0YWRhdGEga2V5IHRvIHN0b3JlIHRoZSBvcmlnaW5hbCBzZW50ZW5jZSBpbi5cIlxuICAgIH0pLmRlZmF1bHQoXCJvcmlnaW5hbFRleHRcIilcbn0pO1xuXG5leHBvcnQgeyBCYXNlTm9kZSwgRG9jdW1lbnQsIEVuZ2luZVJlc3BvbnNlLCBGaWxlUmVhZGVyLCBJbWFnZURvY3VtZW50LCBJbWFnZU5vZGUsIEluZGV4Tm9kZSwgTWV0YWRhdGFNb2RlLCBNb2RhbGl0eVR5cGUsIE5vZGVSZWxhdGlvbnNoaXAsIE9iamVjdFR5cGUsIFRleHROb2RlLCBUcmFuc2Zvcm1Db21wb25lbnQsIGFueUZ1bmN0aW9uU2NoZW1hLCBiYXNlVG9vbFNjaGVtYSwgYmFzZVRvb2xXaXRoQ2FsbFNjaGVtYSwgYnVpbGROb2RlRnJvbVNwbGl0cywganNvblRvTm9kZSwgc2VudGVuY2VTcGxpdHRlclNjaGVtYSwgc2VudGVuY2VXaW5kb3dOb2RlUGFyc2VyU2NoZW1hLCBzcGxpdE5vZGVzQnlUeXBlLCB0b29sTWV0YWRhdGFTY2hlbWEgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/schema/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockLLM: () => (/* binding */ MockLLM),\n/* harmony export */   extractDataUrlComponents: () => (/* binding */ extractDataUrlComponents),\n/* harmony export */   extractImage: () => (/* binding */ extractImage),\n/* harmony export */   extractSingleText: () => (/* binding */ extractSingleText),\n/* harmony export */   extractText: () => (/* binding */ extractText),\n/* harmony export */   imageToDataUrl: () => (/* binding */ imageToDataUrl),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   messagesToHistory: () => (/* binding */ messagesToHistory),\n/* harmony export */   objectEntries: () => (/* binding */ objectEntries),\n/* harmony export */   prettifyError: () => (/* binding */ prettifyError),\n/* harmony export */   streamCallbacks: () => (/* binding */ streamCallbacks),\n/* harmony export */   streamConverter: () => (/* binding */ streamConverter),\n/* harmony export */   streamReducer: () => (/* binding */ streamReducer),\n/* harmony export */   stringifyJSONToMessageContent: () => (/* binding */ stringifyJSONToMessageContent),\n/* harmony export */   toToolDescriptions: () => (/* binding */ toToolDescriptions)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! magic-bytes.js */ \"(rsc)/./node_modules/magic-bytes.js/dist/index.js\");\n\n\n\n/**\n * Extracts just the text whether from\n *  a multi-modal message\n *  a single text message\n *  or a query\n *\n * @param message The message to extract text from.\n * @returns The extracted text\n */ function extractText(message) {\n    if (typeof message === \"object\" && \"query\" in message) {\n        return extractText(message.query);\n    }\n    if (typeof message !== \"string\" && !Array.isArray(message)) {\n        console.warn(\"extractText called with non-MessageContent message, this is likely a bug.\");\n        return `${message}`;\n    } else if (typeof message !== \"string\" && Array.isArray(message)) {\n        // message is of type MessageContentDetail[] - retrieve just the text parts and concatenate them\n        // so we can pass them to the context generator\n        return message.filter((c)=>c.type === \"text\").map((c)=>c.text).join(\"\\n\\n\");\n    } else {\n        return message;\n    }\n}\n/**\n * Extracts a single text from a multi-modal message content\n *\n * @param message The message to extract images from.\n * @returns The extracted images\n */ function extractSingleText(message) {\n    if (message.type === \"text\") {\n        return message.text;\n    }\n    return null;\n}\n/**\n * Extracts an image from a multi-modal message content\n *\n * @param message The message to extract images from.\n * @returns The extracted images\n */ function extractImage(message) {\n    if (message.type === \"image_url\") {\n        return new URL(message.image_url.url);\n    }\n    return null;\n}\nconst extractDataUrlComponents = (dataUrl)=>{\n    const parts = dataUrl.split(\";base64,\");\n    if (parts.length !== 2 || !parts[0].startsWith(\"data:\")) {\n        throw new Error(\"Invalid data URL\");\n    }\n    const mimeType = parts[0].slice(5);\n    const base64 = parts[1];\n    return {\n        mimeType,\n        base64\n    };\n};\nfunction messagesToHistory(messages) {\n    return messages.reduce((acc, message)=>{\n        acc += acc ? \"\\n\" : \"\";\n        if (message.role === \"user\") {\n            acc += `Human: ${message.content}`;\n        } else {\n            acc += `Assistant: ${message.content}`;\n        }\n        return acc;\n    }, \"\");\n}\nfunction toToolDescriptions(tools) {\n    const toolsObj = tools.reduce((acc, tool)=>{\n        acc[tool.name] = tool.description;\n        return acc;\n    }, {});\n    return JSON.stringify(toolsObj, null, 4);\n}\nasync function blobToDataUrl(input) {\n    const buffer = Buffer.from(await input.arrayBuffer());\n    const mimes = (0,magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__.filetypemime)(buffer);\n    if (mimes.length < 1) {\n        throw new Error(\"Unsupported image type\");\n    }\n    return \"data:\" + mimes[0] + \";base64,\" + buffer.toString(\"base64\");\n}\nasync function imageToDataUrl(input) {\n    // first ensure, that the input is a Blob\n    if (input instanceof URL && input.protocol === \"file:\" || typeof input === \"string\") {\n        // string or file URL\n        const dataBuffer = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(input instanceof URL ? input.pathname : input);\n        input = new Blob([\n            dataBuffer\n        ]);\n    } else if (!(input instanceof Blob)) {\n        if (input instanceof URL) {\n            throw new Error(`Unsupported URL with protocol: ${input.protocol}`);\n        } else if (input instanceof Uint8Array) {\n            input = new Blob([\n                input\n            ]); // convert Uint8Array to Blob\n        } else {\n            throw new Error(`Unsupported input type: ${typeof input}`);\n        }\n    }\n    return await blobToDataUrl(input);\n}\n\nclass BaseLLM {\n    async complete(params) {\n        const { prompt, stream, responseFormat } = params;\n        if (stream) {\n            const stream = await this.chat({\n                messages: [\n                    {\n                        content: prompt,\n                        role: \"user\"\n                    }\n                ],\n                stream: true,\n                ...responseFormat ? {\n                    responseFormat\n                } : {}\n            });\n            return streamConverter(stream, (chunk)=>{\n                return {\n                    raw: null,\n                    text: chunk.delta\n                };\n            });\n        }\n        const chatResponse = await this.chat({\n            messages: [\n                {\n                    content: prompt,\n                    role: \"user\"\n                }\n            ],\n            ...responseFormat ? {\n                responseFormat\n            } : {}\n        });\n        return {\n            text: extractText(chatResponse.message.content),\n            raw: chatResponse.raw\n        };\n    }\n}\nclass ToolCallLLM extends BaseLLM {\n}\n\n// TODO: move to a test package\nclass MockLLM extends ToolCallLLM {\n    constructor(options){\n        super(), this.supportToolCall = false;\n        this.options = {\n            timeBetweenToken: options?.timeBetweenToken ?? 20,\n            responseMessage: options?.responseMessage ?? \"This is a mock response\"\n        };\n        this.metadata = options?.metadata ?? {\n            model: \"MockLLM\",\n            temperature: 0.5,\n            topP: 0.5,\n            contextWindow: 1024,\n            tokenizer: undefined,\n            structuredOutput: false\n        };\n    }\n    async chat(params) {\n        const responseMessage = this.options.responseMessage;\n        const timeBetweenToken = this.options.timeBetweenToken;\n        if (params.stream) {\n            return async function*() {\n                for (const char of responseMessage){\n                    yield {\n                        delta: char,\n                        raw: {}\n                    };\n                    await new Promise((resolve)=>setTimeout(resolve, timeBetweenToken));\n                }\n            }();\n        }\n        return {\n            message: {\n                content: responseMessage,\n                role: \"assistant\"\n            },\n            raw: {}\n        };\n    }\n    async complete(params) {\n        const responseMessage = this.options.responseMessage;\n        const timeBetweenToken = this.options.timeBetweenToken;\n        if (params.stream) {\n            return async function*() {\n                for (const char of responseMessage){\n                    yield {\n                        delta: char,\n                        text: char,\n                        raw: {}\n                    };\n                    await new Promise((resolve)=>setTimeout(resolve, timeBetweenToken));\n                }\n            }();\n        }\n        return {\n            text: responseMessage,\n            raw: {}\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n/**\n * Type safe version of `Object.entries`\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction objectEntries(obj) {\n    return Object.entries(obj);\n}\n\nconst isPromise = (obj)=>{\n    return obj != null && typeof obj === \"object\" && \"then\" in obj;\n};\nconst isAsyncIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.asyncIterator in obj;\n};\nconst isIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.iterator in obj;\n};\nasync function* streamConverter(stream, converter) {\n    for await (const data of stream){\n        const newData = converter(data);\n        if (newData === null) {\n            return;\n        }\n        yield newData;\n    }\n}\nasync function* streamCallbacks(stream, callbacks) {\n    let value;\n    for await (value of stream){\n        yield value;\n    }\n    if (callbacks.finished) {\n        callbacks.finished(value);\n    }\n}\nasync function* streamReducer(params) {\n    let value = params.initialValue;\n    for await (const data of params.stream){\n        value = params.reducer(value, data);\n        yield data;\n    }\n    if (params.finished) {\n        params.finished(value);\n    }\n}\n/**\n * Prettify an error for AI to read\n */ function prettifyError(error) {\n    if (error instanceof Error) {\n        return `Error(${error.name}): ${error.message}`;\n    } else {\n        return `${error}`;\n    }\n}\nfunction stringifyJSONToMessageContent(value) {\n    return JSON.stringify(value, null, 2).replace(/\"([^\"]*)\"/g, \"$1\");\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/huggingface/node_modules/@llamaindex/core/utils/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/csv/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/csv/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSVReader: () => (/* binding */ CSVReader)\n/* harmony export */ });\n/* harmony import */ var csv_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! csv-parse */ \"(rsc)/./node_modules/csv-parse/lib/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n\n/**\n * CSV parser\n */ class CSVReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.FileReader {\n    /**\n   * Constructs a new instance of the class.\n   * @param concatRows - Whether to concatenate all rows into one document.If set to False, a Document will be created for each row. `True` by default.\n   * @param colJoiner - Separator to use for joining cols per row. Set to \", \" by default.\n   * @param rowJoiner - Separator to use for joining each row.Only used when `concat_rows=True`.Set to \"\\n\" by default.\n   */ constructor(concatRows = true, colJoiner = \", \", rowJoiner = \"\\n\", config){\n        super();\n        this.concatRows = concatRows;\n        this.colJoiner = colJoiner;\n        this.rowJoiner = rowJoiner;\n        this.config = config ?? {};\n    }\n    /**\n   * Loads data from csv files\n   * @param fileContent - The content of the file.\n   * @returns An array of Documents.\n   */ async loadDataAsContent(fileContent) {\n        const decoder = new TextDecoder(\"utf-8\");\n        const fileContentString = decoder.decode(fileContent);\n        const parser = CSVReader.parse(fileContentString, this.config);\n        const textList = [];\n        for await (const record of parser){\n            textList.push(record.map((v)=>`${v}`).join(this.colJoiner));\n        }\n        if (this.concatRows) {\n            return [\n                new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.Document({\n                    text: textList.join(this.rowJoiner)\n                })\n            ];\n        } else {\n            return textList.map((text)=>new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.Document({\n                    text\n                }));\n        }\n    }\n}\n\nCSVReader.parse = csv_parse__WEBPACK_IMPORTED_MODULE_0__.parse;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9jc3YvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0M7QUFDNkI7O0FBRS9EO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkRBQVE7QUFDNUI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxVQUFVO0FBQ1YsNENBQTRDLDZEQUFRO0FBQ3BEO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsNENBQUs7O0FBRUYiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9jc3YvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSB9IGZyb20gJ2Nzdi1wYXJzZSc7XG5pbXBvcnQgeyBGaWxlUmVhZGVyLCBEb2N1bWVudCB9IGZyb20gJ0BsbGFtYWluZGV4L2NvcmUvc2NoZW1hJztcblxuLyoqXG4gKiBDU1YgcGFyc2VyXG4gKi8gY2xhc3MgQ1NWUmVhZGVyIGV4dGVuZHMgRmlsZVJlYWRlciB7XG4gICAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzLlxuICAgKiBAcGFyYW0gY29uY2F0Um93cyAtIFdoZXRoZXIgdG8gY29uY2F0ZW5hdGUgYWxsIHJvd3MgaW50byBvbmUgZG9jdW1lbnQuSWYgc2V0IHRvIEZhbHNlLCBhIERvY3VtZW50IHdpbGwgYmUgY3JlYXRlZCBmb3IgZWFjaCByb3cuIGBUcnVlYCBieSBkZWZhdWx0LlxuICAgKiBAcGFyYW0gY29sSm9pbmVyIC0gU2VwYXJhdG9yIHRvIHVzZSBmb3Igam9pbmluZyBjb2xzIHBlciByb3cuIFNldCB0byBcIiwgXCIgYnkgZGVmYXVsdC5cbiAgICogQHBhcmFtIHJvd0pvaW5lciAtIFNlcGFyYXRvciB0byB1c2UgZm9yIGpvaW5pbmcgZWFjaCByb3cuT25seSB1c2VkIHdoZW4gYGNvbmNhdF9yb3dzPVRydWVgLlNldCB0byBcIlxcblwiIGJ5IGRlZmF1bHQuXG4gICAqLyBjb25zdHJ1Y3Rvcihjb25jYXRSb3dzID0gdHJ1ZSwgY29sSm9pbmVyID0gXCIsIFwiLCByb3dKb2luZXIgPSBcIlxcblwiLCBjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbmNhdFJvd3MgPSBjb25jYXRSb3dzO1xuICAgICAgICB0aGlzLmNvbEpvaW5lciA9IGNvbEpvaW5lcjtcbiAgICAgICAgdGhpcy5yb3dKb2luZXIgPSByb3dKb2luZXI7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnID8/IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICogTG9hZHMgZGF0YSBmcm9tIGNzdiBmaWxlc1xuICAgKiBAcGFyYW0gZmlsZUNvbnRlbnQgLSBUaGUgY29udGVudCBvZiB0aGUgZmlsZS5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgRG9jdW1lbnRzLlxuICAgKi8gYXN5bmMgbG9hZERhdGFBc0NvbnRlbnQoZmlsZUNvbnRlbnQpIHtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpO1xuICAgICAgICBjb25zdCBmaWxlQ29udGVudFN0cmluZyA9IGRlY29kZXIuZGVjb2RlKGZpbGVDb250ZW50KTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gQ1NWUmVhZGVyLnBhcnNlKGZpbGVDb250ZW50U3RyaW5nLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgIGNvbnN0IHRleHRMaXN0ID0gW107XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgcmVjb3JkIG9mIHBhcnNlcil7XG4gICAgICAgICAgICB0ZXh0TGlzdC5wdXNoKHJlY29yZC5tYXAoKHYpPT5gJHt2fWApLmpvaW4odGhpcy5jb2xKb2luZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25jYXRSb3dzKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5ldyBEb2N1bWVudCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRMaXN0LmpvaW4odGhpcy5yb3dKb2luZXIpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dExpc3QubWFwKCh0ZXh0KT0+bmV3IERvY3VtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQ1NWUmVhZGVyLnBhcnNlID0gcGFyc2U7XG5cbmV4cG9ydCB7IENTVlJlYWRlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/csv/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/directory/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/directory/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FILE_EXT_TO_READER: () => (/* binding */ FILE_EXT_TO_READER),\n/* harmony export */   SimpleDirectoryReader: () => (/* binding */ SimpleDirectoryReader)\n/* harmony export */ });\n/* harmony import */ var _csv_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../csv/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/csv/dist/index.js\");\n/* harmony import */ var _docx_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../docx/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/docx/dist/index.js\");\n/* harmony import */ var _html_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../html/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/html/dist/index.js\");\n/* harmony import */ var _image_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../image/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/image/dist/index.js\");\n/* harmony import */ var _markdown_dist_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../markdown/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/markdown/dist/index.js\");\n/* harmony import */ var _pdf_dist_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../pdf/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/pdf/dist/index.js\");\n/* harmony import */ var _text_dist_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../text/dist/index.js */ \"(rsc)/./node_modules/@llamaindex/readers/text/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n\n\n\n\n\n\n\n\n\n/*\nHow it works:\n`this.#head` is an instance of `Node` which keeps track of its current value and nests another instance of `Node` that keeps the value that comes after it. When a value is provided to `.enqueue()`, the code needs to iterate through `this.#head`, going deeper and deeper to find the last value. However, iterating through every single item is slow. This problem is solved by saving a reference to the last value as `this.#tail` so that it can reference it to add a new value.\n*/ var _computedKey;\nclass Node {\n    constructor(value){\n        this.value = value;\n    }\n}\n_computedKey = Symbol.iterator;\nclass Queue {\n    #head;\n    #tail;\n    #size;\n    constructor(){\n        this.clear();\n    }\n    enqueue(value) {\n        const node = new Node(value);\n        if (this.#head) {\n            this.#tail.next = node;\n            this.#tail = node;\n        } else {\n            this.#head = node;\n            this.#tail = node;\n        }\n        this.#size++;\n    }\n    dequeue() {\n        const current = this.#head;\n        if (!current) {\n            return;\n        }\n        this.#head = this.#head.next;\n        this.#size--;\n        return current.value;\n    }\n    peek() {\n        if (!this.#head) {\n            return;\n        }\n        return this.#head.value;\n    // TODO: Node.js 18.\n    // return this.#head?.value;\n    }\n    clear() {\n        this.#head = undefined;\n        this.#tail = undefined;\n        this.#size = 0;\n    }\n    get size() {\n        return this.#size;\n    }\n    *[_computedKey]() {\n        let current = this.#head;\n        while(current){\n            yield current.value;\n            current = current.next;\n        }\n    }\n}\n\nfunction pLimit(concurrency) {\n    validateConcurrency(concurrency);\n    const queue = new Queue();\n    let activeCount = 0;\n    const resumeNext = ()=>{\n        if (activeCount < concurrency && queue.size > 0) {\n            queue.dequeue()();\n            // Since `pendingCount` has been decreased by one, increase `activeCount` by one.\n            activeCount++;\n        }\n    };\n    const next = ()=>{\n        activeCount--;\n        resumeNext();\n    };\n    const run = async (function_, resolve, arguments_)=>{\n        const result = (async ()=>function_(...arguments_))();\n        resolve(result);\n        try {\n            await result;\n        } catch  {}\n        next();\n    };\n    const enqueue = (function_, resolve, arguments_)=>{\n        // Queue `internalResolve` instead of the `run` function\n        // to preserve asynchronous context.\n        new Promise((internalResolve)=>{\n            queue.enqueue(internalResolve);\n        }).then(run.bind(undefined, function_, resolve, arguments_));\n        (async ()=>{\n            // This function needs to wait until the next microtask before comparing\n            // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n            // after the `internalResolve` function is dequeued and called. The comparison in the if-statement\n            // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n            await Promise.resolve();\n            if (activeCount < concurrency) {\n                resumeNext();\n            }\n        })();\n    };\n    const generator = (function_, ...arguments_)=>new Promise((resolve)=>{\n            enqueue(function_, resolve, arguments_);\n        });\n    Object.defineProperties(generator, {\n        activeCount: {\n            get: ()=>activeCount\n        },\n        pendingCount: {\n            get: ()=>queue.size\n        },\n        clearQueue: {\n            value () {\n                queue.clear();\n            }\n        },\n        concurrency: {\n            get: ()=>concurrency,\n            set (newConcurrency) {\n                validateConcurrency(newConcurrency);\n                concurrency = newConcurrency;\n                queueMicrotask(()=>{\n                    // eslint-disable-next-line no-unmodified-loop-condition\n                    while(activeCount < concurrency && queue.size > 0){\n                        resumeNext();\n                    }\n                });\n            }\n        }\n    });\n    return generator;\n}\nfunction validateConcurrency(concurrency) {\n    if (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n        throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n    }\n}\n\n/**\n * Recursively traverses a directory and yields all the paths to the files in it.\n * @param dirPath The path to the directory to traverse.\n */ async function* walk(dirPath) {\n    const entries = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_7__.fs.readdir(dirPath);\n    for (const entry of entries){\n        const fullPath = `${dirPath}/${entry}`;\n        const stats = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_7__.fs.stat(fullPath);\n        if (stats.isDirectory()) {\n            yield* walk(fullPath);\n        } else {\n            yield fullPath;\n        }\n    }\n}\n\nclass AbstractSimpleDirectoryReader {\n    constructor(observer){\n        this.observer = observer;\n    }\n    async loadData(params) {\n        if (typeof params === \"string\") {\n            params = {\n                directoryPath: params\n            };\n        }\n        const { directoryPath, defaultReader = new _text_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.TextFileReader(), fileExtToReader, numWorkers = 1, overrideReader } = params;\n        if (numWorkers < 1 || numWorkers > 9) {\n            throw new Error(\"The number of workers must be between 1 - 9.\");\n        }\n        // Observer can decide to skip the directory\n        if (!this.doObserverCheck(\"directory\", directoryPath, 0)) {\n            return [];\n        }\n        // Crates a queue of file paths each worker accesses individually\n        const filePathQueue = [];\n        for await (const filePath of walk(directoryPath)){\n            filePathQueue.push(filePath);\n        }\n        const processFileParams = {\n            defaultReader,\n            fileExtToReader,\n            overrideReader\n        };\n        // Uses pLimit to control number of parallel requests\n        const limit = pLimit(numWorkers);\n        const workerPromises = filePathQueue.map((filePath)=>limit(()=>this.processFile(filePath, processFileParams)));\n        const results = await Promise.all(workerPromises);\n        // After successful import of all files, directory completion\n        // is only a notification for observer, cannot be cancelled.\n        this.doObserverCheck(\"directory\", directoryPath, 1);\n        return results.flat();\n    }\n    async processFile(filePath, params) {\n        const docs = [];\n        try {\n            const fileExt = _llamaindex_env__WEBPACK_IMPORTED_MODULE_7__.path.extname(filePath).slice(1).toLowerCase();\n            // Observer can decide to skip each file\n            if (!this.doObserverCheck(\"file\", filePath, 0)) {\n                // Skip this file\n                return [];\n            }\n            let reader;\n            if (params.overrideReader) {\n                reader = params.overrideReader;\n            } else if (params.fileExtToReader && fileExt in params.fileExtToReader) {\n                reader = params.fileExtToReader[fileExt];\n            } else if (params.defaultReader != null) {\n                reader = params.defaultReader;\n            } else {\n                const msg = `No reader for file extension of ${filePath}`;\n                console.warn(msg);\n                // In an error condition, observer's false cancels the whole process.\n                if (!this.doObserverCheck(\"file\", filePath, 2, msg)) {\n                    return [];\n                }\n                return [];\n            }\n            const fileDocs = await reader.loadData(filePath);\n            // Observer can still cancel addition of the resulting docs from this file\n            if (this.doObserverCheck(\"file\", filePath, 1)) {\n                docs.push(...fileDocs);\n            }\n        } catch (e) {\n            const msg = `Error reading file ${filePath}: ${e}`;\n            console.error(msg);\n            // In an error condition, observer's false cancels the whole process.\n            if (!this.doObserverCheck(\"file\", filePath, 2, msg)) {\n                return [];\n            }\n        }\n        return docs;\n    }\n    doObserverCheck(category, name, status, message) {\n        if (this.observer) {\n            return this.observer(category, name, status, message);\n        }\n        return true;\n    }\n}\n\nconst FILE_EXT_TO_READER = {\n    txt: new _text_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.TextFileReader(),\n    pdf: new _pdf_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.PDFReader(),\n    csv: new _csv_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.CSVReader(),\n    md: new _markdown_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MarkdownReader(),\n    docx: new _docx_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DocxReader(),\n    htm: new _html_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.HTMLReader(),\n    html: new _html_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.HTMLReader(),\n    jpg: new _image_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.ImageReader(),\n    jpeg: new _image_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.ImageReader(),\n    png: new _image_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.ImageReader(),\n    gif: new _image_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.ImageReader()\n};\n/**\n * Read all the documents in a directory.\n * By default, supports the list of file types\n * in the FILE_EXT_TO_READER map.\n */ class SimpleDirectoryReader extends AbstractSimpleDirectoryReader {\n    async loadData(params) {\n        if (typeof params === \"string\") {\n            params = {\n                directoryPath: params\n            };\n        }\n        params.fileExtToReader = params.fileExtToReader ?? FILE_EXT_TO_READER;\n        return super.loadData(params);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/directory/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/docx/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/docx/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocxReader: () => (/* binding */ DocxReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mammoth */ \"(rsc)/./node_modules/mammoth/lib/index.js\");\n\n\n\nclass DocxReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    /** DocxParser */ async loadDataAsContent(fileContent) {\n        // Note: await mammoth.extractRawText({ arrayBuffer: fileContent });  is not working\n        // So we need to convert to Buffer first\n        const buffer = Buffer.from(fileContent);\n        const { value } = await mammoth__WEBPACK_IMPORTED_MODULE_1__.extractRawText({\n            buffer\n        });\n        return [\n            new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                text: value\n            })\n        ];\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9kb2N4L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStEO0FBQ2pDOztBQUU5Qix5QkFBeUIsK0RBQVU7QUFDbkM7QUFDQSxnREFBZ0QsMEJBQTBCLElBQUk7QUFDOUU7QUFDQTtBQUNBLGdCQUFnQixRQUFRLFFBQVEsbURBQXNCO0FBQ3REO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ0JBQWdCLDZEQUFRO0FBQ3hCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFc0IiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9kb2N4L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVJlYWRlciwgRG9jdW1lbnQgfSBmcm9tICdAbGxhbWFpbmRleC9jb3JlL3NjaGVtYSc7XG5pbXBvcnQgbWFtbW90aCBmcm9tICdtYW1tb3RoJztcblxuY2xhc3MgRG9jeFJlYWRlciBleHRlbmRzIEZpbGVSZWFkZXIge1xuICAgIC8qKiBEb2N4UGFyc2VyICovIGFzeW5jIGxvYWREYXRhQXNDb250ZW50KGZpbGVDb250ZW50KSB7XG4gICAgICAgIC8vIE5vdGU6IGF3YWl0IG1hbW1vdGguZXh0cmFjdFJhd1RleHQoeyBhcnJheUJ1ZmZlcjogZmlsZUNvbnRlbnQgfSk7ICBpcyBub3Qgd29ya2luZ1xuICAgICAgICAvLyBTbyB3ZSBuZWVkIHRvIGNvbnZlcnQgdG8gQnVmZmVyIGZpcnN0XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGZpbGVDb250ZW50KTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgbWFtbW90aC5leHRyYWN0UmF3VGV4dCh7XG4gICAgICAgICAgICBidWZmZXJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgICAgIHRleHQ6IHZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRG9jeFJlYWRlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/docx/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/html/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/html/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLReader: () => (/* binding */ HTMLReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n/**\n * Extract the significant text from an arbitrary HTML document.\n * The contents of any head, script, style, and xml tags are removed completely.\n * The URLs for a[href] tags are extracted, along with the inner text of the tag.\n * All other tags are removed, and the inner text is kept intact.\n * Html entities (e.g., &amp;) are not decoded.\n */ class HTMLReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    /**\n   * Public method for this reader.\n   * Required by BaseReader interface.\n   * @param fileContent - The content of the file.\n   * @returns `Promise<Document[]>` A Promise object, eventually yielding zero or one Document parsed from the HTML content of the specified file.\n   */ async loadDataAsContent(fileContent) {\n        const decoder = new TextDecoder(\"utf-8\");\n        const dataBuffer = decoder.decode(fileContent);\n        const htmlOptions = this.getOptions();\n        const content = await this.parseContent(dataBuffer, htmlOptions);\n        return [\n            new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                text: content\n            })\n        ];\n    }\n    /**\n   * Wrapper for string-strip-html usage.\n   * @param html Raw HTML content to be parsed.\n   * @param options An object of options for the underlying library\n   * @see getOptions\n   * @returns The HTML content, stripped of unwanted tags and attributes\n   */ async parseContent(html, options = {}) {\n        const { stripHtml } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@llamaindex\").then(__webpack_require__.bind(__webpack_require__, /*! ./string-strip-html.esm-CS-9Wk6W.js */ \"(rsc)/./node_modules/@llamaindex/readers/html/dist/string-strip-html.esm-CS-9Wk6W.js\")); // ESM only\n        return stripHtml(html, options).result;\n    }\n    /**\n   * Wrapper for our configuration options passed to string-strip-html library\n   * @see https://codsen.com/os/string-strip-html/examples\n   * @returns An object of options for the underlying library\n   */ getOptions() {\n        return {\n            skipHtmlDecoding: true,\n            stripTogetherWithTheirContents: [\n                \"script\",\n                \"style\",\n                \"xml\",\n                \"head\"\n            ]\n        };\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9odG1sL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7O0FBRS9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsNkJBQTZCLCtEQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNkRBQVE7QUFDeEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQyxnQkFBZ0IsWUFBWSxRQUFRLHlQQUE2QyxFQUFFO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFc0IiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9odG1sL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVJlYWRlciwgRG9jdW1lbnQgfSBmcm9tICdAbGxhbWFpbmRleC9jb3JlL3NjaGVtYSc7XG5cbi8qKlxuICogRXh0cmFjdCB0aGUgc2lnbmlmaWNhbnQgdGV4dCBmcm9tIGFuIGFyYml0cmFyeSBIVE1MIGRvY3VtZW50LlxuICogVGhlIGNvbnRlbnRzIG9mIGFueSBoZWFkLCBzY3JpcHQsIHN0eWxlLCBhbmQgeG1sIHRhZ3MgYXJlIHJlbW92ZWQgY29tcGxldGVseS5cbiAqIFRoZSBVUkxzIGZvciBhW2hyZWZdIHRhZ3MgYXJlIGV4dHJhY3RlZCwgYWxvbmcgd2l0aCB0aGUgaW5uZXIgdGV4dCBvZiB0aGUgdGFnLlxuICogQWxsIG90aGVyIHRhZ3MgYXJlIHJlbW92ZWQsIGFuZCB0aGUgaW5uZXIgdGV4dCBpcyBrZXB0IGludGFjdC5cbiAqIEh0bWwgZW50aXRpZXMgKGUuZy4sICZhbXA7KSBhcmUgbm90IGRlY29kZWQuXG4gKi8gY2xhc3MgSFRNTFJlYWRlciBleHRlbmRzIEZpbGVSZWFkZXIge1xuICAgIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIGZvciB0aGlzIHJlYWRlci5cbiAgICogUmVxdWlyZWQgYnkgQmFzZVJlYWRlciBpbnRlcmZhY2UuXG4gICAqIEBwYXJhbSBmaWxlQ29udGVudCAtIFRoZSBjb250ZW50IG9mIHRoZSBmaWxlLlxuICAgKiBAcmV0dXJucyBgUHJvbWlzZTxEb2N1bWVudFtdPmAgQSBQcm9taXNlIG9iamVjdCwgZXZlbnR1YWxseSB5aWVsZGluZyB6ZXJvIG9yIG9uZSBEb2N1bWVudCBwYXJzZWQgZnJvbSB0aGUgSFRNTCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICovIGFzeW5jIGxvYWREYXRhQXNDb250ZW50KGZpbGVDb250ZW50KSB7XG4gICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTtcbiAgICAgICAgY29uc3QgZGF0YUJ1ZmZlciA9IGRlY29kZXIuZGVjb2RlKGZpbGVDb250ZW50KTtcbiAgICAgICAgY29uc3QgaHRtbE9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMucGFyc2VDb250ZW50KGRhdGFCdWZmZXIsIGh0bWxPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBEb2N1bWVudCh7XG4gICAgICAgICAgICAgICAgdGV4dDogY29udGVudFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFdyYXBwZXIgZm9yIHN0cmluZy1zdHJpcC1odG1sIHVzYWdlLlxuICAgKiBAcGFyYW0gaHRtbCBSYXcgSFRNTCBjb250ZW50IHRvIGJlIHBhcnNlZC5cbiAgICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IG9mIG9wdGlvbnMgZm9yIHRoZSB1bmRlcmx5aW5nIGxpYnJhcnlcbiAgICogQHNlZSBnZXRPcHRpb25zXG4gICAqIEByZXR1cm5zIFRoZSBIVE1MIGNvbnRlbnQsIHN0cmlwcGVkIG9mIHVud2FudGVkIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbiAgICovIGFzeW5jIHBhcnNlQ29udGVudChodG1sLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBzdHJpcEh0bWwgfSA9IGF3YWl0IGltcG9ydCgnLi9zdHJpbmctc3RyaXAtaHRtbC5lc20tQ1MtOVdrNlcuanMnKTsgLy8gRVNNIG9ubHlcbiAgICAgICAgcmV0dXJuIHN0cmlwSHRtbChodG1sLCBvcHRpb25zKS5yZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgKiBXcmFwcGVyIGZvciBvdXIgY29uZmlndXJhdGlvbiBvcHRpb25zIHBhc3NlZCB0byBzdHJpbmctc3RyaXAtaHRtbCBsaWJyYXJ5XG4gICAqIEBzZWUgaHR0cHM6Ly9jb2RzZW4uY29tL29zL3N0cmluZy1zdHJpcC1odG1sL2V4YW1wbGVzXG4gICAqIEByZXR1cm5zIEFuIG9iamVjdCBvZiBvcHRpb25zIGZvciB0aGUgdW5kZXJseWluZyBsaWJyYXJ5XG4gICAqLyBnZXRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2tpcEh0bWxEZWNvZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50czogW1xuICAgICAgICAgICAgICAgIFwic2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICAgICAgICAgIFwieG1sXCIsXG4gICAgICAgICAgICAgICAgXCJoZWFkXCJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEhUTUxSZWFkZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/html/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/html/dist/string-strip-html.esm-CS-9Wk6W.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/html/dist/string-strip-html.esm-CS-9Wk6W.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaults: () => (/* binding */ ae),\n/* harmony export */   stripHtml: () => (/* binding */ fe)\n/* harmony export */ });\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar rfdc_1;\nvar hasRequiredRfdc;\n\nfunction requireRfdc () {\n\tif (hasRequiredRfdc) return rfdc_1;\n\thasRequiredRfdc = 1;\n\trfdc_1 = rfdc;\n\tfunction copyBuffer(cur) {\n\t    if (cur instanceof Buffer) {\n\t        return Buffer.from(cur);\n\t    }\n\t    return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);\n\t}\n\tfunction rfdc(opts) {\n\t    opts = opts || {};\n\t    if (opts.circles) return rfdcCircles(opts);\n\t    const constructorHandlers = new Map();\n\t    constructorHandlers.set(Date, (o)=>new Date(o));\n\t    constructorHandlers.set(Map, (o, fn)=>new Map(cloneArray(Array.from(o), fn)));\n\t    constructorHandlers.set(Set, (o, fn)=>new Set(cloneArray(Array.from(o), fn)));\n\t    if (opts.constructorHandlers) {\n\t        for (const handler of opts.constructorHandlers){\n\t            constructorHandlers.set(handler[0], handler[1]);\n\t        }\n\t    }\n\t    let handler = null;\n\t    return opts.proto ? cloneProto : clone;\n\t    function cloneArray(a, fn) {\n\t        const keys = Object.keys(a);\n\t        const a2 = new Array(keys.length);\n\t        for(let i = 0; i < keys.length; i++){\n\t            const k = keys[i];\n\t            const cur = a[k];\n\t            if (typeof cur !== 'object' || cur === null) {\n\t                a2[k] = cur;\n\t            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n\t                a2[k] = handler(cur, fn);\n\t            } else if (ArrayBuffer.isView(cur)) {\n\t                a2[k] = copyBuffer(cur);\n\t            } else {\n\t                a2[k] = fn(cur);\n\t            }\n\t        }\n\t        return a2;\n\t    }\n\t    function clone(o) {\n\t        if (typeof o !== 'object' || o === null) return o;\n\t        if (Array.isArray(o)) return cloneArray(o, clone);\n\t        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n\t            return handler(o, clone);\n\t        }\n\t        const o2 = {};\n\t        for(const k in o){\n\t            if (Object.hasOwnProperty.call(o, k) === false) continue;\n\t            const cur = o[k];\n\t            if (typeof cur !== 'object' || cur === null) {\n\t                o2[k] = cur;\n\t            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n\t                o2[k] = handler(cur, clone);\n\t            } else if (ArrayBuffer.isView(cur)) {\n\t                o2[k] = copyBuffer(cur);\n\t            } else {\n\t                o2[k] = clone(cur);\n\t            }\n\t        }\n\t        return o2;\n\t    }\n\t    function cloneProto(o) {\n\t        if (typeof o !== 'object' || o === null) return o;\n\t        if (Array.isArray(o)) return cloneArray(o, cloneProto);\n\t        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n\t            return handler(o, cloneProto);\n\t        }\n\t        const o2 = {};\n\t        for(const k in o){\n\t            const cur = o[k];\n\t            if (typeof cur !== 'object' || cur === null) {\n\t                o2[k] = cur;\n\t            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n\t                o2[k] = handler(cur, cloneProto);\n\t            } else if (ArrayBuffer.isView(cur)) {\n\t                o2[k] = copyBuffer(cur);\n\t            } else {\n\t                o2[k] = cloneProto(cur);\n\t            }\n\t        }\n\t        return o2;\n\t    }\n\t}\n\tfunction rfdcCircles(opts) {\n\t    const refs = [];\n\t    const refsNew = [];\n\t    const constructorHandlers = new Map();\n\t    constructorHandlers.set(Date, (o)=>new Date(o));\n\t    constructorHandlers.set(Map, (o, fn)=>new Map(cloneArray(Array.from(o), fn)));\n\t    constructorHandlers.set(Set, (o, fn)=>new Set(cloneArray(Array.from(o), fn)));\n\t    if (opts.constructorHandlers) {\n\t        for (const handler of opts.constructorHandlers){\n\t            constructorHandlers.set(handler[0], handler[1]);\n\t        }\n\t    }\n\t    let handler = null;\n\t    return opts.proto ? cloneProto : clone;\n\t    function cloneArray(a, fn) {\n\t        const keys = Object.keys(a);\n\t        const a2 = new Array(keys.length);\n\t        for(let i = 0; i < keys.length; i++){\n\t            const k = keys[i];\n\t            const cur = a[k];\n\t            if (typeof cur !== 'object' || cur === null) {\n\t                a2[k] = cur;\n\t            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n\t                a2[k] = handler(cur, fn);\n\t            } else if (ArrayBuffer.isView(cur)) {\n\t                a2[k] = copyBuffer(cur);\n\t            } else {\n\t                const index = refs.indexOf(cur);\n\t                if (index !== -1) {\n\t                    a2[k] = refsNew[index];\n\t                } else {\n\t                    a2[k] = fn(cur);\n\t                }\n\t            }\n\t        }\n\t        return a2;\n\t    }\n\t    function clone(o) {\n\t        if (typeof o !== 'object' || o === null) return o;\n\t        if (Array.isArray(o)) return cloneArray(o, clone);\n\t        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n\t            return handler(o, clone);\n\t        }\n\t        const o2 = {};\n\t        refs.push(o);\n\t        refsNew.push(o2);\n\t        for(const k in o){\n\t            if (Object.hasOwnProperty.call(o, k) === false) continue;\n\t            const cur = o[k];\n\t            if (typeof cur !== 'object' || cur === null) {\n\t                o2[k] = cur;\n\t            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n\t                o2[k] = handler(cur, clone);\n\t            } else if (ArrayBuffer.isView(cur)) {\n\t                o2[k] = copyBuffer(cur);\n\t            } else {\n\t                const i = refs.indexOf(cur);\n\t                if (i !== -1) {\n\t                    o2[k] = refsNew[i];\n\t                } else {\n\t                    o2[k] = clone(cur);\n\t                }\n\t            }\n\t        }\n\t        refs.pop();\n\t        refsNew.pop();\n\t        return o2;\n\t    }\n\t    function cloneProto(o) {\n\t        if (typeof o !== 'object' || o === null) return o;\n\t        if (Array.isArray(o)) return cloneArray(o, cloneProto);\n\t        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n\t            return handler(o, cloneProto);\n\t        }\n\t        const o2 = {};\n\t        refs.push(o);\n\t        refsNew.push(o2);\n\t        for(const k in o){\n\t            const cur = o[k];\n\t            if (typeof cur !== 'object' || cur === null) {\n\t                o2[k] = cur;\n\t            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n\t                o2[k] = handler(cur, cloneProto);\n\t            } else if (ArrayBuffer.isView(cur)) {\n\t                o2[k] = copyBuffer(cur);\n\t            } else {\n\t                const i = refs.indexOf(cur);\n\t                if (i !== -1) {\n\t                    o2[k] = refsNew[i];\n\t                } else {\n\t                    o2[k] = cloneProto(cur);\n\t                }\n\t            }\n\t        }\n\t        refs.pop();\n\t        refsNew.pop();\n\t        return o2;\n\t    }\n\t}\n\treturn rfdc_1;\n}\n\nvar rfdcExports = requireRfdc();\nvar I = /*@__PURE__*/getDefaultExportFromCjs(rfdcExports);\n\nI();\nfunction u(t) {\n    if (t == null || typeof t != \"object\") return false;\n    let e = Object.getPrototypeOf(t);\n    return e !== null && e !== Object.prototype && Object.getPrototypeOf(e) !== null ? false : !(Symbol.iterator in t) && !(Symbol.toStringTag in t);\n}\nfunction r(t) {\n    return typeof t == \"string\";\n}\nfunction q$1(t) {\n    return Number.isSafeInteger(t) && t >= 0;\n}\nfunction G$1(t) {\n    return t != null;\n}\nfunction v(t, e) {\n    return u(t) && r(e) && e in t;\n}\n\n/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */ var Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */ var objectProto$4 = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString$1 = objectProto$4.toString;\n/** Built-in value references. */ var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n    var isOwn = hasOwnProperty$3.call(value, symToStringTag$1), tag = value[symToStringTag$1];\n    try {\n        value[symToStringTag$1] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString$1.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag$1] = tag;\n        } else {\n            delete value[symToStringTag$1];\n        }\n    }\n    return result;\n}\n\n/** Used for built-in method references. */ var objectProto$3 = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto$3.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n\n/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';\n/** Built-in value references. */ var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */ function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */ function arrayMap(array, iteratee) {\n    var index = -1, length = array == null ? 0 : array.length, result = Array(length);\n    while(++index < length){\n        result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var isArray = Array.isArray;\n\n/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */ function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n        return value;\n    }\n    if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n    }\n    if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n    }\n    var result = value + '';\n    return result == '0' && 1 / value == -Infinity ? '-0' : result;\n}\n\n/** Used to match a single whitespace character. */ var reWhitespace = /\\s/;\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */ function trimmedEndIndex(string) {\n    var index = string.length;\n    while(index-- && reWhitespace.test(string.charAt(index))){}\n    return index;\n}\n\n/** Used to match leading whitespace. */ var reTrimStart = /^\\s+/;\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */ function baseTrim(string) {\n    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */ function identity(value) {\n    return value;\n}\n\n/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used to detect overreaching core-js shims. */ var coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n}();\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n}\n\n/** Used for built-in method references. */ var funcProto$1 = Function.prototype;\n/** Used to resolve the decompiled source of functions. */ var funcToString$1 = funcProto$1.toString;\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString$1.call(func);\n        } catch (e) {}\n        try {\n            return func + '';\n        } catch (e) {}\n    }\n    return '';\n}\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto$2 = Object.prototype;\n/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n/** Used to check objects for own properties. */ var hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n/** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty$2).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */ function apply(func, thisArg, args) {\n    switch(args.length){\n        case 0:\n            return func.call(thisArg);\n        case 1:\n            return func.call(thisArg, args[0]);\n        case 2:\n            return func.call(thisArg, args[0], args[1]);\n        case 3:\n            return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n}\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */ function shortOut(func) {\n    var count = 0, lastCalled = 0;\n    return function() {\n        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);\n        lastCalled = stamp;\n        if (remaining > 0) {\n            if (++count >= HOT_COUNT) {\n                return arguments[0];\n            }\n        } else {\n            count = 0;\n        }\n        return func.apply(undefined, arguments);\n    };\n}\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */ function constant(value) {\n    return function() {\n        return value;\n    };\n}\n\nvar defineProperty = function() {\n    try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n    } catch (e) {}\n}();\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var baseSetToString = !defineProperty ? identity : function(func, string) {\n    return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n    });\n};\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var setToString = shortOut(baseSetToString);\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length, index = fromIndex + (-1);\n    while(++index < length){\n        if (predicate(array[index], index, array)) {\n            return index;\n        }\n    }\n    return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */ function baseIsNaN(value) {\n    return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1, length = array.length;\n    while(++index < length){\n        if (array[index] === value) {\n            return index;\n        }\n    }\n    return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */ function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function eq(value, other) {\n    return value === other || value !== value && other !== other;\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */ function overRest(func, start, transform) {\n    start = nativeMax(start === undefined ? func.length - 1 : start, 0);\n    return function() {\n        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);\n        while(++index < length){\n            array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while(++index < start){\n            otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n    };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */ function baseRest(func, start) {\n    return setToString(overRest(func, start, identity), func + '');\n}\n\n/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, 'create');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n}\n\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';\n/** Used for built-in method references. */ var objectProto$1 = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED$2 ? undefined : result;\n    }\n    return hasOwnProperty$1.call(data, key) ? data[key] : undefined;\n}\n\n/** Used for built-in method references. */ var objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;\n    return this;\n}\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n    var length = array.length;\n    while(length--){\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\n\n/** Used for built-in method references. */ var arrayProto = Array.prototype;\n/** Built-in value references. */ var splice = arrayProto.splice;\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    } else {\n        splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        ++this.size;\n        data.push([\n            key,\n            value\n        ]);\n    } else {\n        data[index][1] = value;\n    }\n    return this;\n}\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/* Built-in method references that are verified to be native. */ var Map$1 = getNative(root, 'Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map$1 || ListCache),\n        'string': new Hash\n    };\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n    var data = getMapData(this, key), size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n}\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */ function toString(value) {\n    return value == null ? '' : baseToString(value);\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */ function baseSlice(array, start, end) {\n    var index = -1, length = array.length;\n    if (start < 0) {\n        start = -start > length ? 0 : length + start;\n    }\n    end = end > length ? length : end;\n    if (end < 0) {\n        end += length;\n    }\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n    while(++index < length){\n        result[index] = array[index + start];\n    }\n    return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */ function castSlice(array, start, end) {\n    var length = array.length;\n    end = end === undefined ? length : end;\n    return !start && end >= length ? array : baseSlice(array, start, end);\n}\n\n/** Used to compose unicode character classes. */ var rsAstralRange$1 = '\\\\ud800-\\\\udfff', rsComboMarksRange$1 = '\\\\u0300-\\\\u036f', reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f', rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff', rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n/** Used to compose unicode capture groups. */ var rsZWJ$1 = '\\\\u200d';\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + ']');\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */ function hasUnicode(string) {\n    return reHasUnicode.test(string);\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */ function asciiToArray(string) {\n    return string.split('');\n}\n\n/** Used to compose unicode character classes. */ var rsAstralRange = '\\\\ud800-\\\\udfff', rsComboMarksRange = '\\\\u0300-\\\\u036f', reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f', rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = '\\\\ufe0e\\\\ufe0f';\n/** Used to compose unicode capture groups. */ var rsAstral = '[' + rsAstralRange + ']', rsCombo = '[' + rsComboRange + ']', rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}', rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]', rsZWJ = '\\\\u200d';\n/** Used to compose unicode regexes. */ var reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [\n    rsNonAstral,\n    rsRegional,\n    rsSurrPair\n].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = '(?:' + [\n    rsNonAstral + rsCombo + '?',\n    rsCombo,\n    rsRegional,\n    rsSurrPair,\n    rsAstral\n].join('|') + ')';\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */ function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */ function stringToArray(string) {\n    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */ function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */ function setCacheHas(value) {\n    return this.__data__.has(value);\n}\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */ function SetCache(values) {\n    var index = -1, length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache;\n    while(++index < length){\n        this.add(values[index]);\n    }\n}\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function cacheHas(cache, key) {\n    return cache.has(key);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */ function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n}\n\n/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */ function baseDifference(array, values, iteratee, comparator) {\n    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;\n    if (!length) {\n        return result;\n    }\n    if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n    }\n    outer: while(++index < length){\n        var value = array[index], computed = value ;\n        value = value !== 0 ? value : 0;\n        if (isCommon && computed === computed) {\n            var valuesIndex = valuesLength;\n            while(valuesIndex--){\n                if (values[valuesIndex] === computed) {\n                    continue outer;\n                }\n            }\n            result.push(value);\n        } else if (!includes(values, computed, comparator)) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */ function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n    while(index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1){}\n    return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */ function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1, length = strSymbols.length;\n    while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1){}\n    return index;\n}\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */ function trim(string, chars, guard) {\n    string = toString(string);\n    if (string && (chars === undefined)) {\n        return baseTrim(string);\n    }\n    if (!string || !(chars = baseToString(chars))) {\n        return string;\n    }\n    var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;\n    return castSlice(strSymbols, start, end).join('');\n}\n\n/**\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `_.pull`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.xor\n * @example\n *\n * _.without([2, 1, 2, 3], 1, 2);\n * // => [3]\n */ var without = baseRest(function(array, values) {\n    return isArrayLikeObject(array) ? baseDifference(array, values) : [];\n});\n\nvar lib = {};\n\nvar namedReferences = {};\n\nvar hasRequiredNamedReferences;\n\nfunction requireNamedReferences () {\n\tif (hasRequiredNamedReferences) return namedReferences;\n\thasRequiredNamedReferences = 1;\n\tObject.defineProperty(namedReferences, \"__esModule\", {\n\t    value: true\n\t});\n\tnamedReferences.bodyRegExps = {\n\t    xml: /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g,\n\t    html4: /&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g,\n\t    html5: /&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);?/g\n\t};\n\tnamedReferences.namedReferences = {\n\t    xml: {\n\t        entities: {\n\t            \"&lt;\": \"<\",\n\t            \"&gt;\": \">\",\n\t            \"&quot;\": '\"',\n\t            \"&apos;\": \"'\",\n\t            \"&amp;\": \"&\"\n\t        },\n\t        characters: {\n\t            \"<\": \"&lt;\",\n\t            \">\": \"&gt;\",\n\t            '\"': \"&quot;\",\n\t            \"'\": \"&apos;\",\n\t            \"&\": \"&amp;\"\n\t        }\n\t    },\n\t    html4: {\n\t        entities: {\n\t            \"&apos;\": \"'\",\n\t            \"&nbsp\": \" \",\n\t            \"&nbsp;\": \" \",\n\t            \"&iexcl\": \"¡\",\n\t            \"&iexcl;\": \"¡\",\n\t            \"&cent\": \"¢\",\n\t            \"&cent;\": \"¢\",\n\t            \"&pound\": \"£\",\n\t            \"&pound;\": \"£\",\n\t            \"&curren\": \"¤\",\n\t            \"&curren;\": \"¤\",\n\t            \"&yen\": \"¥\",\n\t            \"&yen;\": \"¥\",\n\t            \"&brvbar\": \"¦\",\n\t            \"&brvbar;\": \"¦\",\n\t            \"&sect\": \"§\",\n\t            \"&sect;\": \"§\",\n\t            \"&uml\": \"¨\",\n\t            \"&uml;\": \"¨\",\n\t            \"&copy\": \"©\",\n\t            \"&copy;\": \"©\",\n\t            \"&ordf\": \"ª\",\n\t            \"&ordf;\": \"ª\",\n\t            \"&laquo\": \"«\",\n\t            \"&laquo;\": \"«\",\n\t            \"&not\": \"¬\",\n\t            \"&not;\": \"¬\",\n\t            \"&shy\": \"­\",\n\t            \"&shy;\": \"­\",\n\t            \"&reg\": \"®\",\n\t            \"&reg;\": \"®\",\n\t            \"&macr\": \"¯\",\n\t            \"&macr;\": \"¯\",\n\t            \"&deg\": \"°\",\n\t            \"&deg;\": \"°\",\n\t            \"&plusmn\": \"±\",\n\t            \"&plusmn;\": \"±\",\n\t            \"&sup2\": \"²\",\n\t            \"&sup2;\": \"²\",\n\t            \"&sup3\": \"³\",\n\t            \"&sup3;\": \"³\",\n\t            \"&acute\": \"´\",\n\t            \"&acute;\": \"´\",\n\t            \"&micro\": \"µ\",\n\t            \"&micro;\": \"µ\",\n\t            \"&para\": \"¶\",\n\t            \"&para;\": \"¶\",\n\t            \"&middot\": \"·\",\n\t            \"&middot;\": \"·\",\n\t            \"&cedil\": \"¸\",\n\t            \"&cedil;\": \"¸\",\n\t            \"&sup1\": \"¹\",\n\t            \"&sup1;\": \"¹\",\n\t            \"&ordm\": \"º\",\n\t            \"&ordm;\": \"º\",\n\t            \"&raquo\": \"»\",\n\t            \"&raquo;\": \"»\",\n\t            \"&frac14\": \"¼\",\n\t            \"&frac14;\": \"¼\",\n\t            \"&frac12\": \"½\",\n\t            \"&frac12;\": \"½\",\n\t            \"&frac34\": \"¾\",\n\t            \"&frac34;\": \"¾\",\n\t            \"&iquest\": \"¿\",\n\t            \"&iquest;\": \"¿\",\n\t            \"&Agrave\": \"À\",\n\t            \"&Agrave;\": \"À\",\n\t            \"&Aacute\": \"Á\",\n\t            \"&Aacute;\": \"Á\",\n\t            \"&Acirc\": \"Â\",\n\t            \"&Acirc;\": \"Â\",\n\t            \"&Atilde\": \"Ã\",\n\t            \"&Atilde;\": \"Ã\",\n\t            \"&Auml\": \"Ä\",\n\t            \"&Auml;\": \"Ä\",\n\t            \"&Aring\": \"Å\",\n\t            \"&Aring;\": \"Å\",\n\t            \"&AElig\": \"Æ\",\n\t            \"&AElig;\": \"Æ\",\n\t            \"&Ccedil\": \"Ç\",\n\t            \"&Ccedil;\": \"Ç\",\n\t            \"&Egrave\": \"È\",\n\t            \"&Egrave;\": \"È\",\n\t            \"&Eacute\": \"É\",\n\t            \"&Eacute;\": \"É\",\n\t            \"&Ecirc\": \"Ê\",\n\t            \"&Ecirc;\": \"Ê\",\n\t            \"&Euml\": \"Ë\",\n\t            \"&Euml;\": \"Ë\",\n\t            \"&Igrave\": \"Ì\",\n\t            \"&Igrave;\": \"Ì\",\n\t            \"&Iacute\": \"Í\",\n\t            \"&Iacute;\": \"Í\",\n\t            \"&Icirc\": \"Î\",\n\t            \"&Icirc;\": \"Î\",\n\t            \"&Iuml\": \"Ï\",\n\t            \"&Iuml;\": \"Ï\",\n\t            \"&ETH\": \"Ð\",\n\t            \"&ETH;\": \"Ð\",\n\t            \"&Ntilde\": \"Ñ\",\n\t            \"&Ntilde;\": \"Ñ\",\n\t            \"&Ograve\": \"Ò\",\n\t            \"&Ograve;\": \"Ò\",\n\t            \"&Oacute\": \"Ó\",\n\t            \"&Oacute;\": \"Ó\",\n\t            \"&Ocirc\": \"Ô\",\n\t            \"&Ocirc;\": \"Ô\",\n\t            \"&Otilde\": \"Õ\",\n\t            \"&Otilde;\": \"Õ\",\n\t            \"&Ouml\": \"Ö\",\n\t            \"&Ouml;\": \"Ö\",\n\t            \"&times\": \"×\",\n\t            \"&times;\": \"×\",\n\t            \"&Oslash\": \"Ø\",\n\t            \"&Oslash;\": \"Ø\",\n\t            \"&Ugrave\": \"Ù\",\n\t            \"&Ugrave;\": \"Ù\",\n\t            \"&Uacute\": \"Ú\",\n\t            \"&Uacute;\": \"Ú\",\n\t            \"&Ucirc\": \"Û\",\n\t            \"&Ucirc;\": \"Û\",\n\t            \"&Uuml\": \"Ü\",\n\t            \"&Uuml;\": \"Ü\",\n\t            \"&Yacute\": \"Ý\",\n\t            \"&Yacute;\": \"Ý\",\n\t            \"&THORN\": \"Þ\",\n\t            \"&THORN;\": \"Þ\",\n\t            \"&szlig\": \"ß\",\n\t            \"&szlig;\": \"ß\",\n\t            \"&agrave\": \"à\",\n\t            \"&agrave;\": \"à\",\n\t            \"&aacute\": \"á\",\n\t            \"&aacute;\": \"á\",\n\t            \"&acirc\": \"â\",\n\t            \"&acirc;\": \"â\",\n\t            \"&atilde\": \"ã\",\n\t            \"&atilde;\": \"ã\",\n\t            \"&auml\": \"ä\",\n\t            \"&auml;\": \"ä\",\n\t            \"&aring\": \"å\",\n\t            \"&aring;\": \"å\",\n\t            \"&aelig\": \"æ\",\n\t            \"&aelig;\": \"æ\",\n\t            \"&ccedil\": \"ç\",\n\t            \"&ccedil;\": \"ç\",\n\t            \"&egrave\": \"è\",\n\t            \"&egrave;\": \"è\",\n\t            \"&eacute\": \"é\",\n\t            \"&eacute;\": \"é\",\n\t            \"&ecirc\": \"ê\",\n\t            \"&ecirc;\": \"ê\",\n\t            \"&euml\": \"ë\",\n\t            \"&euml;\": \"ë\",\n\t            \"&igrave\": \"ì\",\n\t            \"&igrave;\": \"ì\",\n\t            \"&iacute\": \"í\",\n\t            \"&iacute;\": \"í\",\n\t            \"&icirc\": \"î\",\n\t            \"&icirc;\": \"î\",\n\t            \"&iuml\": \"ï\",\n\t            \"&iuml;\": \"ï\",\n\t            \"&eth\": \"ð\",\n\t            \"&eth;\": \"ð\",\n\t            \"&ntilde\": \"ñ\",\n\t            \"&ntilde;\": \"ñ\",\n\t            \"&ograve\": \"ò\",\n\t            \"&ograve;\": \"ò\",\n\t            \"&oacute\": \"ó\",\n\t            \"&oacute;\": \"ó\",\n\t            \"&ocirc\": \"ô\",\n\t            \"&ocirc;\": \"ô\",\n\t            \"&otilde\": \"õ\",\n\t            \"&otilde;\": \"õ\",\n\t            \"&ouml\": \"ö\",\n\t            \"&ouml;\": \"ö\",\n\t            \"&divide\": \"÷\",\n\t            \"&divide;\": \"÷\",\n\t            \"&oslash\": \"ø\",\n\t            \"&oslash;\": \"ø\",\n\t            \"&ugrave\": \"ù\",\n\t            \"&ugrave;\": \"ù\",\n\t            \"&uacute\": \"ú\",\n\t            \"&uacute;\": \"ú\",\n\t            \"&ucirc\": \"û\",\n\t            \"&ucirc;\": \"û\",\n\t            \"&uuml\": \"ü\",\n\t            \"&uuml;\": \"ü\",\n\t            \"&yacute\": \"ý\",\n\t            \"&yacute;\": \"ý\",\n\t            \"&thorn\": \"þ\",\n\t            \"&thorn;\": \"þ\",\n\t            \"&yuml\": \"ÿ\",\n\t            \"&yuml;\": \"ÿ\",\n\t            \"&quot\": '\"',\n\t            \"&quot;\": '\"',\n\t            \"&amp\": \"&\",\n\t            \"&amp;\": \"&\",\n\t            \"&lt\": \"<\",\n\t            \"&lt;\": \"<\",\n\t            \"&gt\": \">\",\n\t            \"&gt;\": \">\",\n\t            \"&OElig;\": \"Œ\",\n\t            \"&oelig;\": \"œ\",\n\t            \"&Scaron;\": \"Š\",\n\t            \"&scaron;\": \"š\",\n\t            \"&Yuml;\": \"Ÿ\",\n\t            \"&circ;\": \"ˆ\",\n\t            \"&tilde;\": \"˜\",\n\t            \"&ensp;\": \" \",\n\t            \"&emsp;\": \" \",\n\t            \"&thinsp;\": \" \",\n\t            \"&zwnj;\": \"‌\",\n\t            \"&zwj;\": \"‍\",\n\t            \"&lrm;\": \"‎\",\n\t            \"&rlm;\": \"‏\",\n\t            \"&ndash;\": \"–\",\n\t            \"&mdash;\": \"—\",\n\t            \"&lsquo;\": \"‘\",\n\t            \"&rsquo;\": \"’\",\n\t            \"&sbquo;\": \"‚\",\n\t            \"&ldquo;\": \"“\",\n\t            \"&rdquo;\": \"”\",\n\t            \"&bdquo;\": \"„\",\n\t            \"&dagger;\": \"†\",\n\t            \"&Dagger;\": \"‡\",\n\t            \"&permil;\": \"‰\",\n\t            \"&lsaquo;\": \"‹\",\n\t            \"&rsaquo;\": \"›\",\n\t            \"&euro;\": \"€\",\n\t            \"&fnof;\": \"ƒ\",\n\t            \"&Alpha;\": \"Α\",\n\t            \"&Beta;\": \"Β\",\n\t            \"&Gamma;\": \"Γ\",\n\t            \"&Delta;\": \"Δ\",\n\t            \"&Epsilon;\": \"Ε\",\n\t            \"&Zeta;\": \"Ζ\",\n\t            \"&Eta;\": \"Η\",\n\t            \"&Theta;\": \"Θ\",\n\t            \"&Iota;\": \"Ι\",\n\t            \"&Kappa;\": \"Κ\",\n\t            \"&Lambda;\": \"Λ\",\n\t            \"&Mu;\": \"Μ\",\n\t            \"&Nu;\": \"Ν\",\n\t            \"&Xi;\": \"Ξ\",\n\t            \"&Omicron;\": \"Ο\",\n\t            \"&Pi;\": \"Π\",\n\t            \"&Rho;\": \"Ρ\",\n\t            \"&Sigma;\": \"Σ\",\n\t            \"&Tau;\": \"Τ\",\n\t            \"&Upsilon;\": \"Υ\",\n\t            \"&Phi;\": \"Φ\",\n\t            \"&Chi;\": \"Χ\",\n\t            \"&Psi;\": \"Ψ\",\n\t            \"&Omega;\": \"Ω\",\n\t            \"&alpha;\": \"α\",\n\t            \"&beta;\": \"β\",\n\t            \"&gamma;\": \"γ\",\n\t            \"&delta;\": \"δ\",\n\t            \"&epsilon;\": \"ε\",\n\t            \"&zeta;\": \"ζ\",\n\t            \"&eta;\": \"η\",\n\t            \"&theta;\": \"θ\",\n\t            \"&iota;\": \"ι\",\n\t            \"&kappa;\": \"κ\",\n\t            \"&lambda;\": \"λ\",\n\t            \"&mu;\": \"μ\",\n\t            \"&nu;\": \"ν\",\n\t            \"&xi;\": \"ξ\",\n\t            \"&omicron;\": \"ο\",\n\t            \"&pi;\": \"π\",\n\t            \"&rho;\": \"ρ\",\n\t            \"&sigmaf;\": \"ς\",\n\t            \"&sigma;\": \"σ\",\n\t            \"&tau;\": \"τ\",\n\t            \"&upsilon;\": \"υ\",\n\t            \"&phi;\": \"φ\",\n\t            \"&chi;\": \"χ\",\n\t            \"&psi;\": \"ψ\",\n\t            \"&omega;\": \"ω\",\n\t            \"&thetasym;\": \"ϑ\",\n\t            \"&upsih;\": \"ϒ\",\n\t            \"&piv;\": \"ϖ\",\n\t            \"&bull;\": \"•\",\n\t            \"&hellip;\": \"…\",\n\t            \"&prime;\": \"′\",\n\t            \"&Prime;\": \"″\",\n\t            \"&oline;\": \"‾\",\n\t            \"&frasl;\": \"⁄\",\n\t            \"&weierp;\": \"℘\",\n\t            \"&image;\": \"ℑ\",\n\t            \"&real;\": \"ℜ\",\n\t            \"&trade;\": \"™\",\n\t            \"&alefsym;\": \"ℵ\",\n\t            \"&larr;\": \"←\",\n\t            \"&uarr;\": \"↑\",\n\t            \"&rarr;\": \"→\",\n\t            \"&darr;\": \"↓\",\n\t            \"&harr;\": \"↔\",\n\t            \"&crarr;\": \"↵\",\n\t            \"&lArr;\": \"⇐\",\n\t            \"&uArr;\": \"⇑\",\n\t            \"&rArr;\": \"⇒\",\n\t            \"&dArr;\": \"⇓\",\n\t            \"&hArr;\": \"⇔\",\n\t            \"&forall;\": \"∀\",\n\t            \"&part;\": \"∂\",\n\t            \"&exist;\": \"∃\",\n\t            \"&empty;\": \"∅\",\n\t            \"&nabla;\": \"∇\",\n\t            \"&isin;\": \"∈\",\n\t            \"&notin;\": \"∉\",\n\t            \"&ni;\": \"∋\",\n\t            \"&prod;\": \"∏\",\n\t            \"&sum;\": \"∑\",\n\t            \"&minus;\": \"−\",\n\t            \"&lowast;\": \"∗\",\n\t            \"&radic;\": \"√\",\n\t            \"&prop;\": \"∝\",\n\t            \"&infin;\": \"∞\",\n\t            \"&ang;\": \"∠\",\n\t            \"&and;\": \"∧\",\n\t            \"&or;\": \"∨\",\n\t            \"&cap;\": \"∩\",\n\t            \"&cup;\": \"∪\",\n\t            \"&int;\": \"∫\",\n\t            \"&there4;\": \"∴\",\n\t            \"&sim;\": \"∼\",\n\t            \"&cong;\": \"≅\",\n\t            \"&asymp;\": \"≈\",\n\t            \"&ne;\": \"≠\",\n\t            \"&equiv;\": \"≡\",\n\t            \"&le;\": \"≤\",\n\t            \"&ge;\": \"≥\",\n\t            \"&sub;\": \"⊂\",\n\t            \"&sup;\": \"⊃\",\n\t            \"&nsub;\": \"⊄\",\n\t            \"&sube;\": \"⊆\",\n\t            \"&supe;\": \"⊇\",\n\t            \"&oplus;\": \"⊕\",\n\t            \"&otimes;\": \"⊗\",\n\t            \"&perp;\": \"⊥\",\n\t            \"&sdot;\": \"⋅\",\n\t            \"&lceil;\": \"⌈\",\n\t            \"&rceil;\": \"⌉\",\n\t            \"&lfloor;\": \"⌊\",\n\t            \"&rfloor;\": \"⌋\",\n\t            \"&lang;\": \"〈\",\n\t            \"&rang;\": \"〉\",\n\t            \"&loz;\": \"◊\",\n\t            \"&spades;\": \"♠\",\n\t            \"&clubs;\": \"♣\",\n\t            \"&hearts;\": \"♥\",\n\t            \"&diams;\": \"♦\"\n\t        },\n\t        characters: {\n\t            \"'\": \"&apos;\",\n\t            \" \": \"&nbsp;\",\n\t            \"¡\": \"&iexcl;\",\n\t            \"¢\": \"&cent;\",\n\t            \"£\": \"&pound;\",\n\t            \"¤\": \"&curren;\",\n\t            \"¥\": \"&yen;\",\n\t            \"¦\": \"&brvbar;\",\n\t            \"§\": \"&sect;\",\n\t            \"¨\": \"&uml;\",\n\t            \"©\": \"&copy;\",\n\t            \"ª\": \"&ordf;\",\n\t            \"«\": \"&laquo;\",\n\t            \"¬\": \"&not;\",\n\t            \"­\": \"&shy;\",\n\t            \"®\": \"&reg;\",\n\t            \"¯\": \"&macr;\",\n\t            \"°\": \"&deg;\",\n\t            \"±\": \"&plusmn;\",\n\t            \"²\": \"&sup2;\",\n\t            \"³\": \"&sup3;\",\n\t            \"´\": \"&acute;\",\n\t            \"µ\": \"&micro;\",\n\t            \"¶\": \"&para;\",\n\t            \"·\": \"&middot;\",\n\t            \"¸\": \"&cedil;\",\n\t            \"¹\": \"&sup1;\",\n\t            \"º\": \"&ordm;\",\n\t            \"»\": \"&raquo;\",\n\t            \"¼\": \"&frac14;\",\n\t            \"½\": \"&frac12;\",\n\t            \"¾\": \"&frac34;\",\n\t            \"¿\": \"&iquest;\",\n\t            \"À\": \"&Agrave;\",\n\t            \"Á\": \"&Aacute;\",\n\t            \"Â\": \"&Acirc;\",\n\t            \"Ã\": \"&Atilde;\",\n\t            \"Ä\": \"&Auml;\",\n\t            \"Å\": \"&Aring;\",\n\t            \"Æ\": \"&AElig;\",\n\t            \"Ç\": \"&Ccedil;\",\n\t            \"È\": \"&Egrave;\",\n\t            \"É\": \"&Eacute;\",\n\t            \"Ê\": \"&Ecirc;\",\n\t            \"Ë\": \"&Euml;\",\n\t            \"Ì\": \"&Igrave;\",\n\t            \"Í\": \"&Iacute;\",\n\t            \"Î\": \"&Icirc;\",\n\t            \"Ï\": \"&Iuml;\",\n\t            \"Ð\": \"&ETH;\",\n\t            \"Ñ\": \"&Ntilde;\",\n\t            \"Ò\": \"&Ograve;\",\n\t            \"Ó\": \"&Oacute;\",\n\t            \"Ô\": \"&Ocirc;\",\n\t            \"Õ\": \"&Otilde;\",\n\t            \"Ö\": \"&Ouml;\",\n\t            \"×\": \"&times;\",\n\t            \"Ø\": \"&Oslash;\",\n\t            \"Ù\": \"&Ugrave;\",\n\t            \"Ú\": \"&Uacute;\",\n\t            \"Û\": \"&Ucirc;\",\n\t            \"Ü\": \"&Uuml;\",\n\t            \"Ý\": \"&Yacute;\",\n\t            \"Þ\": \"&THORN;\",\n\t            \"ß\": \"&szlig;\",\n\t            \"à\": \"&agrave;\",\n\t            \"á\": \"&aacute;\",\n\t            \"â\": \"&acirc;\",\n\t            \"ã\": \"&atilde;\",\n\t            \"ä\": \"&auml;\",\n\t            \"å\": \"&aring;\",\n\t            \"æ\": \"&aelig;\",\n\t            \"ç\": \"&ccedil;\",\n\t            \"è\": \"&egrave;\",\n\t            \"é\": \"&eacute;\",\n\t            \"ê\": \"&ecirc;\",\n\t            \"ë\": \"&euml;\",\n\t            \"ì\": \"&igrave;\",\n\t            \"í\": \"&iacute;\",\n\t            \"î\": \"&icirc;\",\n\t            \"ï\": \"&iuml;\",\n\t            \"ð\": \"&eth;\",\n\t            \"ñ\": \"&ntilde;\",\n\t            \"ò\": \"&ograve;\",\n\t            \"ó\": \"&oacute;\",\n\t            \"ô\": \"&ocirc;\",\n\t            \"õ\": \"&otilde;\",\n\t            \"ö\": \"&ouml;\",\n\t            \"÷\": \"&divide;\",\n\t            \"ø\": \"&oslash;\",\n\t            \"ù\": \"&ugrave;\",\n\t            \"ú\": \"&uacute;\",\n\t            \"û\": \"&ucirc;\",\n\t            \"ü\": \"&uuml;\",\n\t            \"ý\": \"&yacute;\",\n\t            \"þ\": \"&thorn;\",\n\t            \"ÿ\": \"&yuml;\",\n\t            '\"': \"&quot;\",\n\t            \"&\": \"&amp;\",\n\t            \"<\": \"&lt;\",\n\t            \">\": \"&gt;\",\n\t            \"Œ\": \"&OElig;\",\n\t            \"œ\": \"&oelig;\",\n\t            \"Š\": \"&Scaron;\",\n\t            \"š\": \"&scaron;\",\n\t            \"Ÿ\": \"&Yuml;\",\n\t            \"ˆ\": \"&circ;\",\n\t            \"˜\": \"&tilde;\",\n\t            \" \": \"&ensp;\",\n\t            \" \": \"&emsp;\",\n\t            \" \": \"&thinsp;\",\n\t            \"‌\": \"&zwnj;\",\n\t            \"‍\": \"&zwj;\",\n\t            \"‎\": \"&lrm;\",\n\t            \"‏\": \"&rlm;\",\n\t            \"–\": \"&ndash;\",\n\t            \"—\": \"&mdash;\",\n\t            \"‘\": \"&lsquo;\",\n\t            \"’\": \"&rsquo;\",\n\t            \"‚\": \"&sbquo;\",\n\t            \"“\": \"&ldquo;\",\n\t            \"”\": \"&rdquo;\",\n\t            \"„\": \"&bdquo;\",\n\t            \"†\": \"&dagger;\",\n\t            \"‡\": \"&Dagger;\",\n\t            \"‰\": \"&permil;\",\n\t            \"‹\": \"&lsaquo;\",\n\t            \"›\": \"&rsaquo;\",\n\t            \"€\": \"&euro;\",\n\t            \"ƒ\": \"&fnof;\",\n\t            \"Α\": \"&Alpha;\",\n\t            \"Β\": \"&Beta;\",\n\t            \"Γ\": \"&Gamma;\",\n\t            \"Δ\": \"&Delta;\",\n\t            \"Ε\": \"&Epsilon;\",\n\t            \"Ζ\": \"&Zeta;\",\n\t            \"Η\": \"&Eta;\",\n\t            \"Θ\": \"&Theta;\",\n\t            \"Ι\": \"&Iota;\",\n\t            \"Κ\": \"&Kappa;\",\n\t            \"Λ\": \"&Lambda;\",\n\t            \"Μ\": \"&Mu;\",\n\t            \"Ν\": \"&Nu;\",\n\t            \"Ξ\": \"&Xi;\",\n\t            \"Ο\": \"&Omicron;\",\n\t            \"Π\": \"&Pi;\",\n\t            \"Ρ\": \"&Rho;\",\n\t            \"Σ\": \"&Sigma;\",\n\t            \"Τ\": \"&Tau;\",\n\t            \"Υ\": \"&Upsilon;\",\n\t            \"Φ\": \"&Phi;\",\n\t            \"Χ\": \"&Chi;\",\n\t            \"Ψ\": \"&Psi;\",\n\t            \"Ω\": \"&Omega;\",\n\t            \"α\": \"&alpha;\",\n\t            \"β\": \"&beta;\",\n\t            \"γ\": \"&gamma;\",\n\t            \"δ\": \"&delta;\",\n\t            \"ε\": \"&epsilon;\",\n\t            \"ζ\": \"&zeta;\",\n\t            \"η\": \"&eta;\",\n\t            \"θ\": \"&theta;\",\n\t            \"ι\": \"&iota;\",\n\t            \"κ\": \"&kappa;\",\n\t            \"λ\": \"&lambda;\",\n\t            \"μ\": \"&mu;\",\n\t            \"ν\": \"&nu;\",\n\t            \"ξ\": \"&xi;\",\n\t            \"ο\": \"&omicron;\",\n\t            \"π\": \"&pi;\",\n\t            \"ρ\": \"&rho;\",\n\t            \"ς\": \"&sigmaf;\",\n\t            \"σ\": \"&sigma;\",\n\t            \"τ\": \"&tau;\",\n\t            \"υ\": \"&upsilon;\",\n\t            \"φ\": \"&phi;\",\n\t            \"χ\": \"&chi;\",\n\t            \"ψ\": \"&psi;\",\n\t            \"ω\": \"&omega;\",\n\t            \"ϑ\": \"&thetasym;\",\n\t            \"ϒ\": \"&upsih;\",\n\t            \"ϖ\": \"&piv;\",\n\t            \"•\": \"&bull;\",\n\t            \"…\": \"&hellip;\",\n\t            \"′\": \"&prime;\",\n\t            \"″\": \"&Prime;\",\n\t            \"‾\": \"&oline;\",\n\t            \"⁄\": \"&frasl;\",\n\t            \"℘\": \"&weierp;\",\n\t            \"ℑ\": \"&image;\",\n\t            \"ℜ\": \"&real;\",\n\t            \"™\": \"&trade;\",\n\t            \"ℵ\": \"&alefsym;\",\n\t            \"←\": \"&larr;\",\n\t            \"↑\": \"&uarr;\",\n\t            \"→\": \"&rarr;\",\n\t            \"↓\": \"&darr;\",\n\t            \"↔\": \"&harr;\",\n\t            \"↵\": \"&crarr;\",\n\t            \"⇐\": \"&lArr;\",\n\t            \"⇑\": \"&uArr;\",\n\t            \"⇒\": \"&rArr;\",\n\t            \"⇓\": \"&dArr;\",\n\t            \"⇔\": \"&hArr;\",\n\t            \"∀\": \"&forall;\",\n\t            \"∂\": \"&part;\",\n\t            \"∃\": \"&exist;\",\n\t            \"∅\": \"&empty;\",\n\t            \"∇\": \"&nabla;\",\n\t            \"∈\": \"&isin;\",\n\t            \"∉\": \"&notin;\",\n\t            \"∋\": \"&ni;\",\n\t            \"∏\": \"&prod;\",\n\t            \"∑\": \"&sum;\",\n\t            \"−\": \"&minus;\",\n\t            \"∗\": \"&lowast;\",\n\t            \"√\": \"&radic;\",\n\t            \"∝\": \"&prop;\",\n\t            \"∞\": \"&infin;\",\n\t            \"∠\": \"&ang;\",\n\t            \"∧\": \"&and;\",\n\t            \"∨\": \"&or;\",\n\t            \"∩\": \"&cap;\",\n\t            \"∪\": \"&cup;\",\n\t            \"∫\": \"&int;\",\n\t            \"∴\": \"&there4;\",\n\t            \"∼\": \"&sim;\",\n\t            \"≅\": \"&cong;\",\n\t            \"≈\": \"&asymp;\",\n\t            \"≠\": \"&ne;\",\n\t            \"≡\": \"&equiv;\",\n\t            \"≤\": \"&le;\",\n\t            \"≥\": \"&ge;\",\n\t            \"⊂\": \"&sub;\",\n\t            \"⊃\": \"&sup;\",\n\t            \"⊄\": \"&nsub;\",\n\t            \"⊆\": \"&sube;\",\n\t            \"⊇\": \"&supe;\",\n\t            \"⊕\": \"&oplus;\",\n\t            \"⊗\": \"&otimes;\",\n\t            \"⊥\": \"&perp;\",\n\t            \"⋅\": \"&sdot;\",\n\t            \"⌈\": \"&lceil;\",\n\t            \"⌉\": \"&rceil;\",\n\t            \"⌊\": \"&lfloor;\",\n\t            \"⌋\": \"&rfloor;\",\n\t            \"〈\": \"&lang;\",\n\t            \"〉\": \"&rang;\",\n\t            \"◊\": \"&loz;\",\n\t            \"♠\": \"&spades;\",\n\t            \"♣\": \"&clubs;\",\n\t            \"♥\": \"&hearts;\",\n\t            \"♦\": \"&diams;\"\n\t        }\n\t    },\n\t    html5: {\n\t        entities: {\n\t            \"&AElig\": \"Æ\",\n\t            \"&AElig;\": \"Æ\",\n\t            \"&AMP\": \"&\",\n\t            \"&AMP;\": \"&\",\n\t            \"&Aacute\": \"Á\",\n\t            \"&Aacute;\": \"Á\",\n\t            \"&Abreve;\": \"Ă\",\n\t            \"&Acirc\": \"Â\",\n\t            \"&Acirc;\": \"Â\",\n\t            \"&Acy;\": \"А\",\n\t            \"&Afr;\": \"𝔄\",\n\t            \"&Agrave\": \"À\",\n\t            \"&Agrave;\": \"À\",\n\t            \"&Alpha;\": \"Α\",\n\t            \"&Amacr;\": \"Ā\",\n\t            \"&And;\": \"⩓\",\n\t            \"&Aogon;\": \"Ą\",\n\t            \"&Aopf;\": \"𝔸\",\n\t            \"&ApplyFunction;\": \"⁡\",\n\t            \"&Aring\": \"Å\",\n\t            \"&Aring;\": \"Å\",\n\t            \"&Ascr;\": \"𝒜\",\n\t            \"&Assign;\": \"≔\",\n\t            \"&Atilde\": \"Ã\",\n\t            \"&Atilde;\": \"Ã\",\n\t            \"&Auml\": \"Ä\",\n\t            \"&Auml;\": \"Ä\",\n\t            \"&Backslash;\": \"∖\",\n\t            \"&Barv;\": \"⫧\",\n\t            \"&Barwed;\": \"⌆\",\n\t            \"&Bcy;\": \"Б\",\n\t            \"&Because;\": \"∵\",\n\t            \"&Bernoullis;\": \"ℬ\",\n\t            \"&Beta;\": \"Β\",\n\t            \"&Bfr;\": \"𝔅\",\n\t            \"&Bopf;\": \"𝔹\",\n\t            \"&Breve;\": \"˘\",\n\t            \"&Bscr;\": \"ℬ\",\n\t            \"&Bumpeq;\": \"≎\",\n\t            \"&CHcy;\": \"Ч\",\n\t            \"&COPY\": \"©\",\n\t            \"&COPY;\": \"©\",\n\t            \"&Cacute;\": \"Ć\",\n\t            \"&Cap;\": \"⋒\",\n\t            \"&CapitalDifferentialD;\": \"ⅅ\",\n\t            \"&Cayleys;\": \"ℭ\",\n\t            \"&Ccaron;\": \"Č\",\n\t            \"&Ccedil\": \"Ç\",\n\t            \"&Ccedil;\": \"Ç\",\n\t            \"&Ccirc;\": \"Ĉ\",\n\t            \"&Cconint;\": \"∰\",\n\t            \"&Cdot;\": \"Ċ\",\n\t            \"&Cedilla;\": \"¸\",\n\t            \"&CenterDot;\": \"·\",\n\t            \"&Cfr;\": \"ℭ\",\n\t            \"&Chi;\": \"Χ\",\n\t            \"&CircleDot;\": \"⊙\",\n\t            \"&CircleMinus;\": \"⊖\",\n\t            \"&CirclePlus;\": \"⊕\",\n\t            \"&CircleTimes;\": \"⊗\",\n\t            \"&ClockwiseContourIntegral;\": \"∲\",\n\t            \"&CloseCurlyDoubleQuote;\": \"”\",\n\t            \"&CloseCurlyQuote;\": \"’\",\n\t            \"&Colon;\": \"∷\",\n\t            \"&Colone;\": \"⩴\",\n\t            \"&Congruent;\": \"≡\",\n\t            \"&Conint;\": \"∯\",\n\t            \"&ContourIntegral;\": \"∮\",\n\t            \"&Copf;\": \"ℂ\",\n\t            \"&Coproduct;\": \"∐\",\n\t            \"&CounterClockwiseContourIntegral;\": \"∳\",\n\t            \"&Cross;\": \"⨯\",\n\t            \"&Cscr;\": \"𝒞\",\n\t            \"&Cup;\": \"⋓\",\n\t            \"&CupCap;\": \"≍\",\n\t            \"&DD;\": \"ⅅ\",\n\t            \"&DDotrahd;\": \"⤑\",\n\t            \"&DJcy;\": \"Ђ\",\n\t            \"&DScy;\": \"Ѕ\",\n\t            \"&DZcy;\": \"Џ\",\n\t            \"&Dagger;\": \"‡\",\n\t            \"&Darr;\": \"↡\",\n\t            \"&Dashv;\": \"⫤\",\n\t            \"&Dcaron;\": \"Ď\",\n\t            \"&Dcy;\": \"Д\",\n\t            \"&Del;\": \"∇\",\n\t            \"&Delta;\": \"Δ\",\n\t            \"&Dfr;\": \"𝔇\",\n\t            \"&DiacriticalAcute;\": \"´\",\n\t            \"&DiacriticalDot;\": \"˙\",\n\t            \"&DiacriticalDoubleAcute;\": \"˝\",\n\t            \"&DiacriticalGrave;\": \"`\",\n\t            \"&DiacriticalTilde;\": \"˜\",\n\t            \"&Diamond;\": \"⋄\",\n\t            \"&DifferentialD;\": \"ⅆ\",\n\t            \"&Dopf;\": \"𝔻\",\n\t            \"&Dot;\": \"¨\",\n\t            \"&DotDot;\": \"⃜\",\n\t            \"&DotEqual;\": \"≐\",\n\t            \"&DoubleContourIntegral;\": \"∯\",\n\t            \"&DoubleDot;\": \"¨\",\n\t            \"&DoubleDownArrow;\": \"⇓\",\n\t            \"&DoubleLeftArrow;\": \"⇐\",\n\t            \"&DoubleLeftRightArrow;\": \"⇔\",\n\t            \"&DoubleLeftTee;\": \"⫤\",\n\t            \"&DoubleLongLeftArrow;\": \"⟸\",\n\t            \"&DoubleLongLeftRightArrow;\": \"⟺\",\n\t            \"&DoubleLongRightArrow;\": \"⟹\",\n\t            \"&DoubleRightArrow;\": \"⇒\",\n\t            \"&DoubleRightTee;\": \"⊨\",\n\t            \"&DoubleUpArrow;\": \"⇑\",\n\t            \"&DoubleUpDownArrow;\": \"⇕\",\n\t            \"&DoubleVerticalBar;\": \"∥\",\n\t            \"&DownArrow;\": \"↓\",\n\t            \"&DownArrowBar;\": \"⤓\",\n\t            \"&DownArrowUpArrow;\": \"⇵\",\n\t            \"&DownBreve;\": \"̑\",\n\t            \"&DownLeftRightVector;\": \"⥐\",\n\t            \"&DownLeftTeeVector;\": \"⥞\",\n\t            \"&DownLeftVector;\": \"↽\",\n\t            \"&DownLeftVectorBar;\": \"⥖\",\n\t            \"&DownRightTeeVector;\": \"⥟\",\n\t            \"&DownRightVector;\": \"⇁\",\n\t            \"&DownRightVectorBar;\": \"⥗\",\n\t            \"&DownTee;\": \"⊤\",\n\t            \"&DownTeeArrow;\": \"↧\",\n\t            \"&Downarrow;\": \"⇓\",\n\t            \"&Dscr;\": \"𝒟\",\n\t            \"&Dstrok;\": \"Đ\",\n\t            \"&ENG;\": \"Ŋ\",\n\t            \"&ETH\": \"Ð\",\n\t            \"&ETH;\": \"Ð\",\n\t            \"&Eacute\": \"É\",\n\t            \"&Eacute;\": \"É\",\n\t            \"&Ecaron;\": \"Ě\",\n\t            \"&Ecirc\": \"Ê\",\n\t            \"&Ecirc;\": \"Ê\",\n\t            \"&Ecy;\": \"Э\",\n\t            \"&Edot;\": \"Ė\",\n\t            \"&Efr;\": \"𝔈\",\n\t            \"&Egrave\": \"È\",\n\t            \"&Egrave;\": \"È\",\n\t            \"&Element;\": \"∈\",\n\t            \"&Emacr;\": \"Ē\",\n\t            \"&EmptySmallSquare;\": \"◻\",\n\t            \"&EmptyVerySmallSquare;\": \"▫\",\n\t            \"&Eogon;\": \"Ę\",\n\t            \"&Eopf;\": \"𝔼\",\n\t            \"&Epsilon;\": \"Ε\",\n\t            \"&Equal;\": \"⩵\",\n\t            \"&EqualTilde;\": \"≂\",\n\t            \"&Equilibrium;\": \"⇌\",\n\t            \"&Escr;\": \"ℰ\",\n\t            \"&Esim;\": \"⩳\",\n\t            \"&Eta;\": \"Η\",\n\t            \"&Euml\": \"Ë\",\n\t            \"&Euml;\": \"Ë\",\n\t            \"&Exists;\": \"∃\",\n\t            \"&ExponentialE;\": \"ⅇ\",\n\t            \"&Fcy;\": \"Ф\",\n\t            \"&Ffr;\": \"𝔉\",\n\t            \"&FilledSmallSquare;\": \"◼\",\n\t            \"&FilledVerySmallSquare;\": \"▪\",\n\t            \"&Fopf;\": \"𝔽\",\n\t            \"&ForAll;\": \"∀\",\n\t            \"&Fouriertrf;\": \"ℱ\",\n\t            \"&Fscr;\": \"ℱ\",\n\t            \"&GJcy;\": \"Ѓ\",\n\t            \"&GT\": \">\",\n\t            \"&GT;\": \">\",\n\t            \"&Gamma;\": \"Γ\",\n\t            \"&Gammad;\": \"Ϝ\",\n\t            \"&Gbreve;\": \"Ğ\",\n\t            \"&Gcedil;\": \"Ģ\",\n\t            \"&Gcirc;\": \"Ĝ\",\n\t            \"&Gcy;\": \"Г\",\n\t            \"&Gdot;\": \"Ġ\",\n\t            \"&Gfr;\": \"𝔊\",\n\t            \"&Gg;\": \"⋙\",\n\t            \"&Gopf;\": \"𝔾\",\n\t            \"&GreaterEqual;\": \"≥\",\n\t            \"&GreaterEqualLess;\": \"⋛\",\n\t            \"&GreaterFullEqual;\": \"≧\",\n\t            \"&GreaterGreater;\": \"⪢\",\n\t            \"&GreaterLess;\": \"≷\",\n\t            \"&GreaterSlantEqual;\": \"⩾\",\n\t            \"&GreaterTilde;\": \"≳\",\n\t            \"&Gscr;\": \"𝒢\",\n\t            \"&Gt;\": \"≫\",\n\t            \"&HARDcy;\": \"Ъ\",\n\t            \"&Hacek;\": \"ˇ\",\n\t            \"&Hat;\": \"^\",\n\t            \"&Hcirc;\": \"Ĥ\",\n\t            \"&Hfr;\": \"ℌ\",\n\t            \"&HilbertSpace;\": \"ℋ\",\n\t            \"&Hopf;\": \"ℍ\",\n\t            \"&HorizontalLine;\": \"─\",\n\t            \"&Hscr;\": \"ℋ\",\n\t            \"&Hstrok;\": \"Ħ\",\n\t            \"&HumpDownHump;\": \"≎\",\n\t            \"&HumpEqual;\": \"≏\",\n\t            \"&IEcy;\": \"Е\",\n\t            \"&IJlig;\": \"Ĳ\",\n\t            \"&IOcy;\": \"Ё\",\n\t            \"&Iacute\": \"Í\",\n\t            \"&Iacute;\": \"Í\",\n\t            \"&Icirc\": \"Î\",\n\t            \"&Icirc;\": \"Î\",\n\t            \"&Icy;\": \"И\",\n\t            \"&Idot;\": \"İ\",\n\t            \"&Ifr;\": \"ℑ\",\n\t            \"&Igrave\": \"Ì\",\n\t            \"&Igrave;\": \"Ì\",\n\t            \"&Im;\": \"ℑ\",\n\t            \"&Imacr;\": \"Ī\",\n\t            \"&ImaginaryI;\": \"ⅈ\",\n\t            \"&Implies;\": \"⇒\",\n\t            \"&Int;\": \"∬\",\n\t            \"&Integral;\": \"∫\",\n\t            \"&Intersection;\": \"⋂\",\n\t            \"&InvisibleComma;\": \"⁣\",\n\t            \"&InvisibleTimes;\": \"⁢\",\n\t            \"&Iogon;\": \"Į\",\n\t            \"&Iopf;\": \"𝕀\",\n\t            \"&Iota;\": \"Ι\",\n\t            \"&Iscr;\": \"ℐ\",\n\t            \"&Itilde;\": \"Ĩ\",\n\t            \"&Iukcy;\": \"І\",\n\t            \"&Iuml\": \"Ï\",\n\t            \"&Iuml;\": \"Ï\",\n\t            \"&Jcirc;\": \"Ĵ\",\n\t            \"&Jcy;\": \"Й\",\n\t            \"&Jfr;\": \"𝔍\",\n\t            \"&Jopf;\": \"𝕁\",\n\t            \"&Jscr;\": \"𝒥\",\n\t            \"&Jsercy;\": \"Ј\",\n\t            \"&Jukcy;\": \"Є\",\n\t            \"&KHcy;\": \"Х\",\n\t            \"&KJcy;\": \"Ќ\",\n\t            \"&Kappa;\": \"Κ\",\n\t            \"&Kcedil;\": \"Ķ\",\n\t            \"&Kcy;\": \"К\",\n\t            \"&Kfr;\": \"𝔎\",\n\t            \"&Kopf;\": \"𝕂\",\n\t            \"&Kscr;\": \"𝒦\",\n\t            \"&LJcy;\": \"Љ\",\n\t            \"&LT\": \"<\",\n\t            \"&LT;\": \"<\",\n\t            \"&Lacute;\": \"Ĺ\",\n\t            \"&Lambda;\": \"Λ\",\n\t            \"&Lang;\": \"⟪\",\n\t            \"&Laplacetrf;\": \"ℒ\",\n\t            \"&Larr;\": \"↞\",\n\t            \"&Lcaron;\": \"Ľ\",\n\t            \"&Lcedil;\": \"Ļ\",\n\t            \"&Lcy;\": \"Л\",\n\t            \"&LeftAngleBracket;\": \"⟨\",\n\t            \"&LeftArrow;\": \"←\",\n\t            \"&LeftArrowBar;\": \"⇤\",\n\t            \"&LeftArrowRightArrow;\": \"⇆\",\n\t            \"&LeftCeiling;\": \"⌈\",\n\t            \"&LeftDoubleBracket;\": \"⟦\",\n\t            \"&LeftDownTeeVector;\": \"⥡\",\n\t            \"&LeftDownVector;\": \"⇃\",\n\t            \"&LeftDownVectorBar;\": \"⥙\",\n\t            \"&LeftFloor;\": \"⌊\",\n\t            \"&LeftRightArrow;\": \"↔\",\n\t            \"&LeftRightVector;\": \"⥎\",\n\t            \"&LeftTee;\": \"⊣\",\n\t            \"&LeftTeeArrow;\": \"↤\",\n\t            \"&LeftTeeVector;\": \"⥚\",\n\t            \"&LeftTriangle;\": \"⊲\",\n\t            \"&LeftTriangleBar;\": \"⧏\",\n\t            \"&LeftTriangleEqual;\": \"⊴\",\n\t            \"&LeftUpDownVector;\": \"⥑\",\n\t            \"&LeftUpTeeVector;\": \"⥠\",\n\t            \"&LeftUpVector;\": \"↿\",\n\t            \"&LeftUpVectorBar;\": \"⥘\",\n\t            \"&LeftVector;\": \"↼\",\n\t            \"&LeftVectorBar;\": \"⥒\",\n\t            \"&Leftarrow;\": \"⇐\",\n\t            \"&Leftrightarrow;\": \"⇔\",\n\t            \"&LessEqualGreater;\": \"⋚\",\n\t            \"&LessFullEqual;\": \"≦\",\n\t            \"&LessGreater;\": \"≶\",\n\t            \"&LessLess;\": \"⪡\",\n\t            \"&LessSlantEqual;\": \"⩽\",\n\t            \"&LessTilde;\": \"≲\",\n\t            \"&Lfr;\": \"𝔏\",\n\t            \"&Ll;\": \"⋘\",\n\t            \"&Lleftarrow;\": \"⇚\",\n\t            \"&Lmidot;\": \"Ŀ\",\n\t            \"&LongLeftArrow;\": \"⟵\",\n\t            \"&LongLeftRightArrow;\": \"⟷\",\n\t            \"&LongRightArrow;\": \"⟶\",\n\t            \"&Longleftarrow;\": \"⟸\",\n\t            \"&Longleftrightarrow;\": \"⟺\",\n\t            \"&Longrightarrow;\": \"⟹\",\n\t            \"&Lopf;\": \"𝕃\",\n\t            \"&LowerLeftArrow;\": \"↙\",\n\t            \"&LowerRightArrow;\": \"↘\",\n\t            \"&Lscr;\": \"ℒ\",\n\t            \"&Lsh;\": \"↰\",\n\t            \"&Lstrok;\": \"Ł\",\n\t            \"&Lt;\": \"≪\",\n\t            \"&Map;\": \"⤅\",\n\t            \"&Mcy;\": \"М\",\n\t            \"&MediumSpace;\": \" \",\n\t            \"&Mellintrf;\": \"ℳ\",\n\t            \"&Mfr;\": \"𝔐\",\n\t            \"&MinusPlus;\": \"∓\",\n\t            \"&Mopf;\": \"𝕄\",\n\t            \"&Mscr;\": \"ℳ\",\n\t            \"&Mu;\": \"Μ\",\n\t            \"&NJcy;\": \"Њ\",\n\t            \"&Nacute;\": \"Ń\",\n\t            \"&Ncaron;\": \"Ň\",\n\t            \"&Ncedil;\": \"Ņ\",\n\t            \"&Ncy;\": \"Н\",\n\t            \"&NegativeMediumSpace;\": \"​\",\n\t            \"&NegativeThickSpace;\": \"​\",\n\t            \"&NegativeThinSpace;\": \"​\",\n\t            \"&NegativeVeryThinSpace;\": \"​\",\n\t            \"&NestedGreaterGreater;\": \"≫\",\n\t            \"&NestedLessLess;\": \"≪\",\n\t            \"&NewLine;\": \"\\n\",\n\t            \"&Nfr;\": \"𝔑\",\n\t            \"&NoBreak;\": \"⁠\",\n\t            \"&NonBreakingSpace;\": \" \",\n\t            \"&Nopf;\": \"ℕ\",\n\t            \"&Not;\": \"⫬\",\n\t            \"&NotCongruent;\": \"≢\",\n\t            \"&NotCupCap;\": \"≭\",\n\t            \"&NotDoubleVerticalBar;\": \"∦\",\n\t            \"&NotElement;\": \"∉\",\n\t            \"&NotEqual;\": \"≠\",\n\t            \"&NotEqualTilde;\": \"≂̸\",\n\t            \"&NotExists;\": \"∄\",\n\t            \"&NotGreater;\": \"≯\",\n\t            \"&NotGreaterEqual;\": \"≱\",\n\t            \"&NotGreaterFullEqual;\": \"≧̸\",\n\t            \"&NotGreaterGreater;\": \"≫̸\",\n\t            \"&NotGreaterLess;\": \"≹\",\n\t            \"&NotGreaterSlantEqual;\": \"⩾̸\",\n\t            \"&NotGreaterTilde;\": \"≵\",\n\t            \"&NotHumpDownHump;\": \"≎̸\",\n\t            \"&NotHumpEqual;\": \"≏̸\",\n\t            \"&NotLeftTriangle;\": \"⋪\",\n\t            \"&NotLeftTriangleBar;\": \"⧏̸\",\n\t            \"&NotLeftTriangleEqual;\": \"⋬\",\n\t            \"&NotLess;\": \"≮\",\n\t            \"&NotLessEqual;\": \"≰\",\n\t            \"&NotLessGreater;\": \"≸\",\n\t            \"&NotLessLess;\": \"≪̸\",\n\t            \"&NotLessSlantEqual;\": \"⩽̸\",\n\t            \"&NotLessTilde;\": \"≴\",\n\t            \"&NotNestedGreaterGreater;\": \"⪢̸\",\n\t            \"&NotNestedLessLess;\": \"⪡̸\",\n\t            \"&NotPrecedes;\": \"⊀\",\n\t            \"&NotPrecedesEqual;\": \"⪯̸\",\n\t            \"&NotPrecedesSlantEqual;\": \"⋠\",\n\t            \"&NotReverseElement;\": \"∌\",\n\t            \"&NotRightTriangle;\": \"⋫\",\n\t            \"&NotRightTriangleBar;\": \"⧐̸\",\n\t            \"&NotRightTriangleEqual;\": \"⋭\",\n\t            \"&NotSquareSubset;\": \"⊏̸\",\n\t            \"&NotSquareSubsetEqual;\": \"⋢\",\n\t            \"&NotSquareSuperset;\": \"⊐̸\",\n\t            \"&NotSquareSupersetEqual;\": \"⋣\",\n\t            \"&NotSubset;\": \"⊂⃒\",\n\t            \"&NotSubsetEqual;\": \"⊈\",\n\t            \"&NotSucceeds;\": \"⊁\",\n\t            \"&NotSucceedsEqual;\": \"⪰̸\",\n\t            \"&NotSucceedsSlantEqual;\": \"⋡\",\n\t            \"&NotSucceedsTilde;\": \"≿̸\",\n\t            \"&NotSuperset;\": \"⊃⃒\",\n\t            \"&NotSupersetEqual;\": \"⊉\",\n\t            \"&NotTilde;\": \"≁\",\n\t            \"&NotTildeEqual;\": \"≄\",\n\t            \"&NotTildeFullEqual;\": \"≇\",\n\t            \"&NotTildeTilde;\": \"≉\",\n\t            \"&NotVerticalBar;\": \"∤\",\n\t            \"&Nscr;\": \"𝒩\",\n\t            \"&Ntilde\": \"Ñ\",\n\t            \"&Ntilde;\": \"Ñ\",\n\t            \"&Nu;\": \"Ν\",\n\t            \"&OElig;\": \"Œ\",\n\t            \"&Oacute\": \"Ó\",\n\t            \"&Oacute;\": \"Ó\",\n\t            \"&Ocirc\": \"Ô\",\n\t            \"&Ocirc;\": \"Ô\",\n\t            \"&Ocy;\": \"О\",\n\t            \"&Odblac;\": \"Ő\",\n\t            \"&Ofr;\": \"𝔒\",\n\t            \"&Ograve\": \"Ò\",\n\t            \"&Ograve;\": \"Ò\",\n\t            \"&Omacr;\": \"Ō\",\n\t            \"&Omega;\": \"Ω\",\n\t            \"&Omicron;\": \"Ο\",\n\t            \"&Oopf;\": \"𝕆\",\n\t            \"&OpenCurlyDoubleQuote;\": \"“\",\n\t            \"&OpenCurlyQuote;\": \"‘\",\n\t            \"&Or;\": \"⩔\",\n\t            \"&Oscr;\": \"𝒪\",\n\t            \"&Oslash\": \"Ø\",\n\t            \"&Oslash;\": \"Ø\",\n\t            \"&Otilde\": \"Õ\",\n\t            \"&Otilde;\": \"Õ\",\n\t            \"&Otimes;\": \"⨷\",\n\t            \"&Ouml\": \"Ö\",\n\t            \"&Ouml;\": \"Ö\",\n\t            \"&OverBar;\": \"‾\",\n\t            \"&OverBrace;\": \"⏞\",\n\t            \"&OverBracket;\": \"⎴\",\n\t            \"&OverParenthesis;\": \"⏜\",\n\t            \"&PartialD;\": \"∂\",\n\t            \"&Pcy;\": \"П\",\n\t            \"&Pfr;\": \"𝔓\",\n\t            \"&Phi;\": \"Φ\",\n\t            \"&Pi;\": \"Π\",\n\t            \"&PlusMinus;\": \"±\",\n\t            \"&Poincareplane;\": \"ℌ\",\n\t            \"&Popf;\": \"ℙ\",\n\t            \"&Pr;\": \"⪻\",\n\t            \"&Precedes;\": \"≺\",\n\t            \"&PrecedesEqual;\": \"⪯\",\n\t            \"&PrecedesSlantEqual;\": \"≼\",\n\t            \"&PrecedesTilde;\": \"≾\",\n\t            \"&Prime;\": \"″\",\n\t            \"&Product;\": \"∏\",\n\t            \"&Proportion;\": \"∷\",\n\t            \"&Proportional;\": \"∝\",\n\t            \"&Pscr;\": \"𝒫\",\n\t            \"&Psi;\": \"Ψ\",\n\t            \"&QUOT\": '\"',\n\t            \"&QUOT;\": '\"',\n\t            \"&Qfr;\": \"𝔔\",\n\t            \"&Qopf;\": \"ℚ\",\n\t            \"&Qscr;\": \"𝒬\",\n\t            \"&RBarr;\": \"⤐\",\n\t            \"&REG\": \"®\",\n\t            \"&REG;\": \"®\",\n\t            \"&Racute;\": \"Ŕ\",\n\t            \"&Rang;\": \"⟫\",\n\t            \"&Rarr;\": \"↠\",\n\t            \"&Rarrtl;\": \"⤖\",\n\t            \"&Rcaron;\": \"Ř\",\n\t            \"&Rcedil;\": \"Ŗ\",\n\t            \"&Rcy;\": \"Р\",\n\t            \"&Re;\": \"ℜ\",\n\t            \"&ReverseElement;\": \"∋\",\n\t            \"&ReverseEquilibrium;\": \"⇋\",\n\t            \"&ReverseUpEquilibrium;\": \"⥯\",\n\t            \"&Rfr;\": \"ℜ\",\n\t            \"&Rho;\": \"Ρ\",\n\t            \"&RightAngleBracket;\": \"⟩\",\n\t            \"&RightArrow;\": \"→\",\n\t            \"&RightArrowBar;\": \"⇥\",\n\t            \"&RightArrowLeftArrow;\": \"⇄\",\n\t            \"&RightCeiling;\": \"⌉\",\n\t            \"&RightDoubleBracket;\": \"⟧\",\n\t            \"&RightDownTeeVector;\": \"⥝\",\n\t            \"&RightDownVector;\": \"⇂\",\n\t            \"&RightDownVectorBar;\": \"⥕\",\n\t            \"&RightFloor;\": \"⌋\",\n\t            \"&RightTee;\": \"⊢\",\n\t            \"&RightTeeArrow;\": \"↦\",\n\t            \"&RightTeeVector;\": \"⥛\",\n\t            \"&RightTriangle;\": \"⊳\",\n\t            \"&RightTriangleBar;\": \"⧐\",\n\t            \"&RightTriangleEqual;\": \"⊵\",\n\t            \"&RightUpDownVector;\": \"⥏\",\n\t            \"&RightUpTeeVector;\": \"⥜\",\n\t            \"&RightUpVector;\": \"↾\",\n\t            \"&RightUpVectorBar;\": \"⥔\",\n\t            \"&RightVector;\": \"⇀\",\n\t            \"&RightVectorBar;\": \"⥓\",\n\t            \"&Rightarrow;\": \"⇒\",\n\t            \"&Ropf;\": \"ℝ\",\n\t            \"&RoundImplies;\": \"⥰\",\n\t            \"&Rrightarrow;\": \"⇛\",\n\t            \"&Rscr;\": \"ℛ\",\n\t            \"&Rsh;\": \"↱\",\n\t            \"&RuleDelayed;\": \"⧴\",\n\t            \"&SHCHcy;\": \"Щ\",\n\t            \"&SHcy;\": \"Ш\",\n\t            \"&SOFTcy;\": \"Ь\",\n\t            \"&Sacute;\": \"Ś\",\n\t            \"&Sc;\": \"⪼\",\n\t            \"&Scaron;\": \"Š\",\n\t            \"&Scedil;\": \"Ş\",\n\t            \"&Scirc;\": \"Ŝ\",\n\t            \"&Scy;\": \"С\",\n\t            \"&Sfr;\": \"𝔖\",\n\t            \"&ShortDownArrow;\": \"↓\",\n\t            \"&ShortLeftArrow;\": \"←\",\n\t            \"&ShortRightArrow;\": \"→\",\n\t            \"&ShortUpArrow;\": \"↑\",\n\t            \"&Sigma;\": \"Σ\",\n\t            \"&SmallCircle;\": \"∘\",\n\t            \"&Sopf;\": \"𝕊\",\n\t            \"&Sqrt;\": \"√\",\n\t            \"&Square;\": \"□\",\n\t            \"&SquareIntersection;\": \"⊓\",\n\t            \"&SquareSubset;\": \"⊏\",\n\t            \"&SquareSubsetEqual;\": \"⊑\",\n\t            \"&SquareSuperset;\": \"⊐\",\n\t            \"&SquareSupersetEqual;\": \"⊒\",\n\t            \"&SquareUnion;\": \"⊔\",\n\t            \"&Sscr;\": \"𝒮\",\n\t            \"&Star;\": \"⋆\",\n\t            \"&Sub;\": \"⋐\",\n\t            \"&Subset;\": \"⋐\",\n\t            \"&SubsetEqual;\": \"⊆\",\n\t            \"&Succeeds;\": \"≻\",\n\t            \"&SucceedsEqual;\": \"⪰\",\n\t            \"&SucceedsSlantEqual;\": \"≽\",\n\t            \"&SucceedsTilde;\": \"≿\",\n\t            \"&SuchThat;\": \"∋\",\n\t            \"&Sum;\": \"∑\",\n\t            \"&Sup;\": \"⋑\",\n\t            \"&Superset;\": \"⊃\",\n\t            \"&SupersetEqual;\": \"⊇\",\n\t            \"&Supset;\": \"⋑\",\n\t            \"&THORN\": \"Þ\",\n\t            \"&THORN;\": \"Þ\",\n\t            \"&TRADE;\": \"™\",\n\t            \"&TSHcy;\": \"Ћ\",\n\t            \"&TScy;\": \"Ц\",\n\t            \"&Tab;\": \"\\t\",\n\t            \"&Tau;\": \"Τ\",\n\t            \"&Tcaron;\": \"Ť\",\n\t            \"&Tcedil;\": \"Ţ\",\n\t            \"&Tcy;\": \"Т\",\n\t            \"&Tfr;\": \"𝔗\",\n\t            \"&Therefore;\": \"∴\",\n\t            \"&Theta;\": \"Θ\",\n\t            \"&ThickSpace;\": \"  \",\n\t            \"&ThinSpace;\": \" \",\n\t            \"&Tilde;\": \"∼\",\n\t            \"&TildeEqual;\": \"≃\",\n\t            \"&TildeFullEqual;\": \"≅\",\n\t            \"&TildeTilde;\": \"≈\",\n\t            \"&Topf;\": \"𝕋\",\n\t            \"&TripleDot;\": \"⃛\",\n\t            \"&Tscr;\": \"𝒯\",\n\t            \"&Tstrok;\": \"Ŧ\",\n\t            \"&Uacute\": \"Ú\",\n\t            \"&Uacute;\": \"Ú\",\n\t            \"&Uarr;\": \"↟\",\n\t            \"&Uarrocir;\": \"⥉\",\n\t            \"&Ubrcy;\": \"Ў\",\n\t            \"&Ubreve;\": \"Ŭ\",\n\t            \"&Ucirc\": \"Û\",\n\t            \"&Ucirc;\": \"Û\",\n\t            \"&Ucy;\": \"У\",\n\t            \"&Udblac;\": \"Ű\",\n\t            \"&Ufr;\": \"𝔘\",\n\t            \"&Ugrave\": \"Ù\",\n\t            \"&Ugrave;\": \"Ù\",\n\t            \"&Umacr;\": \"Ū\",\n\t            \"&UnderBar;\": \"_\",\n\t            \"&UnderBrace;\": \"⏟\",\n\t            \"&UnderBracket;\": \"⎵\",\n\t            \"&UnderParenthesis;\": \"⏝\",\n\t            \"&Union;\": \"⋃\",\n\t            \"&UnionPlus;\": \"⊎\",\n\t            \"&Uogon;\": \"Ų\",\n\t            \"&Uopf;\": \"𝕌\",\n\t            \"&UpArrow;\": \"↑\",\n\t            \"&UpArrowBar;\": \"⤒\",\n\t            \"&UpArrowDownArrow;\": \"⇅\",\n\t            \"&UpDownArrow;\": \"↕\",\n\t            \"&UpEquilibrium;\": \"⥮\",\n\t            \"&UpTee;\": \"⊥\",\n\t            \"&UpTeeArrow;\": \"↥\",\n\t            \"&Uparrow;\": \"⇑\",\n\t            \"&Updownarrow;\": \"⇕\",\n\t            \"&UpperLeftArrow;\": \"↖\",\n\t            \"&UpperRightArrow;\": \"↗\",\n\t            \"&Upsi;\": \"ϒ\",\n\t            \"&Upsilon;\": \"Υ\",\n\t            \"&Uring;\": \"Ů\",\n\t            \"&Uscr;\": \"𝒰\",\n\t            \"&Utilde;\": \"Ũ\",\n\t            \"&Uuml\": \"Ü\",\n\t            \"&Uuml;\": \"Ü\",\n\t            \"&VDash;\": \"⊫\",\n\t            \"&Vbar;\": \"⫫\",\n\t            \"&Vcy;\": \"В\",\n\t            \"&Vdash;\": \"⊩\",\n\t            \"&Vdashl;\": \"⫦\",\n\t            \"&Vee;\": \"⋁\",\n\t            \"&Verbar;\": \"‖\",\n\t            \"&Vert;\": \"‖\",\n\t            \"&VerticalBar;\": \"∣\",\n\t            \"&VerticalLine;\": \"|\",\n\t            \"&VerticalSeparator;\": \"❘\",\n\t            \"&VerticalTilde;\": \"≀\",\n\t            \"&VeryThinSpace;\": \" \",\n\t            \"&Vfr;\": \"𝔙\",\n\t            \"&Vopf;\": \"𝕍\",\n\t            \"&Vscr;\": \"𝒱\",\n\t            \"&Vvdash;\": \"⊪\",\n\t            \"&Wcirc;\": \"Ŵ\",\n\t            \"&Wedge;\": \"⋀\",\n\t            \"&Wfr;\": \"𝔚\",\n\t            \"&Wopf;\": \"𝕎\",\n\t            \"&Wscr;\": \"𝒲\",\n\t            \"&Xfr;\": \"𝔛\",\n\t            \"&Xi;\": \"Ξ\",\n\t            \"&Xopf;\": \"𝕏\",\n\t            \"&Xscr;\": \"𝒳\",\n\t            \"&YAcy;\": \"Я\",\n\t            \"&YIcy;\": \"Ї\",\n\t            \"&YUcy;\": \"Ю\",\n\t            \"&Yacute\": \"Ý\",\n\t            \"&Yacute;\": \"Ý\",\n\t            \"&Ycirc;\": \"Ŷ\",\n\t            \"&Ycy;\": \"Ы\",\n\t            \"&Yfr;\": \"𝔜\",\n\t            \"&Yopf;\": \"𝕐\",\n\t            \"&Yscr;\": \"𝒴\",\n\t            \"&Yuml;\": \"Ÿ\",\n\t            \"&ZHcy;\": \"Ж\",\n\t            \"&Zacute;\": \"Ź\",\n\t            \"&Zcaron;\": \"Ž\",\n\t            \"&Zcy;\": \"З\",\n\t            \"&Zdot;\": \"Ż\",\n\t            \"&ZeroWidthSpace;\": \"​\",\n\t            \"&Zeta;\": \"Ζ\",\n\t            \"&Zfr;\": \"ℨ\",\n\t            \"&Zopf;\": \"ℤ\",\n\t            \"&Zscr;\": \"𝒵\",\n\t            \"&aacute\": \"á\",\n\t            \"&aacute;\": \"á\",\n\t            \"&abreve;\": \"ă\",\n\t            \"&ac;\": \"∾\",\n\t            \"&acE;\": \"∾̳\",\n\t            \"&acd;\": \"∿\",\n\t            \"&acirc\": \"â\",\n\t            \"&acirc;\": \"â\",\n\t            \"&acute\": \"´\",\n\t            \"&acute;\": \"´\",\n\t            \"&acy;\": \"а\",\n\t            \"&aelig\": \"æ\",\n\t            \"&aelig;\": \"æ\",\n\t            \"&af;\": \"⁡\",\n\t            \"&afr;\": \"𝔞\",\n\t            \"&agrave\": \"à\",\n\t            \"&agrave;\": \"à\",\n\t            \"&alefsym;\": \"ℵ\",\n\t            \"&aleph;\": \"ℵ\",\n\t            \"&alpha;\": \"α\",\n\t            \"&amacr;\": \"ā\",\n\t            \"&amalg;\": \"⨿\",\n\t            \"&amp\": \"&\",\n\t            \"&amp;\": \"&\",\n\t            \"&and;\": \"∧\",\n\t            \"&andand;\": \"⩕\",\n\t            \"&andd;\": \"⩜\",\n\t            \"&andslope;\": \"⩘\",\n\t            \"&andv;\": \"⩚\",\n\t            \"&ang;\": \"∠\",\n\t            \"&ange;\": \"⦤\",\n\t            \"&angle;\": \"∠\",\n\t            \"&angmsd;\": \"∡\",\n\t            \"&angmsdaa;\": \"⦨\",\n\t            \"&angmsdab;\": \"⦩\",\n\t            \"&angmsdac;\": \"⦪\",\n\t            \"&angmsdad;\": \"⦫\",\n\t            \"&angmsdae;\": \"⦬\",\n\t            \"&angmsdaf;\": \"⦭\",\n\t            \"&angmsdag;\": \"⦮\",\n\t            \"&angmsdah;\": \"⦯\",\n\t            \"&angrt;\": \"∟\",\n\t            \"&angrtvb;\": \"⊾\",\n\t            \"&angrtvbd;\": \"⦝\",\n\t            \"&angsph;\": \"∢\",\n\t            \"&angst;\": \"Å\",\n\t            \"&angzarr;\": \"⍼\",\n\t            \"&aogon;\": \"ą\",\n\t            \"&aopf;\": \"𝕒\",\n\t            \"&ap;\": \"≈\",\n\t            \"&apE;\": \"⩰\",\n\t            \"&apacir;\": \"⩯\",\n\t            \"&ape;\": \"≊\",\n\t            \"&apid;\": \"≋\",\n\t            \"&apos;\": \"'\",\n\t            \"&approx;\": \"≈\",\n\t            \"&approxeq;\": \"≊\",\n\t            \"&aring\": \"å\",\n\t            \"&aring;\": \"å\",\n\t            \"&ascr;\": \"𝒶\",\n\t            \"&ast;\": \"*\",\n\t            \"&asymp;\": \"≈\",\n\t            \"&asympeq;\": \"≍\",\n\t            \"&atilde\": \"ã\",\n\t            \"&atilde;\": \"ã\",\n\t            \"&auml\": \"ä\",\n\t            \"&auml;\": \"ä\",\n\t            \"&awconint;\": \"∳\",\n\t            \"&awint;\": \"⨑\",\n\t            \"&bNot;\": \"⫭\",\n\t            \"&backcong;\": \"≌\",\n\t            \"&backepsilon;\": \"϶\",\n\t            \"&backprime;\": \"‵\",\n\t            \"&backsim;\": \"∽\",\n\t            \"&backsimeq;\": \"⋍\",\n\t            \"&barvee;\": \"⊽\",\n\t            \"&barwed;\": \"⌅\",\n\t            \"&barwedge;\": \"⌅\",\n\t            \"&bbrk;\": \"⎵\",\n\t            \"&bbrktbrk;\": \"⎶\",\n\t            \"&bcong;\": \"≌\",\n\t            \"&bcy;\": \"б\",\n\t            \"&bdquo;\": \"„\",\n\t            \"&becaus;\": \"∵\",\n\t            \"&because;\": \"∵\",\n\t            \"&bemptyv;\": \"⦰\",\n\t            \"&bepsi;\": \"϶\",\n\t            \"&bernou;\": \"ℬ\",\n\t            \"&beta;\": \"β\",\n\t            \"&beth;\": \"ℶ\",\n\t            \"&between;\": \"≬\",\n\t            \"&bfr;\": \"𝔟\",\n\t            \"&bigcap;\": \"⋂\",\n\t            \"&bigcirc;\": \"◯\",\n\t            \"&bigcup;\": \"⋃\",\n\t            \"&bigodot;\": \"⨀\",\n\t            \"&bigoplus;\": \"⨁\",\n\t            \"&bigotimes;\": \"⨂\",\n\t            \"&bigsqcup;\": \"⨆\",\n\t            \"&bigstar;\": \"★\",\n\t            \"&bigtriangledown;\": \"▽\",\n\t            \"&bigtriangleup;\": \"△\",\n\t            \"&biguplus;\": \"⨄\",\n\t            \"&bigvee;\": \"⋁\",\n\t            \"&bigwedge;\": \"⋀\",\n\t            \"&bkarow;\": \"⤍\",\n\t            \"&blacklozenge;\": \"⧫\",\n\t            \"&blacksquare;\": \"▪\",\n\t            \"&blacktriangle;\": \"▴\",\n\t            \"&blacktriangledown;\": \"▾\",\n\t            \"&blacktriangleleft;\": \"◂\",\n\t            \"&blacktriangleright;\": \"▸\",\n\t            \"&blank;\": \"␣\",\n\t            \"&blk12;\": \"▒\",\n\t            \"&blk14;\": \"░\",\n\t            \"&blk34;\": \"▓\",\n\t            \"&block;\": \"█\",\n\t            \"&bne;\": \"=⃥\",\n\t            \"&bnequiv;\": \"≡⃥\",\n\t            \"&bnot;\": \"⌐\",\n\t            \"&bopf;\": \"𝕓\",\n\t            \"&bot;\": \"⊥\",\n\t            \"&bottom;\": \"⊥\",\n\t            \"&bowtie;\": \"⋈\",\n\t            \"&boxDL;\": \"╗\",\n\t            \"&boxDR;\": \"╔\",\n\t            \"&boxDl;\": \"╖\",\n\t            \"&boxDr;\": \"╓\",\n\t            \"&boxH;\": \"═\",\n\t            \"&boxHD;\": \"╦\",\n\t            \"&boxHU;\": \"╩\",\n\t            \"&boxHd;\": \"╤\",\n\t            \"&boxHu;\": \"╧\",\n\t            \"&boxUL;\": \"╝\",\n\t            \"&boxUR;\": \"╚\",\n\t            \"&boxUl;\": \"╜\",\n\t            \"&boxUr;\": \"╙\",\n\t            \"&boxV;\": \"║\",\n\t            \"&boxVH;\": \"╬\",\n\t            \"&boxVL;\": \"╣\",\n\t            \"&boxVR;\": \"╠\",\n\t            \"&boxVh;\": \"╫\",\n\t            \"&boxVl;\": \"╢\",\n\t            \"&boxVr;\": \"╟\",\n\t            \"&boxbox;\": \"⧉\",\n\t            \"&boxdL;\": \"╕\",\n\t            \"&boxdR;\": \"╒\",\n\t            \"&boxdl;\": \"┐\",\n\t            \"&boxdr;\": \"┌\",\n\t            \"&boxh;\": \"─\",\n\t            \"&boxhD;\": \"╥\",\n\t            \"&boxhU;\": \"╨\",\n\t            \"&boxhd;\": \"┬\",\n\t            \"&boxhu;\": \"┴\",\n\t            \"&boxminus;\": \"⊟\",\n\t            \"&boxplus;\": \"⊞\",\n\t            \"&boxtimes;\": \"⊠\",\n\t            \"&boxuL;\": \"╛\",\n\t            \"&boxuR;\": \"╘\",\n\t            \"&boxul;\": \"┘\",\n\t            \"&boxur;\": \"└\",\n\t            \"&boxv;\": \"│\",\n\t            \"&boxvH;\": \"╪\",\n\t            \"&boxvL;\": \"╡\",\n\t            \"&boxvR;\": \"╞\",\n\t            \"&boxvh;\": \"┼\",\n\t            \"&boxvl;\": \"┤\",\n\t            \"&boxvr;\": \"├\",\n\t            \"&bprime;\": \"‵\",\n\t            \"&breve;\": \"˘\",\n\t            \"&brvbar\": \"¦\",\n\t            \"&brvbar;\": \"¦\",\n\t            \"&bscr;\": \"𝒷\",\n\t            \"&bsemi;\": \"⁏\",\n\t            \"&bsim;\": \"∽\",\n\t            \"&bsime;\": \"⋍\",\n\t            \"&bsol;\": \"\\\\\",\n\t            \"&bsolb;\": \"⧅\",\n\t            \"&bsolhsub;\": \"⟈\",\n\t            \"&bull;\": \"•\",\n\t            \"&bullet;\": \"•\",\n\t            \"&bump;\": \"≎\",\n\t            \"&bumpE;\": \"⪮\",\n\t            \"&bumpe;\": \"≏\",\n\t            \"&bumpeq;\": \"≏\",\n\t            \"&cacute;\": \"ć\",\n\t            \"&cap;\": \"∩\",\n\t            \"&capand;\": \"⩄\",\n\t            \"&capbrcup;\": \"⩉\",\n\t            \"&capcap;\": \"⩋\",\n\t            \"&capcup;\": \"⩇\",\n\t            \"&capdot;\": \"⩀\",\n\t            \"&caps;\": \"∩︀\",\n\t            \"&caret;\": \"⁁\",\n\t            \"&caron;\": \"ˇ\",\n\t            \"&ccaps;\": \"⩍\",\n\t            \"&ccaron;\": \"č\",\n\t            \"&ccedil\": \"ç\",\n\t            \"&ccedil;\": \"ç\",\n\t            \"&ccirc;\": \"ĉ\",\n\t            \"&ccups;\": \"⩌\",\n\t            \"&ccupssm;\": \"⩐\",\n\t            \"&cdot;\": \"ċ\",\n\t            \"&cedil\": \"¸\",\n\t            \"&cedil;\": \"¸\",\n\t            \"&cemptyv;\": \"⦲\",\n\t            \"&cent\": \"¢\",\n\t            \"&cent;\": \"¢\",\n\t            \"&centerdot;\": \"·\",\n\t            \"&cfr;\": \"𝔠\",\n\t            \"&chcy;\": \"ч\",\n\t            \"&check;\": \"✓\",\n\t            \"&checkmark;\": \"✓\",\n\t            \"&chi;\": \"χ\",\n\t            \"&cir;\": \"○\",\n\t            \"&cirE;\": \"⧃\",\n\t            \"&circ;\": \"ˆ\",\n\t            \"&circeq;\": \"≗\",\n\t            \"&circlearrowleft;\": \"↺\",\n\t            \"&circlearrowright;\": \"↻\",\n\t            \"&circledR;\": \"®\",\n\t            \"&circledS;\": \"Ⓢ\",\n\t            \"&circledast;\": \"⊛\",\n\t            \"&circledcirc;\": \"⊚\",\n\t            \"&circleddash;\": \"⊝\",\n\t            \"&cire;\": \"≗\",\n\t            \"&cirfnint;\": \"⨐\",\n\t            \"&cirmid;\": \"⫯\",\n\t            \"&cirscir;\": \"⧂\",\n\t            \"&clubs;\": \"♣\",\n\t            \"&clubsuit;\": \"♣\",\n\t            \"&colon;\": \":\",\n\t            \"&colone;\": \"≔\",\n\t            \"&coloneq;\": \"≔\",\n\t            \"&comma;\": \",\",\n\t            \"&commat;\": \"@\",\n\t            \"&comp;\": \"∁\",\n\t            \"&compfn;\": \"∘\",\n\t            \"&complement;\": \"∁\",\n\t            \"&complexes;\": \"ℂ\",\n\t            \"&cong;\": \"≅\",\n\t            \"&congdot;\": \"⩭\",\n\t            \"&conint;\": \"∮\",\n\t            \"&copf;\": \"𝕔\",\n\t            \"&coprod;\": \"∐\",\n\t            \"&copy\": \"©\",\n\t            \"&copy;\": \"©\",\n\t            \"&copysr;\": \"℗\",\n\t            \"&crarr;\": \"↵\",\n\t            \"&cross;\": \"✗\",\n\t            \"&cscr;\": \"𝒸\",\n\t            \"&csub;\": \"⫏\",\n\t            \"&csube;\": \"⫑\",\n\t            \"&csup;\": \"⫐\",\n\t            \"&csupe;\": \"⫒\",\n\t            \"&ctdot;\": \"⋯\",\n\t            \"&cudarrl;\": \"⤸\",\n\t            \"&cudarrr;\": \"⤵\",\n\t            \"&cuepr;\": \"⋞\",\n\t            \"&cuesc;\": \"⋟\",\n\t            \"&cularr;\": \"↶\",\n\t            \"&cularrp;\": \"⤽\",\n\t            \"&cup;\": \"∪\",\n\t            \"&cupbrcap;\": \"⩈\",\n\t            \"&cupcap;\": \"⩆\",\n\t            \"&cupcup;\": \"⩊\",\n\t            \"&cupdot;\": \"⊍\",\n\t            \"&cupor;\": \"⩅\",\n\t            \"&cups;\": \"∪︀\",\n\t            \"&curarr;\": \"↷\",\n\t            \"&curarrm;\": \"⤼\",\n\t            \"&curlyeqprec;\": \"⋞\",\n\t            \"&curlyeqsucc;\": \"⋟\",\n\t            \"&curlyvee;\": \"⋎\",\n\t            \"&curlywedge;\": \"⋏\",\n\t            \"&curren\": \"¤\",\n\t            \"&curren;\": \"¤\",\n\t            \"&curvearrowleft;\": \"↶\",\n\t            \"&curvearrowright;\": \"↷\",\n\t            \"&cuvee;\": \"⋎\",\n\t            \"&cuwed;\": \"⋏\",\n\t            \"&cwconint;\": \"∲\",\n\t            \"&cwint;\": \"∱\",\n\t            \"&cylcty;\": \"⌭\",\n\t            \"&dArr;\": \"⇓\",\n\t            \"&dHar;\": \"⥥\",\n\t            \"&dagger;\": \"†\",\n\t            \"&daleth;\": \"ℸ\",\n\t            \"&darr;\": \"↓\",\n\t            \"&dash;\": \"‐\",\n\t            \"&dashv;\": \"⊣\",\n\t            \"&dbkarow;\": \"⤏\",\n\t            \"&dblac;\": \"˝\",\n\t            \"&dcaron;\": \"ď\",\n\t            \"&dcy;\": \"д\",\n\t            \"&dd;\": \"ⅆ\",\n\t            \"&ddagger;\": \"‡\",\n\t            \"&ddarr;\": \"⇊\",\n\t            \"&ddotseq;\": \"⩷\",\n\t            \"&deg\": \"°\",\n\t            \"&deg;\": \"°\",\n\t            \"&delta;\": \"δ\",\n\t            \"&demptyv;\": \"⦱\",\n\t            \"&dfisht;\": \"⥿\",\n\t            \"&dfr;\": \"𝔡\",\n\t            \"&dharl;\": \"⇃\",\n\t            \"&dharr;\": \"⇂\",\n\t            \"&diam;\": \"⋄\",\n\t            \"&diamond;\": \"⋄\",\n\t            \"&diamondsuit;\": \"♦\",\n\t            \"&diams;\": \"♦\",\n\t            \"&die;\": \"¨\",\n\t            \"&digamma;\": \"ϝ\",\n\t            \"&disin;\": \"⋲\",\n\t            \"&div;\": \"÷\",\n\t            \"&divide\": \"÷\",\n\t            \"&divide;\": \"÷\",\n\t            \"&divideontimes;\": \"⋇\",\n\t            \"&divonx;\": \"⋇\",\n\t            \"&djcy;\": \"ђ\",\n\t            \"&dlcorn;\": \"⌞\",\n\t            \"&dlcrop;\": \"⌍\",\n\t            \"&dollar;\": \"$\",\n\t            \"&dopf;\": \"𝕕\",\n\t            \"&dot;\": \"˙\",\n\t            \"&doteq;\": \"≐\",\n\t            \"&doteqdot;\": \"≑\",\n\t            \"&dotminus;\": \"∸\",\n\t            \"&dotplus;\": \"∔\",\n\t            \"&dotsquare;\": \"⊡\",\n\t            \"&doublebarwedge;\": \"⌆\",\n\t            \"&downarrow;\": \"↓\",\n\t            \"&downdownarrows;\": \"⇊\",\n\t            \"&downharpoonleft;\": \"⇃\",\n\t            \"&downharpoonright;\": \"⇂\",\n\t            \"&drbkarow;\": \"⤐\",\n\t            \"&drcorn;\": \"⌟\",\n\t            \"&drcrop;\": \"⌌\",\n\t            \"&dscr;\": \"𝒹\",\n\t            \"&dscy;\": \"ѕ\",\n\t            \"&dsol;\": \"⧶\",\n\t            \"&dstrok;\": \"đ\",\n\t            \"&dtdot;\": \"⋱\",\n\t            \"&dtri;\": \"▿\",\n\t            \"&dtrif;\": \"▾\",\n\t            \"&duarr;\": \"⇵\",\n\t            \"&duhar;\": \"⥯\",\n\t            \"&dwangle;\": \"⦦\",\n\t            \"&dzcy;\": \"џ\",\n\t            \"&dzigrarr;\": \"⟿\",\n\t            \"&eDDot;\": \"⩷\",\n\t            \"&eDot;\": \"≑\",\n\t            \"&eacute\": \"é\",\n\t            \"&eacute;\": \"é\",\n\t            \"&easter;\": \"⩮\",\n\t            \"&ecaron;\": \"ě\",\n\t            \"&ecir;\": \"≖\",\n\t            \"&ecirc\": \"ê\",\n\t            \"&ecirc;\": \"ê\",\n\t            \"&ecolon;\": \"≕\",\n\t            \"&ecy;\": \"э\",\n\t            \"&edot;\": \"ė\",\n\t            \"&ee;\": \"ⅇ\",\n\t            \"&efDot;\": \"≒\",\n\t            \"&efr;\": \"𝔢\",\n\t            \"&eg;\": \"⪚\",\n\t            \"&egrave\": \"è\",\n\t            \"&egrave;\": \"è\",\n\t            \"&egs;\": \"⪖\",\n\t            \"&egsdot;\": \"⪘\",\n\t            \"&el;\": \"⪙\",\n\t            \"&elinters;\": \"⏧\",\n\t            \"&ell;\": \"ℓ\",\n\t            \"&els;\": \"⪕\",\n\t            \"&elsdot;\": \"⪗\",\n\t            \"&emacr;\": \"ē\",\n\t            \"&empty;\": \"∅\",\n\t            \"&emptyset;\": \"∅\",\n\t            \"&emptyv;\": \"∅\",\n\t            \"&emsp13;\": \" \",\n\t            \"&emsp14;\": \" \",\n\t            \"&emsp;\": \" \",\n\t            \"&eng;\": \"ŋ\",\n\t            \"&ensp;\": \" \",\n\t            \"&eogon;\": \"ę\",\n\t            \"&eopf;\": \"𝕖\",\n\t            \"&epar;\": \"⋕\",\n\t            \"&eparsl;\": \"⧣\",\n\t            \"&eplus;\": \"⩱\",\n\t            \"&epsi;\": \"ε\",\n\t            \"&epsilon;\": \"ε\",\n\t            \"&epsiv;\": \"ϵ\",\n\t            \"&eqcirc;\": \"≖\",\n\t            \"&eqcolon;\": \"≕\",\n\t            \"&eqsim;\": \"≂\",\n\t            \"&eqslantgtr;\": \"⪖\",\n\t            \"&eqslantless;\": \"⪕\",\n\t            \"&equals;\": \"=\",\n\t            \"&equest;\": \"≟\",\n\t            \"&equiv;\": \"≡\",\n\t            \"&equivDD;\": \"⩸\",\n\t            \"&eqvparsl;\": \"⧥\",\n\t            \"&erDot;\": \"≓\",\n\t            \"&erarr;\": \"⥱\",\n\t            \"&escr;\": \"ℯ\",\n\t            \"&esdot;\": \"≐\",\n\t            \"&esim;\": \"≂\",\n\t            \"&eta;\": \"η\",\n\t            \"&eth\": \"ð\",\n\t            \"&eth;\": \"ð\",\n\t            \"&euml\": \"ë\",\n\t            \"&euml;\": \"ë\",\n\t            \"&euro;\": \"€\",\n\t            \"&excl;\": \"!\",\n\t            \"&exist;\": \"∃\",\n\t            \"&expectation;\": \"ℰ\",\n\t            \"&exponentiale;\": \"ⅇ\",\n\t            \"&fallingdotseq;\": \"≒\",\n\t            \"&fcy;\": \"ф\",\n\t            \"&female;\": \"♀\",\n\t            \"&ffilig;\": \"ﬃ\",\n\t            \"&fflig;\": \"ﬀ\",\n\t            \"&ffllig;\": \"ﬄ\",\n\t            \"&ffr;\": \"𝔣\",\n\t            \"&filig;\": \"ﬁ\",\n\t            \"&fjlig;\": \"fj\",\n\t            \"&flat;\": \"♭\",\n\t            \"&fllig;\": \"ﬂ\",\n\t            \"&fltns;\": \"▱\",\n\t            \"&fnof;\": \"ƒ\",\n\t            \"&fopf;\": \"𝕗\",\n\t            \"&forall;\": \"∀\",\n\t            \"&fork;\": \"⋔\",\n\t            \"&forkv;\": \"⫙\",\n\t            \"&fpartint;\": \"⨍\",\n\t            \"&frac12\": \"½\",\n\t            \"&frac12;\": \"½\",\n\t            \"&frac13;\": \"⅓\",\n\t            \"&frac14\": \"¼\",\n\t            \"&frac14;\": \"¼\",\n\t            \"&frac15;\": \"⅕\",\n\t            \"&frac16;\": \"⅙\",\n\t            \"&frac18;\": \"⅛\",\n\t            \"&frac23;\": \"⅔\",\n\t            \"&frac25;\": \"⅖\",\n\t            \"&frac34\": \"¾\",\n\t            \"&frac34;\": \"¾\",\n\t            \"&frac35;\": \"⅗\",\n\t            \"&frac38;\": \"⅜\",\n\t            \"&frac45;\": \"⅘\",\n\t            \"&frac56;\": \"⅚\",\n\t            \"&frac58;\": \"⅝\",\n\t            \"&frac78;\": \"⅞\",\n\t            \"&frasl;\": \"⁄\",\n\t            \"&frown;\": \"⌢\",\n\t            \"&fscr;\": \"𝒻\",\n\t            \"&gE;\": \"≧\",\n\t            \"&gEl;\": \"⪌\",\n\t            \"&gacute;\": \"ǵ\",\n\t            \"&gamma;\": \"γ\",\n\t            \"&gammad;\": \"ϝ\",\n\t            \"&gap;\": \"⪆\",\n\t            \"&gbreve;\": \"ğ\",\n\t            \"&gcirc;\": \"ĝ\",\n\t            \"&gcy;\": \"г\",\n\t            \"&gdot;\": \"ġ\",\n\t            \"&ge;\": \"≥\",\n\t            \"&gel;\": \"⋛\",\n\t            \"&geq;\": \"≥\",\n\t            \"&geqq;\": \"≧\",\n\t            \"&geqslant;\": \"⩾\",\n\t            \"&ges;\": \"⩾\",\n\t            \"&gescc;\": \"⪩\",\n\t            \"&gesdot;\": \"⪀\",\n\t            \"&gesdoto;\": \"⪂\",\n\t            \"&gesdotol;\": \"⪄\",\n\t            \"&gesl;\": \"⋛︀\",\n\t            \"&gesles;\": \"⪔\",\n\t            \"&gfr;\": \"𝔤\",\n\t            \"&gg;\": \"≫\",\n\t            \"&ggg;\": \"⋙\",\n\t            \"&gimel;\": \"ℷ\",\n\t            \"&gjcy;\": \"ѓ\",\n\t            \"&gl;\": \"≷\",\n\t            \"&glE;\": \"⪒\",\n\t            \"&gla;\": \"⪥\",\n\t            \"&glj;\": \"⪤\",\n\t            \"&gnE;\": \"≩\",\n\t            \"&gnap;\": \"⪊\",\n\t            \"&gnapprox;\": \"⪊\",\n\t            \"&gne;\": \"⪈\",\n\t            \"&gneq;\": \"⪈\",\n\t            \"&gneqq;\": \"≩\",\n\t            \"&gnsim;\": \"⋧\",\n\t            \"&gopf;\": \"𝕘\",\n\t            \"&grave;\": \"`\",\n\t            \"&gscr;\": \"ℊ\",\n\t            \"&gsim;\": \"≳\",\n\t            \"&gsime;\": \"⪎\",\n\t            \"&gsiml;\": \"⪐\",\n\t            \"&gt\": \">\",\n\t            \"&gt;\": \">\",\n\t            \"&gtcc;\": \"⪧\",\n\t            \"&gtcir;\": \"⩺\",\n\t            \"&gtdot;\": \"⋗\",\n\t            \"&gtlPar;\": \"⦕\",\n\t            \"&gtquest;\": \"⩼\",\n\t            \"&gtrapprox;\": \"⪆\",\n\t            \"&gtrarr;\": \"⥸\",\n\t            \"&gtrdot;\": \"⋗\",\n\t            \"&gtreqless;\": \"⋛\",\n\t            \"&gtreqqless;\": \"⪌\",\n\t            \"&gtrless;\": \"≷\",\n\t            \"&gtrsim;\": \"≳\",\n\t            \"&gvertneqq;\": \"≩︀\",\n\t            \"&gvnE;\": \"≩︀\",\n\t            \"&hArr;\": \"⇔\",\n\t            \"&hairsp;\": \" \",\n\t            \"&half;\": \"½\",\n\t            \"&hamilt;\": \"ℋ\",\n\t            \"&hardcy;\": \"ъ\",\n\t            \"&harr;\": \"↔\",\n\t            \"&harrcir;\": \"⥈\",\n\t            \"&harrw;\": \"↭\",\n\t            \"&hbar;\": \"ℏ\",\n\t            \"&hcirc;\": \"ĥ\",\n\t            \"&hearts;\": \"♥\",\n\t            \"&heartsuit;\": \"♥\",\n\t            \"&hellip;\": \"…\",\n\t            \"&hercon;\": \"⊹\",\n\t            \"&hfr;\": \"𝔥\",\n\t            \"&hksearow;\": \"⤥\",\n\t            \"&hkswarow;\": \"⤦\",\n\t            \"&hoarr;\": \"⇿\",\n\t            \"&homtht;\": \"∻\",\n\t            \"&hookleftarrow;\": \"↩\",\n\t            \"&hookrightarrow;\": \"↪\",\n\t            \"&hopf;\": \"𝕙\",\n\t            \"&horbar;\": \"―\",\n\t            \"&hscr;\": \"𝒽\",\n\t            \"&hslash;\": \"ℏ\",\n\t            \"&hstrok;\": \"ħ\",\n\t            \"&hybull;\": \"⁃\",\n\t            \"&hyphen;\": \"‐\",\n\t            \"&iacute\": \"í\",\n\t            \"&iacute;\": \"í\",\n\t            \"&ic;\": \"⁣\",\n\t            \"&icirc\": \"î\",\n\t            \"&icirc;\": \"î\",\n\t            \"&icy;\": \"и\",\n\t            \"&iecy;\": \"е\",\n\t            \"&iexcl\": \"¡\",\n\t            \"&iexcl;\": \"¡\",\n\t            \"&iff;\": \"⇔\",\n\t            \"&ifr;\": \"𝔦\",\n\t            \"&igrave\": \"ì\",\n\t            \"&igrave;\": \"ì\",\n\t            \"&ii;\": \"ⅈ\",\n\t            \"&iiiint;\": \"⨌\",\n\t            \"&iiint;\": \"∭\",\n\t            \"&iinfin;\": \"⧜\",\n\t            \"&iiota;\": \"℩\",\n\t            \"&ijlig;\": \"ĳ\",\n\t            \"&imacr;\": \"ī\",\n\t            \"&image;\": \"ℑ\",\n\t            \"&imagline;\": \"ℐ\",\n\t            \"&imagpart;\": \"ℑ\",\n\t            \"&imath;\": \"ı\",\n\t            \"&imof;\": \"⊷\",\n\t            \"&imped;\": \"Ƶ\",\n\t            \"&in;\": \"∈\",\n\t            \"&incare;\": \"℅\",\n\t            \"&infin;\": \"∞\",\n\t            \"&infintie;\": \"⧝\",\n\t            \"&inodot;\": \"ı\",\n\t            \"&int;\": \"∫\",\n\t            \"&intcal;\": \"⊺\",\n\t            \"&integers;\": \"ℤ\",\n\t            \"&intercal;\": \"⊺\",\n\t            \"&intlarhk;\": \"⨗\",\n\t            \"&intprod;\": \"⨼\",\n\t            \"&iocy;\": \"ё\",\n\t            \"&iogon;\": \"į\",\n\t            \"&iopf;\": \"𝕚\",\n\t            \"&iota;\": \"ι\",\n\t            \"&iprod;\": \"⨼\",\n\t            \"&iquest\": \"¿\",\n\t            \"&iquest;\": \"¿\",\n\t            \"&iscr;\": \"𝒾\",\n\t            \"&isin;\": \"∈\",\n\t            \"&isinE;\": \"⋹\",\n\t            \"&isindot;\": \"⋵\",\n\t            \"&isins;\": \"⋴\",\n\t            \"&isinsv;\": \"⋳\",\n\t            \"&isinv;\": \"∈\",\n\t            \"&it;\": \"⁢\",\n\t            \"&itilde;\": \"ĩ\",\n\t            \"&iukcy;\": \"і\",\n\t            \"&iuml\": \"ï\",\n\t            \"&iuml;\": \"ï\",\n\t            \"&jcirc;\": \"ĵ\",\n\t            \"&jcy;\": \"й\",\n\t            \"&jfr;\": \"𝔧\",\n\t            \"&jmath;\": \"ȷ\",\n\t            \"&jopf;\": \"𝕛\",\n\t            \"&jscr;\": \"𝒿\",\n\t            \"&jsercy;\": \"ј\",\n\t            \"&jukcy;\": \"є\",\n\t            \"&kappa;\": \"κ\",\n\t            \"&kappav;\": \"ϰ\",\n\t            \"&kcedil;\": \"ķ\",\n\t            \"&kcy;\": \"к\",\n\t            \"&kfr;\": \"𝔨\",\n\t            \"&kgreen;\": \"ĸ\",\n\t            \"&khcy;\": \"х\",\n\t            \"&kjcy;\": \"ќ\",\n\t            \"&kopf;\": \"𝕜\",\n\t            \"&kscr;\": \"𝓀\",\n\t            \"&lAarr;\": \"⇚\",\n\t            \"&lArr;\": \"⇐\",\n\t            \"&lAtail;\": \"⤛\",\n\t            \"&lBarr;\": \"⤎\",\n\t            \"&lE;\": \"≦\",\n\t            \"&lEg;\": \"⪋\",\n\t            \"&lHar;\": \"⥢\",\n\t            \"&lacute;\": \"ĺ\",\n\t            \"&laemptyv;\": \"⦴\",\n\t            \"&lagran;\": \"ℒ\",\n\t            \"&lambda;\": \"λ\",\n\t            \"&lang;\": \"⟨\",\n\t            \"&langd;\": \"⦑\",\n\t            \"&langle;\": \"⟨\",\n\t            \"&lap;\": \"⪅\",\n\t            \"&laquo\": \"«\",\n\t            \"&laquo;\": \"«\",\n\t            \"&larr;\": \"←\",\n\t            \"&larrb;\": \"⇤\",\n\t            \"&larrbfs;\": \"⤟\",\n\t            \"&larrfs;\": \"⤝\",\n\t            \"&larrhk;\": \"↩\",\n\t            \"&larrlp;\": \"↫\",\n\t            \"&larrpl;\": \"⤹\",\n\t            \"&larrsim;\": \"⥳\",\n\t            \"&larrtl;\": \"↢\",\n\t            \"&lat;\": \"⪫\",\n\t            \"&latail;\": \"⤙\",\n\t            \"&late;\": \"⪭\",\n\t            \"&lates;\": \"⪭︀\",\n\t            \"&lbarr;\": \"⤌\",\n\t            \"&lbbrk;\": \"❲\",\n\t            \"&lbrace;\": \"{\",\n\t            \"&lbrack;\": \"[\",\n\t            \"&lbrke;\": \"⦋\",\n\t            \"&lbrksld;\": \"⦏\",\n\t            \"&lbrkslu;\": \"⦍\",\n\t            \"&lcaron;\": \"ľ\",\n\t            \"&lcedil;\": \"ļ\",\n\t            \"&lceil;\": \"⌈\",\n\t            \"&lcub;\": \"{\",\n\t            \"&lcy;\": \"л\",\n\t            \"&ldca;\": \"⤶\",\n\t            \"&ldquo;\": \"“\",\n\t            \"&ldquor;\": \"„\",\n\t            \"&ldrdhar;\": \"⥧\",\n\t            \"&ldrushar;\": \"⥋\",\n\t            \"&ldsh;\": \"↲\",\n\t            \"&le;\": \"≤\",\n\t            \"&leftarrow;\": \"←\",\n\t            \"&leftarrowtail;\": \"↢\",\n\t            \"&leftharpoondown;\": \"↽\",\n\t            \"&leftharpoonup;\": \"↼\",\n\t            \"&leftleftarrows;\": \"⇇\",\n\t            \"&leftrightarrow;\": \"↔\",\n\t            \"&leftrightarrows;\": \"⇆\",\n\t            \"&leftrightharpoons;\": \"⇋\",\n\t            \"&leftrightsquigarrow;\": \"↭\",\n\t            \"&leftthreetimes;\": \"⋋\",\n\t            \"&leg;\": \"⋚\",\n\t            \"&leq;\": \"≤\",\n\t            \"&leqq;\": \"≦\",\n\t            \"&leqslant;\": \"⩽\",\n\t            \"&les;\": \"⩽\",\n\t            \"&lescc;\": \"⪨\",\n\t            \"&lesdot;\": \"⩿\",\n\t            \"&lesdoto;\": \"⪁\",\n\t            \"&lesdotor;\": \"⪃\",\n\t            \"&lesg;\": \"⋚︀\",\n\t            \"&lesges;\": \"⪓\",\n\t            \"&lessapprox;\": \"⪅\",\n\t            \"&lessdot;\": \"⋖\",\n\t            \"&lesseqgtr;\": \"⋚\",\n\t            \"&lesseqqgtr;\": \"⪋\",\n\t            \"&lessgtr;\": \"≶\",\n\t            \"&lesssim;\": \"≲\",\n\t            \"&lfisht;\": \"⥼\",\n\t            \"&lfloor;\": \"⌊\",\n\t            \"&lfr;\": \"𝔩\",\n\t            \"&lg;\": \"≶\",\n\t            \"&lgE;\": \"⪑\",\n\t            \"&lhard;\": \"↽\",\n\t            \"&lharu;\": \"↼\",\n\t            \"&lharul;\": \"⥪\",\n\t            \"&lhblk;\": \"▄\",\n\t            \"&ljcy;\": \"љ\",\n\t            \"&ll;\": \"≪\",\n\t            \"&llarr;\": \"⇇\",\n\t            \"&llcorner;\": \"⌞\",\n\t            \"&llhard;\": \"⥫\",\n\t            \"&lltri;\": \"◺\",\n\t            \"&lmidot;\": \"ŀ\",\n\t            \"&lmoust;\": \"⎰\",\n\t            \"&lmoustache;\": \"⎰\",\n\t            \"&lnE;\": \"≨\",\n\t            \"&lnap;\": \"⪉\",\n\t            \"&lnapprox;\": \"⪉\",\n\t            \"&lne;\": \"⪇\",\n\t            \"&lneq;\": \"⪇\",\n\t            \"&lneqq;\": \"≨\",\n\t            \"&lnsim;\": \"⋦\",\n\t            \"&loang;\": \"⟬\",\n\t            \"&loarr;\": \"⇽\",\n\t            \"&lobrk;\": \"⟦\",\n\t            \"&longleftarrow;\": \"⟵\",\n\t            \"&longleftrightarrow;\": \"⟷\",\n\t            \"&longmapsto;\": \"⟼\",\n\t            \"&longrightarrow;\": \"⟶\",\n\t            \"&looparrowleft;\": \"↫\",\n\t            \"&looparrowright;\": \"↬\",\n\t            \"&lopar;\": \"⦅\",\n\t            \"&lopf;\": \"𝕝\",\n\t            \"&loplus;\": \"⨭\",\n\t            \"&lotimes;\": \"⨴\",\n\t            \"&lowast;\": \"∗\",\n\t            \"&lowbar;\": \"_\",\n\t            \"&loz;\": \"◊\",\n\t            \"&lozenge;\": \"◊\",\n\t            \"&lozf;\": \"⧫\",\n\t            \"&lpar;\": \"(\",\n\t            \"&lparlt;\": \"⦓\",\n\t            \"&lrarr;\": \"⇆\",\n\t            \"&lrcorner;\": \"⌟\",\n\t            \"&lrhar;\": \"⇋\",\n\t            \"&lrhard;\": \"⥭\",\n\t            \"&lrm;\": \"‎\",\n\t            \"&lrtri;\": \"⊿\",\n\t            \"&lsaquo;\": \"‹\",\n\t            \"&lscr;\": \"𝓁\",\n\t            \"&lsh;\": \"↰\",\n\t            \"&lsim;\": \"≲\",\n\t            \"&lsime;\": \"⪍\",\n\t            \"&lsimg;\": \"⪏\",\n\t            \"&lsqb;\": \"[\",\n\t            \"&lsquo;\": \"‘\",\n\t            \"&lsquor;\": \"‚\",\n\t            \"&lstrok;\": \"ł\",\n\t            \"&lt\": \"<\",\n\t            \"&lt;\": \"<\",\n\t            \"&ltcc;\": \"⪦\",\n\t            \"&ltcir;\": \"⩹\",\n\t            \"&ltdot;\": \"⋖\",\n\t            \"&lthree;\": \"⋋\",\n\t            \"&ltimes;\": \"⋉\",\n\t            \"&ltlarr;\": \"⥶\",\n\t            \"&ltquest;\": \"⩻\",\n\t            \"&ltrPar;\": \"⦖\",\n\t            \"&ltri;\": \"◃\",\n\t            \"&ltrie;\": \"⊴\",\n\t            \"&ltrif;\": \"◂\",\n\t            \"&lurdshar;\": \"⥊\",\n\t            \"&luruhar;\": \"⥦\",\n\t            \"&lvertneqq;\": \"≨︀\",\n\t            \"&lvnE;\": \"≨︀\",\n\t            \"&mDDot;\": \"∺\",\n\t            \"&macr\": \"¯\",\n\t            \"&macr;\": \"¯\",\n\t            \"&male;\": \"♂\",\n\t            \"&malt;\": \"✠\",\n\t            \"&maltese;\": \"✠\",\n\t            \"&map;\": \"↦\",\n\t            \"&mapsto;\": \"↦\",\n\t            \"&mapstodown;\": \"↧\",\n\t            \"&mapstoleft;\": \"↤\",\n\t            \"&mapstoup;\": \"↥\",\n\t            \"&marker;\": \"▮\",\n\t            \"&mcomma;\": \"⨩\",\n\t            \"&mcy;\": \"м\",\n\t            \"&mdash;\": \"—\",\n\t            \"&measuredangle;\": \"∡\",\n\t            \"&mfr;\": \"𝔪\",\n\t            \"&mho;\": \"℧\",\n\t            \"&micro\": \"µ\",\n\t            \"&micro;\": \"µ\",\n\t            \"&mid;\": \"∣\",\n\t            \"&midast;\": \"*\",\n\t            \"&midcir;\": \"⫰\",\n\t            \"&middot\": \"·\",\n\t            \"&middot;\": \"·\",\n\t            \"&minus;\": \"−\",\n\t            \"&minusb;\": \"⊟\",\n\t            \"&minusd;\": \"∸\",\n\t            \"&minusdu;\": \"⨪\",\n\t            \"&mlcp;\": \"⫛\",\n\t            \"&mldr;\": \"…\",\n\t            \"&mnplus;\": \"∓\",\n\t            \"&models;\": \"⊧\",\n\t            \"&mopf;\": \"𝕞\",\n\t            \"&mp;\": \"∓\",\n\t            \"&mscr;\": \"𝓂\",\n\t            \"&mstpos;\": \"∾\",\n\t            \"&mu;\": \"μ\",\n\t            \"&multimap;\": \"⊸\",\n\t            \"&mumap;\": \"⊸\",\n\t            \"&nGg;\": \"⋙̸\",\n\t            \"&nGt;\": \"≫⃒\",\n\t            \"&nGtv;\": \"≫̸\",\n\t            \"&nLeftarrow;\": \"⇍\",\n\t            \"&nLeftrightarrow;\": \"⇎\",\n\t            \"&nLl;\": \"⋘̸\",\n\t            \"&nLt;\": \"≪⃒\",\n\t            \"&nLtv;\": \"≪̸\",\n\t            \"&nRightarrow;\": \"⇏\",\n\t            \"&nVDash;\": \"⊯\",\n\t            \"&nVdash;\": \"⊮\",\n\t            \"&nabla;\": \"∇\",\n\t            \"&nacute;\": \"ń\",\n\t            \"&nang;\": \"∠⃒\",\n\t            \"&nap;\": \"≉\",\n\t            \"&napE;\": \"⩰̸\",\n\t            \"&napid;\": \"≋̸\",\n\t            \"&napos;\": \"ŉ\",\n\t            \"&napprox;\": \"≉\",\n\t            \"&natur;\": \"♮\",\n\t            \"&natural;\": \"♮\",\n\t            \"&naturals;\": \"ℕ\",\n\t            \"&nbsp\": \" \",\n\t            \"&nbsp;\": \" \",\n\t            \"&nbump;\": \"≎̸\",\n\t            \"&nbumpe;\": \"≏̸\",\n\t            \"&ncap;\": \"⩃\",\n\t            \"&ncaron;\": \"ň\",\n\t            \"&ncedil;\": \"ņ\",\n\t            \"&ncong;\": \"≇\",\n\t            \"&ncongdot;\": \"⩭̸\",\n\t            \"&ncup;\": \"⩂\",\n\t            \"&ncy;\": \"н\",\n\t            \"&ndash;\": \"–\",\n\t            \"&ne;\": \"≠\",\n\t            \"&neArr;\": \"⇗\",\n\t            \"&nearhk;\": \"⤤\",\n\t            \"&nearr;\": \"↗\",\n\t            \"&nearrow;\": \"↗\",\n\t            \"&nedot;\": \"≐̸\",\n\t            \"&nequiv;\": \"≢\",\n\t            \"&nesear;\": \"⤨\",\n\t            \"&nesim;\": \"≂̸\",\n\t            \"&nexist;\": \"∄\",\n\t            \"&nexists;\": \"∄\",\n\t            \"&nfr;\": \"𝔫\",\n\t            \"&ngE;\": \"≧̸\",\n\t            \"&nge;\": \"≱\",\n\t            \"&ngeq;\": \"≱\",\n\t            \"&ngeqq;\": \"≧̸\",\n\t            \"&ngeqslant;\": \"⩾̸\",\n\t            \"&nges;\": \"⩾̸\",\n\t            \"&ngsim;\": \"≵\",\n\t            \"&ngt;\": \"≯\",\n\t            \"&ngtr;\": \"≯\",\n\t            \"&nhArr;\": \"⇎\",\n\t            \"&nharr;\": \"↮\",\n\t            \"&nhpar;\": \"⫲\",\n\t            \"&ni;\": \"∋\",\n\t            \"&nis;\": \"⋼\",\n\t            \"&nisd;\": \"⋺\",\n\t            \"&niv;\": \"∋\",\n\t            \"&njcy;\": \"њ\",\n\t            \"&nlArr;\": \"⇍\",\n\t            \"&nlE;\": \"≦̸\",\n\t            \"&nlarr;\": \"↚\",\n\t            \"&nldr;\": \"‥\",\n\t            \"&nle;\": \"≰\",\n\t            \"&nleftarrow;\": \"↚\",\n\t            \"&nleftrightarrow;\": \"↮\",\n\t            \"&nleq;\": \"≰\",\n\t            \"&nleqq;\": \"≦̸\",\n\t            \"&nleqslant;\": \"⩽̸\",\n\t            \"&nles;\": \"⩽̸\",\n\t            \"&nless;\": \"≮\",\n\t            \"&nlsim;\": \"≴\",\n\t            \"&nlt;\": \"≮\",\n\t            \"&nltri;\": \"⋪\",\n\t            \"&nltrie;\": \"⋬\",\n\t            \"&nmid;\": \"∤\",\n\t            \"&nopf;\": \"𝕟\",\n\t            \"&not\": \"¬\",\n\t            \"&not;\": \"¬\",\n\t            \"&notin;\": \"∉\",\n\t            \"&notinE;\": \"⋹̸\",\n\t            \"&notindot;\": \"⋵̸\",\n\t            \"&notinva;\": \"∉\",\n\t            \"&notinvb;\": \"⋷\",\n\t            \"&notinvc;\": \"⋶\",\n\t            \"&notni;\": \"∌\",\n\t            \"&notniva;\": \"∌\",\n\t            \"&notnivb;\": \"⋾\",\n\t            \"&notnivc;\": \"⋽\",\n\t            \"&npar;\": \"∦\",\n\t            \"&nparallel;\": \"∦\",\n\t            \"&nparsl;\": \"⫽⃥\",\n\t            \"&npart;\": \"∂̸\",\n\t            \"&npolint;\": \"⨔\",\n\t            \"&npr;\": \"⊀\",\n\t            \"&nprcue;\": \"⋠\",\n\t            \"&npre;\": \"⪯̸\",\n\t            \"&nprec;\": \"⊀\",\n\t            \"&npreceq;\": \"⪯̸\",\n\t            \"&nrArr;\": \"⇏\",\n\t            \"&nrarr;\": \"↛\",\n\t            \"&nrarrc;\": \"⤳̸\",\n\t            \"&nrarrw;\": \"↝̸\",\n\t            \"&nrightarrow;\": \"↛\",\n\t            \"&nrtri;\": \"⋫\",\n\t            \"&nrtrie;\": \"⋭\",\n\t            \"&nsc;\": \"⊁\",\n\t            \"&nsccue;\": \"⋡\",\n\t            \"&nsce;\": \"⪰̸\",\n\t            \"&nscr;\": \"𝓃\",\n\t            \"&nshortmid;\": \"∤\",\n\t            \"&nshortparallel;\": \"∦\",\n\t            \"&nsim;\": \"≁\",\n\t            \"&nsime;\": \"≄\",\n\t            \"&nsimeq;\": \"≄\",\n\t            \"&nsmid;\": \"∤\",\n\t            \"&nspar;\": \"∦\",\n\t            \"&nsqsube;\": \"⋢\",\n\t            \"&nsqsupe;\": \"⋣\",\n\t            \"&nsub;\": \"⊄\",\n\t            \"&nsubE;\": \"⫅̸\",\n\t            \"&nsube;\": \"⊈\",\n\t            \"&nsubset;\": \"⊂⃒\",\n\t            \"&nsubseteq;\": \"⊈\",\n\t            \"&nsubseteqq;\": \"⫅̸\",\n\t            \"&nsucc;\": \"⊁\",\n\t            \"&nsucceq;\": \"⪰̸\",\n\t            \"&nsup;\": \"⊅\",\n\t            \"&nsupE;\": \"⫆̸\",\n\t            \"&nsupe;\": \"⊉\",\n\t            \"&nsupset;\": \"⊃⃒\",\n\t            \"&nsupseteq;\": \"⊉\",\n\t            \"&nsupseteqq;\": \"⫆̸\",\n\t            \"&ntgl;\": \"≹\",\n\t            \"&ntilde\": \"ñ\",\n\t            \"&ntilde;\": \"ñ\",\n\t            \"&ntlg;\": \"≸\",\n\t            \"&ntriangleleft;\": \"⋪\",\n\t            \"&ntrianglelefteq;\": \"⋬\",\n\t            \"&ntriangleright;\": \"⋫\",\n\t            \"&ntrianglerighteq;\": \"⋭\",\n\t            \"&nu;\": \"ν\",\n\t            \"&num;\": \"#\",\n\t            \"&numero;\": \"№\",\n\t            \"&numsp;\": \" \",\n\t            \"&nvDash;\": \"⊭\",\n\t            \"&nvHarr;\": \"⤄\",\n\t            \"&nvap;\": \"≍⃒\",\n\t            \"&nvdash;\": \"⊬\",\n\t            \"&nvge;\": \"≥⃒\",\n\t            \"&nvgt;\": \">⃒\",\n\t            \"&nvinfin;\": \"⧞\",\n\t            \"&nvlArr;\": \"⤂\",\n\t            \"&nvle;\": \"≤⃒\",\n\t            \"&nvlt;\": \"<⃒\",\n\t            \"&nvltrie;\": \"⊴⃒\",\n\t            \"&nvrArr;\": \"⤃\",\n\t            \"&nvrtrie;\": \"⊵⃒\",\n\t            \"&nvsim;\": \"∼⃒\",\n\t            \"&nwArr;\": \"⇖\",\n\t            \"&nwarhk;\": \"⤣\",\n\t            \"&nwarr;\": \"↖\",\n\t            \"&nwarrow;\": \"↖\",\n\t            \"&nwnear;\": \"⤧\",\n\t            \"&oS;\": \"Ⓢ\",\n\t            \"&oacute\": \"ó\",\n\t            \"&oacute;\": \"ó\",\n\t            \"&oast;\": \"⊛\",\n\t            \"&ocir;\": \"⊚\",\n\t            \"&ocirc\": \"ô\",\n\t            \"&ocirc;\": \"ô\",\n\t            \"&ocy;\": \"о\",\n\t            \"&odash;\": \"⊝\",\n\t            \"&odblac;\": \"ő\",\n\t            \"&odiv;\": \"⨸\",\n\t            \"&odot;\": \"⊙\",\n\t            \"&odsold;\": \"⦼\",\n\t            \"&oelig;\": \"œ\",\n\t            \"&ofcir;\": \"⦿\",\n\t            \"&ofr;\": \"𝔬\",\n\t            \"&ogon;\": \"˛\",\n\t            \"&ograve\": \"ò\",\n\t            \"&ograve;\": \"ò\",\n\t            \"&ogt;\": \"⧁\",\n\t            \"&ohbar;\": \"⦵\",\n\t            \"&ohm;\": \"Ω\",\n\t            \"&oint;\": \"∮\",\n\t            \"&olarr;\": \"↺\",\n\t            \"&olcir;\": \"⦾\",\n\t            \"&olcross;\": \"⦻\",\n\t            \"&oline;\": \"‾\",\n\t            \"&olt;\": \"⧀\",\n\t            \"&omacr;\": \"ō\",\n\t            \"&omega;\": \"ω\",\n\t            \"&omicron;\": \"ο\",\n\t            \"&omid;\": \"⦶\",\n\t            \"&ominus;\": \"⊖\",\n\t            \"&oopf;\": \"𝕠\",\n\t            \"&opar;\": \"⦷\",\n\t            \"&operp;\": \"⦹\",\n\t            \"&oplus;\": \"⊕\",\n\t            \"&or;\": \"∨\",\n\t            \"&orarr;\": \"↻\",\n\t            \"&ord;\": \"⩝\",\n\t            \"&order;\": \"ℴ\",\n\t            \"&orderof;\": \"ℴ\",\n\t            \"&ordf\": \"ª\",\n\t            \"&ordf;\": \"ª\",\n\t            \"&ordm\": \"º\",\n\t            \"&ordm;\": \"º\",\n\t            \"&origof;\": \"⊶\",\n\t            \"&oror;\": \"⩖\",\n\t            \"&orslope;\": \"⩗\",\n\t            \"&orv;\": \"⩛\",\n\t            \"&oscr;\": \"ℴ\",\n\t            \"&oslash\": \"ø\",\n\t            \"&oslash;\": \"ø\",\n\t            \"&osol;\": \"⊘\",\n\t            \"&otilde\": \"õ\",\n\t            \"&otilde;\": \"õ\",\n\t            \"&otimes;\": \"⊗\",\n\t            \"&otimesas;\": \"⨶\",\n\t            \"&ouml\": \"ö\",\n\t            \"&ouml;\": \"ö\",\n\t            \"&ovbar;\": \"⌽\",\n\t            \"&par;\": \"∥\",\n\t            \"&para\": \"¶\",\n\t            \"&para;\": \"¶\",\n\t            \"&parallel;\": \"∥\",\n\t            \"&parsim;\": \"⫳\",\n\t            \"&parsl;\": \"⫽\",\n\t            \"&part;\": \"∂\",\n\t            \"&pcy;\": \"п\",\n\t            \"&percnt;\": \"%\",\n\t            \"&period;\": \".\",\n\t            \"&permil;\": \"‰\",\n\t            \"&perp;\": \"⊥\",\n\t            \"&pertenk;\": \"‱\",\n\t            \"&pfr;\": \"𝔭\",\n\t            \"&phi;\": \"φ\",\n\t            \"&phiv;\": \"ϕ\",\n\t            \"&phmmat;\": \"ℳ\",\n\t            \"&phone;\": \"☎\",\n\t            \"&pi;\": \"π\",\n\t            \"&pitchfork;\": \"⋔\",\n\t            \"&piv;\": \"ϖ\",\n\t            \"&planck;\": \"ℏ\",\n\t            \"&planckh;\": \"ℎ\",\n\t            \"&plankv;\": \"ℏ\",\n\t            \"&plus;\": \"+\",\n\t            \"&plusacir;\": \"⨣\",\n\t            \"&plusb;\": \"⊞\",\n\t            \"&pluscir;\": \"⨢\",\n\t            \"&plusdo;\": \"∔\",\n\t            \"&plusdu;\": \"⨥\",\n\t            \"&pluse;\": \"⩲\",\n\t            \"&plusmn\": \"±\",\n\t            \"&plusmn;\": \"±\",\n\t            \"&plussim;\": \"⨦\",\n\t            \"&plustwo;\": \"⨧\",\n\t            \"&pm;\": \"±\",\n\t            \"&pointint;\": \"⨕\",\n\t            \"&popf;\": \"𝕡\",\n\t            \"&pound\": \"£\",\n\t            \"&pound;\": \"£\",\n\t            \"&pr;\": \"≺\",\n\t            \"&prE;\": \"⪳\",\n\t            \"&prap;\": \"⪷\",\n\t            \"&prcue;\": \"≼\",\n\t            \"&pre;\": \"⪯\",\n\t            \"&prec;\": \"≺\",\n\t            \"&precapprox;\": \"⪷\",\n\t            \"&preccurlyeq;\": \"≼\",\n\t            \"&preceq;\": \"⪯\",\n\t            \"&precnapprox;\": \"⪹\",\n\t            \"&precneqq;\": \"⪵\",\n\t            \"&precnsim;\": \"⋨\",\n\t            \"&precsim;\": \"≾\",\n\t            \"&prime;\": \"′\",\n\t            \"&primes;\": \"ℙ\",\n\t            \"&prnE;\": \"⪵\",\n\t            \"&prnap;\": \"⪹\",\n\t            \"&prnsim;\": \"⋨\",\n\t            \"&prod;\": \"∏\",\n\t            \"&profalar;\": \"⌮\",\n\t            \"&profline;\": \"⌒\",\n\t            \"&profsurf;\": \"⌓\",\n\t            \"&prop;\": \"∝\",\n\t            \"&propto;\": \"∝\",\n\t            \"&prsim;\": \"≾\",\n\t            \"&prurel;\": \"⊰\",\n\t            \"&pscr;\": \"𝓅\",\n\t            \"&psi;\": \"ψ\",\n\t            \"&puncsp;\": \" \",\n\t            \"&qfr;\": \"𝔮\",\n\t            \"&qint;\": \"⨌\",\n\t            \"&qopf;\": \"𝕢\",\n\t            \"&qprime;\": \"⁗\",\n\t            \"&qscr;\": \"𝓆\",\n\t            \"&quaternions;\": \"ℍ\",\n\t            \"&quatint;\": \"⨖\",\n\t            \"&quest;\": \"?\",\n\t            \"&questeq;\": \"≟\",\n\t            \"&quot\": '\"',\n\t            \"&quot;\": '\"',\n\t            \"&rAarr;\": \"⇛\",\n\t            \"&rArr;\": \"⇒\",\n\t            \"&rAtail;\": \"⤜\",\n\t            \"&rBarr;\": \"⤏\",\n\t            \"&rHar;\": \"⥤\",\n\t            \"&race;\": \"∽̱\",\n\t            \"&racute;\": \"ŕ\",\n\t            \"&radic;\": \"√\",\n\t            \"&raemptyv;\": \"⦳\",\n\t            \"&rang;\": \"⟩\",\n\t            \"&rangd;\": \"⦒\",\n\t            \"&range;\": \"⦥\",\n\t            \"&rangle;\": \"⟩\",\n\t            \"&raquo\": \"»\",\n\t            \"&raquo;\": \"»\",\n\t            \"&rarr;\": \"→\",\n\t            \"&rarrap;\": \"⥵\",\n\t            \"&rarrb;\": \"⇥\",\n\t            \"&rarrbfs;\": \"⤠\",\n\t            \"&rarrc;\": \"⤳\",\n\t            \"&rarrfs;\": \"⤞\",\n\t            \"&rarrhk;\": \"↪\",\n\t            \"&rarrlp;\": \"↬\",\n\t            \"&rarrpl;\": \"⥅\",\n\t            \"&rarrsim;\": \"⥴\",\n\t            \"&rarrtl;\": \"↣\",\n\t            \"&rarrw;\": \"↝\",\n\t            \"&ratail;\": \"⤚\",\n\t            \"&ratio;\": \"∶\",\n\t            \"&rationals;\": \"ℚ\",\n\t            \"&rbarr;\": \"⤍\",\n\t            \"&rbbrk;\": \"❳\",\n\t            \"&rbrace;\": \"}\",\n\t            \"&rbrack;\": \"]\",\n\t            \"&rbrke;\": \"⦌\",\n\t            \"&rbrksld;\": \"⦎\",\n\t            \"&rbrkslu;\": \"⦐\",\n\t            \"&rcaron;\": \"ř\",\n\t            \"&rcedil;\": \"ŗ\",\n\t            \"&rceil;\": \"⌉\",\n\t            \"&rcub;\": \"}\",\n\t            \"&rcy;\": \"р\",\n\t            \"&rdca;\": \"⤷\",\n\t            \"&rdldhar;\": \"⥩\",\n\t            \"&rdquo;\": \"”\",\n\t            \"&rdquor;\": \"”\",\n\t            \"&rdsh;\": \"↳\",\n\t            \"&real;\": \"ℜ\",\n\t            \"&realine;\": \"ℛ\",\n\t            \"&realpart;\": \"ℜ\",\n\t            \"&reals;\": \"ℝ\",\n\t            \"&rect;\": \"▭\",\n\t            \"&reg\": \"®\",\n\t            \"&reg;\": \"®\",\n\t            \"&rfisht;\": \"⥽\",\n\t            \"&rfloor;\": \"⌋\",\n\t            \"&rfr;\": \"𝔯\",\n\t            \"&rhard;\": \"⇁\",\n\t            \"&rharu;\": \"⇀\",\n\t            \"&rharul;\": \"⥬\",\n\t            \"&rho;\": \"ρ\",\n\t            \"&rhov;\": \"ϱ\",\n\t            \"&rightarrow;\": \"→\",\n\t            \"&rightarrowtail;\": \"↣\",\n\t            \"&rightharpoondown;\": \"⇁\",\n\t            \"&rightharpoonup;\": \"⇀\",\n\t            \"&rightleftarrows;\": \"⇄\",\n\t            \"&rightleftharpoons;\": \"⇌\",\n\t            \"&rightrightarrows;\": \"⇉\",\n\t            \"&rightsquigarrow;\": \"↝\",\n\t            \"&rightthreetimes;\": \"⋌\",\n\t            \"&ring;\": \"˚\",\n\t            \"&risingdotseq;\": \"≓\",\n\t            \"&rlarr;\": \"⇄\",\n\t            \"&rlhar;\": \"⇌\",\n\t            \"&rlm;\": \"‏\",\n\t            \"&rmoust;\": \"⎱\",\n\t            \"&rmoustache;\": \"⎱\",\n\t            \"&rnmid;\": \"⫮\",\n\t            \"&roang;\": \"⟭\",\n\t            \"&roarr;\": \"⇾\",\n\t            \"&robrk;\": \"⟧\",\n\t            \"&ropar;\": \"⦆\",\n\t            \"&ropf;\": \"𝕣\",\n\t            \"&roplus;\": \"⨮\",\n\t            \"&rotimes;\": \"⨵\",\n\t            \"&rpar;\": \")\",\n\t            \"&rpargt;\": \"⦔\",\n\t            \"&rppolint;\": \"⨒\",\n\t            \"&rrarr;\": \"⇉\",\n\t            \"&rsaquo;\": \"›\",\n\t            \"&rscr;\": \"𝓇\",\n\t            \"&rsh;\": \"↱\",\n\t            \"&rsqb;\": \"]\",\n\t            \"&rsquo;\": \"’\",\n\t            \"&rsquor;\": \"’\",\n\t            \"&rthree;\": \"⋌\",\n\t            \"&rtimes;\": \"⋊\",\n\t            \"&rtri;\": \"▹\",\n\t            \"&rtrie;\": \"⊵\",\n\t            \"&rtrif;\": \"▸\",\n\t            \"&rtriltri;\": \"⧎\",\n\t            \"&ruluhar;\": \"⥨\",\n\t            \"&rx;\": \"℞\",\n\t            \"&sacute;\": \"ś\",\n\t            \"&sbquo;\": \"‚\",\n\t            \"&sc;\": \"≻\",\n\t            \"&scE;\": \"⪴\",\n\t            \"&scap;\": \"⪸\",\n\t            \"&scaron;\": \"š\",\n\t            \"&sccue;\": \"≽\",\n\t            \"&sce;\": \"⪰\",\n\t            \"&scedil;\": \"ş\",\n\t            \"&scirc;\": \"ŝ\",\n\t            \"&scnE;\": \"⪶\",\n\t            \"&scnap;\": \"⪺\",\n\t            \"&scnsim;\": \"⋩\",\n\t            \"&scpolint;\": \"⨓\",\n\t            \"&scsim;\": \"≿\",\n\t            \"&scy;\": \"с\",\n\t            \"&sdot;\": \"⋅\",\n\t            \"&sdotb;\": \"⊡\",\n\t            \"&sdote;\": \"⩦\",\n\t            \"&seArr;\": \"⇘\",\n\t            \"&searhk;\": \"⤥\",\n\t            \"&searr;\": \"↘\",\n\t            \"&searrow;\": \"↘\",\n\t            \"&sect\": \"§\",\n\t            \"&sect;\": \"§\",\n\t            \"&semi;\": \";\",\n\t            \"&seswar;\": \"⤩\",\n\t            \"&setminus;\": \"∖\",\n\t            \"&setmn;\": \"∖\",\n\t            \"&sext;\": \"✶\",\n\t            \"&sfr;\": \"𝔰\",\n\t            \"&sfrown;\": \"⌢\",\n\t            \"&sharp;\": \"♯\",\n\t            \"&shchcy;\": \"щ\",\n\t            \"&shcy;\": \"ш\",\n\t            \"&shortmid;\": \"∣\",\n\t            \"&shortparallel;\": \"∥\",\n\t            \"&shy\": \"­\",\n\t            \"&shy;\": \"­\",\n\t            \"&sigma;\": \"σ\",\n\t            \"&sigmaf;\": \"ς\",\n\t            \"&sigmav;\": \"ς\",\n\t            \"&sim;\": \"∼\",\n\t            \"&simdot;\": \"⩪\",\n\t            \"&sime;\": \"≃\",\n\t            \"&simeq;\": \"≃\",\n\t            \"&simg;\": \"⪞\",\n\t            \"&simgE;\": \"⪠\",\n\t            \"&siml;\": \"⪝\",\n\t            \"&simlE;\": \"⪟\",\n\t            \"&simne;\": \"≆\",\n\t            \"&simplus;\": \"⨤\",\n\t            \"&simrarr;\": \"⥲\",\n\t            \"&slarr;\": \"←\",\n\t            \"&smallsetminus;\": \"∖\",\n\t            \"&smashp;\": \"⨳\",\n\t            \"&smeparsl;\": \"⧤\",\n\t            \"&smid;\": \"∣\",\n\t            \"&smile;\": \"⌣\",\n\t            \"&smt;\": \"⪪\",\n\t            \"&smte;\": \"⪬\",\n\t            \"&smtes;\": \"⪬︀\",\n\t            \"&softcy;\": \"ь\",\n\t            \"&sol;\": \"/\",\n\t            \"&solb;\": \"⧄\",\n\t            \"&solbar;\": \"⌿\",\n\t            \"&sopf;\": \"𝕤\",\n\t            \"&spades;\": \"♠\",\n\t            \"&spadesuit;\": \"♠\",\n\t            \"&spar;\": \"∥\",\n\t            \"&sqcap;\": \"⊓\",\n\t            \"&sqcaps;\": \"⊓︀\",\n\t            \"&sqcup;\": \"⊔\",\n\t            \"&sqcups;\": \"⊔︀\",\n\t            \"&sqsub;\": \"⊏\",\n\t            \"&sqsube;\": \"⊑\",\n\t            \"&sqsubset;\": \"⊏\",\n\t            \"&sqsubseteq;\": \"⊑\",\n\t            \"&sqsup;\": \"⊐\",\n\t            \"&sqsupe;\": \"⊒\",\n\t            \"&sqsupset;\": \"⊐\",\n\t            \"&sqsupseteq;\": \"⊒\",\n\t            \"&squ;\": \"□\",\n\t            \"&square;\": \"□\",\n\t            \"&squarf;\": \"▪\",\n\t            \"&squf;\": \"▪\",\n\t            \"&srarr;\": \"→\",\n\t            \"&sscr;\": \"𝓈\",\n\t            \"&ssetmn;\": \"∖\",\n\t            \"&ssmile;\": \"⌣\",\n\t            \"&sstarf;\": \"⋆\",\n\t            \"&star;\": \"☆\",\n\t            \"&starf;\": \"★\",\n\t            \"&straightepsilon;\": \"ϵ\",\n\t            \"&straightphi;\": \"ϕ\",\n\t            \"&strns;\": \"¯\",\n\t            \"&sub;\": \"⊂\",\n\t            \"&subE;\": \"⫅\",\n\t            \"&subdot;\": \"⪽\",\n\t            \"&sube;\": \"⊆\",\n\t            \"&subedot;\": \"⫃\",\n\t            \"&submult;\": \"⫁\",\n\t            \"&subnE;\": \"⫋\",\n\t            \"&subne;\": \"⊊\",\n\t            \"&subplus;\": \"⪿\",\n\t            \"&subrarr;\": \"⥹\",\n\t            \"&subset;\": \"⊂\",\n\t            \"&subseteq;\": \"⊆\",\n\t            \"&subseteqq;\": \"⫅\",\n\t            \"&subsetneq;\": \"⊊\",\n\t            \"&subsetneqq;\": \"⫋\",\n\t            \"&subsim;\": \"⫇\",\n\t            \"&subsub;\": \"⫕\",\n\t            \"&subsup;\": \"⫓\",\n\t            \"&succ;\": \"≻\",\n\t            \"&succapprox;\": \"⪸\",\n\t            \"&succcurlyeq;\": \"≽\",\n\t            \"&succeq;\": \"⪰\",\n\t            \"&succnapprox;\": \"⪺\",\n\t            \"&succneqq;\": \"⪶\",\n\t            \"&succnsim;\": \"⋩\",\n\t            \"&succsim;\": \"≿\",\n\t            \"&sum;\": \"∑\",\n\t            \"&sung;\": \"♪\",\n\t            \"&sup1\": \"¹\",\n\t            \"&sup1;\": \"¹\",\n\t            \"&sup2\": \"²\",\n\t            \"&sup2;\": \"²\",\n\t            \"&sup3\": \"³\",\n\t            \"&sup3;\": \"³\",\n\t            \"&sup;\": \"⊃\",\n\t            \"&supE;\": \"⫆\",\n\t            \"&supdot;\": \"⪾\",\n\t            \"&supdsub;\": \"⫘\",\n\t            \"&supe;\": \"⊇\",\n\t            \"&supedot;\": \"⫄\",\n\t            \"&suphsol;\": \"⟉\",\n\t            \"&suphsub;\": \"⫗\",\n\t            \"&suplarr;\": \"⥻\",\n\t            \"&supmult;\": \"⫂\",\n\t            \"&supnE;\": \"⫌\",\n\t            \"&supne;\": \"⊋\",\n\t            \"&supplus;\": \"⫀\",\n\t            \"&supset;\": \"⊃\",\n\t            \"&supseteq;\": \"⊇\",\n\t            \"&supseteqq;\": \"⫆\",\n\t            \"&supsetneq;\": \"⊋\",\n\t            \"&supsetneqq;\": \"⫌\",\n\t            \"&supsim;\": \"⫈\",\n\t            \"&supsub;\": \"⫔\",\n\t            \"&supsup;\": \"⫖\",\n\t            \"&swArr;\": \"⇙\",\n\t            \"&swarhk;\": \"⤦\",\n\t            \"&swarr;\": \"↙\",\n\t            \"&swarrow;\": \"↙\",\n\t            \"&swnwar;\": \"⤪\",\n\t            \"&szlig\": \"ß\",\n\t            \"&szlig;\": \"ß\",\n\t            \"&target;\": \"⌖\",\n\t            \"&tau;\": \"τ\",\n\t            \"&tbrk;\": \"⎴\",\n\t            \"&tcaron;\": \"ť\",\n\t            \"&tcedil;\": \"ţ\",\n\t            \"&tcy;\": \"т\",\n\t            \"&tdot;\": \"⃛\",\n\t            \"&telrec;\": \"⌕\",\n\t            \"&tfr;\": \"𝔱\",\n\t            \"&there4;\": \"∴\",\n\t            \"&therefore;\": \"∴\",\n\t            \"&theta;\": \"θ\",\n\t            \"&thetasym;\": \"ϑ\",\n\t            \"&thetav;\": \"ϑ\",\n\t            \"&thickapprox;\": \"≈\",\n\t            \"&thicksim;\": \"∼\",\n\t            \"&thinsp;\": \" \",\n\t            \"&thkap;\": \"≈\",\n\t            \"&thksim;\": \"∼\",\n\t            \"&thorn\": \"þ\",\n\t            \"&thorn;\": \"þ\",\n\t            \"&tilde;\": \"˜\",\n\t            \"&times\": \"×\",\n\t            \"&times;\": \"×\",\n\t            \"&timesb;\": \"⊠\",\n\t            \"&timesbar;\": \"⨱\",\n\t            \"&timesd;\": \"⨰\",\n\t            \"&tint;\": \"∭\",\n\t            \"&toea;\": \"⤨\",\n\t            \"&top;\": \"⊤\",\n\t            \"&topbot;\": \"⌶\",\n\t            \"&topcir;\": \"⫱\",\n\t            \"&topf;\": \"𝕥\",\n\t            \"&topfork;\": \"⫚\",\n\t            \"&tosa;\": \"⤩\",\n\t            \"&tprime;\": \"‴\",\n\t            \"&trade;\": \"™\",\n\t            \"&triangle;\": \"▵\",\n\t            \"&triangledown;\": \"▿\",\n\t            \"&triangleleft;\": \"◃\",\n\t            \"&trianglelefteq;\": \"⊴\",\n\t            \"&triangleq;\": \"≜\",\n\t            \"&triangleright;\": \"▹\",\n\t            \"&trianglerighteq;\": \"⊵\",\n\t            \"&tridot;\": \"◬\",\n\t            \"&trie;\": \"≜\",\n\t            \"&triminus;\": \"⨺\",\n\t            \"&triplus;\": \"⨹\",\n\t            \"&trisb;\": \"⧍\",\n\t            \"&tritime;\": \"⨻\",\n\t            \"&trpezium;\": \"⏢\",\n\t            \"&tscr;\": \"𝓉\",\n\t            \"&tscy;\": \"ц\",\n\t            \"&tshcy;\": \"ћ\",\n\t            \"&tstrok;\": \"ŧ\",\n\t            \"&twixt;\": \"≬\",\n\t            \"&twoheadleftarrow;\": \"↞\",\n\t            \"&twoheadrightarrow;\": \"↠\",\n\t            \"&uArr;\": \"⇑\",\n\t            \"&uHar;\": \"⥣\",\n\t            \"&uacute\": \"ú\",\n\t            \"&uacute;\": \"ú\",\n\t            \"&uarr;\": \"↑\",\n\t            \"&ubrcy;\": \"ў\",\n\t            \"&ubreve;\": \"ŭ\",\n\t            \"&ucirc\": \"û\",\n\t            \"&ucirc;\": \"û\",\n\t            \"&ucy;\": \"у\",\n\t            \"&udarr;\": \"⇅\",\n\t            \"&udblac;\": \"ű\",\n\t            \"&udhar;\": \"⥮\",\n\t            \"&ufisht;\": \"⥾\",\n\t            \"&ufr;\": \"𝔲\",\n\t            \"&ugrave\": \"ù\",\n\t            \"&ugrave;\": \"ù\",\n\t            \"&uharl;\": \"↿\",\n\t            \"&uharr;\": \"↾\",\n\t            \"&uhblk;\": \"▀\",\n\t            \"&ulcorn;\": \"⌜\",\n\t            \"&ulcorner;\": \"⌜\",\n\t            \"&ulcrop;\": \"⌏\",\n\t            \"&ultri;\": \"◸\",\n\t            \"&umacr;\": \"ū\",\n\t            \"&uml\": \"¨\",\n\t            \"&uml;\": \"¨\",\n\t            \"&uogon;\": \"ų\",\n\t            \"&uopf;\": \"𝕦\",\n\t            \"&uparrow;\": \"↑\",\n\t            \"&updownarrow;\": \"↕\",\n\t            \"&upharpoonleft;\": \"↿\",\n\t            \"&upharpoonright;\": \"↾\",\n\t            \"&uplus;\": \"⊎\",\n\t            \"&upsi;\": \"υ\",\n\t            \"&upsih;\": \"ϒ\",\n\t            \"&upsilon;\": \"υ\",\n\t            \"&upuparrows;\": \"⇈\",\n\t            \"&urcorn;\": \"⌝\",\n\t            \"&urcorner;\": \"⌝\",\n\t            \"&urcrop;\": \"⌎\",\n\t            \"&uring;\": \"ů\",\n\t            \"&urtri;\": \"◹\",\n\t            \"&uscr;\": \"𝓊\",\n\t            \"&utdot;\": \"⋰\",\n\t            \"&utilde;\": \"ũ\",\n\t            \"&utri;\": \"▵\",\n\t            \"&utrif;\": \"▴\",\n\t            \"&uuarr;\": \"⇈\",\n\t            \"&uuml\": \"ü\",\n\t            \"&uuml;\": \"ü\",\n\t            \"&uwangle;\": \"⦧\",\n\t            \"&vArr;\": \"⇕\",\n\t            \"&vBar;\": \"⫨\",\n\t            \"&vBarv;\": \"⫩\",\n\t            \"&vDash;\": \"⊨\",\n\t            \"&vangrt;\": \"⦜\",\n\t            \"&varepsilon;\": \"ϵ\",\n\t            \"&varkappa;\": \"ϰ\",\n\t            \"&varnothing;\": \"∅\",\n\t            \"&varphi;\": \"ϕ\",\n\t            \"&varpi;\": \"ϖ\",\n\t            \"&varpropto;\": \"∝\",\n\t            \"&varr;\": \"↕\",\n\t            \"&varrho;\": \"ϱ\",\n\t            \"&varsigma;\": \"ς\",\n\t            \"&varsubsetneq;\": \"⊊︀\",\n\t            \"&varsubsetneqq;\": \"⫋︀\",\n\t            \"&varsupsetneq;\": \"⊋︀\",\n\t            \"&varsupsetneqq;\": \"⫌︀\",\n\t            \"&vartheta;\": \"ϑ\",\n\t            \"&vartriangleleft;\": \"⊲\",\n\t            \"&vartriangleright;\": \"⊳\",\n\t            \"&vcy;\": \"в\",\n\t            \"&vdash;\": \"⊢\",\n\t            \"&vee;\": \"∨\",\n\t            \"&veebar;\": \"⊻\",\n\t            \"&veeeq;\": \"≚\",\n\t            \"&vellip;\": \"⋮\",\n\t            \"&verbar;\": \"|\",\n\t            \"&vert;\": \"|\",\n\t            \"&vfr;\": \"𝔳\",\n\t            \"&vltri;\": \"⊲\",\n\t            \"&vnsub;\": \"⊂⃒\",\n\t            \"&vnsup;\": \"⊃⃒\",\n\t            \"&vopf;\": \"𝕧\",\n\t            \"&vprop;\": \"∝\",\n\t            \"&vrtri;\": \"⊳\",\n\t            \"&vscr;\": \"𝓋\",\n\t            \"&vsubnE;\": \"⫋︀\",\n\t            \"&vsubne;\": \"⊊︀\",\n\t            \"&vsupnE;\": \"⫌︀\",\n\t            \"&vsupne;\": \"⊋︀\",\n\t            \"&vzigzag;\": \"⦚\",\n\t            \"&wcirc;\": \"ŵ\",\n\t            \"&wedbar;\": \"⩟\",\n\t            \"&wedge;\": \"∧\",\n\t            \"&wedgeq;\": \"≙\",\n\t            \"&weierp;\": \"℘\",\n\t            \"&wfr;\": \"𝔴\",\n\t            \"&wopf;\": \"𝕨\",\n\t            \"&wp;\": \"℘\",\n\t            \"&wr;\": \"≀\",\n\t            \"&wreath;\": \"≀\",\n\t            \"&wscr;\": \"𝓌\",\n\t            \"&xcap;\": \"⋂\",\n\t            \"&xcirc;\": \"◯\",\n\t            \"&xcup;\": \"⋃\",\n\t            \"&xdtri;\": \"▽\",\n\t            \"&xfr;\": \"𝔵\",\n\t            \"&xhArr;\": \"⟺\",\n\t            \"&xharr;\": \"⟷\",\n\t            \"&xi;\": \"ξ\",\n\t            \"&xlArr;\": \"⟸\",\n\t            \"&xlarr;\": \"⟵\",\n\t            \"&xmap;\": \"⟼\",\n\t            \"&xnis;\": \"⋻\",\n\t            \"&xodot;\": \"⨀\",\n\t            \"&xopf;\": \"𝕩\",\n\t            \"&xoplus;\": \"⨁\",\n\t            \"&xotime;\": \"⨂\",\n\t            \"&xrArr;\": \"⟹\",\n\t            \"&xrarr;\": \"⟶\",\n\t            \"&xscr;\": \"𝓍\",\n\t            \"&xsqcup;\": \"⨆\",\n\t            \"&xuplus;\": \"⨄\",\n\t            \"&xutri;\": \"△\",\n\t            \"&xvee;\": \"⋁\",\n\t            \"&xwedge;\": \"⋀\",\n\t            \"&yacute\": \"ý\",\n\t            \"&yacute;\": \"ý\",\n\t            \"&yacy;\": \"я\",\n\t            \"&ycirc;\": \"ŷ\",\n\t            \"&ycy;\": \"ы\",\n\t            \"&yen\": \"¥\",\n\t            \"&yen;\": \"¥\",\n\t            \"&yfr;\": \"𝔶\",\n\t            \"&yicy;\": \"ї\",\n\t            \"&yopf;\": \"𝕪\",\n\t            \"&yscr;\": \"𝓎\",\n\t            \"&yucy;\": \"ю\",\n\t            \"&yuml\": \"ÿ\",\n\t            \"&yuml;\": \"ÿ\",\n\t            \"&zacute;\": \"ź\",\n\t            \"&zcaron;\": \"ž\",\n\t            \"&zcy;\": \"з\",\n\t            \"&zdot;\": \"ż\",\n\t            \"&zeetrf;\": \"ℨ\",\n\t            \"&zeta;\": \"ζ\",\n\t            \"&zfr;\": \"𝔷\",\n\t            \"&zhcy;\": \"ж\",\n\t            \"&zigrarr;\": \"⇝\",\n\t            \"&zopf;\": \"𝕫\",\n\t            \"&zscr;\": \"𝓏\",\n\t            \"&zwj;\": \"‍\",\n\t            \"&zwnj;\": \"‌\"\n\t        },\n\t        characters: {\n\t            \"Æ\": \"&AElig;\",\n\t            \"&\": \"&amp;\",\n\t            \"Á\": \"&Aacute;\",\n\t            \"Ă\": \"&Abreve;\",\n\t            \"Â\": \"&Acirc;\",\n\t            \"А\": \"&Acy;\",\n\t            \"𝔄\": \"&Afr;\",\n\t            \"À\": \"&Agrave;\",\n\t            \"Α\": \"&Alpha;\",\n\t            \"Ā\": \"&Amacr;\",\n\t            \"⩓\": \"&And;\",\n\t            \"Ą\": \"&Aogon;\",\n\t            \"𝔸\": \"&Aopf;\",\n\t            \"⁡\": \"&af;\",\n\t            \"Å\": \"&angst;\",\n\t            \"𝒜\": \"&Ascr;\",\n\t            \"≔\": \"&coloneq;\",\n\t            \"Ã\": \"&Atilde;\",\n\t            \"Ä\": \"&Auml;\",\n\t            \"∖\": \"&ssetmn;\",\n\t            \"⫧\": \"&Barv;\",\n\t            \"⌆\": \"&doublebarwedge;\",\n\t            \"Б\": \"&Bcy;\",\n\t            \"∵\": \"&because;\",\n\t            \"ℬ\": \"&bernou;\",\n\t            \"Β\": \"&Beta;\",\n\t            \"𝔅\": \"&Bfr;\",\n\t            \"𝔹\": \"&Bopf;\",\n\t            \"˘\": \"&breve;\",\n\t            \"≎\": \"&bump;\",\n\t            \"Ч\": \"&CHcy;\",\n\t            \"©\": \"&copy;\",\n\t            \"Ć\": \"&Cacute;\",\n\t            \"⋒\": \"&Cap;\",\n\t            \"ⅅ\": \"&DD;\",\n\t            \"ℭ\": \"&Cfr;\",\n\t            \"Č\": \"&Ccaron;\",\n\t            \"Ç\": \"&Ccedil;\",\n\t            \"Ĉ\": \"&Ccirc;\",\n\t            \"∰\": \"&Cconint;\",\n\t            \"Ċ\": \"&Cdot;\",\n\t            \"¸\": \"&cedil;\",\n\t            \"·\": \"&middot;\",\n\t            \"Χ\": \"&Chi;\",\n\t            \"⊙\": \"&odot;\",\n\t            \"⊖\": \"&ominus;\",\n\t            \"⊕\": \"&oplus;\",\n\t            \"⊗\": \"&otimes;\",\n\t            \"∲\": \"&cwconint;\",\n\t            \"”\": \"&rdquor;\",\n\t            \"’\": \"&rsquor;\",\n\t            \"∷\": \"&Proportion;\",\n\t            \"⩴\": \"&Colone;\",\n\t            \"≡\": \"&equiv;\",\n\t            \"∯\": \"&DoubleContourIntegral;\",\n\t            \"∮\": \"&oint;\",\n\t            \"ℂ\": \"&complexes;\",\n\t            \"∐\": \"&coprod;\",\n\t            \"∳\": \"&awconint;\",\n\t            \"⨯\": \"&Cross;\",\n\t            \"𝒞\": \"&Cscr;\",\n\t            \"⋓\": \"&Cup;\",\n\t            \"≍\": \"&asympeq;\",\n\t            \"⤑\": \"&DDotrahd;\",\n\t            \"Ђ\": \"&DJcy;\",\n\t            \"Ѕ\": \"&DScy;\",\n\t            \"Џ\": \"&DZcy;\",\n\t            \"‡\": \"&ddagger;\",\n\t            \"↡\": \"&Darr;\",\n\t            \"⫤\": \"&DoubleLeftTee;\",\n\t            \"Ď\": \"&Dcaron;\",\n\t            \"Д\": \"&Dcy;\",\n\t            \"∇\": \"&nabla;\",\n\t            \"Δ\": \"&Delta;\",\n\t            \"𝔇\": \"&Dfr;\",\n\t            \"´\": \"&acute;\",\n\t            \"˙\": \"&dot;\",\n\t            \"˝\": \"&dblac;\",\n\t            \"`\": \"&grave;\",\n\t            \"˜\": \"&tilde;\",\n\t            \"⋄\": \"&diamond;\",\n\t            \"ⅆ\": \"&dd;\",\n\t            \"𝔻\": \"&Dopf;\",\n\t            \"¨\": \"&uml;\",\n\t            \"⃜\": \"&DotDot;\",\n\t            \"≐\": \"&esdot;\",\n\t            \"⇓\": \"&dArr;\",\n\t            \"⇐\": \"&lArr;\",\n\t            \"⇔\": \"&iff;\",\n\t            \"⟸\": \"&xlArr;\",\n\t            \"⟺\": \"&xhArr;\",\n\t            \"⟹\": \"&xrArr;\",\n\t            \"⇒\": \"&rArr;\",\n\t            \"⊨\": \"&vDash;\",\n\t            \"⇑\": \"&uArr;\",\n\t            \"⇕\": \"&vArr;\",\n\t            \"∥\": \"&spar;\",\n\t            \"↓\": \"&downarrow;\",\n\t            \"⤓\": \"&DownArrowBar;\",\n\t            \"⇵\": \"&duarr;\",\n\t            \"̑\": \"&DownBreve;\",\n\t            \"⥐\": \"&DownLeftRightVector;\",\n\t            \"⥞\": \"&DownLeftTeeVector;\",\n\t            \"↽\": \"&lhard;\",\n\t            \"⥖\": \"&DownLeftVectorBar;\",\n\t            \"⥟\": \"&DownRightTeeVector;\",\n\t            \"⇁\": \"&rightharpoondown;\",\n\t            \"⥗\": \"&DownRightVectorBar;\",\n\t            \"⊤\": \"&top;\",\n\t            \"↧\": \"&mapstodown;\",\n\t            \"𝒟\": \"&Dscr;\",\n\t            \"Đ\": \"&Dstrok;\",\n\t            \"Ŋ\": \"&ENG;\",\n\t            \"Ð\": \"&ETH;\",\n\t            \"É\": \"&Eacute;\",\n\t            \"Ě\": \"&Ecaron;\",\n\t            \"Ê\": \"&Ecirc;\",\n\t            \"Э\": \"&Ecy;\",\n\t            \"Ė\": \"&Edot;\",\n\t            \"𝔈\": \"&Efr;\",\n\t            \"È\": \"&Egrave;\",\n\t            \"∈\": \"&isinv;\",\n\t            \"Ē\": \"&Emacr;\",\n\t            \"◻\": \"&EmptySmallSquare;\",\n\t            \"▫\": \"&EmptyVerySmallSquare;\",\n\t            \"Ę\": \"&Eogon;\",\n\t            \"𝔼\": \"&Eopf;\",\n\t            \"Ε\": \"&Epsilon;\",\n\t            \"⩵\": \"&Equal;\",\n\t            \"≂\": \"&esim;\",\n\t            \"⇌\": \"&rlhar;\",\n\t            \"ℰ\": \"&expectation;\",\n\t            \"⩳\": \"&Esim;\",\n\t            \"Η\": \"&Eta;\",\n\t            \"Ë\": \"&Euml;\",\n\t            \"∃\": \"&exist;\",\n\t            \"ⅇ\": \"&exponentiale;\",\n\t            \"Ф\": \"&Fcy;\",\n\t            \"𝔉\": \"&Ffr;\",\n\t            \"◼\": \"&FilledSmallSquare;\",\n\t            \"▪\": \"&squf;\",\n\t            \"𝔽\": \"&Fopf;\",\n\t            \"∀\": \"&forall;\",\n\t            \"ℱ\": \"&Fscr;\",\n\t            \"Ѓ\": \"&GJcy;\",\n\t            \">\": \"&gt;\",\n\t            \"Γ\": \"&Gamma;\",\n\t            \"Ϝ\": \"&Gammad;\",\n\t            \"Ğ\": \"&Gbreve;\",\n\t            \"Ģ\": \"&Gcedil;\",\n\t            \"Ĝ\": \"&Gcirc;\",\n\t            \"Г\": \"&Gcy;\",\n\t            \"Ġ\": \"&Gdot;\",\n\t            \"𝔊\": \"&Gfr;\",\n\t            \"⋙\": \"&ggg;\",\n\t            \"𝔾\": \"&Gopf;\",\n\t            \"≥\": \"&geq;\",\n\t            \"⋛\": \"&gtreqless;\",\n\t            \"≧\": \"&geqq;\",\n\t            \"⪢\": \"&GreaterGreater;\",\n\t            \"≷\": \"&gtrless;\",\n\t            \"⩾\": \"&ges;\",\n\t            \"≳\": \"&gtrsim;\",\n\t            \"𝒢\": \"&Gscr;\",\n\t            \"≫\": \"&gg;\",\n\t            \"Ъ\": \"&HARDcy;\",\n\t            \"ˇ\": \"&caron;\",\n\t            \"^\": \"&Hat;\",\n\t            \"Ĥ\": \"&Hcirc;\",\n\t            \"ℌ\": \"&Poincareplane;\",\n\t            \"ℋ\": \"&hamilt;\",\n\t            \"ℍ\": \"&quaternions;\",\n\t            \"─\": \"&boxh;\",\n\t            \"Ħ\": \"&Hstrok;\",\n\t            \"≏\": \"&bumpeq;\",\n\t            \"Е\": \"&IEcy;\",\n\t            \"Ĳ\": \"&IJlig;\",\n\t            \"Ё\": \"&IOcy;\",\n\t            \"Í\": \"&Iacute;\",\n\t            \"Î\": \"&Icirc;\",\n\t            \"И\": \"&Icy;\",\n\t            \"İ\": \"&Idot;\",\n\t            \"ℑ\": \"&imagpart;\",\n\t            \"Ì\": \"&Igrave;\",\n\t            \"Ī\": \"&Imacr;\",\n\t            \"ⅈ\": \"&ii;\",\n\t            \"∬\": \"&Int;\",\n\t            \"∫\": \"&int;\",\n\t            \"⋂\": \"&xcap;\",\n\t            \"⁣\": \"&ic;\",\n\t            \"⁢\": \"&it;\",\n\t            \"Į\": \"&Iogon;\",\n\t            \"𝕀\": \"&Iopf;\",\n\t            \"Ι\": \"&Iota;\",\n\t            \"ℐ\": \"&imagline;\",\n\t            \"Ĩ\": \"&Itilde;\",\n\t            \"І\": \"&Iukcy;\",\n\t            \"Ï\": \"&Iuml;\",\n\t            \"Ĵ\": \"&Jcirc;\",\n\t            \"Й\": \"&Jcy;\",\n\t            \"𝔍\": \"&Jfr;\",\n\t            \"𝕁\": \"&Jopf;\",\n\t            \"𝒥\": \"&Jscr;\",\n\t            \"Ј\": \"&Jsercy;\",\n\t            \"Є\": \"&Jukcy;\",\n\t            \"Х\": \"&KHcy;\",\n\t            \"Ќ\": \"&KJcy;\",\n\t            \"Κ\": \"&Kappa;\",\n\t            \"Ķ\": \"&Kcedil;\",\n\t            \"К\": \"&Kcy;\",\n\t            \"𝔎\": \"&Kfr;\",\n\t            \"𝕂\": \"&Kopf;\",\n\t            \"𝒦\": \"&Kscr;\",\n\t            \"Љ\": \"&LJcy;\",\n\t            \"<\": \"&lt;\",\n\t            \"Ĺ\": \"&Lacute;\",\n\t            \"Λ\": \"&Lambda;\",\n\t            \"⟪\": \"&Lang;\",\n\t            \"ℒ\": \"&lagran;\",\n\t            \"↞\": \"&twoheadleftarrow;\",\n\t            \"Ľ\": \"&Lcaron;\",\n\t            \"Ļ\": \"&Lcedil;\",\n\t            \"Л\": \"&Lcy;\",\n\t            \"⟨\": \"&langle;\",\n\t            \"←\": \"&slarr;\",\n\t            \"⇤\": \"&larrb;\",\n\t            \"⇆\": \"&lrarr;\",\n\t            \"⌈\": \"&lceil;\",\n\t            \"⟦\": \"&lobrk;\",\n\t            \"⥡\": \"&LeftDownTeeVector;\",\n\t            \"⇃\": \"&downharpoonleft;\",\n\t            \"⥙\": \"&LeftDownVectorBar;\",\n\t            \"⌊\": \"&lfloor;\",\n\t            \"↔\": \"&leftrightarrow;\",\n\t            \"⥎\": \"&LeftRightVector;\",\n\t            \"⊣\": \"&dashv;\",\n\t            \"↤\": \"&mapstoleft;\",\n\t            \"⥚\": \"&LeftTeeVector;\",\n\t            \"⊲\": \"&vltri;\",\n\t            \"⧏\": \"&LeftTriangleBar;\",\n\t            \"⊴\": \"&trianglelefteq;\",\n\t            \"⥑\": \"&LeftUpDownVector;\",\n\t            \"⥠\": \"&LeftUpTeeVector;\",\n\t            \"↿\": \"&upharpoonleft;\",\n\t            \"⥘\": \"&LeftUpVectorBar;\",\n\t            \"↼\": \"&lharu;\",\n\t            \"⥒\": \"&LeftVectorBar;\",\n\t            \"⋚\": \"&lesseqgtr;\",\n\t            \"≦\": \"&leqq;\",\n\t            \"≶\": \"&lg;\",\n\t            \"⪡\": \"&LessLess;\",\n\t            \"⩽\": \"&les;\",\n\t            \"≲\": \"&lsim;\",\n\t            \"𝔏\": \"&Lfr;\",\n\t            \"⋘\": \"&Ll;\",\n\t            \"⇚\": \"&lAarr;\",\n\t            \"Ŀ\": \"&Lmidot;\",\n\t            \"⟵\": \"&xlarr;\",\n\t            \"⟷\": \"&xharr;\",\n\t            \"⟶\": \"&xrarr;\",\n\t            \"𝕃\": \"&Lopf;\",\n\t            \"↙\": \"&swarrow;\",\n\t            \"↘\": \"&searrow;\",\n\t            \"↰\": \"&lsh;\",\n\t            \"Ł\": \"&Lstrok;\",\n\t            \"≪\": \"&ll;\",\n\t            \"⤅\": \"&Map;\",\n\t            \"М\": \"&Mcy;\",\n\t            \" \": \"&MediumSpace;\",\n\t            \"ℳ\": \"&phmmat;\",\n\t            \"𝔐\": \"&Mfr;\",\n\t            \"∓\": \"&mp;\",\n\t            \"𝕄\": \"&Mopf;\",\n\t            \"Μ\": \"&Mu;\",\n\t            \"Њ\": \"&NJcy;\",\n\t            \"Ń\": \"&Nacute;\",\n\t            \"Ň\": \"&Ncaron;\",\n\t            \"Ņ\": \"&Ncedil;\",\n\t            \"Н\": \"&Ncy;\",\n\t            \"​\": \"&ZeroWidthSpace;\",\n\t            \"\\n\": \"&NewLine;\",\n\t            \"𝔑\": \"&Nfr;\",\n\t            \"⁠\": \"&NoBreak;\",\n\t            \" \": \"&nbsp;\",\n\t            \"ℕ\": \"&naturals;\",\n\t            \"⫬\": \"&Not;\",\n\t            \"≢\": \"&nequiv;\",\n\t            \"≭\": \"&NotCupCap;\",\n\t            \"∦\": \"&nspar;\",\n\t            \"∉\": \"&notinva;\",\n\t            \"≠\": \"&ne;\",\n\t            \"≂̸\": \"&nesim;\",\n\t            \"∄\": \"&nexists;\",\n\t            \"≯\": \"&ngtr;\",\n\t            \"≱\": \"&ngeq;\",\n\t            \"≧̸\": \"&ngeqq;\",\n\t            \"≫̸\": \"&nGtv;\",\n\t            \"≹\": \"&ntgl;\",\n\t            \"⩾̸\": \"&nges;\",\n\t            \"≵\": \"&ngsim;\",\n\t            \"≎̸\": \"&nbump;\",\n\t            \"≏̸\": \"&nbumpe;\",\n\t            \"⋪\": \"&ntriangleleft;\",\n\t            \"⧏̸\": \"&NotLeftTriangleBar;\",\n\t            \"⋬\": \"&ntrianglelefteq;\",\n\t            \"≮\": \"&nlt;\",\n\t            \"≰\": \"&nleq;\",\n\t            \"≸\": \"&ntlg;\",\n\t            \"≪̸\": \"&nLtv;\",\n\t            \"⩽̸\": \"&nles;\",\n\t            \"≴\": \"&nlsim;\",\n\t            \"⪢̸\": \"&NotNestedGreaterGreater;\",\n\t            \"⪡̸\": \"&NotNestedLessLess;\",\n\t            \"⊀\": \"&nprec;\",\n\t            \"⪯̸\": \"&npreceq;\",\n\t            \"⋠\": \"&nprcue;\",\n\t            \"∌\": \"&notniva;\",\n\t            \"⋫\": \"&ntriangleright;\",\n\t            \"⧐̸\": \"&NotRightTriangleBar;\",\n\t            \"⋭\": \"&ntrianglerighteq;\",\n\t            \"⊏̸\": \"&NotSquareSubset;\",\n\t            \"⋢\": \"&nsqsube;\",\n\t            \"⊐̸\": \"&NotSquareSuperset;\",\n\t            \"⋣\": \"&nsqsupe;\",\n\t            \"⊂⃒\": \"&vnsub;\",\n\t            \"⊈\": \"&nsubseteq;\",\n\t            \"⊁\": \"&nsucc;\",\n\t            \"⪰̸\": \"&nsucceq;\",\n\t            \"⋡\": \"&nsccue;\",\n\t            \"≿̸\": \"&NotSucceedsTilde;\",\n\t            \"⊃⃒\": \"&vnsup;\",\n\t            \"⊉\": \"&nsupseteq;\",\n\t            \"≁\": \"&nsim;\",\n\t            \"≄\": \"&nsimeq;\",\n\t            \"≇\": \"&ncong;\",\n\t            \"≉\": \"&napprox;\",\n\t            \"∤\": \"&nsmid;\",\n\t            \"𝒩\": \"&Nscr;\",\n\t            \"Ñ\": \"&Ntilde;\",\n\t            \"Ν\": \"&Nu;\",\n\t            \"Œ\": \"&OElig;\",\n\t            \"Ó\": \"&Oacute;\",\n\t            \"Ô\": \"&Ocirc;\",\n\t            \"О\": \"&Ocy;\",\n\t            \"Ő\": \"&Odblac;\",\n\t            \"𝔒\": \"&Ofr;\",\n\t            \"Ò\": \"&Ograve;\",\n\t            \"Ō\": \"&Omacr;\",\n\t            \"Ω\": \"&ohm;\",\n\t            \"Ο\": \"&Omicron;\",\n\t            \"𝕆\": \"&Oopf;\",\n\t            \"“\": \"&ldquo;\",\n\t            \"‘\": \"&lsquo;\",\n\t            \"⩔\": \"&Or;\",\n\t            \"𝒪\": \"&Oscr;\",\n\t            \"Ø\": \"&Oslash;\",\n\t            \"Õ\": \"&Otilde;\",\n\t            \"⨷\": \"&Otimes;\",\n\t            \"Ö\": \"&Ouml;\",\n\t            \"‾\": \"&oline;\",\n\t            \"⏞\": \"&OverBrace;\",\n\t            \"⎴\": \"&tbrk;\",\n\t            \"⏜\": \"&OverParenthesis;\",\n\t            \"∂\": \"&part;\",\n\t            \"П\": \"&Pcy;\",\n\t            \"𝔓\": \"&Pfr;\",\n\t            \"Φ\": \"&Phi;\",\n\t            \"Π\": \"&Pi;\",\n\t            \"±\": \"&pm;\",\n\t            \"ℙ\": \"&primes;\",\n\t            \"⪻\": \"&Pr;\",\n\t            \"≺\": \"&prec;\",\n\t            \"⪯\": \"&preceq;\",\n\t            \"≼\": \"&preccurlyeq;\",\n\t            \"≾\": \"&prsim;\",\n\t            \"″\": \"&Prime;\",\n\t            \"∏\": \"&prod;\",\n\t            \"∝\": \"&vprop;\",\n\t            \"𝒫\": \"&Pscr;\",\n\t            \"Ψ\": \"&Psi;\",\n\t            '\"': \"&quot;\",\n\t            \"𝔔\": \"&Qfr;\",\n\t            \"ℚ\": \"&rationals;\",\n\t            \"𝒬\": \"&Qscr;\",\n\t            \"⤐\": \"&drbkarow;\",\n\t            \"®\": \"&reg;\",\n\t            \"Ŕ\": \"&Racute;\",\n\t            \"⟫\": \"&Rang;\",\n\t            \"↠\": \"&twoheadrightarrow;\",\n\t            \"⤖\": \"&Rarrtl;\",\n\t            \"Ř\": \"&Rcaron;\",\n\t            \"Ŗ\": \"&Rcedil;\",\n\t            \"Р\": \"&Rcy;\",\n\t            \"ℜ\": \"&realpart;\",\n\t            \"∋\": \"&niv;\",\n\t            \"⇋\": \"&lrhar;\",\n\t            \"⥯\": \"&duhar;\",\n\t            \"Ρ\": \"&Rho;\",\n\t            \"⟩\": \"&rangle;\",\n\t            \"→\": \"&srarr;\",\n\t            \"⇥\": \"&rarrb;\",\n\t            \"⇄\": \"&rlarr;\",\n\t            \"⌉\": \"&rceil;\",\n\t            \"⟧\": \"&robrk;\",\n\t            \"⥝\": \"&RightDownTeeVector;\",\n\t            \"⇂\": \"&downharpoonright;\",\n\t            \"⥕\": \"&RightDownVectorBar;\",\n\t            \"⌋\": \"&rfloor;\",\n\t            \"⊢\": \"&vdash;\",\n\t            \"↦\": \"&mapsto;\",\n\t            \"⥛\": \"&RightTeeVector;\",\n\t            \"⊳\": \"&vrtri;\",\n\t            \"⧐\": \"&RightTriangleBar;\",\n\t            \"⊵\": \"&trianglerighteq;\",\n\t            \"⥏\": \"&RightUpDownVector;\",\n\t            \"⥜\": \"&RightUpTeeVector;\",\n\t            \"↾\": \"&upharpoonright;\",\n\t            \"⥔\": \"&RightUpVectorBar;\",\n\t            \"⇀\": \"&rightharpoonup;\",\n\t            \"⥓\": \"&RightVectorBar;\",\n\t            \"ℝ\": \"&reals;\",\n\t            \"⥰\": \"&RoundImplies;\",\n\t            \"⇛\": \"&rAarr;\",\n\t            \"ℛ\": \"&realine;\",\n\t            \"↱\": \"&rsh;\",\n\t            \"⧴\": \"&RuleDelayed;\",\n\t            \"Щ\": \"&SHCHcy;\",\n\t            \"Ш\": \"&SHcy;\",\n\t            \"Ь\": \"&SOFTcy;\",\n\t            \"Ś\": \"&Sacute;\",\n\t            \"⪼\": \"&Sc;\",\n\t            \"Š\": \"&Scaron;\",\n\t            \"Ş\": \"&Scedil;\",\n\t            \"Ŝ\": \"&Scirc;\",\n\t            \"С\": \"&Scy;\",\n\t            \"𝔖\": \"&Sfr;\",\n\t            \"↑\": \"&uparrow;\",\n\t            \"Σ\": \"&Sigma;\",\n\t            \"∘\": \"&compfn;\",\n\t            \"𝕊\": \"&Sopf;\",\n\t            \"√\": \"&radic;\",\n\t            \"□\": \"&square;\",\n\t            \"⊓\": \"&sqcap;\",\n\t            \"⊏\": \"&sqsubset;\",\n\t            \"⊑\": \"&sqsubseteq;\",\n\t            \"⊐\": \"&sqsupset;\",\n\t            \"⊒\": \"&sqsupseteq;\",\n\t            \"⊔\": \"&sqcup;\",\n\t            \"𝒮\": \"&Sscr;\",\n\t            \"⋆\": \"&sstarf;\",\n\t            \"⋐\": \"&Subset;\",\n\t            \"⊆\": \"&subseteq;\",\n\t            \"≻\": \"&succ;\",\n\t            \"⪰\": \"&succeq;\",\n\t            \"≽\": \"&succcurlyeq;\",\n\t            \"≿\": \"&succsim;\",\n\t            \"∑\": \"&sum;\",\n\t            \"⋑\": \"&Supset;\",\n\t            \"⊃\": \"&supset;\",\n\t            \"⊇\": \"&supseteq;\",\n\t            \"Þ\": \"&THORN;\",\n\t            \"™\": \"&trade;\",\n\t            \"Ћ\": \"&TSHcy;\",\n\t            \"Ц\": \"&TScy;\",\n\t            \"\\t\": \"&Tab;\",\n\t            \"Τ\": \"&Tau;\",\n\t            \"Ť\": \"&Tcaron;\",\n\t            \"Ţ\": \"&Tcedil;\",\n\t            \"Т\": \"&Tcy;\",\n\t            \"𝔗\": \"&Tfr;\",\n\t            \"∴\": \"&therefore;\",\n\t            \"Θ\": \"&Theta;\",\n\t            \"  \": \"&ThickSpace;\",\n\t            \" \": \"&thinsp;\",\n\t            \"∼\": \"&thksim;\",\n\t            \"≃\": \"&simeq;\",\n\t            \"≅\": \"&cong;\",\n\t            \"≈\": \"&thkap;\",\n\t            \"𝕋\": \"&Topf;\",\n\t            \"⃛\": \"&tdot;\",\n\t            \"𝒯\": \"&Tscr;\",\n\t            \"Ŧ\": \"&Tstrok;\",\n\t            \"Ú\": \"&Uacute;\",\n\t            \"↟\": \"&Uarr;\",\n\t            \"⥉\": \"&Uarrocir;\",\n\t            \"Ў\": \"&Ubrcy;\",\n\t            \"Ŭ\": \"&Ubreve;\",\n\t            \"Û\": \"&Ucirc;\",\n\t            \"У\": \"&Ucy;\",\n\t            \"Ű\": \"&Udblac;\",\n\t            \"𝔘\": \"&Ufr;\",\n\t            \"Ù\": \"&Ugrave;\",\n\t            \"Ū\": \"&Umacr;\",\n\t            _: \"&lowbar;\",\n\t            \"⏟\": \"&UnderBrace;\",\n\t            \"⎵\": \"&bbrk;\",\n\t            \"⏝\": \"&UnderParenthesis;\",\n\t            \"⋃\": \"&xcup;\",\n\t            \"⊎\": \"&uplus;\",\n\t            \"Ų\": \"&Uogon;\",\n\t            \"𝕌\": \"&Uopf;\",\n\t            \"⤒\": \"&UpArrowBar;\",\n\t            \"⇅\": \"&udarr;\",\n\t            \"↕\": \"&varr;\",\n\t            \"⥮\": \"&udhar;\",\n\t            \"⊥\": \"&perp;\",\n\t            \"↥\": \"&mapstoup;\",\n\t            \"↖\": \"&nwarrow;\",\n\t            \"↗\": \"&nearrow;\",\n\t            \"ϒ\": \"&upsih;\",\n\t            \"Υ\": \"&Upsilon;\",\n\t            \"Ů\": \"&Uring;\",\n\t            \"𝒰\": \"&Uscr;\",\n\t            \"Ũ\": \"&Utilde;\",\n\t            \"Ü\": \"&Uuml;\",\n\t            \"⊫\": \"&VDash;\",\n\t            \"⫫\": \"&Vbar;\",\n\t            \"В\": \"&Vcy;\",\n\t            \"⊩\": \"&Vdash;\",\n\t            \"⫦\": \"&Vdashl;\",\n\t            \"⋁\": \"&xvee;\",\n\t            \"‖\": \"&Vert;\",\n\t            \"∣\": \"&smid;\",\n\t            \"|\": \"&vert;\",\n\t            \"❘\": \"&VerticalSeparator;\",\n\t            \"≀\": \"&wreath;\",\n\t            \" \": \"&hairsp;\",\n\t            \"𝔙\": \"&Vfr;\",\n\t            \"𝕍\": \"&Vopf;\",\n\t            \"𝒱\": \"&Vscr;\",\n\t            \"⊪\": \"&Vvdash;\",\n\t            \"Ŵ\": \"&Wcirc;\",\n\t            \"⋀\": \"&xwedge;\",\n\t            \"𝔚\": \"&Wfr;\",\n\t            \"𝕎\": \"&Wopf;\",\n\t            \"𝒲\": \"&Wscr;\",\n\t            \"𝔛\": \"&Xfr;\",\n\t            \"Ξ\": \"&Xi;\",\n\t            \"𝕏\": \"&Xopf;\",\n\t            \"𝒳\": \"&Xscr;\",\n\t            \"Я\": \"&YAcy;\",\n\t            \"Ї\": \"&YIcy;\",\n\t            \"Ю\": \"&YUcy;\",\n\t            \"Ý\": \"&Yacute;\",\n\t            \"Ŷ\": \"&Ycirc;\",\n\t            \"Ы\": \"&Ycy;\",\n\t            \"𝔜\": \"&Yfr;\",\n\t            \"𝕐\": \"&Yopf;\",\n\t            \"𝒴\": \"&Yscr;\",\n\t            \"Ÿ\": \"&Yuml;\",\n\t            \"Ж\": \"&ZHcy;\",\n\t            \"Ź\": \"&Zacute;\",\n\t            \"Ž\": \"&Zcaron;\",\n\t            \"З\": \"&Zcy;\",\n\t            \"Ż\": \"&Zdot;\",\n\t            \"Ζ\": \"&Zeta;\",\n\t            \"ℨ\": \"&zeetrf;\",\n\t            \"ℤ\": \"&integers;\",\n\t            \"𝒵\": \"&Zscr;\",\n\t            \"á\": \"&aacute;\",\n\t            \"ă\": \"&abreve;\",\n\t            \"∾\": \"&mstpos;\",\n\t            \"∾̳\": \"&acE;\",\n\t            \"∿\": \"&acd;\",\n\t            \"â\": \"&acirc;\",\n\t            \"а\": \"&acy;\",\n\t            \"æ\": \"&aelig;\",\n\t            \"𝔞\": \"&afr;\",\n\t            \"à\": \"&agrave;\",\n\t            \"ℵ\": \"&aleph;\",\n\t            \"α\": \"&alpha;\",\n\t            \"ā\": \"&amacr;\",\n\t            \"⨿\": \"&amalg;\",\n\t            \"∧\": \"&wedge;\",\n\t            \"⩕\": \"&andand;\",\n\t            \"⩜\": \"&andd;\",\n\t            \"⩘\": \"&andslope;\",\n\t            \"⩚\": \"&andv;\",\n\t            \"∠\": \"&angle;\",\n\t            \"⦤\": \"&ange;\",\n\t            \"∡\": \"&measuredangle;\",\n\t            \"⦨\": \"&angmsdaa;\",\n\t            \"⦩\": \"&angmsdab;\",\n\t            \"⦪\": \"&angmsdac;\",\n\t            \"⦫\": \"&angmsdad;\",\n\t            \"⦬\": \"&angmsdae;\",\n\t            \"⦭\": \"&angmsdaf;\",\n\t            \"⦮\": \"&angmsdag;\",\n\t            \"⦯\": \"&angmsdah;\",\n\t            \"∟\": \"&angrt;\",\n\t            \"⊾\": \"&angrtvb;\",\n\t            \"⦝\": \"&angrtvbd;\",\n\t            \"∢\": \"&angsph;\",\n\t            \"⍼\": \"&angzarr;\",\n\t            \"ą\": \"&aogon;\",\n\t            \"𝕒\": \"&aopf;\",\n\t            \"⩰\": \"&apE;\",\n\t            \"⩯\": \"&apacir;\",\n\t            \"≊\": \"&approxeq;\",\n\t            \"≋\": \"&apid;\",\n\t            \"'\": \"&apos;\",\n\t            \"å\": \"&aring;\",\n\t            \"𝒶\": \"&ascr;\",\n\t            \"*\": \"&midast;\",\n\t            \"ã\": \"&atilde;\",\n\t            \"ä\": \"&auml;\",\n\t            \"⨑\": \"&awint;\",\n\t            \"⫭\": \"&bNot;\",\n\t            \"≌\": \"&bcong;\",\n\t            \"϶\": \"&bepsi;\",\n\t            \"‵\": \"&bprime;\",\n\t            \"∽\": \"&bsim;\",\n\t            \"⋍\": \"&bsime;\",\n\t            \"⊽\": \"&barvee;\",\n\t            \"⌅\": \"&barwedge;\",\n\t            \"⎶\": \"&bbrktbrk;\",\n\t            \"б\": \"&bcy;\",\n\t            \"„\": \"&ldquor;\",\n\t            \"⦰\": \"&bemptyv;\",\n\t            \"β\": \"&beta;\",\n\t            \"ℶ\": \"&beth;\",\n\t            \"≬\": \"&twixt;\",\n\t            \"𝔟\": \"&bfr;\",\n\t            \"◯\": \"&xcirc;\",\n\t            \"⨀\": \"&xodot;\",\n\t            \"⨁\": \"&xoplus;\",\n\t            \"⨂\": \"&xotime;\",\n\t            \"⨆\": \"&xsqcup;\",\n\t            \"★\": \"&starf;\",\n\t            \"▽\": \"&xdtri;\",\n\t            \"△\": \"&xutri;\",\n\t            \"⨄\": \"&xuplus;\",\n\t            \"⤍\": \"&rbarr;\",\n\t            \"⧫\": \"&lozf;\",\n\t            \"▴\": \"&utrif;\",\n\t            \"▾\": \"&dtrif;\",\n\t            \"◂\": \"&ltrif;\",\n\t            \"▸\": \"&rtrif;\",\n\t            \"␣\": \"&blank;\",\n\t            \"▒\": \"&blk12;\",\n\t            \"░\": \"&blk14;\",\n\t            \"▓\": \"&blk34;\",\n\t            \"█\": \"&block;\",\n\t            \"=⃥\": \"&bne;\",\n\t            \"≡⃥\": \"&bnequiv;\",\n\t            \"⌐\": \"&bnot;\",\n\t            \"𝕓\": \"&bopf;\",\n\t            \"⋈\": \"&bowtie;\",\n\t            \"╗\": \"&boxDL;\",\n\t            \"╔\": \"&boxDR;\",\n\t            \"╖\": \"&boxDl;\",\n\t            \"╓\": \"&boxDr;\",\n\t            \"═\": \"&boxH;\",\n\t            \"╦\": \"&boxHD;\",\n\t            \"╩\": \"&boxHU;\",\n\t            \"╤\": \"&boxHd;\",\n\t            \"╧\": \"&boxHu;\",\n\t            \"╝\": \"&boxUL;\",\n\t            \"╚\": \"&boxUR;\",\n\t            \"╜\": \"&boxUl;\",\n\t            \"╙\": \"&boxUr;\",\n\t            \"║\": \"&boxV;\",\n\t            \"╬\": \"&boxVH;\",\n\t            \"╣\": \"&boxVL;\",\n\t            \"╠\": \"&boxVR;\",\n\t            \"╫\": \"&boxVh;\",\n\t            \"╢\": \"&boxVl;\",\n\t            \"╟\": \"&boxVr;\",\n\t            \"⧉\": \"&boxbox;\",\n\t            \"╕\": \"&boxdL;\",\n\t            \"╒\": \"&boxdR;\",\n\t            \"┐\": \"&boxdl;\",\n\t            \"┌\": \"&boxdr;\",\n\t            \"╥\": \"&boxhD;\",\n\t            \"╨\": \"&boxhU;\",\n\t            \"┬\": \"&boxhd;\",\n\t            \"┴\": \"&boxhu;\",\n\t            \"⊟\": \"&minusb;\",\n\t            \"⊞\": \"&plusb;\",\n\t            \"⊠\": \"&timesb;\",\n\t            \"╛\": \"&boxuL;\",\n\t            \"╘\": \"&boxuR;\",\n\t            \"┘\": \"&boxul;\",\n\t            \"└\": \"&boxur;\",\n\t            \"│\": \"&boxv;\",\n\t            \"╪\": \"&boxvH;\",\n\t            \"╡\": \"&boxvL;\",\n\t            \"╞\": \"&boxvR;\",\n\t            \"┼\": \"&boxvh;\",\n\t            \"┤\": \"&boxvl;\",\n\t            \"├\": \"&boxvr;\",\n\t            \"¦\": \"&brvbar;\",\n\t            \"𝒷\": \"&bscr;\",\n\t            \"⁏\": \"&bsemi;\",\n\t            \"\\\\\": \"&bsol;\",\n\t            \"⧅\": \"&bsolb;\",\n\t            \"⟈\": \"&bsolhsub;\",\n\t            \"•\": \"&bullet;\",\n\t            \"⪮\": \"&bumpE;\",\n\t            \"ć\": \"&cacute;\",\n\t            \"∩\": \"&cap;\",\n\t            \"⩄\": \"&capand;\",\n\t            \"⩉\": \"&capbrcup;\",\n\t            \"⩋\": \"&capcap;\",\n\t            \"⩇\": \"&capcup;\",\n\t            \"⩀\": \"&capdot;\",\n\t            \"∩︀\": \"&caps;\",\n\t            \"⁁\": \"&caret;\",\n\t            \"⩍\": \"&ccaps;\",\n\t            \"č\": \"&ccaron;\",\n\t            \"ç\": \"&ccedil;\",\n\t            \"ĉ\": \"&ccirc;\",\n\t            \"⩌\": \"&ccups;\",\n\t            \"⩐\": \"&ccupssm;\",\n\t            \"ċ\": \"&cdot;\",\n\t            \"⦲\": \"&cemptyv;\",\n\t            \"¢\": \"&cent;\",\n\t            \"𝔠\": \"&cfr;\",\n\t            \"ч\": \"&chcy;\",\n\t            \"✓\": \"&checkmark;\",\n\t            \"χ\": \"&chi;\",\n\t            \"○\": \"&cir;\",\n\t            \"⧃\": \"&cirE;\",\n\t            \"ˆ\": \"&circ;\",\n\t            \"≗\": \"&cire;\",\n\t            \"↺\": \"&olarr;\",\n\t            \"↻\": \"&orarr;\",\n\t            \"Ⓢ\": \"&oS;\",\n\t            \"⊛\": \"&oast;\",\n\t            \"⊚\": \"&ocir;\",\n\t            \"⊝\": \"&odash;\",\n\t            \"⨐\": \"&cirfnint;\",\n\t            \"⫯\": \"&cirmid;\",\n\t            \"⧂\": \"&cirscir;\",\n\t            \"♣\": \"&clubsuit;\",\n\t            \":\": \"&colon;\",\n\t            \",\": \"&comma;\",\n\t            \"@\": \"&commat;\",\n\t            \"∁\": \"&complement;\",\n\t            \"⩭\": \"&congdot;\",\n\t            \"𝕔\": \"&copf;\",\n\t            \"℗\": \"&copysr;\",\n\t            \"↵\": \"&crarr;\",\n\t            \"✗\": \"&cross;\",\n\t            \"𝒸\": \"&cscr;\",\n\t            \"⫏\": \"&csub;\",\n\t            \"⫑\": \"&csube;\",\n\t            \"⫐\": \"&csup;\",\n\t            \"⫒\": \"&csupe;\",\n\t            \"⋯\": \"&ctdot;\",\n\t            \"⤸\": \"&cudarrl;\",\n\t            \"⤵\": \"&cudarrr;\",\n\t            \"⋞\": \"&curlyeqprec;\",\n\t            \"⋟\": \"&curlyeqsucc;\",\n\t            \"↶\": \"&curvearrowleft;\",\n\t            \"⤽\": \"&cularrp;\",\n\t            \"∪\": \"&cup;\",\n\t            \"⩈\": \"&cupbrcap;\",\n\t            \"⩆\": \"&cupcap;\",\n\t            \"⩊\": \"&cupcup;\",\n\t            \"⊍\": \"&cupdot;\",\n\t            \"⩅\": \"&cupor;\",\n\t            \"∪︀\": \"&cups;\",\n\t            \"↷\": \"&curvearrowright;\",\n\t            \"⤼\": \"&curarrm;\",\n\t            \"⋎\": \"&cuvee;\",\n\t            \"⋏\": \"&cuwed;\",\n\t            \"¤\": \"&curren;\",\n\t            \"∱\": \"&cwint;\",\n\t            \"⌭\": \"&cylcty;\",\n\t            \"⥥\": \"&dHar;\",\n\t            \"†\": \"&dagger;\",\n\t            \"ℸ\": \"&daleth;\",\n\t            \"‐\": \"&hyphen;\",\n\t            \"⤏\": \"&rBarr;\",\n\t            \"ď\": \"&dcaron;\",\n\t            \"д\": \"&dcy;\",\n\t            \"⇊\": \"&downdownarrows;\",\n\t            \"⩷\": \"&eDDot;\",\n\t            \"°\": \"&deg;\",\n\t            \"δ\": \"&delta;\",\n\t            \"⦱\": \"&demptyv;\",\n\t            \"⥿\": \"&dfisht;\",\n\t            \"𝔡\": \"&dfr;\",\n\t            \"♦\": \"&diams;\",\n\t            \"ϝ\": \"&gammad;\",\n\t            \"⋲\": \"&disin;\",\n\t            \"÷\": \"&divide;\",\n\t            \"⋇\": \"&divonx;\",\n\t            \"ђ\": \"&djcy;\",\n\t            \"⌞\": \"&llcorner;\",\n\t            \"⌍\": \"&dlcrop;\",\n\t            $: \"&dollar;\",\n\t            \"𝕕\": \"&dopf;\",\n\t            \"≑\": \"&eDot;\",\n\t            \"∸\": \"&minusd;\",\n\t            \"∔\": \"&plusdo;\",\n\t            \"⊡\": \"&sdotb;\",\n\t            \"⌟\": \"&lrcorner;\",\n\t            \"⌌\": \"&drcrop;\",\n\t            \"𝒹\": \"&dscr;\",\n\t            \"ѕ\": \"&dscy;\",\n\t            \"⧶\": \"&dsol;\",\n\t            \"đ\": \"&dstrok;\",\n\t            \"⋱\": \"&dtdot;\",\n\t            \"▿\": \"&triangledown;\",\n\t            \"⦦\": \"&dwangle;\",\n\t            \"џ\": \"&dzcy;\",\n\t            \"⟿\": \"&dzigrarr;\",\n\t            \"é\": \"&eacute;\",\n\t            \"⩮\": \"&easter;\",\n\t            \"ě\": \"&ecaron;\",\n\t            \"≖\": \"&eqcirc;\",\n\t            \"ê\": \"&ecirc;\",\n\t            \"≕\": \"&eqcolon;\",\n\t            \"э\": \"&ecy;\",\n\t            \"ė\": \"&edot;\",\n\t            \"≒\": \"&fallingdotseq;\",\n\t            \"𝔢\": \"&efr;\",\n\t            \"⪚\": \"&eg;\",\n\t            \"è\": \"&egrave;\",\n\t            \"⪖\": \"&eqslantgtr;\",\n\t            \"⪘\": \"&egsdot;\",\n\t            \"⪙\": \"&el;\",\n\t            \"⏧\": \"&elinters;\",\n\t            \"ℓ\": \"&ell;\",\n\t            \"⪕\": \"&eqslantless;\",\n\t            \"⪗\": \"&elsdot;\",\n\t            \"ē\": \"&emacr;\",\n\t            \"∅\": \"&varnothing;\",\n\t            \" \": \"&emsp13;\",\n\t            \" \": \"&emsp14;\",\n\t            \" \": \"&emsp;\",\n\t            \"ŋ\": \"&eng;\",\n\t            \" \": \"&ensp;\",\n\t            \"ę\": \"&eogon;\",\n\t            \"𝕖\": \"&eopf;\",\n\t            \"⋕\": \"&epar;\",\n\t            \"⧣\": \"&eparsl;\",\n\t            \"⩱\": \"&eplus;\",\n\t            \"ε\": \"&epsilon;\",\n\t            \"ϵ\": \"&varepsilon;\",\n\t            \"=\": \"&equals;\",\n\t            \"≟\": \"&questeq;\",\n\t            \"⩸\": \"&equivDD;\",\n\t            \"⧥\": \"&eqvparsl;\",\n\t            \"≓\": \"&risingdotseq;\",\n\t            \"⥱\": \"&erarr;\",\n\t            \"ℯ\": \"&escr;\",\n\t            \"η\": \"&eta;\",\n\t            \"ð\": \"&eth;\",\n\t            \"ë\": \"&euml;\",\n\t            \"€\": \"&euro;\",\n\t            \"!\": \"&excl;\",\n\t            \"ф\": \"&fcy;\",\n\t            \"♀\": \"&female;\",\n\t            \"ﬃ\": \"&ffilig;\",\n\t            \"ﬀ\": \"&fflig;\",\n\t            \"ﬄ\": \"&ffllig;\",\n\t            \"𝔣\": \"&ffr;\",\n\t            \"ﬁ\": \"&filig;\",\n\t            fj: \"&fjlig;\",\n\t            \"♭\": \"&flat;\",\n\t            \"ﬂ\": \"&fllig;\",\n\t            \"▱\": \"&fltns;\",\n\t            \"ƒ\": \"&fnof;\",\n\t            \"𝕗\": \"&fopf;\",\n\t            \"⋔\": \"&pitchfork;\",\n\t            \"⫙\": \"&forkv;\",\n\t            \"⨍\": \"&fpartint;\",\n\t            \"½\": \"&half;\",\n\t            \"⅓\": \"&frac13;\",\n\t            \"¼\": \"&frac14;\",\n\t            \"⅕\": \"&frac15;\",\n\t            \"⅙\": \"&frac16;\",\n\t            \"⅛\": \"&frac18;\",\n\t            \"⅔\": \"&frac23;\",\n\t            \"⅖\": \"&frac25;\",\n\t            \"¾\": \"&frac34;\",\n\t            \"⅗\": \"&frac35;\",\n\t            \"⅜\": \"&frac38;\",\n\t            \"⅘\": \"&frac45;\",\n\t            \"⅚\": \"&frac56;\",\n\t            \"⅝\": \"&frac58;\",\n\t            \"⅞\": \"&frac78;\",\n\t            \"⁄\": \"&frasl;\",\n\t            \"⌢\": \"&sfrown;\",\n\t            \"𝒻\": \"&fscr;\",\n\t            \"⪌\": \"&gtreqqless;\",\n\t            \"ǵ\": \"&gacute;\",\n\t            \"γ\": \"&gamma;\",\n\t            \"⪆\": \"&gtrapprox;\",\n\t            \"ğ\": \"&gbreve;\",\n\t            \"ĝ\": \"&gcirc;\",\n\t            \"г\": \"&gcy;\",\n\t            \"ġ\": \"&gdot;\",\n\t            \"⪩\": \"&gescc;\",\n\t            \"⪀\": \"&gesdot;\",\n\t            \"⪂\": \"&gesdoto;\",\n\t            \"⪄\": \"&gesdotol;\",\n\t            \"⋛︀\": \"&gesl;\",\n\t            \"⪔\": \"&gesles;\",\n\t            \"𝔤\": \"&gfr;\",\n\t            \"ℷ\": \"&gimel;\",\n\t            \"ѓ\": \"&gjcy;\",\n\t            \"⪒\": \"&glE;\",\n\t            \"⪥\": \"&gla;\",\n\t            \"⪤\": \"&glj;\",\n\t            \"≩\": \"&gneqq;\",\n\t            \"⪊\": \"&gnapprox;\",\n\t            \"⪈\": \"&gneq;\",\n\t            \"⋧\": \"&gnsim;\",\n\t            \"𝕘\": \"&gopf;\",\n\t            \"ℊ\": \"&gscr;\",\n\t            \"⪎\": \"&gsime;\",\n\t            \"⪐\": \"&gsiml;\",\n\t            \"⪧\": \"&gtcc;\",\n\t            \"⩺\": \"&gtcir;\",\n\t            \"⋗\": \"&gtrdot;\",\n\t            \"⦕\": \"&gtlPar;\",\n\t            \"⩼\": \"&gtquest;\",\n\t            \"⥸\": \"&gtrarr;\",\n\t            \"≩︀\": \"&gvnE;\",\n\t            \"ъ\": \"&hardcy;\",\n\t            \"⥈\": \"&harrcir;\",\n\t            \"↭\": \"&leftrightsquigarrow;\",\n\t            \"ℏ\": \"&plankv;\",\n\t            \"ĥ\": \"&hcirc;\",\n\t            \"♥\": \"&heartsuit;\",\n\t            \"…\": \"&mldr;\",\n\t            \"⊹\": \"&hercon;\",\n\t            \"𝔥\": \"&hfr;\",\n\t            \"⤥\": \"&searhk;\",\n\t            \"⤦\": \"&swarhk;\",\n\t            \"⇿\": \"&hoarr;\",\n\t            \"∻\": \"&homtht;\",\n\t            \"↩\": \"&larrhk;\",\n\t            \"↪\": \"&rarrhk;\",\n\t            \"𝕙\": \"&hopf;\",\n\t            \"―\": \"&horbar;\",\n\t            \"𝒽\": \"&hscr;\",\n\t            \"ħ\": \"&hstrok;\",\n\t            \"⁃\": \"&hybull;\",\n\t            \"í\": \"&iacute;\",\n\t            \"î\": \"&icirc;\",\n\t            \"и\": \"&icy;\",\n\t            \"е\": \"&iecy;\",\n\t            \"¡\": \"&iexcl;\",\n\t            \"𝔦\": \"&ifr;\",\n\t            \"ì\": \"&igrave;\",\n\t            \"⨌\": \"&qint;\",\n\t            \"∭\": \"&tint;\",\n\t            \"⧜\": \"&iinfin;\",\n\t            \"℩\": \"&iiota;\",\n\t            \"ĳ\": \"&ijlig;\",\n\t            \"ī\": \"&imacr;\",\n\t            \"ı\": \"&inodot;\",\n\t            \"⊷\": \"&imof;\",\n\t            \"Ƶ\": \"&imped;\",\n\t            \"℅\": \"&incare;\",\n\t            \"∞\": \"&infin;\",\n\t            \"⧝\": \"&infintie;\",\n\t            \"⊺\": \"&intercal;\",\n\t            \"⨗\": \"&intlarhk;\",\n\t            \"⨼\": \"&iprod;\",\n\t            \"ё\": \"&iocy;\",\n\t            \"į\": \"&iogon;\",\n\t            \"𝕚\": \"&iopf;\",\n\t            \"ι\": \"&iota;\",\n\t            \"¿\": \"&iquest;\",\n\t            \"𝒾\": \"&iscr;\",\n\t            \"⋹\": \"&isinE;\",\n\t            \"⋵\": \"&isindot;\",\n\t            \"⋴\": \"&isins;\",\n\t            \"⋳\": \"&isinsv;\",\n\t            \"ĩ\": \"&itilde;\",\n\t            \"і\": \"&iukcy;\",\n\t            \"ï\": \"&iuml;\",\n\t            \"ĵ\": \"&jcirc;\",\n\t            \"й\": \"&jcy;\",\n\t            \"𝔧\": \"&jfr;\",\n\t            \"ȷ\": \"&jmath;\",\n\t            \"𝕛\": \"&jopf;\",\n\t            \"𝒿\": \"&jscr;\",\n\t            \"ј\": \"&jsercy;\",\n\t            \"є\": \"&jukcy;\",\n\t            \"κ\": \"&kappa;\",\n\t            \"ϰ\": \"&varkappa;\",\n\t            \"ķ\": \"&kcedil;\",\n\t            \"к\": \"&kcy;\",\n\t            \"𝔨\": \"&kfr;\",\n\t            \"ĸ\": \"&kgreen;\",\n\t            \"х\": \"&khcy;\",\n\t            \"ќ\": \"&kjcy;\",\n\t            \"𝕜\": \"&kopf;\",\n\t            \"𝓀\": \"&kscr;\",\n\t            \"⤛\": \"&lAtail;\",\n\t            \"⤎\": \"&lBarr;\",\n\t            \"⪋\": \"&lesseqqgtr;\",\n\t            \"⥢\": \"&lHar;\",\n\t            \"ĺ\": \"&lacute;\",\n\t            \"⦴\": \"&laemptyv;\",\n\t            \"λ\": \"&lambda;\",\n\t            \"⦑\": \"&langd;\",\n\t            \"⪅\": \"&lessapprox;\",\n\t            \"«\": \"&laquo;\",\n\t            \"⤟\": \"&larrbfs;\",\n\t            \"⤝\": \"&larrfs;\",\n\t            \"↫\": \"&looparrowleft;\",\n\t            \"⤹\": \"&larrpl;\",\n\t            \"⥳\": \"&larrsim;\",\n\t            \"↢\": \"&leftarrowtail;\",\n\t            \"⪫\": \"&lat;\",\n\t            \"⤙\": \"&latail;\",\n\t            \"⪭\": \"&late;\",\n\t            \"⪭︀\": \"&lates;\",\n\t            \"⤌\": \"&lbarr;\",\n\t            \"❲\": \"&lbbrk;\",\n\t            \"{\": \"&lcub;\",\n\t            \"[\": \"&lsqb;\",\n\t            \"⦋\": \"&lbrke;\",\n\t            \"⦏\": \"&lbrksld;\",\n\t            \"⦍\": \"&lbrkslu;\",\n\t            \"ľ\": \"&lcaron;\",\n\t            \"ļ\": \"&lcedil;\",\n\t            \"л\": \"&lcy;\",\n\t            \"⤶\": \"&ldca;\",\n\t            \"⥧\": \"&ldrdhar;\",\n\t            \"⥋\": \"&ldrushar;\",\n\t            \"↲\": \"&ldsh;\",\n\t            \"≤\": \"&leq;\",\n\t            \"⇇\": \"&llarr;\",\n\t            \"⋋\": \"&lthree;\",\n\t            \"⪨\": \"&lescc;\",\n\t            \"⩿\": \"&lesdot;\",\n\t            \"⪁\": \"&lesdoto;\",\n\t            \"⪃\": \"&lesdotor;\",\n\t            \"⋚︀\": \"&lesg;\",\n\t            \"⪓\": \"&lesges;\",\n\t            \"⋖\": \"&ltdot;\",\n\t            \"⥼\": \"&lfisht;\",\n\t            \"𝔩\": \"&lfr;\",\n\t            \"⪑\": \"&lgE;\",\n\t            \"⥪\": \"&lharul;\",\n\t            \"▄\": \"&lhblk;\",\n\t            \"љ\": \"&ljcy;\",\n\t            \"⥫\": \"&llhard;\",\n\t            \"◺\": \"&lltri;\",\n\t            \"ŀ\": \"&lmidot;\",\n\t            \"⎰\": \"&lmoustache;\",\n\t            \"≨\": \"&lneqq;\",\n\t            \"⪉\": \"&lnapprox;\",\n\t            \"⪇\": \"&lneq;\",\n\t            \"⋦\": \"&lnsim;\",\n\t            \"⟬\": \"&loang;\",\n\t            \"⇽\": \"&loarr;\",\n\t            \"⟼\": \"&xmap;\",\n\t            \"↬\": \"&rarrlp;\",\n\t            \"⦅\": \"&lopar;\",\n\t            \"𝕝\": \"&lopf;\",\n\t            \"⨭\": \"&loplus;\",\n\t            \"⨴\": \"&lotimes;\",\n\t            \"∗\": \"&lowast;\",\n\t            \"◊\": \"&lozenge;\",\n\t            \"(\": \"&lpar;\",\n\t            \"⦓\": \"&lparlt;\",\n\t            \"⥭\": \"&lrhard;\",\n\t            \"‎\": \"&lrm;\",\n\t            \"⊿\": \"&lrtri;\",\n\t            \"‹\": \"&lsaquo;\",\n\t            \"𝓁\": \"&lscr;\",\n\t            \"⪍\": \"&lsime;\",\n\t            \"⪏\": \"&lsimg;\",\n\t            \"‚\": \"&sbquo;\",\n\t            \"ł\": \"&lstrok;\",\n\t            \"⪦\": \"&ltcc;\",\n\t            \"⩹\": \"&ltcir;\",\n\t            \"⋉\": \"&ltimes;\",\n\t            \"⥶\": \"&ltlarr;\",\n\t            \"⩻\": \"&ltquest;\",\n\t            \"⦖\": \"&ltrPar;\",\n\t            \"◃\": \"&triangleleft;\",\n\t            \"⥊\": \"&lurdshar;\",\n\t            \"⥦\": \"&luruhar;\",\n\t            \"≨︀\": \"&lvnE;\",\n\t            \"∺\": \"&mDDot;\",\n\t            \"¯\": \"&strns;\",\n\t            \"♂\": \"&male;\",\n\t            \"✠\": \"&maltese;\",\n\t            \"▮\": \"&marker;\",\n\t            \"⨩\": \"&mcomma;\",\n\t            \"м\": \"&mcy;\",\n\t            \"—\": \"&mdash;\",\n\t            \"𝔪\": \"&mfr;\",\n\t            \"℧\": \"&mho;\",\n\t            \"µ\": \"&micro;\",\n\t            \"⫰\": \"&midcir;\",\n\t            \"−\": \"&minus;\",\n\t            \"⨪\": \"&minusdu;\",\n\t            \"⫛\": \"&mlcp;\",\n\t            \"⊧\": \"&models;\",\n\t            \"𝕞\": \"&mopf;\",\n\t            \"𝓂\": \"&mscr;\",\n\t            \"μ\": \"&mu;\",\n\t            \"⊸\": \"&mumap;\",\n\t            \"⋙̸\": \"&nGg;\",\n\t            \"≫⃒\": \"&nGt;\",\n\t            \"⇍\": \"&nlArr;\",\n\t            \"⇎\": \"&nhArr;\",\n\t            \"⋘̸\": \"&nLl;\",\n\t            \"≪⃒\": \"&nLt;\",\n\t            \"⇏\": \"&nrArr;\",\n\t            \"⊯\": \"&nVDash;\",\n\t            \"⊮\": \"&nVdash;\",\n\t            \"ń\": \"&nacute;\",\n\t            \"∠⃒\": \"&nang;\",\n\t            \"⩰̸\": \"&napE;\",\n\t            \"≋̸\": \"&napid;\",\n\t            \"ŉ\": \"&napos;\",\n\t            \"♮\": \"&natural;\",\n\t            \"⩃\": \"&ncap;\",\n\t            \"ň\": \"&ncaron;\",\n\t            \"ņ\": \"&ncedil;\",\n\t            \"⩭̸\": \"&ncongdot;\",\n\t            \"⩂\": \"&ncup;\",\n\t            \"н\": \"&ncy;\",\n\t            \"–\": \"&ndash;\",\n\t            \"⇗\": \"&neArr;\",\n\t            \"⤤\": \"&nearhk;\",\n\t            \"≐̸\": \"&nedot;\",\n\t            \"⤨\": \"&toea;\",\n\t            \"𝔫\": \"&nfr;\",\n\t            \"↮\": \"&nleftrightarrow;\",\n\t            \"⫲\": \"&nhpar;\",\n\t            \"⋼\": \"&nis;\",\n\t            \"⋺\": \"&nisd;\",\n\t            \"њ\": \"&njcy;\",\n\t            \"≦̸\": \"&nleqq;\",\n\t            \"↚\": \"&nleftarrow;\",\n\t            \"‥\": \"&nldr;\",\n\t            \"𝕟\": \"&nopf;\",\n\t            \"¬\": \"&not;\",\n\t            \"⋹̸\": \"&notinE;\",\n\t            \"⋵̸\": \"&notindot;\",\n\t            \"⋷\": \"&notinvb;\",\n\t            \"⋶\": \"&notinvc;\",\n\t            \"⋾\": \"&notnivb;\",\n\t            \"⋽\": \"&notnivc;\",\n\t            \"⫽⃥\": \"&nparsl;\",\n\t            \"∂̸\": \"&npart;\",\n\t            \"⨔\": \"&npolint;\",\n\t            \"↛\": \"&nrightarrow;\",\n\t            \"⤳̸\": \"&nrarrc;\",\n\t            \"↝̸\": \"&nrarrw;\",\n\t            \"𝓃\": \"&nscr;\",\n\t            \"⊄\": \"&nsub;\",\n\t            \"⫅̸\": \"&nsubseteqq;\",\n\t            \"⊅\": \"&nsup;\",\n\t            \"⫆̸\": \"&nsupseteqq;\",\n\t            \"ñ\": \"&ntilde;\",\n\t            \"ν\": \"&nu;\",\n\t            \"#\": \"&num;\",\n\t            \"№\": \"&numero;\",\n\t            \" \": \"&numsp;\",\n\t            \"⊭\": \"&nvDash;\",\n\t            \"⤄\": \"&nvHarr;\",\n\t            \"≍⃒\": \"&nvap;\",\n\t            \"⊬\": \"&nvdash;\",\n\t            \"≥⃒\": \"&nvge;\",\n\t            \">⃒\": \"&nvgt;\",\n\t            \"⧞\": \"&nvinfin;\",\n\t            \"⤂\": \"&nvlArr;\",\n\t            \"≤⃒\": \"&nvle;\",\n\t            \"<⃒\": \"&nvlt;\",\n\t            \"⊴⃒\": \"&nvltrie;\",\n\t            \"⤃\": \"&nvrArr;\",\n\t            \"⊵⃒\": \"&nvrtrie;\",\n\t            \"∼⃒\": \"&nvsim;\",\n\t            \"⇖\": \"&nwArr;\",\n\t            \"⤣\": \"&nwarhk;\",\n\t            \"⤧\": \"&nwnear;\",\n\t            \"ó\": \"&oacute;\",\n\t            \"ô\": \"&ocirc;\",\n\t            \"о\": \"&ocy;\",\n\t            \"ő\": \"&odblac;\",\n\t            \"⨸\": \"&odiv;\",\n\t            \"⦼\": \"&odsold;\",\n\t            \"œ\": \"&oelig;\",\n\t            \"⦿\": \"&ofcir;\",\n\t            \"𝔬\": \"&ofr;\",\n\t            \"˛\": \"&ogon;\",\n\t            \"ò\": \"&ograve;\",\n\t            \"⧁\": \"&ogt;\",\n\t            \"⦵\": \"&ohbar;\",\n\t            \"⦾\": \"&olcir;\",\n\t            \"⦻\": \"&olcross;\",\n\t            \"⧀\": \"&olt;\",\n\t            \"ō\": \"&omacr;\",\n\t            \"ω\": \"&omega;\",\n\t            \"ο\": \"&omicron;\",\n\t            \"⦶\": \"&omid;\",\n\t            \"𝕠\": \"&oopf;\",\n\t            \"⦷\": \"&opar;\",\n\t            \"⦹\": \"&operp;\",\n\t            \"∨\": \"&vee;\",\n\t            \"⩝\": \"&ord;\",\n\t            \"ℴ\": \"&oscr;\",\n\t            \"ª\": \"&ordf;\",\n\t            \"º\": \"&ordm;\",\n\t            \"⊶\": \"&origof;\",\n\t            \"⩖\": \"&oror;\",\n\t            \"⩗\": \"&orslope;\",\n\t            \"⩛\": \"&orv;\",\n\t            \"ø\": \"&oslash;\",\n\t            \"⊘\": \"&osol;\",\n\t            \"õ\": \"&otilde;\",\n\t            \"⨶\": \"&otimesas;\",\n\t            \"ö\": \"&ouml;\",\n\t            \"⌽\": \"&ovbar;\",\n\t            \"¶\": \"&para;\",\n\t            \"⫳\": \"&parsim;\",\n\t            \"⫽\": \"&parsl;\",\n\t            \"п\": \"&pcy;\",\n\t            \"%\": \"&percnt;\",\n\t            \".\": \"&period;\",\n\t            \"‰\": \"&permil;\",\n\t            \"‱\": \"&pertenk;\",\n\t            \"𝔭\": \"&pfr;\",\n\t            \"φ\": \"&phi;\",\n\t            \"ϕ\": \"&varphi;\",\n\t            \"☎\": \"&phone;\",\n\t            \"π\": \"&pi;\",\n\t            \"ϖ\": \"&varpi;\",\n\t            \"ℎ\": \"&planckh;\",\n\t            \"+\": \"&plus;\",\n\t            \"⨣\": \"&plusacir;\",\n\t            \"⨢\": \"&pluscir;\",\n\t            \"⨥\": \"&plusdu;\",\n\t            \"⩲\": \"&pluse;\",\n\t            \"⨦\": \"&plussim;\",\n\t            \"⨧\": \"&plustwo;\",\n\t            \"⨕\": \"&pointint;\",\n\t            \"𝕡\": \"&popf;\",\n\t            \"£\": \"&pound;\",\n\t            \"⪳\": \"&prE;\",\n\t            \"⪷\": \"&precapprox;\",\n\t            \"⪹\": \"&prnap;\",\n\t            \"⪵\": \"&prnE;\",\n\t            \"⋨\": \"&prnsim;\",\n\t            \"′\": \"&prime;\",\n\t            \"⌮\": \"&profalar;\",\n\t            \"⌒\": \"&profline;\",\n\t            \"⌓\": \"&profsurf;\",\n\t            \"⊰\": \"&prurel;\",\n\t            \"𝓅\": \"&pscr;\",\n\t            \"ψ\": \"&psi;\",\n\t            \" \": \"&puncsp;\",\n\t            \"𝔮\": \"&qfr;\",\n\t            \"𝕢\": \"&qopf;\",\n\t            \"⁗\": \"&qprime;\",\n\t            \"𝓆\": \"&qscr;\",\n\t            \"⨖\": \"&quatint;\",\n\t            \"?\": \"&quest;\",\n\t            \"⤜\": \"&rAtail;\",\n\t            \"⥤\": \"&rHar;\",\n\t            \"∽̱\": \"&race;\",\n\t            \"ŕ\": \"&racute;\",\n\t            \"⦳\": \"&raemptyv;\",\n\t            \"⦒\": \"&rangd;\",\n\t            \"⦥\": \"&range;\",\n\t            \"»\": \"&raquo;\",\n\t            \"⥵\": \"&rarrap;\",\n\t            \"⤠\": \"&rarrbfs;\",\n\t            \"⤳\": \"&rarrc;\",\n\t            \"⤞\": \"&rarrfs;\",\n\t            \"⥅\": \"&rarrpl;\",\n\t            \"⥴\": \"&rarrsim;\",\n\t            \"↣\": \"&rightarrowtail;\",\n\t            \"↝\": \"&rightsquigarrow;\",\n\t            \"⤚\": \"&ratail;\",\n\t            \"∶\": \"&ratio;\",\n\t            \"❳\": \"&rbbrk;\",\n\t            \"}\": \"&rcub;\",\n\t            \"]\": \"&rsqb;\",\n\t            \"⦌\": \"&rbrke;\",\n\t            \"⦎\": \"&rbrksld;\",\n\t            \"⦐\": \"&rbrkslu;\",\n\t            \"ř\": \"&rcaron;\",\n\t            \"ŗ\": \"&rcedil;\",\n\t            \"р\": \"&rcy;\",\n\t            \"⤷\": \"&rdca;\",\n\t            \"⥩\": \"&rdldhar;\",\n\t            \"↳\": \"&rdsh;\",\n\t            \"▭\": \"&rect;\",\n\t            \"⥽\": \"&rfisht;\",\n\t            \"𝔯\": \"&rfr;\",\n\t            \"⥬\": \"&rharul;\",\n\t            \"ρ\": \"&rho;\",\n\t            \"ϱ\": \"&varrho;\",\n\t            \"⇉\": \"&rrarr;\",\n\t            \"⋌\": \"&rthree;\",\n\t            \"˚\": \"&ring;\",\n\t            \"‏\": \"&rlm;\",\n\t            \"⎱\": \"&rmoustache;\",\n\t            \"⫮\": \"&rnmid;\",\n\t            \"⟭\": \"&roang;\",\n\t            \"⇾\": \"&roarr;\",\n\t            \"⦆\": \"&ropar;\",\n\t            \"𝕣\": \"&ropf;\",\n\t            \"⨮\": \"&roplus;\",\n\t            \"⨵\": \"&rotimes;\",\n\t            \")\": \"&rpar;\",\n\t            \"⦔\": \"&rpargt;\",\n\t            \"⨒\": \"&rppolint;\",\n\t            \"›\": \"&rsaquo;\",\n\t            \"𝓇\": \"&rscr;\",\n\t            \"⋊\": \"&rtimes;\",\n\t            \"▹\": \"&triangleright;\",\n\t            \"⧎\": \"&rtriltri;\",\n\t            \"⥨\": \"&ruluhar;\",\n\t            \"℞\": \"&rx;\",\n\t            \"ś\": \"&sacute;\",\n\t            \"⪴\": \"&scE;\",\n\t            \"⪸\": \"&succapprox;\",\n\t            \"š\": \"&scaron;\",\n\t            \"ş\": \"&scedil;\",\n\t            \"ŝ\": \"&scirc;\",\n\t            \"⪶\": \"&succneqq;\",\n\t            \"⪺\": \"&succnapprox;\",\n\t            \"⋩\": \"&succnsim;\",\n\t            \"⨓\": \"&scpolint;\",\n\t            \"с\": \"&scy;\",\n\t            \"⋅\": \"&sdot;\",\n\t            \"⩦\": \"&sdote;\",\n\t            \"⇘\": \"&seArr;\",\n\t            \"§\": \"&sect;\",\n\t            \";\": \"&semi;\",\n\t            \"⤩\": \"&tosa;\",\n\t            \"✶\": \"&sext;\",\n\t            \"𝔰\": \"&sfr;\",\n\t            \"♯\": \"&sharp;\",\n\t            \"щ\": \"&shchcy;\",\n\t            \"ш\": \"&shcy;\",\n\t            \"­\": \"&shy;\",\n\t            \"σ\": \"&sigma;\",\n\t            \"ς\": \"&varsigma;\",\n\t            \"⩪\": \"&simdot;\",\n\t            \"⪞\": \"&simg;\",\n\t            \"⪠\": \"&simgE;\",\n\t            \"⪝\": \"&siml;\",\n\t            \"⪟\": \"&simlE;\",\n\t            \"≆\": \"&simne;\",\n\t            \"⨤\": \"&simplus;\",\n\t            \"⥲\": \"&simrarr;\",\n\t            \"⨳\": \"&smashp;\",\n\t            \"⧤\": \"&smeparsl;\",\n\t            \"⌣\": \"&ssmile;\",\n\t            \"⪪\": \"&smt;\",\n\t            \"⪬\": \"&smte;\",\n\t            \"⪬︀\": \"&smtes;\",\n\t            \"ь\": \"&softcy;\",\n\t            \"/\": \"&sol;\",\n\t            \"⧄\": \"&solb;\",\n\t            \"⌿\": \"&solbar;\",\n\t            \"𝕤\": \"&sopf;\",\n\t            \"♠\": \"&spadesuit;\",\n\t            \"⊓︀\": \"&sqcaps;\",\n\t            \"⊔︀\": \"&sqcups;\",\n\t            \"𝓈\": \"&sscr;\",\n\t            \"☆\": \"&star;\",\n\t            \"⊂\": \"&subset;\",\n\t            \"⫅\": \"&subseteqq;\",\n\t            \"⪽\": \"&subdot;\",\n\t            \"⫃\": \"&subedot;\",\n\t            \"⫁\": \"&submult;\",\n\t            \"⫋\": \"&subsetneqq;\",\n\t            \"⊊\": \"&subsetneq;\",\n\t            \"⪿\": \"&subplus;\",\n\t            \"⥹\": \"&subrarr;\",\n\t            \"⫇\": \"&subsim;\",\n\t            \"⫕\": \"&subsub;\",\n\t            \"⫓\": \"&subsup;\",\n\t            \"♪\": \"&sung;\",\n\t            \"¹\": \"&sup1;\",\n\t            \"²\": \"&sup2;\",\n\t            \"³\": \"&sup3;\",\n\t            \"⫆\": \"&supseteqq;\",\n\t            \"⪾\": \"&supdot;\",\n\t            \"⫘\": \"&supdsub;\",\n\t            \"⫄\": \"&supedot;\",\n\t            \"⟉\": \"&suphsol;\",\n\t            \"⫗\": \"&suphsub;\",\n\t            \"⥻\": \"&suplarr;\",\n\t            \"⫂\": \"&supmult;\",\n\t            \"⫌\": \"&supsetneqq;\",\n\t            \"⊋\": \"&supsetneq;\",\n\t            \"⫀\": \"&supplus;\",\n\t            \"⫈\": \"&supsim;\",\n\t            \"⫔\": \"&supsub;\",\n\t            \"⫖\": \"&supsup;\",\n\t            \"⇙\": \"&swArr;\",\n\t            \"⤪\": \"&swnwar;\",\n\t            \"ß\": \"&szlig;\",\n\t            \"⌖\": \"&target;\",\n\t            \"τ\": \"&tau;\",\n\t            \"ť\": \"&tcaron;\",\n\t            \"ţ\": \"&tcedil;\",\n\t            \"т\": \"&tcy;\",\n\t            \"⌕\": \"&telrec;\",\n\t            \"𝔱\": \"&tfr;\",\n\t            \"θ\": \"&theta;\",\n\t            \"ϑ\": \"&vartheta;\",\n\t            \"þ\": \"&thorn;\",\n\t            \"×\": \"&times;\",\n\t            \"⨱\": \"&timesbar;\",\n\t            \"⨰\": \"&timesd;\",\n\t            \"⌶\": \"&topbot;\",\n\t            \"⫱\": \"&topcir;\",\n\t            \"𝕥\": \"&topf;\",\n\t            \"⫚\": \"&topfork;\",\n\t            \"‴\": \"&tprime;\",\n\t            \"▵\": \"&utri;\",\n\t            \"≜\": \"&trie;\",\n\t            \"◬\": \"&tridot;\",\n\t            \"⨺\": \"&triminus;\",\n\t            \"⨹\": \"&triplus;\",\n\t            \"⧍\": \"&trisb;\",\n\t            \"⨻\": \"&tritime;\",\n\t            \"⏢\": \"&trpezium;\",\n\t            \"𝓉\": \"&tscr;\",\n\t            \"ц\": \"&tscy;\",\n\t            \"ћ\": \"&tshcy;\",\n\t            \"ŧ\": \"&tstrok;\",\n\t            \"⥣\": \"&uHar;\",\n\t            \"ú\": \"&uacute;\",\n\t            \"ў\": \"&ubrcy;\",\n\t            \"ŭ\": \"&ubreve;\",\n\t            \"û\": \"&ucirc;\",\n\t            \"у\": \"&ucy;\",\n\t            \"ű\": \"&udblac;\",\n\t            \"⥾\": \"&ufisht;\",\n\t            \"𝔲\": \"&ufr;\",\n\t            \"ù\": \"&ugrave;\",\n\t            \"▀\": \"&uhblk;\",\n\t            \"⌜\": \"&ulcorner;\",\n\t            \"⌏\": \"&ulcrop;\",\n\t            \"◸\": \"&ultri;\",\n\t            \"ū\": \"&umacr;\",\n\t            \"ų\": \"&uogon;\",\n\t            \"𝕦\": \"&uopf;\",\n\t            \"υ\": \"&upsilon;\",\n\t            \"⇈\": \"&uuarr;\",\n\t            \"⌝\": \"&urcorner;\",\n\t            \"⌎\": \"&urcrop;\",\n\t            \"ů\": \"&uring;\",\n\t            \"◹\": \"&urtri;\",\n\t            \"𝓊\": \"&uscr;\",\n\t            \"⋰\": \"&utdot;\",\n\t            \"ũ\": \"&utilde;\",\n\t            \"ü\": \"&uuml;\",\n\t            \"⦧\": \"&uwangle;\",\n\t            \"⫨\": \"&vBar;\",\n\t            \"⫩\": \"&vBarv;\",\n\t            \"⦜\": \"&vangrt;\",\n\t            \"⊊︀\": \"&vsubne;\",\n\t            \"⫋︀\": \"&vsubnE;\",\n\t            \"⊋︀\": \"&vsupne;\",\n\t            \"⫌︀\": \"&vsupnE;\",\n\t            \"в\": \"&vcy;\",\n\t            \"⊻\": \"&veebar;\",\n\t            \"≚\": \"&veeeq;\",\n\t            \"⋮\": \"&vellip;\",\n\t            \"𝔳\": \"&vfr;\",\n\t            \"𝕧\": \"&vopf;\",\n\t            \"𝓋\": \"&vscr;\",\n\t            \"⦚\": \"&vzigzag;\",\n\t            \"ŵ\": \"&wcirc;\",\n\t            \"⩟\": \"&wedbar;\",\n\t            \"≙\": \"&wedgeq;\",\n\t            \"℘\": \"&wp;\",\n\t            \"𝔴\": \"&wfr;\",\n\t            \"𝕨\": \"&wopf;\",\n\t            \"𝓌\": \"&wscr;\",\n\t            \"𝔵\": \"&xfr;\",\n\t            \"ξ\": \"&xi;\",\n\t            \"⋻\": \"&xnis;\",\n\t            \"𝕩\": \"&xopf;\",\n\t            \"𝓍\": \"&xscr;\",\n\t            \"ý\": \"&yacute;\",\n\t            \"я\": \"&yacy;\",\n\t            \"ŷ\": \"&ycirc;\",\n\t            \"ы\": \"&ycy;\",\n\t            \"¥\": \"&yen;\",\n\t            \"𝔶\": \"&yfr;\",\n\t            \"ї\": \"&yicy;\",\n\t            \"𝕪\": \"&yopf;\",\n\t            \"𝓎\": \"&yscr;\",\n\t            \"ю\": \"&yucy;\",\n\t            \"ÿ\": \"&yuml;\",\n\t            \"ź\": \"&zacute;\",\n\t            \"ž\": \"&zcaron;\",\n\t            \"з\": \"&zcy;\",\n\t            \"ż\": \"&zdot;\",\n\t            \"ζ\": \"&zeta;\",\n\t            \"𝔷\": \"&zfr;\",\n\t            \"ж\": \"&zhcy;\",\n\t            \"⇝\": \"&zigrarr;\",\n\t            \"𝕫\": \"&zopf;\",\n\t            \"𝓏\": \"&zscr;\",\n\t            \"‍\": \"&zwj;\",\n\t            \"‌\": \"&zwnj;\"\n\t        }\n\t    }\n\t}; \n\treturn namedReferences;\n}\n\nvar numericUnicodeMap = {};\n\nvar hasRequiredNumericUnicodeMap;\n\nfunction requireNumericUnicodeMap () {\n\tif (hasRequiredNumericUnicodeMap) return numericUnicodeMap;\n\thasRequiredNumericUnicodeMap = 1;\n\tObject.defineProperty(numericUnicodeMap, \"__esModule\", {\n\t    value: true\n\t});\n\tnumericUnicodeMap.numericUnicodeMap = {\n\t    0: 65533,\n\t    128: 8364,\n\t    130: 8218,\n\t    131: 402,\n\t    132: 8222,\n\t    133: 8230,\n\t    134: 8224,\n\t    135: 8225,\n\t    136: 710,\n\t    137: 8240,\n\t    138: 352,\n\t    139: 8249,\n\t    140: 338,\n\t    142: 381,\n\t    145: 8216,\n\t    146: 8217,\n\t    147: 8220,\n\t    148: 8221,\n\t    149: 8226,\n\t    150: 8211,\n\t    151: 8212,\n\t    152: 732,\n\t    153: 8482,\n\t    154: 353,\n\t    155: 8250,\n\t    156: 339,\n\t    158: 382,\n\t    159: 376\n\t}; \n\treturn numericUnicodeMap;\n}\n\nvar surrogatePairs = {};\n\nvar hasRequiredSurrogatePairs;\n\nfunction requireSurrogatePairs () {\n\tif (hasRequiredSurrogatePairs) return surrogatePairs;\n\thasRequiredSurrogatePairs = 1;\n\tObject.defineProperty(surrogatePairs, \"__esModule\", {\n\t    value: true\n\t});\n\tsurrogatePairs.fromCodePoint = String.fromCodePoint || function(astralCodePoint) {\n\t    return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);\n\t};\n\tsurrogatePairs.getCodePoint = String.prototype.codePointAt ? function(input, position) {\n\t    return input.codePointAt(position);\n\t} : function(input, position) {\n\t    return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;\n\t};\n\tsurrogatePairs.highSurrogateFrom = 55296;\n\tsurrogatePairs.highSurrogateTo = 56319; \n\treturn surrogatePairs;\n}\n\nvar hasRequiredLib;\n\nfunction requireLib () {\n\tif (hasRequiredLib) return lib;\n\thasRequiredLib = 1;\n\tvar __assign = lib && lib.__assign || function() {\n\t    __assign = Object.assign || function(t) {\n\t        for(var s, i = 1, n = arguments.length; i < n; i++){\n\t            s = arguments[i];\n\t            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n\t        }\n\t        return t;\n\t    };\n\t    return __assign.apply(this, arguments);\n\t};\n\tObject.defineProperty(lib, \"__esModule\", {\n\t    value: true\n\t});\n\tvar named_references_1 = requireNamedReferences();\n\tvar numeric_unicode_map_1 = requireNumericUnicodeMap();\n\tvar surrogate_pairs_1 = requireSurrogatePairs();\n\tvar allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {\n\t    all: named_references_1.namedReferences.html5\n\t});\n\tfunction replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {\n\t    macroRegExp.lastIndex = 0;\n\t    var replaceMatch = macroRegExp.exec(macroText);\n\t    var replaceResult;\n\t    if (replaceMatch) {\n\t        replaceResult = \"\";\n\t        var replaceLastIndex = 0;\n\t        do {\n\t            if (replaceLastIndex !== replaceMatch.index) {\n\t                replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);\n\t            }\n\t            var replaceInput = replaceMatch[0];\n\t            replaceResult += macroReplacer(replaceInput);\n\t            replaceLastIndex = replaceMatch.index + replaceInput.length;\n\t        }while (replaceMatch = macroRegExp.exec(macroText))\n\t        if (replaceLastIndex !== macroText.length) {\n\t            replaceResult += macroText.substring(replaceLastIndex);\n\t        }\n\t    } else {\n\t        replaceResult = macroText;\n\t    }\n\t    return replaceResult;\n\t}\n\tvar encodeRegExps = {\n\t    specialChars: /[<>'\"&]/g,\n\t    nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n\t    nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n\t    nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n\t    extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g\n\t};\n\tvar defaultEncodeOptions = {\n\t    mode: \"specialChars\",\n\t    level: \"all\",\n\t    numeric: \"decimal\"\n\t};\n\tfunction encode(text, _a) {\n\t    var _b = _a === void 0 ? defaultEncodeOptions : _a, _c = _b.mode, mode = _c === void 0 ? \"specialChars\" : _c, _d = _b.numeric, numeric = _d === void 0 ? \"decimal\" : _d, _e = _b.level, level = _e === void 0 ? \"all\" : _e;\n\t    if (!text) {\n\t        return \"\";\n\t    }\n\t    var encodeRegExp = encodeRegExps[mode];\n\t    var references = allNamedReferences[level].characters;\n\t    var isHex = numeric === \"hexadecimal\";\n\t    return replaceUsingRegExp(text, encodeRegExp, function(input) {\n\t        var result = references[input];\n\t        if (!result) {\n\t            var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);\n\t            result = (isHex ? \"&#x\" + code.toString(16) : \"&#\" + code) + \";\";\n\t        }\n\t        return result;\n\t    });\n\t}\n\tlib.encode = encode;\n\tvar defaultDecodeOptions = {\n\t    scope: \"body\",\n\t    level: \"all\"\n\t};\n\tvar strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\n\tvar attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\n\tvar baseDecodeRegExps = {\n\t    xml: {\n\t        strict: strict,\n\t        attribute: attribute,\n\t        body: named_references_1.bodyRegExps.xml\n\t    },\n\t    html4: {\n\t        strict: strict,\n\t        attribute: attribute,\n\t        body: named_references_1.bodyRegExps.html4\n\t    },\n\t    html5: {\n\t        strict: strict,\n\t        attribute: attribute,\n\t        body: named_references_1.bodyRegExps.html5\n\t    }\n\t};\n\tvar decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {\n\t    all: baseDecodeRegExps.html5\n\t});\n\tvar fromCharCode = String.fromCharCode;\n\tvar outOfBoundsChar = fromCharCode(65533);\n\tvar defaultDecodeEntityOptions = {\n\t    level: \"all\"\n\t};\n\tfunction getDecodedEntity(entity, references, isAttribute, isStrict) {\n\t    var decodeResult = entity;\n\t    var decodeEntityLastChar = entity[entity.length - 1];\n\t    if (isAttribute && decodeEntityLastChar === \"=\") {\n\t        decodeResult = entity;\n\t    } else if (isStrict && decodeEntityLastChar !== \";\") {\n\t        decodeResult = entity;\n\t    } else {\n\t        var decodeResultByReference = references[entity];\n\t        if (decodeResultByReference) {\n\t            decodeResult = decodeResultByReference;\n\t        } else if (entity[0] === \"&\" && entity[1] === \"#\") {\n\t            var decodeSecondChar = entity[2];\n\t            var decodeCode = decodeSecondChar == \"x\" || decodeSecondChar == \"X\" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));\n\t            decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);\n\t        }\n\t    }\n\t    return decodeResult;\n\t}\n\tfunction decodeEntity(entity, _a) {\n\t    var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level, level = _b === void 0 ? \"all\" : _b;\n\t    if (!entity) {\n\t        return \"\";\n\t    }\n\t    return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n\t}\n\tlib.decodeEntity = decodeEntity;\n\tfunction decode(text, _a) {\n\t    var _b = _a === void 0 ? defaultDecodeOptions : _a, _c = _b.level, level = _c === void 0 ? \"all\" : _c, _d = _b.scope, scope = _d === void 0 ? level === \"xml\" ? \"strict\" : \"body\" : _d;\n\t    if (!text) {\n\t        return \"\";\n\t    }\n\t    var decodeRegExp = decodeRegExps[level][scope];\n\t    var references = allNamedReferences[level].entities;\n\t    var isAttribute = scope === \"attribute\";\n\t    var isStrict = scope === \"strict\";\n\t    return replaceUsingRegExp(text, decodeRegExp, function(entity) {\n\t        return getDecodedEntity(entity, references, isAttribute, isStrict);\n\t    });\n\t}\n\tlib.decode = decode; \n\treturn lib;\n}\n\nvar libExports = /*@__PURE__*/ requireLib();\n\nvar d$1 = {\n    strictlyTwoElementsInRangeArrays: false,\n    progressFn: null\n};\nfunction g(t, u) {\n    if (!Array.isArray(t) || !t.length) return t;\n    let n = {\n        ...d$1,\n        ...u\n    }, s, o;\n    if (n.strictlyTwoElementsInRangeArrays && !t.every((e, r)=>!Array.isArray(e) || e.length !== 2 ? (s = r, o = e.length, false) : true)) throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${s}th range (${JSON.stringify(t[s], null, 4)}) has not two but ${o} elements!`);\n    if (!t.every((e, r)=>!Array.isArray(e) || !Number.isInteger(e[0]) || e[0] < 0 || !Number.isInteger(e[1]) || e[1] < 0 ? (s = r, false) : true)) throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${s}th range (${JSON.stringify(t[s], null, 4)}) does not consist of only natural numbers!`);\n    let p = t.length ** 2, i = 0;\n    return Array.from(t).sort((e, r)=>(n.progressFn && (i += 1, n.progressFn(Math.floor(i * 100 / p))), e[0] === r[0] ? e[1] < r[1] ? -1 : e[1] > r[1] ? 1 : 0 : e[0] < r[0] ? -1 : 1));\n}\n\nvar d = {\n    mergeType: 1,\n    progressFn: null,\n    joinRangesThatTouchEdges: true\n};\nfunction b(i, r) {\n    function l(e) {\n        return !!e && typeof e == \"object\" && !Array.isArray(e);\n    }\n    if (!Array.isArray(i) || !i.length) return null;\n    let n;\n    if (r) if (l(r)) {\n        if (n = {\n            ...d,\n            ...r\n        }, n.progressFn && l(n.progressFn) && !Object.keys(n.progressFn).length) n.progressFn = null;\n        else if (n.progressFn && typeof n.progressFn != \"function\") throw new Error(`ranges-merge: [THROW_ID_01] opts.progressFn must be a function! It was given of a type: \"${typeof n.progressFn}\", equal to ${JSON.stringify(n.progressFn, null, 4)}`);\n        if (![\n            1,\n            2,\n            \"1\",\n            \"2\"\n        ].includes(n.mergeType)) throw new Error(`ranges-merge: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: \"${typeof n.mergeType}\", equal to ${JSON.stringify(n.mergeType, null, 4)}`);\n        if (typeof n.joinRangesThatTouchEdges != \"boolean\") throw new Error(`ranges-merge: [THROW_ID_04] opts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: \"${typeof n.joinRangesThatTouchEdges}\", equal to ${JSON.stringify(n.joinRangesThatTouchEdges, null, 4)}`);\n    } else throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:\n${JSON.stringify(r, null, 4)} (type ${typeof r})`);\n    else n = {\n        ...d\n    };\n    let g$1 = i.filter((e)=>Array.isArray(e)).map((e)=>[\n            ...e\n        ]).filter((e)=>e[2] !== void 0 || e[0] !== e[1]), s, o, t;\n    n.progressFn ? s = g(g$1, {\n        progressFn: (e)=>{\n            t = Math.floor(e / 5), t !== o && (o = t, n.progressFn(t));\n        }\n    }) : s = g(g$1);\n    let a = s.length - 1;\n    for(let e = a; e > 0; e--)n.progressFn && (t = Math.floor((1 - e / a) * 78) + 21, t !== o && t > o && (o = t, n.progressFn(t))), (s[e][0] <= s[e - 1][0] || !n.joinRangesThatTouchEdges && s[e][0] < s[e - 1][1] || n.joinRangesThatTouchEdges && s[e][0] <= s[e - 1][1]) && (s[e - 1][0] = Math.min(s[e][0], s[e - 1][0]), s[e - 1][1] = Math.max(s[e][1], s[e - 1][1]), s[e][2] !== void 0 && (s[e - 1][0] >= s[e][0] || s[e - 1][1] <= s[e][1]) && s[e - 1][2] !== null && (s[e][2] === null && s[e - 1][2] !== null ? s[e - 1][2] = null : s[e - 1][2] != null ? +n.mergeType == 2 && s[e - 1][0] === s[e][0] ? s[e - 1][2] = s[e][2] : s[e - 1][2] += s[e][2] : s[e - 1][2] = s[e][2]), s.splice(e, 1), e = s.length);\n    return s.length ? s : null;\n}\n\nvar isProduction = \"development\" === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var value = prefix;\n    throw new Error(value);\n}\n\nfunction _(s, n, r) {\n    if (arguments.length === 0) throw new Error(\"ranges-apply: [THROW_ID_01] inputs missing!\");\n    if (typeof s != \"string\") throw new TypeError(`ranges-apply: [THROW_ID_02] first input argument must be a string! Currently it's: ${typeof s}, equal to: ${JSON.stringify(s, null, 4)}`);\n    if (n && !Array.isArray(n)) throw new TypeError(`ranges-apply: [THROW_ID_03] second input argument must be an array (or null)! Currently it's: ${typeof n}, equal to: ${JSON.stringify(n, null, 4)}`);\n    if (!n?.filter((e)=>e).length) return s;\n    let i;\n    Array.isArray(n) && Number.isInteger(n[0]) && Number.isInteger(n[1]) ? i = [\n        Array.from(n)\n    ] : i = Array.from(n);\n    i.length;\n    i.filter((e)=>e).forEach((e, a)=>{\n        if (!Array.isArray(e)) throw new TypeError(`ranges-apply: [THROW_ID_05] ranges array, second input arg., has ${a}th element not an array: ${JSON.stringify(e, null, 4)}, which is ${typeof e}`);\n        if (!Number.isInteger(e[0])) {\n            if (!Number.isInteger(+e[0]) || +e[0] < 0) throw new TypeError(`ranges-apply: [THROW_ID_06] ranges array, second input arg. has ${a}th element, array ${JSON.stringify(e, null, 0)}. Its first element is not an integer, string index, but ${typeof e[0]}, equal to: ${JSON.stringify(e[0], null, 4)}.`);\n            i[a][0] = +i[a][0];\n        }\n        if (!Number.isInteger(e[1])) {\n            if (!Number.isInteger(+e[1]) || +e[1] < 0) throw new TypeError(`ranges-apply: [THROW_ID_07] ranges array, second input arg. has ${a}th element, array ${JSON.stringify(e, null, 0)}. Its second element is not an integer, string index, but ${typeof e[1]}, equal to: ${JSON.stringify(e[1], null, 4)}.`);\n            i[a][1] = +i[a][1];\n        }\n    });\n    let o = b(i, {\n        progressFn: (e)=>{\n        }\n    });\n    invariant(o);\n    let u = o.length;\n    if (u > 0) {\n        let e = s.slice(o[u - 1][1]);\n        s = o.reduce((a, $, l, y)=>{\n            let g = l === 0 ? 0 : y[l - 1][1], d = y[l][0];\n            return `${a}${s.slice(g, d)}${y[l][2] || \"\"}`;\n        }, \"\"), s += e;\n    }\n    return s;\n}\n\nfunction D$1(n, u = 1) {\n    let $ = \"\\xA0\";\n    function g(e) {\n        return Array.from(e).reverse().join(\"\");\n    }\n    function p(e, s, r) {\n        let t = r ? `\n` : \"\\r\", i = r ? \"\\r\" : `\n`;\n        if (!e) return e;\n        let c = 0, o = \"\";\n        for(let l = 0, f = e.length; l < f; l++)(e[l] === t || e[l] === i && e[l - 1] !== t) && c++, `\\r\n`.includes(e[l]) || e[l] === $ ? (e[l] === $ ? o += e[l] : e[l] === t ? c <= s && (o += e[l], e[l + 1] === i && (o += e[l + 1], l++)) : e[l] === i && e?.[l - 1] !== t && c <= s && (o += e[l])) : (!e[l + 1] && !c && (o += \" \"));\n        return o;\n    }\n    if (typeof n == \"string\" && n.length) {\n        let e = 1;\n        typeof +u == \"number\" && Number.isInteger(+u) && +u >= 0 && (e = +u);\n        let s = \"\", r = \"\";\n        if (!n.trim()) s = n;\n        else if (!n[0].trim()) {\n            for(let t = 0, i = n.length; t < i; t++)if (n[t].trim()) {\n                s = n.slice(0, t);\n                break;\n            }\n        }\n        if (n.trim() && (n.slice(-1).trim() === \"\" || n.slice(-1) === $)) {\n            for(let t = n.length; t--;)if (n[t].trim()) {\n                r = n.slice(t + 1);\n                break;\n            }\n        }\n        return `${p(s, e, false)}${n.trim()}${g(p(g(r), e, true))}`;\n    }\n    return n;\n}\n\nvar f = {\n    mergeType: 1,\n    progressFn: null,\n    joinRangesThatTouchEdges: true\n};\nfunction $(p, t) {\n    function r(e) {\n        return !!e && typeof e == \"object\" && !Array.isArray(e);\n    }\n    if (!Array.isArray(p) || !p.length) return null;\n    let s;\n    if (t) if (r(t)) {\n        if (s = {\n            ...f,\n            ...t\n        }, s.progressFn && r(s.progressFn) && !Object.keys(s.progressFn).length) s.progressFn = null;\n        else if (s.progressFn && typeof s.progressFn != \"function\") throw new Error(`ranges-merge: [THROW_ID_01] resolvedOpts.progressFn must be a function! It was given of a type: \"${typeof s.progressFn}\", equal to ${JSON.stringify(s.progressFn, null, 4)}`);\n        if (![\n            1,\n            2,\n            \"1\",\n            \"2\"\n        ].includes(s.mergeType)) throw new Error(`ranges-merge: [THROW_ID_02] resolvedOpts.mergeType was customised to a wrong thing! It was given of a type: \"${typeof s.mergeType}\", equal to ${JSON.stringify(s.mergeType, null, 4)}`);\n        if (typeof s.joinRangesThatTouchEdges != \"boolean\") throw new Error(`ranges-merge: [THROW_ID_04] resolvedOpts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: \"${typeof s.joinRangesThatTouchEdges}\", equal to ${JSON.stringify(s.joinRangesThatTouchEdges, null, 4)}`);\n    } else throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:\n${JSON.stringify(t, null, 4)} (type ${typeof t})`);\n    else s = {\n        ...f\n    };\n    let i = p.filter((e)=>Array.isArray(e)).map((e)=>[\n            ...e\n        ]).filter((e)=>e[2] !== void 0 || e[0] !== e[1]), n, o, l;\n    s.progressFn ? n = g(i, {\n        progressFn: (e)=>{\n            l = Math.floor(e / 5), l !== o && (o = l, s.progressFn(l));\n        }\n    }) : n = g(i);\n    let h = n.length - 1;\n    for(let e = h; e > 0; e--)s.progressFn && (l = Math.floor((1 - e / h) * 78) + 21, l !== o && l > o && (o = l, s.progressFn(l))), (n[e][0] <= n[e - 1][0] || !s.joinRangesThatTouchEdges && n[e][0] < n[e - 1][1] || s.joinRangesThatTouchEdges && n[e][0] <= n[e - 1][1]) && (n[e - 1][0] = Math.min(n[e][0], n[e - 1][0]), n[e - 1][1] = Math.max(n[e][1], n[e - 1][1]), n[e][2] !== void 0 && (n[e - 1][0] >= n[e][0] || n[e - 1][1] <= n[e][1]) && n[e - 1][2] !== null && (n[e][2] === null && n[e - 1][2] !== null ? n[e - 1][2] = null : n[e - 1][2] != null ? +s.mergeType == 2 && n[e - 1][0] === n[e][0] ? n[e - 1][2] = n[e][2] : n[e - 1][2] += n[e][2] : n[e - 1][2] = n[e][2]), n.splice(e, 1), e = n.length);\n    return n.length ? n : null;\n}\nvar R = {\n    limitToBeAddedWhitespace: false,\n    limitLinebreaksCount: 1,\n    mergeType: 1\n}, y = class {\n    constructor(t){\n        let r$1 = {\n            ...R,\n            ...t\n        };\n        if (r$1.mergeType && r$1.mergeType !== 1 && r$1.mergeType !== 2) if (r(r$1.mergeType) && r$1.mergeType.trim() === \"1\") r$1.mergeType = 1;\n        else if (r(r$1.mergeType) && r$1.mergeType.trim() === \"2\") r$1.mergeType = 2;\n        else throw new Error(`ranges-push: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: \"${typeof r$1.mergeType}\", equal to ${JSON.stringify(r$1.mergeType, null, 4)}`);\n        this.opts = r$1, this.ranges = [];\n    }\n    add(t, r$1, s) {\n        if (t == null && r$1 == null) return;\n        if (G$1(t) && !G$1(r$1)) {\n            if (Array.isArray(t)) {\n                if (t.length) {\n                    if (t.some((o)=>Array.isArray(o))) {\n                        t.forEach((o)=>{\n                            Array.isArray(o) && this.add(...o);\n                        });\n                        return;\n                    }\n                    t.length && q$1(+t[0]) && q$1(+t[1]) && this.add(...t);\n                }\n                return;\n            }\n            throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_12] the first input argument, \"from\" is set (${JSON.stringify(t, null, 0)}) but second-one, \"to\" is not (${JSON.stringify(r$1, null, 0)})`);\n        } else if (!G$1(t) && G$1(r$1)) throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_13] the second input argument, \"to\" is set (${JSON.stringify(r$1, null, 0)}) but first-one, \"from\" is not (${JSON.stringify(t, null, 0)})`);\n        let i = +t, n = +r$1;\n        if (q$1(s) && (s = String(s)), q$1(i) && q$1(n)) {\n            if (G$1(s) && !r(s) && !q$1(s)) throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_08] The third argument, the value to add, was given not as string but ${typeof s}, equal to:\n${JSON.stringify(s, null, 4)}`);\n            if (G$1(this.ranges) && Array.isArray(this.last()) && i === this.last()[1]) {\n                if (this.last()[1] = n, this.last()[2], this.last()[2] !== null && G$1(s)) {\n                    let o = this.last()[2] && this.last()[2].length && (!this.opts?.mergeType || this.opts.mergeType === 1) ? `${this.last()[2]}${s}` : s;\n                    this.opts.limitToBeAddedWhitespace && (o = D$1(o, this.opts.limitLinebreaksCount)), r(o) && !o.length || (this.last()[2] = o);\n                }\n            } else {\n                this.ranges || (this.ranges = []);\n                let o = s !== void 0 && !(r(s) && !s.length) ? [\n                    i,\n                    n,\n                    s && this.opts.limitToBeAddedWhitespace ? D$1(s, this.opts.limitLinebreaksCount) : s\n                ] : [\n                    i,\n                    n\n                ];\n                this.ranges.push(o);\n            }\n        } else throw q$1(i) && i >= 0 ? new TypeError(`ranges-push/Ranges/add(): [THROW_ID_10] \"to\" value, the second input argument, must be a natural number or zero! Currently it's of a type \"${typeof n}\" equal to: ${JSON.stringify(n, null, 4)}`) : new TypeError(`ranges-push/Ranges/add(): [THROW_ID_09] \"from\" value, the first input argument, must be a natural number or zero! Currently it's of a type \"${typeof i}\" equal to: ${JSON.stringify(i, null, 4)}`);\n    }\n    push(t, r, s) {\n        this.add(t, r, s);\n    }\n    current() {\n        return Array.isArray(this.ranges) && this.ranges.length ? (this.ranges = $(this.ranges, {\n            mergeType: this.opts.mergeType\n        }), this.ranges && this.opts.limitToBeAddedWhitespace ? this.ranges.map((t)=>G$1(t[2]) ? [\n                t[0],\n                t[1],\n                D$1(t[2], this.opts.limitLinebreaksCount)\n            ] : t) : this.ranges) : null;\n    }\n    wipe() {\n        this.ranges = [];\n    }\n    replace(t) {\n        if (Array.isArray(t) && t.length) if (Array.isArray(t[0]) && q$1(t[0][0])) this.ranges = Array.from(t);\n        else throw new Error(`ranges-push/Ranges/replace(): [THROW_ID_11] Single range was given but we expected array of arrays! The first element, ${JSON.stringify(t[0], null, 4)} should be an array and its first element should be an integer, a string index.`);\n        else this.ranges = [];\n    }\n    last() {\n        return Array.isArray(this.ranges) && this.ranges.length ? this.ranges[this.ranges.length - 1] : null;\n    }\n};\n\nI(); var c = \"\\xA0\";\nfunction D({ str: n, idx: e = 0, stopAtNewlines: l = false, stopAtRawNbsp: o = false }) {\n    if (typeof n != \"string\" || !n.length || ((!e || typeof e != \"number\") && (e = 0), !n[e + 1])) return null;\n    if (n[e + 1] && (n[e + 1].trim() || l && `\n\\r`.includes(n[e + 1]) || o && n[e + 1] === c)) return e + 1;\n    if (n[e + 2] && (n[e + 2].trim() || l && `\n\\r`.includes(n[e + 2]) || o && n[e + 2] === c)) return e + 2;\n    for(let t = e + 1, m = n.length; t < m; t++)if (n[t].trim() || l && `\n\\r`.includes(n[t]) || o && n[t] === c) return t;\n    return null;\n}\nfunction E(n, e = 0) {\n    return D({\n        str: n,\n        idx: e,\n        stopAtNewlines: false,\n        stopAtRawNbsp: false\n    });\n}\n\nfunction ee(t) {\n    return /[-_A-Za-z0-9]/.test(t);\n}\nfunction G(t, m) {\n    if (!t) return [];\n    if (Array.isArray(t)) return t.filter((y)=>typeof y == \"string\" && y.trim());\n    if (typeof t == \"string\") return t.trim() ? [\n        t\n    ] : [];\n    throw new TypeError(`string-strip-html/stripHtml(): [THROW_ID_05] ${m} must be array containing zero or more strings or something falsey. Currently it's equal to: ${t}, that a type of ${typeof t}.`);\n}\nfunction j(t, m, y, c) {\n    for(let f = m, b = t.length; f < b; f++){\n        if (t.startsWith(y, f)) return true;\n        if (t.startsWith(c, f)) return false;\n    }\n    return false;\n}\nfunction Y(t, m, y) {\n    !t?.quotes; !!t?.quotes?.value && !j(m, y + 1, t.quotes.value, \">\"); t?.quotes?.next !== -1; !j(m, t?.quotes?.next - 1, t?.quotes?.value, \">\");\n    return !t?.quotes || !j(m, y + 1, t.quotes.value, \">\") && t?.quotes?.next !== -1 && j(m, t?.quotes?.next - 1, t?.quotes?.value, \">\");\n}\nfunction ne(t, m) {\n    return (m.match(new RegExp(t, \"g\")) || []).length;\n}\nvar P = new Set([\n    \"!doctype\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"doctype\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"math\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"rb\",\n    \"rp\",\n    \"rt\",\n    \"rtc\",\n    \"ruby\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"slot\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"svg\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"template\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    \"xml\"\n]), x = new Set([\n    \"a\",\n    \"b\",\n    \"i\",\n    \"p\",\n    \"q\",\n    \"s\",\n    \"u\"\n]), q = new Set([\n    \".\",\n    \",\",\n    \";\",\n    \"!\",\n    \"?\"\n]), Q = new Set([\n    \".\",\n    \",\",\n    \"?\",\n    \";\",\n    \")\",\n    \"\\u2026\",\n    '\"',\n    \"\\xBB\"\n]), te = new Set([\n    \"a\",\n    \"abbr\",\n    \"acronym\",\n    \"audio\",\n    \"b\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"button\",\n    \"canvas\",\n    \"cite\",\n    \"code\",\n    \"data\",\n    \"datalist\",\n    \"del\",\n    \"dfn\",\n    \"em\",\n    \"embed\",\n    \"i\",\n    \"iframe\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"map\",\n    \"mark\",\n    \"meter\",\n    \"noscript\",\n    \"object\",\n    \"output\",\n    \"picture\",\n    \"progress\",\n    \"q\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"select\",\n    \"slot\",\n    \"small\",\n    \"span\",\n    \"strong\",\n    \"sub\",\n    \"sup\",\n    \"svg\",\n    \"template\",\n    \"textarea\",\n    \"time\",\n    \"u\",\n    \"tt\",\n    \"var\",\n    \"video\",\n    \"wbr\"\n]);\nvar ae = {\n    ignoreTags: [],\n    ignoreTagsWithTheirContents: [],\n    onlyStripTags: [],\n    stripTogetherWithTheirContents: [\n        \"script\",\n        \"style\",\n        \"xml\"\n    ],\n    skipHtmlDecoding: false,\n    trimOnlySpaces: false,\n    stripRecognisedHTMLOnly: false,\n    dumpLinkHrefsNearby: {\n        enabled: false,\n        putOnNewLine: false,\n        wrapHeads: \"\",\n        wrapTails: \"\"\n    },\n    ignoreIndentations: false,\n    cb: null,\n    reportProgressFunc: null,\n    reportProgressFuncFrom: 0,\n    reportProgressFuncTo: 100\n};\nfunction fe(t, m) {\n    let y$1 = Date.now(), c = [], f = [], b = [], $ = [], n = {};\n    function re() {\n        n = {\n            attributes: []\n        };\n    }\n    re();\n    let V = null, w = null, N = null, J = false, o = {}, d = {\n        tagName: \"\",\n        hrefValue: \"\",\n        openingTagEnds: void 0\n    }, E$1 = \"\", C = false, B = null, F = true;\n    function v$1(e, s, a) {\n        if (Array.isArray(s.stripTogetherWithTheirContents) && (s.stripTogetherWithTheirContents.includes(n.name) || s.stripTogetherWithTheirContents.includes(\"*\"))) if (n.slashPresent && Array.isArray(c) && c.some((i)=>i.name === n.name)) {\n            for(let i = c.length; i--;)if (c[i].name === n.name) {\n                $ = $.filter(([u, p])=>(u < c[i].lastOpeningBracketAt || u >= e + 1) && (p <= c[i].lastOpeningBracketAt || p > e + 1));\n                let g = e + 1;\n                n.lastClosingBracketAt && (g = n.lastClosingBracketAt + 1), $.push([\n                    c[i].lastOpeningBracketAt,\n                    g\n                ]), Q.has(t[e]) && s.cb ? s.cb({\n                    tag: n,\n                    deleteFrom: c[i].lastOpeningBracketAt,\n                    deleteTo: e + 1,\n                    insert: null,\n                    rangesArr: a,\n                    proposedReturn: [\n                        c[i].lastOpeningBracketAt,\n                        e,\n                        null\n                    ]\n                }) : s.cb && s.cb({\n                    tag: n,\n                    deleteFrom: c[i].lastOpeningBracketAt,\n                    deleteTo: e,\n                    insert: \"\",\n                    rangesArr: a,\n                    proposedReturn: [\n                        c[i].lastOpeningBracketAt,\n                        e,\n                        \"\"\n                    ]\n                }), c.splice(i, 1);\n                break;\n            }\n        } else n.slashPresent || c.push(n);\n        else Array.isArray(s.ignoreTagsWithTheirContents) && M(e, s, n) && (F = false);\n    }\n    function L(e, s, a, i, g, u) {\n        if (Array.isArray(r.current()) && typeof a == \"number\" && r.current()[0][0] === 0 && r.current()[0][1] >= a) return \"\";\n        if (t.length === i && u && !l?.dumpLinkHrefsNearby?.enabled) return null;\n        let p = \"\";\n        if (Number.isInteger(a) && a < g && (p += e.slice(a, g)), Number.isInteger(i) && i > u + 1) {\n            let D = e.slice(u + 1, i);\n            i && !E(t, i - 1) && (D = D.trimEnd()), D.includes(`\n`) && S(i, e) ? p += \" \" : p += D;\n        }\n        let W = !Q.has(e[s]), Z = e[i - 1] !== \">\" || !e[a].trim(), X = ![\n            '\"',\n            \"(\"\n        ].includes(e[g - 1]), ge = ![\n            \";\",\n            \".\",\n            \":\",\n            \"!\"\n        ].includes(e[s]);\n        if ((W || Z && X && ge) && (Z || X) && e[s] !== \"!\" && (!te.has(n.name) || typeof a == \"number\" && a < g || typeof i == \"number\" && i > u + 1)) {\n            let D = p.match(/\\n/g);\n            return Array.isArray(D) && D.length ? D.length === 1 ? `\n` : D.length === 2 ? `\n\n` : `\n\n\n` : \" \";\n        }\n        return \"\";\n    }\n    function U(e, s) {\n        if (e.dumpLinkHrefsNearby?.enabled && d.tagName && d.tagName === n.name && n.lastOpeningBracketAt && (d.openingTagEnds && n.lastOpeningBracketAt > d.openingTagEnds || !d.openingTagEnds) && (C = true), C) {\n            let a = e.dumpLinkHrefsNearby?.putOnNewLine ? `\n\n` : \"\";\n            E$1 = `${a}${d.hrefValue}`, (typeof s != \"number\" || E(t, s - 1)) && (E$1 += a);\n        }\n    }\n    function S(e, s) {\n        return s ? s[e] === \"<\" && s[e + 1] !== \"%\" : t[e] === \"<\" && t[e + 1] !== \"%\";\n    }\n    function A(e) {\n        return t[e] === \">\" && t[e - 1] !== \"%\";\n    }\n    function M(e, s, a) {\n        if (s.ignoreTagsWithTheirContents.includes(\"*\")) return true;\n        let i = t.indexOf(`<${a.name}`, e), g = t.indexOf(`</${a.name}`, e);\n        return !a.slashPresent && g === -1 || a.slashPresent && !f.some((u)=>u.name === a.name) || g > -1 && i > -1 && i < g ? false : s.ignoreTagsWithTheirContents.includes(a.name);\n    }\n    if (typeof t != \"string\") throw new TypeError(`string-strip-html/stripHtml(): [THROW_ID_01] Input must be string! Currently it's: ${(typeof t).toLowerCase()}, equal to:\n${JSON.stringify(t, null, 4)}`);\n    if (m) if (u(m)) {\n        if (m.reportProgressFunc && typeof m.reportProgressFunc != \"function\") throw new Error(`string-strip-html/stripHtml(): [THROW_ID_03] The Optional Options Object's key reportProgressFunc, callback function, should be a function but it was given as type ${typeof m.reportProgressFunc}, equal to ${JSON.stringify(m.reportProgressFunc, null, 4)}`);\n        if (typeof m.dumpLinkHrefsNearby == \"boolean\" && m.dumpLinkHrefsNearby != null) throw new Error(`string-strip-html/stripHtml(): [THROW_ID_04] The Optional Options Object's key should be a plain object but it was given as type ${typeof m.dumpLinkHrefsNearby}, equal to ${JSON.stringify(m.dumpLinkHrefsNearby, null, 4)}`);\n    } else throw new TypeError(`string-strip-html/stripHtml(): [THROW_ID_02] Optional Options Object must be a plain object! Currently it's: ${(typeof m).toLowerCase()}, equal to:\n${JSON.stringify(m, null, 4)}`);\n    function _$1() {\n        C && (d = {\n            tagName: \"\",\n            hrefValue: \"\",\n            openingTagEnds: void 0\n        }, C = false);\n    }\n    let l = {\n        ...ae,\n        ...m,\n        dumpLinkHrefsNearby: Object.assign({}, ae.dumpLinkHrefsNearby, m?.dumpLinkHrefsNearby)\n    };\n    if (v(l, \"returnRangesOnly\")) throw new TypeError(\"string-strip-html/stripHtml(): [THROW_ID_05] The Optional Options Object's key returnRangesOnly has been removed from the API since v.5 release.\");\n    if (l.reportProgressFunc) {\n        if (typeof l.reportProgressFuncFrom != \"number\") throw new Error(`string-strip-html/stripHtml(): [THROW_ID_06] The Optional Options Object's key reportProgressFuncFrom, callback function's \"from\" range, should be a number but it was given as type ${typeof l.reportProgressFuncFrom}, equal to ${JSON.stringify(l.reportProgressFuncFrom, null, 4)}`);\n        if (typeof l.reportProgressFuncTo != \"number\") throw new Error(`string-strip-html/stripHtml(): [THROW_ID_07] The Optional Options Object's key reportProgressFuncTo, callback function's \"to\" range, should be a number but it was given as type ${typeof l.reportProgressFuncTo}, equal to ${JSON.stringify(l.reportProgressFuncTo, null, 4)}`);\n    }\n    l.ignoreTags = G(l.ignoreTags, \"resolvedOpts.ignoreTags\"), l.onlyStripTags = G(l.onlyStripTags, \"resolvedOpts.onlyStripTags\");\n    let z = !!l.onlyStripTags.length;\n    l.onlyStripTags.length && l.ignoreTags.length && (l.onlyStripTags = without(l.onlyStripTags, ...l.ignoreTags)), l.stripTogetherWithTheirContents ? typeof l.stripTogetherWithTheirContents == \"string\" && l.stripTogetherWithTheirContents.length && (l.stripTogetherWithTheirContents = [\n        l.stripTogetherWithTheirContents\n    ]) : l.stripTogetherWithTheirContents = [];\n    let I = {};\n    if (l.stripTogetherWithTheirContents && Array.isArray(l.stripTogetherWithTheirContents) && l.stripTogetherWithTheirContents.length && !l.stripTogetherWithTheirContents.every((e, s)=>typeof e != \"string\" ? (I.el = e, I.i = s, false) : true)) throw new TypeError(`string-strip-html/stripHtml(): [THROW_ID_08] Optional Options Object's key stripTogetherWithTheirContents was set to contain not just string elements! For example, element at index ${I.i} has a value ${I.el} which is not string but ${(typeof I.el).toLowerCase()}.`);\n    l.cb || (l.cb = ({ rangesArr: e, proposedReturn: s })=>{\n        s && e.push(...s);\n    });\n    let r = new y({\n        limitToBeAddedWhitespace: true,\n        limitLinebreaksCount: 2\n    });\n    if (!l.skipHtmlDecoding) for(; t !== libExports.decode(t, {\n        scope: \"strict\"\n    });)t = libExports.decode(t, {\n        scope: \"strict\"\n    });\n    let R = false, k = false, H = 0, K = 0, h = t.length, ue = Math.floor(h / 2);\n    for(let e = 0; e < h; e++){\n        if (l.reportProgressFunc && (h > 1e3 && h < 2e3 ? e === ue && l.reportProgressFunc(Math.floor((l.reportProgressFuncTo - l.reportProgressFuncFrom) / 2)) : h >= 2e3 && (H = l.reportProgressFuncFrom + Math.floor(e / h * (l.reportProgressFuncTo - l.reportProgressFuncFrom)), H !== K && (K = H, l.reportProgressFunc(H)))), Object.keys(n).length > 1 && n.lastClosingBracketAt && n.lastClosingBracketAt < e && t[e] !== \" \" && B === null && (B = e), !R && t[e] === \"%\" && t[e - 1] === \"{\" && t.includes(\"%}\", e + 1)) {\n            N = null;\n            let s = t.indexOf(\"%}\", e) - 1;\n            if (s > e) {\n                e = s;\n                continue;\n            }\n        }\n        if (!R && A(e) && (!n || Object.keys(n).length < 2) && e > 1) {\n            for(let s = e; s--;)if (t[s - 1] === void 0 || A(s)) {\n                let a = t[s - 1] === void 0 ? s : s + 1, i = t.slice(a, e + 1) || \"\";\n                if ((i.includes(\"/>\") || i.includes(\"/ >\") || i.includes('=\"') || i.includes(\"='\")) && t !== `<${trim(i.trim(), \"/>\")}>` && [\n                    ...P\n                ].some((g)=>trim(i.trim().split(/\\s+/).filter((u)=>u.trim()).filter((u, p)=>p === 0), \"/>\").toLowerCase() === g) && fe(`<${i.trim()}>`, l).result === \"\") {\n                    (!b.length || b[b.length - 1][0] !== n.lastOpeningBracketAt) && b.push([\n                        a,\n                        e + 1\n                    ]), (!$.length || $[$.length - 1][0] !== n.lastOpeningBracketAt) && $.push([\n                        a,\n                        e + 1\n                    ]);\n                    let g = L(t, e, a, e + 1, a, e + 1), u = e + 1;\n                    if (t[u] && !t[u].trim()) {\n                        for(let p = u; p < h; p++)if (t[p].trim()) {\n                            u = p;\n                            break;\n                        }\n                    }\n                    l.cb({\n                        tag: n,\n                        deleteFrom: a,\n                        deleteTo: u,\n                        insert: g,\n                        rangesArr: r,\n                        proposedReturn: [\n                            a,\n                            u,\n                            g\n                        ]\n                    });\n                }\n                break;\n            }\n        }\n        if (!k && t[e] === \"/\" && !n.quotes?.value && Number.isInteger(n.lastOpeningBracketAt) && !Number.isInteger(n.lastClosingBracketAt) && (n.slashPresent = e), t[e] === '\"' || t[e] === \"'\") if (!k && n.nameStarts && n?.quotes?.value === t[e]) if (o.valueStarts === void 0) o = {}, delete n.quotes;\n        else {\n            o.valueEnds = e, o.value = t.slice(o.valueStarts, e), n.attributes.push(o), o = {}, delete n.quotes;\n            let s;\n            l.dumpLinkHrefsNearby?.enabled && !c.length && n.attributes.some((a)=>{\n                if (typeof a.name == \"string\" && a.name.toLowerCase() === \"href\") return s = `${l.dumpLinkHrefsNearby?.wrapHeads || \"\"}${a.value}${l.dumpLinkHrefsNearby?.wrapTails || \"\"}`, true;\n            }) && (d = {\n                tagName: n.name,\n                hrefValue: s,\n                openingTagEnds: void 0\n            });\n        }\n        else !k && !n.quotes && n.nameStarts && (n.quotes = {}, n.quotes.value = t[e], n.quotes.start = e, n.quotes.next = t.indexOf(t[e], e + 1), o.nameStarts && o.nameEnds && o.nameEnds < e && o.nameStarts < e && !o.valueStarts && (o.name = t.slice(o.nameStarts, o.nameEnds)));\n        if (n.nameStarts !== void 0 && n.nameEnds === void 0 && (!t[e].trim() || !ee(t[e]))) {\n            if (n.nameEnds = e, n.name = t.slice(n.nameStarts, n.nameEnds + (!A(e) && t[e] !== \"/\" && t[e + 1] === void 0 ? 1 : 0)), t[n.nameStarts - 1] !== \"!\" && !n.name.replace(/-/g, \"\").length || /^\\d+$/.test(n.name[0])) {\n                n = {};\n                continue;\n            }\n            if (typeof n.name == \"string\" && n.name.toLowerCase() === \"doctype\" && (k = true), S(e)) {\n                U(l);\n                let s = L(t, e, n.leftOuterWhitespace, e, n.lastOpeningBracketAt, e);\n                (l.stripTogetherWithTheirContents.includes(n.name) || l.stripTogetherWithTheirContents.includes(\"*\")) && ($ = $.filter(([a, i])=>!(a === n.leftOuterWhitespace && i === e))), l.cb({\n                    tag: n,\n                    deleteFrom: n.leftOuterWhitespace,\n                    deleteTo: e,\n                    insert: `${s}${E$1}${s}`,\n                    rangesArr: r,\n                    proposedReturn: [\n                        n.leftOuterWhitespace,\n                        e,\n                        `${s}${E$1}${s}`\n                    ]\n                }), _$1(), v$1(e, l, r);\n            }\n        }\n        if (n.quotes?.start && n.quotes.start < e && !n.quotes.end && o.nameEnds && o.equalsAt && !o.valueStarts && (o.valueStarts = e), !n.quotes && o.nameEnds && t[e] === \"=\" && !o.valueStarts && !o.equalsAt && (o.equalsAt = e), !n.quotes && o.nameStarts && o.nameEnds && !o.valueStarts && t[e].trim() && t[e] !== \"=\" && (n.attributes.push(o), o = {}), !n.quotes && o.nameStarts && !o.nameEnds && (k && `'\"`.includes(t[o.nameStarts]) ? o.nameStarts < e && t[e] === t[o.nameStarts] && (o.nameEnds = e + 1, o.name = t.slice(o.nameStarts, o.nameEnds)) : t[e].trim() ? t[e] === \"=\" ? o.equalsAt || (o.nameEnds = e, o.equalsAt = e, o.name = t.slice(o.nameStarts, o.nameEnds)) : t[e] === \"/\" || A(e) ? (o.nameEnds = e, o.name = t.slice(o.nameStarts, o.nameEnds), n.attributes.push(o), o = {}) : S(e) && (o.nameEnds = e, o.name = t.slice(o.nameStarts, o.nameEnds), n.attributes.push(o), o = {}) : (o.nameEnds = e, o.name = t.slice(o.nameStarts, o.nameEnds))), !n.quotes && n.nameEnds < e && !t[e - 1].trim() && t[e].trim() && !\"<>/!\".includes(t[e]) && !o.nameStarts && !n.lastClosingBracketAt && (o.nameStarts = e), n.lastOpeningBracketAt !== null && n.lastOpeningBracketAt < e && t[e] === \"/\" && n.onlyPlausible && (n.onlyPlausible = false), n.lastOpeningBracketAt !== null && n.lastOpeningBracketAt < e && t[e] !== \"/\" && (n.onlyPlausible === void 0 && ((!t[e].trim() || S(e)) && !n.slashPresent ? n.onlyPlausible = true : n.onlyPlausible = false), t[e].trim() && n.nameStarts === void 0 && !S(e) && t[e] !== \"/\" && !A(e) && t[e] !== \"!\" && (n.nameStarts = e, n.nameContainsLetters = false)), n.nameStarts && !n.quotes && typeof t[e] == \"string\" && t[e].toLowerCase() !== t[e].toUpperCase() && (n.nameContainsLetters = true), A(e) && (Y(n, t, e) || n.quotes.value && typeof n.lastOpeningBracketAt == \"number\" && ne(n.quotes.value, t.slice(n.lastOpeningBracketAt, e)) % 2 === 1 && !t.slice(n.lastOpeningBracketAt + 1, e).includes(\"<\") && !t.slice(n.lastOpeningBracketAt + 1, e).includes(\">\")) && n.lastOpeningBracketAt !== void 0 && (n.lastClosingBracketAt = e, B = null, Object.keys(o).length && (n.attributes.push(o), o = {}), l.dumpLinkHrefsNearby?.enabled && d.tagName && !d.openingTagEnds && (d.openingTagEnds = e)), (!k || t[e] === \">\") && n.lastOpeningBracketAt !== void 0) {\n            if (n.lastClosingBracketAt === void 0) {\n                if (n.lastOpeningBracketAt < e && !S(e) && (t[e + 1] === void 0 || S(e + 1) && !n?.quotes?.value) && n.nameContainsLetters && typeof n.nameStarts == \"number\") {\n                    if (n.name = t.slice(n.nameStarts, n.nameEnds || e + 1).toLowerCase(), (!b.length || b[b.length - 1][0] !== n.lastOpeningBracketAt) && b.push([\n                        n.lastOpeningBracketAt,\n                        e + 1\n                    ]), l.ignoreTags.includes(n.name) || M(e, l, n) || !P.has(n.name) && (n.onlyPlausible || l.stripRecognisedHTMLOnly)) {\n                        n = {}, o = {};\n                        continue;\n                    }\n                    if ((P.has(n.name) || x.has(n.name)) && (n.onlyPlausible === false || n.onlyPlausible === true && n.attributes.length) || t[e + 1] === void 0) {\n                        U(l);\n                        let s = L(t, e, n.leftOuterWhitespace, e + 1, n.lastOpeningBracketAt, n.lastClosingBracketAt);\n                        R && n.name === \"script\" && n.slashPresent && (R = false);\n                        let a;\n                        s === null || E$1 === null ? a = null : a = `${s}${E$1}${s}`, l.cb({\n                            tag: n,\n                            deleteFrom: n.leftOuterWhitespace,\n                            deleteTo: e + 1,\n                            insert: a,\n                            rangesArr: r,\n                            proposedReturn: [\n                                n.leftOuterWhitespace,\n                                e + 1,\n                                a\n                            ]\n                        }), _$1(), v$1(e, l, r);\n                    }\n                    if (!$.length || $[$.length - 1][0] !== n.lastOpeningBracketAt && $[$.length - 1][1] !== e + 1) if (l.stripTogetherWithTheirContents.includes(n.name) || l.stripTogetherWithTheirContents.includes(\"*\")) {\n                        let s;\n                        for(let a = c.length; a--;)c[a].name === n.name && (s = c[a]);\n                        s ? ($ = $.filter(([a])=>a !== s.lastOpeningBracketAt), $.push([\n                            s.lastOpeningBracketAt,\n                            e + 1\n                        ])) : $.push([\n                            n.lastOpeningBracketAt,\n                            e + 1\n                        ]);\n                    } else $.push([\n                        n.lastOpeningBracketAt,\n                        e + 1\n                    ]);\n                }\n            } else if (e > n.lastClosingBracketAt && t[e].trim() || t[e + 1] === void 0 || l.ignoreIndentations && `\\r\n`.includes(t[e])) {\n                let s = n.lastClosingBracketAt === e ? e + 1 : e;\n                l.trimOnlySpaces && s === h - 1 && B !== null && B < e && (s = B), (!b.length || b[b.length - 1][0] !== n.lastOpeningBracketAt) && b.push([\n                    n.lastOpeningBracketAt,\n                    n.lastClosingBracketAt + 1\n                ]);\n                let a = l.ignoreTags.includes(n.name), i = M(e, l, n);\n                if (!F || l.stripRecognisedHTMLOnly && typeof n.name == \"string\" && !P.has(n.name.toLowerCase()) && !x.has(n.name.toLowerCase()) || !z && (a || i) || z && !l.onlyStripTags.includes(n.name) || l.ignoreTagsWithTheirContents.includes(n.name)) {\n                    if (i) if (n.slashPresent) {\n                        for(let g = f.length; g--;)if (f[g].name === n.name) {\n                            f.splice(g, 1);\n                            break;\n                        }\n                        f.length || (F = true);\n                    } else F && (F = false), f.push(n);\n                    l.cb({\n                        tag: n,\n                        deleteFrom: null,\n                        deleteTo: null,\n                        insert: null,\n                        rangesArr: r,\n                        proposedReturn: null\n                    }), n = {}, o = {};\n                } else if (!n.onlyPlausible || n.attributes.length === 0 && n.name && (P.has(n.name.toLowerCase()) || x.has(n.name.toLowerCase())) || n.attributes?.some((g)=>g.equalsAt)) {\n                    (!$.length || $[$.length - 1][0] !== n.lastOpeningBracketAt) && $.push([\n                        n.lastOpeningBracketAt,\n                        n.lastClosingBracketAt + 1\n                    ]);\n                    let g = L(t, e, n.leftOuterWhitespace, s, n.lastOpeningBracketAt, n.lastClosingBracketAt);\n                    E$1 = \"\", C = false, U(l, s);\n                    let u;\n                    typeof E$1 == \"string\" && E$1.length ? (u = `${g}${E$1}${g === `\n\n` ? `\n` : g}`, s === n.lastClosingBracketAt + 1 && (!t[s] || !q.has(t[s])) && (u += \" \"), n.leftOuterWhitespace === n.lastOpeningBracketAt && r.last() && r.last()[1] < n.lastOpeningBracketAt && (!l?.dumpLinkHrefsNearby?.putOnNewLine || !q.has(t[s])) && (u = \" \" + u)) : u = g, u !== null && (n.leftOuterWhitespace === 0 || !E(t, s - 1)) && (!l.dumpLinkHrefsNearby?.enabled || n.name !== \"a\") && (u = void 0);\n                    let p = 0;\n                    if (C && q.has(t[s])) {\n                        l.dumpLinkHrefsNearby?.putOnNewLine && (u = `${t[s]}${u || \"\"}`);\n                        let W = E(t, s);\n                        W && u?.endsWith(`\n`) ? p += W - e : (!W || W > e) && p++;\n                    }\n                    l.cb({\n                        tag: n,\n                        deleteFrom: n.leftOuterWhitespace,\n                        deleteTo: s + p,\n                        insert: u,\n                        rangesArr: r,\n                        proposedReturn: [\n                            n.leftOuterWhitespace,\n                            s + p,\n                            u\n                        ]\n                    }), _$1(), v$1(e, l, r);\n                } else n = {};\n                A(e) || (n = {});\n            }\n            k && (k = false);\n        }\n        if ((!R || t[e] === \"<\" && E(t, E(t, e)) && t[E(t, e)] === \"/\" && t.startsWith(\"script\", E(t, E(t, e)))) && S(e) && !S(e - 1) && !`'\"`.includes(t[e + 1]) && (!`'\"`.includes(t[e + 2]) || /\\w/.test(t[e + 1])) && !(t[e + 1] === \"c\" && t[e + 2] === \":\") && !(t[e + 1] === \"f\" && t[e + 2] === \"m\" && t[e + 3] === \"t\" && t[e + 4] === \":\") && !(t[e + 1] === \"s\" && t[e + 2] === \"q\" && t[e + 3] === \"l\" && t[e + 4] === \":\") && !(t[e + 1] === \"x\" && t[e + 2] === \":\") && !(t[e + 1] === \"f\" && t[e + 2] === \"n\" && t[e + 3] === \":\") && Y(n, t, e)) {\n            if (A(E(t, e))) continue;\n            if (n.nameEnds && n.nameEnds < e && !n.lastClosingBracketAt && (n.onlyPlausible === true && n.attributes?.length || n.onlyPlausible === false)) {\n                let s = L(t, e, n.leftOuterWhitespace, e, n.lastOpeningBracketAt, e);\n                l.cb({\n                    tag: n,\n                    deleteFrom: n.leftOuterWhitespace,\n                    deleteTo: e,\n                    insert: s,\n                    rangesArr: r,\n                    proposedReturn: [\n                        n.leftOuterWhitespace,\n                        e,\n                        s\n                    ]\n                }), v$1(e, l, r), n = {}, o = {};\n            }\n            if (n.lastOpeningBracketAt !== void 0 && n.onlyPlausible && n.name && !n.quotes && (n.lastOpeningBracketAt = void 0, n.name = void 0, n.onlyPlausible = false), (n.lastOpeningBracketAt === void 0 || !n.onlyPlausible) && !n.quotes && (n.lastOpeningBracketAt = e, n.slashPresent = false, n.attributes = [], V === null ? n.leftOuterWhitespace = e : l.trimOnlySpaces && V === 0 ? n.leftOuterWhitespace = w || e : n.leftOuterWhitespace = V, `${t[e + 1]}${t[e + 2]}${t[e + 3]}` == \"!--\" || `${t[e + 1]}${t[e + 2]}${t[e + 3]}${t[e + 4]}${t[e + 5]}${t[e + 6]}${t[e + 7]}${t[e + 8]}` == \"![CDATA[\")) {\n                let s = true;\n                t[e + 2] === \"-\" && (s = false);\n                let a;\n                for(let i = e; i < h; i++)if ((!a && s && `${t[i - 2]}${t[i - 1]}${t[i]}` == \"]]>\" || !s && `${t[i - 2]}${t[i - 1]}${t[i]}` == \"-->\") && (a = i), a && (a < i && t[i].trim() || t[i + 1] === void 0)) {\n                    let g = i;\n                    (t[i + 1] === void 0 && !t[i].trim() || t[i] === \">\") && (g += 1), (!b.length || b[b.length - 1][0] !== n.lastOpeningBracketAt) && b.push([\n                        n.lastOpeningBracketAt,\n                        a + 1\n                    ]), (!$.length || $[$.length - 1][0] !== n.lastOpeningBracketAt) && $.push([\n                        n.lastOpeningBracketAt,\n                        a + 1\n                    ]);\n                    let u = L(t, i, n.leftOuterWhitespace, g, n.lastOpeningBracketAt, a);\n                    l.cb({\n                        tag: n,\n                        deleteFrom: n.leftOuterWhitespace,\n                        deleteTo: g,\n                        insert: u,\n                        rangesArr: r,\n                        proposedReturn: [\n                            n.leftOuterWhitespace,\n                            g,\n                            u\n                        ]\n                    }), e = i - 1, t[i] === \">\" && (e = i), n = {}, o = {};\n                    break;\n                }\n            }\n        }\n        !t[e].trim() || t[e].charCodeAt(0) === 847 ? (V === null && (V = e, n.lastOpeningBracketAt !== void 0 && n.lastOpeningBracketAt < e && n.nameStarts && n.nameStarts < n.lastOpeningBracketAt && e === n.lastOpeningBracketAt + 1 && !c.some((s)=>s.name === n.name) && (n.onlyPlausible = true, n.name = void 0, n.nameStarts = void 0)), (t[e] === `\n` || t[e] === \"\\r\") && (N = e, J && (J = false))) : (V !== null && (!n.quotes && o.equalsAt > V - 1 && o.nameEnds && o.equalsAt > o.nameEnds && t[e] !== '\"' && t[e] !== \"'\" && (u(o) && n.attributes.push(o), o = {}, n.equalsSpottedAt = void 0), V = null), J || (J = true, F && !R && typeof N == \"number\" && e && N < e - 1 && (t.slice(N + 1, e).trim() ? N = null : l.ignoreIndentations || r.push([\n            N + 1,\n            e\n        ])))), t[e] === \" \" ? w === null && (w = e) : w !== null && (w = null), n.name === \"script\" && (R = !n.slashPresent);\n    }\n    if (t && !l.ignoreIndentations && (l.trimOnlySpaces && t[0] === \" \" || !l.trimOnlySpaces && !t[0].trim())) for(let e = 0; e < h; e++)if (l.trimOnlySpaces && t[e] !== \" \" || !l.trimOnlySpaces && t[e].trim()) {\n        r.push([\n            0,\n            e\n        ]);\n        break;\n    } else t[e + 1] || r.push([\n        0,\n        e + 1\n    ]);\n    if (t && (l.trimOnlySpaces && t[~-t.length] === \" \" || !l.trimOnlySpaces && !t[~-t.length].trim())) {\n        for(let e = t.length; e--;)if (l.trimOnlySpaces && t[e] !== \" \" || !l.trimOnlySpaces && t[e].trim()) {\n            r.push([\n                e + 1,\n                h\n            ]);\n            break;\n        }\n    }\n    let O = r.current();\n    if (!m?.cb && O) {\n        if (O[0] && !O[0][0]) {\n            O[0][1];\n            r.ranges[0] = [\n                r.ranges[0][0],\n                r.ranges[0][1]\n            ];\n        }\n        if (O[O.length - 1] && O[O.length - 1][1] === t.length) {\n            O[O.length - 1][0];\n            if (r.ranges) {\n                let s = r.ranges[r.ranges.length - 1][0];\n                t[s - 1] && (l.trimOnlySpaces && t[s - 1] === \" \" || !l.trimOnlySpaces && !t[s - 1].trim()) && (s -= 1);\n                let a = r.ranges[r.ranges.length - 1][2];\n                r.ranges[r.ranges.length - 1] = [\n                    s,\n                    r.ranges[r.ranges.length - 1][1]\n                ], a?.trim() && r.ranges[r.ranges.length - 1].push(a.trimEnd());\n            }\n        }\n    }\n    return {\n        log: {\n            timeTakenInMilliseconds: Date.now() - y$1\n        },\n        result: _(t, r.current()),\n        ranges: r.current(),\n        allTagLocations: b,\n        filteredTagLocations: $\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9odG1sL2Rpc3Qvc3RyaW5nLXN0cmlwLWh0bWwuZXNtLUNTLTlXazZXLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsR0FB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QkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxt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eUI7QUFDekIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsd0JBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQix5QkFBeUI7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QzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0Isd0JBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDRCQUE0QjtBQUM1Qix5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pC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QUMzQiwwQkFBMEI7QUFDMUIsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiw0QkFBNEI7QUFDNUIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMxQiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLDBCQUEwQjtBQUMx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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QTtBQUNBO0FBQ0EscUJBQXFCLDZDQUE2QztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscU5BQXFOO0FBQ3JOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEhBQThILE9BQU87QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixJQUFJO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9yZWFkZXJzL2h0bWwvZGlzdC9zdHJpbmctc3RyaXAtaHRtbC5lc20tQ1MtOVdrNlcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMgKHgpIHtcblx0cmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnZGVmYXVsdCcpID8geFsnZGVmYXVsdCddIDogeDtcbn1cblxudmFyIHJmZGNfMTtcbnZhciBoYXNSZXF1aXJlZFJmZGM7XG5cbmZ1bmN0aW9uIHJlcXVpcmVSZmRjICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkUmZkYykgcmV0dXJuIHJmZGNfMTtcblx0aGFzUmVxdWlyZWRSZmRjID0gMTtcblx0cmZkY18xID0gcmZkYztcblx0ZnVuY3Rpb24gY29weUJ1ZmZlcihjdXIpIHtcblx0ICAgIGlmIChjdXIgaW5zdGFuY2VvZiBCdWZmZXIpIHtcblx0ICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oY3VyKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgY3VyLmNvbnN0cnVjdG9yKGN1ci5idWZmZXIuc2xpY2UoKSwgY3VyLmJ5dGVPZmZzZXQsIGN1ci5sZW5ndGgpO1xuXHR9XG5cdGZ1bmN0aW9uIHJmZGMob3B0cykge1xuXHQgICAgb3B0cyA9IG9wdHMgfHwge307XG5cdCAgICBpZiAob3B0cy5jaXJjbGVzKSByZXR1cm4gcmZkY0NpcmNsZXMob3B0cyk7XG5cdCAgICBjb25zdCBjb25zdHJ1Y3RvckhhbmRsZXJzID0gbmV3IE1hcCgpO1xuXHQgICAgY29uc3RydWN0b3JIYW5kbGVycy5zZXQoRGF0ZSwgKG8pPT5uZXcgRGF0ZShvKSk7XG5cdCAgICBjb25zdHJ1Y3RvckhhbmRsZXJzLnNldChNYXAsIChvLCBmbik9Pm5ldyBNYXAoY2xvbmVBcnJheShBcnJheS5mcm9tKG8pLCBmbikpKTtcblx0ICAgIGNvbnN0cnVjdG9ySGFuZGxlcnMuc2V0KFNldCwgKG8sIGZuKT0+bmV3IFNldChjbG9uZUFycmF5KEFycmF5LmZyb20obyksIGZuKSkpO1xuXHQgICAgaWYgKG9wdHMuY29uc3RydWN0b3JIYW5kbGVycykge1xuXHQgICAgICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiBvcHRzLmNvbnN0cnVjdG9ySGFuZGxlcnMpe1xuXHQgICAgICAgICAgICBjb25zdHJ1Y3RvckhhbmRsZXJzLnNldChoYW5kbGVyWzBdLCBoYW5kbGVyWzFdKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBsZXQgaGFuZGxlciA9IG51bGw7XG5cdCAgICByZXR1cm4gb3B0cy5wcm90byA/IGNsb25lUHJvdG8gOiBjbG9uZTtcblx0ICAgIGZ1bmN0aW9uIGNsb25lQXJyYXkoYSwgZm4pIHtcblx0ICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG5cdCAgICAgICAgY29uc3QgYTIgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuXHQgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcblx0ICAgICAgICAgICAgY29uc3QgayA9IGtleXNbaV07XG5cdCAgICAgICAgICAgIGNvbnN0IGN1ciA9IGFba107XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyICE9PSAnb2JqZWN0JyB8fCBjdXIgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIGEyW2tdID0gY3VyO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ci5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0ICYmIChoYW5kbGVyID0gY29uc3RydWN0b3JIYW5kbGVycy5nZXQoY3VyLmNvbnN0cnVjdG9yKSkpIHtcblx0ICAgICAgICAgICAgICAgIGEyW2tdID0gaGFuZGxlcihjdXIsIGZuKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoY3VyKSkge1xuXHQgICAgICAgICAgICAgICAgYTJba10gPSBjb3B5QnVmZmVyKGN1cik7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBhMltrXSA9IGZuKGN1cik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGEyO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY2xvbmUobykge1xuXHQgICAgICAgIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcgfHwgbyA9PT0gbnVsbCkgcmV0dXJuIG87XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobykpIHJldHVybiBjbG9uZUFycmF5KG8sIGNsb25lKTtcblx0ICAgICAgICBpZiAoby5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0ICYmIChoYW5kbGVyID0gY29uc3RydWN0b3JIYW5kbGVycy5nZXQoby5jb25zdHJ1Y3RvcikpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKG8sIGNsb25lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgbzIgPSB7fTtcblx0ICAgICAgICBmb3IoY29uc3QgayBpbiBvKXtcblx0ICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspID09PSBmYWxzZSkgY29udGludWU7XG5cdCAgICAgICAgICAgIGNvbnN0IGN1ciA9IG9ba107XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyICE9PSAnb2JqZWN0JyB8fCBjdXIgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIG8yW2tdID0gY3VyO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ci5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0ICYmIChoYW5kbGVyID0gY29uc3RydWN0b3JIYW5kbGVycy5nZXQoY3VyLmNvbnN0cnVjdG9yKSkpIHtcblx0ICAgICAgICAgICAgICAgIG8yW2tdID0gaGFuZGxlcihjdXIsIGNsb25lKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoY3VyKSkge1xuXHQgICAgICAgICAgICAgICAgbzJba10gPSBjb3B5QnVmZmVyKGN1cik7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBvMltrXSA9IGNsb25lKGN1cik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG8yO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY2xvbmVQcm90byhvKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBvICE9PSAnb2JqZWN0JyB8fCBvID09PSBudWxsKSByZXR1cm4gbztcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvKSkgcmV0dXJuIGNsb25lQXJyYXkobywgY2xvbmVQcm90byk7XG5cdCAgICAgICAgaWYgKG8uY29uc3RydWN0b3IgIT09IE9iamVjdCAmJiAoaGFuZGxlciA9IGNvbnN0cnVjdG9ySGFuZGxlcnMuZ2V0KG8uY29uc3RydWN0b3IpKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gaGFuZGxlcihvLCBjbG9uZVByb3RvKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY29uc3QgbzIgPSB7fTtcblx0ICAgICAgICBmb3IoY29uc3QgayBpbiBvKXtcblx0ICAgICAgICAgICAgY29uc3QgY3VyID0gb1trXTtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXIgIT09ICdvYmplY3QnIHx8IGN1ciA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgbzJba10gPSBjdXI7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyLmNvbnN0cnVjdG9yICE9PSBPYmplY3QgJiYgKGhhbmRsZXIgPSBjb25zdHJ1Y3RvckhhbmRsZXJzLmdldChjdXIuY29uc3RydWN0b3IpKSkge1xuXHQgICAgICAgICAgICAgICAgbzJba10gPSBoYW5kbGVyKGN1ciwgY2xvbmVQcm90byk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGN1cikpIHtcblx0ICAgICAgICAgICAgICAgIG8yW2tdID0gY29weUJ1ZmZlcihjdXIpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgbzJba10gPSBjbG9uZVByb3RvKGN1cik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG8yO1xuXHQgICAgfVxuXHR9XG5cdGZ1bmN0aW9uIHJmZGNDaXJjbGVzKG9wdHMpIHtcblx0ICAgIGNvbnN0IHJlZnMgPSBbXTtcblx0ICAgIGNvbnN0IHJlZnNOZXcgPSBbXTtcblx0ICAgIGNvbnN0IGNvbnN0cnVjdG9ySGFuZGxlcnMgPSBuZXcgTWFwKCk7XG5cdCAgICBjb25zdHJ1Y3RvckhhbmRsZXJzLnNldChEYXRlLCAobyk9Pm5ldyBEYXRlKG8pKTtcblx0ICAgIGNvbnN0cnVjdG9ySGFuZGxlcnMuc2V0KE1hcCwgKG8sIGZuKT0+bmV3IE1hcChjbG9uZUFycmF5KEFycmF5LmZyb20obyksIGZuKSkpO1xuXHQgICAgY29uc3RydWN0b3JIYW5kbGVycy5zZXQoU2V0LCAobywgZm4pPT5uZXcgU2V0KGNsb25lQXJyYXkoQXJyYXkuZnJvbShvKSwgZm4pKSk7XG5cdCAgICBpZiAob3B0cy5jb25zdHJ1Y3RvckhhbmRsZXJzKSB7XG5cdCAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIG9wdHMuY29uc3RydWN0b3JIYW5kbGVycyl7XG5cdCAgICAgICAgICAgIGNvbnN0cnVjdG9ySGFuZGxlcnMuc2V0KGhhbmRsZXJbMF0sIGhhbmRsZXJbMV0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGxldCBoYW5kbGVyID0gbnVsbDtcblx0ICAgIHJldHVybiBvcHRzLnByb3RvID8gY2xvbmVQcm90byA6IGNsb25lO1xuXHQgICAgZnVuY3Rpb24gY2xvbmVBcnJheShhLCBmbikge1xuXHQgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhKTtcblx0ICAgICAgICBjb25zdCBhMiA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG5cdCAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspe1xuXHQgICAgICAgICAgICBjb25zdCBrID0ga2V5c1tpXTtcblx0ICAgICAgICAgICAgY29uc3QgY3VyID0gYVtrXTtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXIgIT09ICdvYmplY3QnIHx8IGN1ciA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgYTJba10gPSBjdXI7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyLmNvbnN0cnVjdG9yICE9PSBPYmplY3QgJiYgKGhhbmRsZXIgPSBjb25zdHJ1Y3RvckhhbmRsZXJzLmdldChjdXIuY29uc3RydWN0b3IpKSkge1xuXHQgICAgICAgICAgICAgICAgYTJba10gPSBoYW5kbGVyKGN1ciwgZm4pO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhjdXIpKSB7XG5cdCAgICAgICAgICAgICAgICBhMltrXSA9IGNvcHlCdWZmZXIoY3VyKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcmVmcy5pbmRleE9mKGN1cik7XG5cdCAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYTJba10gPSByZWZzTmV3W2luZGV4XTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYTJba10gPSBmbihjdXIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBhMjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNsb25lKG8pIHtcblx0ICAgICAgICBpZiAodHlwZW9mIG8gIT09ICdvYmplY3QnIHx8IG8gPT09IG51bGwpIHJldHVybiBvO1xuXHQgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG8pKSByZXR1cm4gY2xvbmVBcnJheShvLCBjbG9uZSk7XG5cdCAgICAgICAgaWYgKG8uY29uc3RydWN0b3IgIT09IE9iamVjdCAmJiAoaGFuZGxlciA9IGNvbnN0cnVjdG9ySGFuZGxlcnMuZ2V0KG8uY29uc3RydWN0b3IpKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gaGFuZGxlcihvLCBjbG9uZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IG8yID0ge307XG5cdCAgICAgICAgcmVmcy5wdXNoKG8pO1xuXHQgICAgICAgIHJlZnNOZXcucHVzaChvMik7XG5cdCAgICAgICAgZm9yKGNvbnN0IGsgaW4gbyl7XG5cdCAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSA9PT0gZmFsc2UpIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICBjb25zdCBjdXIgPSBvW2tdO1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGN1ciAhPT0gJ29iamVjdCcgfHwgY3VyID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBvMltrXSA9IGN1cjtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChjdXIuY29uc3RydWN0b3IgIT09IE9iamVjdCAmJiAoaGFuZGxlciA9IGNvbnN0cnVjdG9ySGFuZGxlcnMuZ2V0KGN1ci5jb25zdHJ1Y3RvcikpKSB7XG5cdCAgICAgICAgICAgICAgICBvMltrXSA9IGhhbmRsZXIoY3VyLCBjbG9uZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGN1cikpIHtcblx0ICAgICAgICAgICAgICAgIG8yW2tdID0gY29weUJ1ZmZlcihjdXIpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgaSA9IHJlZnMuaW5kZXhPZihjdXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbzJba10gPSByZWZzTmV3W2ldO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBvMltrXSA9IGNsb25lKGN1cik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVmcy5wb3AoKTtcblx0ICAgICAgICByZWZzTmV3LnBvcCgpO1xuXHQgICAgICAgIHJldHVybiBvMjtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGNsb25lUHJvdG8obykge1xuXHQgICAgICAgIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcgfHwgbyA9PT0gbnVsbCkgcmV0dXJuIG87XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobykpIHJldHVybiBjbG9uZUFycmF5KG8sIGNsb25lUHJvdG8pO1xuXHQgICAgICAgIGlmIChvLmNvbnN0cnVjdG9yICE9PSBPYmplY3QgJiYgKGhhbmRsZXIgPSBjb25zdHJ1Y3RvckhhbmRsZXJzLmdldChvLmNvbnN0cnVjdG9yKSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIobywgY2xvbmVQcm90byk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbnN0IG8yID0ge307XG5cdCAgICAgICAgcmVmcy5wdXNoKG8pO1xuXHQgICAgICAgIHJlZnNOZXcucHVzaChvMik7XG5cdCAgICAgICAgZm9yKGNvbnN0IGsgaW4gbyl7XG5cdCAgICAgICAgICAgIGNvbnN0IGN1ciA9IG9ba107XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3VyICE9PSAnb2JqZWN0JyB8fCBjdXIgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIG8yW2tdID0gY3VyO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ci5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0ICYmIChoYW5kbGVyID0gY29uc3RydWN0b3JIYW5kbGVycy5nZXQoY3VyLmNvbnN0cnVjdG9yKSkpIHtcblx0ICAgICAgICAgICAgICAgIG8yW2tdID0gaGFuZGxlcihjdXIsIGNsb25lUHJvdG8pO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhjdXIpKSB7XG5cdCAgICAgICAgICAgICAgICBvMltrXSA9IGNvcHlCdWZmZXIoY3VyKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IGkgPSByZWZzLmluZGV4T2YoY3VyKTtcblx0ICAgICAgICAgICAgICAgIGlmIChpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIG8yW2tdID0gcmVmc05ld1tpXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbzJba10gPSBjbG9uZVByb3RvKGN1cik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmVmcy5wb3AoKTtcblx0ICAgICAgICByZWZzTmV3LnBvcCgpO1xuXHQgICAgICAgIHJldHVybiBvMjtcblx0ICAgIH1cblx0fVxuXHRyZXR1cm4gcmZkY18xO1xufVxuXG52YXIgcmZkY0V4cG9ydHMgPSByZXF1aXJlUmZkYygpO1xudmFyIEkgPSAvKkBfX1BVUkVfXyovZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMocmZkY0V4cG9ydHMpO1xuXG5JKCk7XG5mdW5jdGlvbiB1KHQpIHtcbiAgICBpZiAodCA9PSBudWxsIHx8IHR5cGVvZiB0ICE9IFwib2JqZWN0XCIpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtcbiAgICByZXR1cm4gZSAhPT0gbnVsbCAmJiBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSAhPT0gbnVsbCA/IGZhbHNlIDogIShTeW1ib2wuaXRlcmF0b3IgaW4gdCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdCk7XG59XG5mdW5jdGlvbiByKHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHQgPT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIHEkMSh0KSB7XG4gICAgcmV0dXJuIE51bWJlci5pc1NhZmVJbnRlZ2VyKHQpICYmIHQgPj0gMDtcbn1cbmZ1bmN0aW9uIEckMSh0KSB7XG4gICAgcmV0dXJuIHQgIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIHYodCwgZSkge1xuICAgIHJldHVybiB1KHQpICYmIHIoZSkgJiYgZSBpbiB0O1xufVxuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqLyB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi8gdmFyIFN5bWJvbCQxID0gcm9vdC5TeW1ib2w7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi8gdmFyIG9iamVjdFByb3RvJDQgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovIHZhciBoYXNPd25Qcm9wZXJ0eSQzID0gb2JqZWN0UHJvdG8kNC5oYXNPd25Qcm9wZXJ0eTtcbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi8gdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nJDEgPSBvYmplY3RQcm90byQ0LnRvU3RyaW5nO1xuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovIHZhciBzeW1Ub1N0cmluZ1RhZyQxID0gU3ltYm9sJDEgPyBTeW1ib2wkMS50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqLyBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eSQzLmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnJDEpLCB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXTtcbiAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZyQxLmNhbGwodmFsdWUpO1xuICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnJDFdID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnJDFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi8gdmFyIG9iamVjdFByb3RvJDMgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqLyB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90byQzLnRvU3RyaW5nO1xuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi8gZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8gdmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovIHZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCQxID8gU3ltYm9sJDEudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqLyBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgIH1cbiAgICByZXR1cm4gc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSA/IGdldFJhd1RhZyh2YWx1ZSkgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqLyB2YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi8gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqLyBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUoKytpbmRleCA8IGxlbmd0aCl7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqLyB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqLyB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wkMSA/IFN5bWJvbCQxLnByb3RvdHlwZSA6IHVuZGVmaW5lZCwgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gdmFsdWUgKyAnJztcbiAgICByZXR1cm4gcmVzdWx0ID09ICcwJyAmJiAxIC8gdmFsdWUgPT0gLUluZmluaXR5ID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovIHZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqLyBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcbiAgICB3aGlsZShpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSl7fVxuICAgIHJldHVybiBpbmRleDtcbn1cblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqLyB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqLyBmdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpIDogc3RyaW5nO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi8gZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8gdmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLCBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJywgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJywgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi8gZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi8gdmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi8gdmFyIG1hc2tTcmNLZXkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgIHJldHVybiB1aWQgPyAnU3ltYm9sKHNyYylfMS4nICsgdWlkIDogJyc7XG59KCk7XG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi8gZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgbWFza1NyY0tleSBpbiBmdW5jO1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovIHZhciBmdW5jUHJvdG8kMSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi8gdmFyIGZ1bmNUb1N0cmluZyQxID0gZnVuY1Byb3RvJDEudG9TdHJpbmc7XG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqLyBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZyQxLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuYyArICcnO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi8gdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi8gdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovIHZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsIG9iamVjdFByb3RvJDIgPSBPYmplY3QucHJvdG90eXBlO1xuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqLyB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovIHZhciBoYXNPd25Qcm9wZXJ0eSQyID0gb2JqZWN0UHJvdG8kMi5oYXNPd25Qcm9wZXJ0eTtcbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5JDIpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJykucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCcpO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqLyBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqLyB2YXIgSE9UX0NPVU5UID0gODAwLCBIT1RfU1BBTiA9IDE2O1xuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqLyB2YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICB2YXIgY291bnQgPSAwLCBsYXN0Q2FsbGVkID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLCByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqLyBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG59KCk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqLyB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqLyB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqLyBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgaW5kZXggPSBmcm9tSW5kZXggKyAoLTEpO1xuICAgIHdoaWxlKCsraW5kZXggPCBsZW5ndGgpe1xuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICovIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi8gZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKXtcbiAgICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi8gZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqLyBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8IHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG59XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi8gdmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gZnVuYy5sZW5ndGggLSAxIDogc3RhcnQsIDApO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsIGluZGV4ID0gLTEsIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSwgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuICAgICAgICB3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKXtcbiAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlKCsraW5kZXggPCBzdGFydCl7XG4gICAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi8gZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovIHZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi8gZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqLyB2YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi8gZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovIHZhciBIQVNIX1VOREVGSU5FRCQyID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqLyB2YXIgb2JqZWN0UHJvdG8kMSA9IE9iamVjdC5wcm90b3R5cGU7XG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi8gdmFyIGhhc093blByb3BlcnR5JDEgPSBvYmplY3RQcm90byQxLmhhc093blByb3BlcnR5O1xuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi8gZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCQyID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkkMS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi8gdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqLyB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqLyBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi8gdmFyIEhBU0hfVU5ERUZJTkVEJDEgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgIGRhdGFba2V5XSA9IG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gSEFTSF9VTkRFRklORUQkMSA6IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqLyBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKXtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgfVxufVxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi8gZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi8gZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlKGxlbmd0aC0tKXtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovIHZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi8gZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXywgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgIH1cbiAgICAtLXRoaXMuc2l6ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqLyBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLCBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi8gZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi8gZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi8gZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKXtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgfVxufVxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqLyB2YXIgTWFwJDEgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgdGhpcy5zaXplID0gMDtcbiAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAkMSB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqLyBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICByZXR1cm4gdHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgPyB2YWx1ZSAhPT0gJ19fcHJvdG9fXycgOiB2YWx1ZSA9PT0gbnVsbDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqLyBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqLyBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi8gZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLCBzaXplID0gZGF0YS5zaXplO1xuICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqLyBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgd2hpbGUoKytpbmRleCA8IGxlbmd0aCl7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbn1cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqLyBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBpbmRleCA9IC0xLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiBsZW5ndGggKyBzdGFydDtcbiAgICB9XG4gICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgfVxuICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6IGVuZCAtIHN0YXJ0ID4+PiAwO1xuICAgIHN0YXJ0ID4+Pj0gMDtcbiAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKXtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICovIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgcmV0dXJuICFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xufVxuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovIHZhciByc0FzdHJhbFJhbmdlJDEgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsIHJzQ29tYm9NYXJrc1JhbmdlJDEgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsIHJlQ29tYm9IYWxmTWFya3NSYW5nZSQxID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLCByc0NvbWJvU3ltYm9sc1JhbmdlJDEgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsIHJzQ29tYm9SYW5nZSQxID0gcnNDb21ib01hcmtzUmFuZ2UkMSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSQxICsgcnNDb21ib1N5bWJvbHNSYW5nZSQxLCByc1ZhclJhbmdlJDEgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi8gdmFyIHJzWldKJDEgPSAnXFxcXHUyMDBkJztcbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqLyB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKJDEgKyByc0FzdHJhbFJhbmdlJDEgKyByc0NvbWJvUmFuZ2UkMSArIHJzVmFyUmFuZ2UkMSArICddJyk7XG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi8gZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqLyBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG59XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi8gdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLCByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSwgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqLyB2YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLCByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLCByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJywgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJywgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJywgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JywgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLCByc1pXSiA9ICdcXFxcdTIwMGQnO1xuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovIHZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtcbiAgICByc05vbkFzdHJhbCxcbiAgICByc1JlZ2lvbmFsLFxuICAgIHJzU3VyclBhaXJcbl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbiwgcnNTeW1ib2wgPSAnKD86JyArIFtcbiAgICByc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsXG4gICAgcnNDb21ibyxcbiAgICByc1JlZ2lvbmFsLFxuICAgIHJzU3VyclBhaXIsXG4gICAgcnNBc3RyYWxcbl0uam9pbignfCcpICsgJyknO1xuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi8gdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi8gZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKSA/IHVuaWNvZGVUb0FycmF5KHN0cmluZykgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbn1cblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqLyB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqLyBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqLyBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqLyBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcbiAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgIHdoaWxlKCsraW5kZXggPCBsZW5ndGgpe1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICB9XG59XG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi8gZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqLyBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gKi8gZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLCBpc0NvbW1vbiA9IHRydWUsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgcmVzdWx0ID0gW10sIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICB9XG4gICAgb3V0ZXI6IHdoaWxlKCsraW5kZXggPCBsZW5ndGgpe1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sIGNvbXB1dGVkID0gdmFsdWUgO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9PSAwID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSh2YWx1ZXNJbmRleC0tKXtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gKi8gZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgd2hpbGUoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSl7fVxuICAgIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gKi8gZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSwgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgd2hpbGUoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSl7fVxuICAgIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAqIC8vID0+ICdhYmMnXG4gKlxuICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAqIC8vID0+ICdhYmMnXG4gKlxuICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gKi8gZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgaWYgKHN0cmluZyAmJiAoY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VUcmltKHN0cmluZyk7XG4gICAgfVxuICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cbiAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLCBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSwgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG4gICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICogLy8gPT4gWzNdXG4gKi8gdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KSA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpIDogW107XG59KTtcblxudmFyIGxpYiA9IHt9O1xuXG52YXIgbmFtZWRSZWZlcmVuY2VzID0ge307XG5cbnZhciBoYXNSZXF1aXJlZE5hbWVkUmVmZXJlbmNlcztcblxuZnVuY3Rpb24gcmVxdWlyZU5hbWVkUmVmZXJlbmNlcyAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZE5hbWVkUmVmZXJlbmNlcykgcmV0dXJuIG5hbWVkUmVmZXJlbmNlcztcblx0aGFzUmVxdWlyZWROYW1lZFJlZmVyZW5jZXMgPSAxO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobmFtZWRSZWZlcmVuY2VzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdG5hbWVkUmVmZXJlbmNlcy5ib2R5UmVnRXhwcyA9IHtcblx0ICAgIHhtbDogLyYoPzojXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZyxcblx0ICAgIGh0bWw0OiAvJm5vdGluO3wmKD86bmJzcHxpZXhjbHxjZW50fHBvdW5kfGN1cnJlbnx5ZW58YnJ2YmFyfHNlY3R8dW1sfGNvcHl8b3JkZnxsYXF1b3xub3R8c2h5fHJlZ3xtYWNyfGRlZ3xwbHVzbW58c3VwMnxzdXAzfGFjdXRlfG1pY3JvfHBhcmF8bWlkZG90fGNlZGlsfHN1cDF8b3JkbXxyYXF1b3xmcmFjMTR8ZnJhYzEyfGZyYWMzNHxpcXVlc3R8QWdyYXZlfEFhY3V0ZXxBY2lyY3xBdGlsZGV8QXVtbHxBcmluZ3xBRWxpZ3xDY2VkaWx8RWdyYXZlfEVhY3V0ZXxFY2lyY3xFdW1sfElncmF2ZXxJYWN1dGV8SWNpcmN8SXVtbHxFVEh8TnRpbGRlfE9ncmF2ZXxPYWN1dGV8T2NpcmN8T3RpbGRlfE91bWx8dGltZXN8T3NsYXNofFVncmF2ZXxVYWN1dGV8VWNpcmN8VXVtbHxZYWN1dGV8VEhPUk58c3psaWd8YWdyYXZlfGFhY3V0ZXxhY2lyY3xhdGlsZGV8YXVtbHxhcmluZ3xhZWxpZ3xjY2VkaWx8ZWdyYXZlfGVhY3V0ZXxlY2lyY3xldW1sfGlncmF2ZXxpYWN1dGV8aWNpcmN8aXVtbHxldGh8bnRpbGRlfG9ncmF2ZXxvYWN1dGV8b2NpcmN8b3RpbGRlfG91bWx8ZGl2aWRlfG9zbGFzaHx1Z3JhdmV8dWFjdXRlfHVjaXJjfHV1bWx8eWFjdXRlfHRob3JufHl1bWx8cXVvdHxhbXB8bHR8Z3R8I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csXG5cdCAgICBodG1sNTogLyZjZW50ZXJkb3Q7fCZjb3B5c3I7fCZkaXZpZGVvbnRpbWVzO3wmZ3RjYzt8Jmd0Y2lyO3wmZ3Rkb3Q7fCZndGxQYXI7fCZndHF1ZXN0O3wmZ3RyYXBwcm94O3wmZ3RyYXJyO3wmZ3RyZG90O3wmZ3RyZXFsZXNzO3wmZ3RyZXFxbGVzczt8Jmd0cmxlc3M7fCZndHJzaW07fCZsdGNjO3wmbHRjaXI7fCZsdGRvdDt8Jmx0aHJlZTt8Jmx0aW1lczt8Jmx0bGFycjt8Jmx0cXVlc3Q7fCZsdHJQYXI7fCZsdHJpO3wmbHRyaWU7fCZsdHJpZjt8Jm5vdGluO3wmbm90aW5FO3wmbm90aW5kb3Q7fCZub3RpbnZhO3wmbm90aW52Yjt8Jm5vdGludmM7fCZub3RuaTt8Jm5vdG5pdmE7fCZub3RuaXZiO3wmbm90bml2Yzt8JnBhcmFsbGVsO3wmdGltZXNiO3wmdGltZXNiYXI7fCZ0aW1lc2Q7fCYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXFxkK3wjW3hYXVtcXGRhLWZBLUZdK3xbMC05YS16QS1aXSspOz8vZ1xuXHR9O1xuXHRuYW1lZFJlZmVyZW5jZXMubmFtZWRSZWZlcmVuY2VzID0ge1xuXHQgICAgeG1sOiB7XG5cdCAgICAgICAgZW50aXRpZXM6IHtcblx0ICAgICAgICAgICAgXCImbHQ7XCI6IFwiPFwiLFxuXHQgICAgICAgICAgICBcIiZndDtcIjogXCI+XCIsXG5cdCAgICAgICAgICAgIFwiJnF1b3Q7XCI6ICdcIicsXG5cdCAgICAgICAgICAgIFwiJmFwb3M7XCI6IFwiJ1wiLFxuXHQgICAgICAgICAgICBcIiZhbXA7XCI6IFwiJlwiXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjaGFyYWN0ZXJzOiB7XG5cdCAgICAgICAgICAgIFwiPFwiOiBcIiZsdDtcIixcblx0ICAgICAgICAgICAgXCI+XCI6IFwiJmd0O1wiLFxuXHQgICAgICAgICAgICAnXCInOiBcIiZxdW90O1wiLFxuXHQgICAgICAgICAgICBcIidcIjogXCImYXBvcztcIixcblx0ICAgICAgICAgICAgXCImXCI6IFwiJmFtcDtcIlxuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBodG1sNDoge1xuXHQgICAgICAgIGVudGl0aWVzOiB7XG5cdCAgICAgICAgICAgIFwiJmFwb3M7XCI6IFwiJ1wiLFxuXHQgICAgICAgICAgICBcIiZuYnNwXCI6IFwiwqBcIixcblx0ICAgICAgICAgICAgXCImbmJzcDtcIjogXCLCoFwiLFxuXHQgICAgICAgICAgICBcIiZpZXhjbFwiOiBcIsKhXCIsXG5cdCAgICAgICAgICAgIFwiJmlleGNsO1wiOiBcIsKhXCIsXG5cdCAgICAgICAgICAgIFwiJmNlbnRcIjogXCLColwiLFxuXHQgICAgICAgICAgICBcIiZjZW50O1wiOiBcIsKiXCIsXG5cdCAgICAgICAgICAgIFwiJnBvdW5kXCI6IFwiwqNcIixcblx0ICAgICAgICAgICAgXCImcG91bmQ7XCI6IFwiwqNcIixcblx0ICAgICAgICAgICAgXCImY3VycmVuXCI6IFwiwqRcIixcblx0ICAgICAgICAgICAgXCImY3VycmVuO1wiOiBcIsKkXCIsXG5cdCAgICAgICAgICAgIFwiJnllblwiOiBcIsKlXCIsXG5cdCAgICAgICAgICAgIFwiJnllbjtcIjogXCLCpVwiLFxuXHQgICAgICAgICAgICBcIiZicnZiYXJcIjogXCLCplwiLFxuXHQgICAgICAgICAgICBcIiZicnZiYXI7XCI6IFwiwqZcIixcblx0ICAgICAgICAgICAgXCImc2VjdFwiOiBcIsKnXCIsXG5cdCAgICAgICAgICAgIFwiJnNlY3Q7XCI6IFwiwqdcIixcblx0ICAgICAgICAgICAgXCImdW1sXCI6IFwiwqhcIixcblx0ICAgICAgICAgICAgXCImdW1sO1wiOiBcIsKoXCIsXG5cdCAgICAgICAgICAgIFwiJmNvcHlcIjogXCLCqVwiLFxuXHQgICAgICAgICAgICBcIiZjb3B5O1wiOiBcIsKpXCIsXG5cdCAgICAgICAgICAgIFwiJm9yZGZcIjogXCLCqlwiLFxuXHQgICAgICAgICAgICBcIiZvcmRmO1wiOiBcIsKqXCIsXG5cdCAgICAgICAgICAgIFwiJmxhcXVvXCI6IFwiwqtcIixcblx0ICAgICAgICAgICAgXCImbGFxdW87XCI6IFwiwqtcIixcblx0ICAgICAgICAgICAgXCImbm90XCI6IFwiwqxcIixcblx0ICAgICAgICAgICAgXCImbm90O1wiOiBcIsKsXCIsXG5cdCAgICAgICAgICAgIFwiJnNoeVwiOiBcIsKtXCIsXG5cdCAgICAgICAgICAgIFwiJnNoeTtcIjogXCLCrVwiLFxuXHQgICAgICAgICAgICBcIiZyZWdcIjogXCLCrlwiLFxuXHQgICAgICAgICAgICBcIiZyZWc7XCI6IFwiwq5cIixcblx0ICAgICAgICAgICAgXCImbWFjclwiOiBcIsKvXCIsXG5cdCAgICAgICAgICAgIFwiJm1hY3I7XCI6IFwiwq9cIixcblx0ICAgICAgICAgICAgXCImZGVnXCI6IFwiwrBcIixcblx0ICAgICAgICAgICAgXCImZGVnO1wiOiBcIsKwXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXNtblwiOiBcIsKxXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXNtbjtcIjogXCLCsVwiLFxuXHQgICAgICAgICAgICBcIiZzdXAyXCI6IFwiwrJcIixcblx0ICAgICAgICAgICAgXCImc3VwMjtcIjogXCLCslwiLFxuXHQgICAgICAgICAgICBcIiZzdXAzXCI6IFwiwrNcIixcblx0ICAgICAgICAgICAgXCImc3VwMztcIjogXCLCs1wiLFxuXHQgICAgICAgICAgICBcIiZhY3V0ZVwiOiBcIsK0XCIsXG5cdCAgICAgICAgICAgIFwiJmFjdXRlO1wiOiBcIsK0XCIsXG5cdCAgICAgICAgICAgIFwiJm1pY3JvXCI6IFwiwrVcIixcblx0ICAgICAgICAgICAgXCImbWljcm87XCI6IFwiwrVcIixcblx0ICAgICAgICAgICAgXCImcGFyYVwiOiBcIsK2XCIsXG5cdCAgICAgICAgICAgIFwiJnBhcmE7XCI6IFwiwrZcIixcblx0ICAgICAgICAgICAgXCImbWlkZG90XCI6IFwiwrdcIixcblx0ICAgICAgICAgICAgXCImbWlkZG90O1wiOiBcIsK3XCIsXG5cdCAgICAgICAgICAgIFwiJmNlZGlsXCI6IFwiwrhcIixcblx0ICAgICAgICAgICAgXCImY2VkaWw7XCI6IFwiwrhcIixcblx0ICAgICAgICAgICAgXCImc3VwMVwiOiBcIsK5XCIsXG5cdCAgICAgICAgICAgIFwiJnN1cDE7XCI6IFwiwrlcIixcblx0ICAgICAgICAgICAgXCImb3JkbVwiOiBcIsK6XCIsXG5cdCAgICAgICAgICAgIFwiJm9yZG07XCI6IFwiwrpcIixcblx0ICAgICAgICAgICAgXCImcmFxdW9cIjogXCLCu1wiLFxuXHQgICAgICAgICAgICBcIiZyYXF1bztcIjogXCLCu1wiLFxuXHQgICAgICAgICAgICBcIiZmcmFjMTRcIjogXCLCvFwiLFxuXHQgICAgICAgICAgICBcIiZmcmFjMTQ7XCI6IFwiwrxcIixcblx0ICAgICAgICAgICAgXCImZnJhYzEyXCI6IFwiwr1cIixcblx0ICAgICAgICAgICAgXCImZnJhYzEyO1wiOiBcIsK9XCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWMzNFwiOiBcIsK+XCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWMzNDtcIjogXCLCvlwiLFxuXHQgICAgICAgICAgICBcIiZpcXVlc3RcIjogXCLCv1wiLFxuXHQgICAgICAgICAgICBcIiZpcXVlc3Q7XCI6IFwiwr9cIixcblx0ICAgICAgICAgICAgXCImQWdyYXZlXCI6IFwiw4BcIixcblx0ICAgICAgICAgICAgXCImQWdyYXZlO1wiOiBcIsOAXCIsXG5cdCAgICAgICAgICAgIFwiJkFhY3V0ZVwiOiBcIsOBXCIsXG5cdCAgICAgICAgICAgIFwiJkFhY3V0ZTtcIjogXCLDgVwiLFxuXHQgICAgICAgICAgICBcIiZBY2lyY1wiOiBcIsOCXCIsXG5cdCAgICAgICAgICAgIFwiJkFjaXJjO1wiOiBcIsOCXCIsXG5cdCAgICAgICAgICAgIFwiJkF0aWxkZVwiOiBcIsODXCIsXG5cdCAgICAgICAgICAgIFwiJkF0aWxkZTtcIjogXCLDg1wiLFxuXHQgICAgICAgICAgICBcIiZBdW1sXCI6IFwiw4RcIixcblx0ICAgICAgICAgICAgXCImQXVtbDtcIjogXCLDhFwiLFxuXHQgICAgICAgICAgICBcIiZBcmluZ1wiOiBcIsOFXCIsXG5cdCAgICAgICAgICAgIFwiJkFyaW5nO1wiOiBcIsOFXCIsXG5cdCAgICAgICAgICAgIFwiJkFFbGlnXCI6IFwiw4ZcIixcblx0ICAgICAgICAgICAgXCImQUVsaWc7XCI6IFwiw4ZcIixcblx0ICAgICAgICAgICAgXCImQ2NlZGlsXCI6IFwiw4dcIixcblx0ICAgICAgICAgICAgXCImQ2NlZGlsO1wiOiBcIsOHXCIsXG5cdCAgICAgICAgICAgIFwiJkVncmF2ZVwiOiBcIsOIXCIsXG5cdCAgICAgICAgICAgIFwiJkVncmF2ZTtcIjogXCLDiFwiLFxuXHQgICAgICAgICAgICBcIiZFYWN1dGVcIjogXCLDiVwiLFxuXHQgICAgICAgICAgICBcIiZFYWN1dGU7XCI6IFwiw4lcIixcblx0ICAgICAgICAgICAgXCImRWNpcmNcIjogXCLDilwiLFxuXHQgICAgICAgICAgICBcIiZFY2lyYztcIjogXCLDilwiLFxuXHQgICAgICAgICAgICBcIiZFdW1sXCI6IFwiw4tcIixcblx0ICAgICAgICAgICAgXCImRXVtbDtcIjogXCLDi1wiLFxuXHQgICAgICAgICAgICBcIiZJZ3JhdmVcIjogXCLDjFwiLFxuXHQgICAgICAgICAgICBcIiZJZ3JhdmU7XCI6IFwiw4xcIixcblx0ICAgICAgICAgICAgXCImSWFjdXRlXCI6IFwiw41cIixcblx0ICAgICAgICAgICAgXCImSWFjdXRlO1wiOiBcIsONXCIsXG5cdCAgICAgICAgICAgIFwiJkljaXJjXCI6IFwiw45cIixcblx0ICAgICAgICAgICAgXCImSWNpcmM7XCI6IFwiw45cIixcblx0ICAgICAgICAgICAgXCImSXVtbFwiOiBcIsOPXCIsXG5cdCAgICAgICAgICAgIFwiJkl1bWw7XCI6IFwiw49cIixcblx0ICAgICAgICAgICAgXCImRVRIXCI6IFwiw5BcIixcblx0ICAgICAgICAgICAgXCImRVRIO1wiOiBcIsOQXCIsXG5cdCAgICAgICAgICAgIFwiJk50aWxkZVwiOiBcIsORXCIsXG5cdCAgICAgICAgICAgIFwiJk50aWxkZTtcIjogXCLDkVwiLFxuXHQgICAgICAgICAgICBcIiZPZ3JhdmVcIjogXCLDklwiLFxuXHQgICAgICAgICAgICBcIiZPZ3JhdmU7XCI6IFwiw5JcIixcblx0ICAgICAgICAgICAgXCImT2FjdXRlXCI6IFwiw5NcIixcblx0ICAgICAgICAgICAgXCImT2FjdXRlO1wiOiBcIsOTXCIsXG5cdCAgICAgICAgICAgIFwiJk9jaXJjXCI6IFwiw5RcIixcblx0ICAgICAgICAgICAgXCImT2NpcmM7XCI6IFwiw5RcIixcblx0ICAgICAgICAgICAgXCImT3RpbGRlXCI6IFwiw5VcIixcblx0ICAgICAgICAgICAgXCImT3RpbGRlO1wiOiBcIsOVXCIsXG5cdCAgICAgICAgICAgIFwiJk91bWxcIjogXCLDllwiLFxuXHQgICAgICAgICAgICBcIiZPdW1sO1wiOiBcIsOWXCIsXG5cdCAgICAgICAgICAgIFwiJnRpbWVzXCI6IFwiw5dcIixcblx0ICAgICAgICAgICAgXCImdGltZXM7XCI6IFwiw5dcIixcblx0ICAgICAgICAgICAgXCImT3NsYXNoXCI6IFwiw5hcIixcblx0ICAgICAgICAgICAgXCImT3NsYXNoO1wiOiBcIsOYXCIsXG5cdCAgICAgICAgICAgIFwiJlVncmF2ZVwiOiBcIsOZXCIsXG5cdCAgICAgICAgICAgIFwiJlVncmF2ZTtcIjogXCLDmVwiLFxuXHQgICAgICAgICAgICBcIiZVYWN1dGVcIjogXCLDmlwiLFxuXHQgICAgICAgICAgICBcIiZVYWN1dGU7XCI6IFwiw5pcIixcblx0ICAgICAgICAgICAgXCImVWNpcmNcIjogXCLDm1wiLFxuXHQgICAgICAgICAgICBcIiZVY2lyYztcIjogXCLDm1wiLFxuXHQgICAgICAgICAgICBcIiZVdW1sXCI6IFwiw5xcIixcblx0ICAgICAgICAgICAgXCImVXVtbDtcIjogXCLDnFwiLFxuXHQgICAgICAgICAgICBcIiZZYWN1dGVcIjogXCLDnVwiLFxuXHQgICAgICAgICAgICBcIiZZYWN1dGU7XCI6IFwiw51cIixcblx0ICAgICAgICAgICAgXCImVEhPUk5cIjogXCLDnlwiLFxuXHQgICAgICAgICAgICBcIiZUSE9STjtcIjogXCLDnlwiLFxuXHQgICAgICAgICAgICBcIiZzemxpZ1wiOiBcIsOfXCIsXG5cdCAgICAgICAgICAgIFwiJnN6bGlnO1wiOiBcIsOfXCIsXG5cdCAgICAgICAgICAgIFwiJmFncmF2ZVwiOiBcIsOgXCIsXG5cdCAgICAgICAgICAgIFwiJmFncmF2ZTtcIjogXCLDoFwiLFxuXHQgICAgICAgICAgICBcIiZhYWN1dGVcIjogXCLDoVwiLFxuXHQgICAgICAgICAgICBcIiZhYWN1dGU7XCI6IFwiw6FcIixcblx0ICAgICAgICAgICAgXCImYWNpcmNcIjogXCLDolwiLFxuXHQgICAgICAgICAgICBcIiZhY2lyYztcIjogXCLDolwiLFxuXHQgICAgICAgICAgICBcIiZhdGlsZGVcIjogXCLDo1wiLFxuXHQgICAgICAgICAgICBcIiZhdGlsZGU7XCI6IFwiw6NcIixcblx0ICAgICAgICAgICAgXCImYXVtbFwiOiBcIsOkXCIsXG5cdCAgICAgICAgICAgIFwiJmF1bWw7XCI6IFwiw6RcIixcblx0ICAgICAgICAgICAgXCImYXJpbmdcIjogXCLDpVwiLFxuXHQgICAgICAgICAgICBcIiZhcmluZztcIjogXCLDpVwiLFxuXHQgICAgICAgICAgICBcIiZhZWxpZ1wiOiBcIsOmXCIsXG5cdCAgICAgICAgICAgIFwiJmFlbGlnO1wiOiBcIsOmXCIsXG5cdCAgICAgICAgICAgIFwiJmNjZWRpbFwiOiBcIsOnXCIsXG5cdCAgICAgICAgICAgIFwiJmNjZWRpbDtcIjogXCLDp1wiLFxuXHQgICAgICAgICAgICBcIiZlZ3JhdmVcIjogXCLDqFwiLFxuXHQgICAgICAgICAgICBcIiZlZ3JhdmU7XCI6IFwiw6hcIixcblx0ICAgICAgICAgICAgXCImZWFjdXRlXCI6IFwiw6lcIixcblx0ICAgICAgICAgICAgXCImZWFjdXRlO1wiOiBcIsOpXCIsXG5cdCAgICAgICAgICAgIFwiJmVjaXJjXCI6IFwiw6pcIixcblx0ICAgICAgICAgICAgXCImZWNpcmM7XCI6IFwiw6pcIixcblx0ICAgICAgICAgICAgXCImZXVtbFwiOiBcIsOrXCIsXG5cdCAgICAgICAgICAgIFwiJmV1bWw7XCI6IFwiw6tcIixcblx0ICAgICAgICAgICAgXCImaWdyYXZlXCI6IFwiw6xcIixcblx0ICAgICAgICAgICAgXCImaWdyYXZlO1wiOiBcIsOsXCIsXG5cdCAgICAgICAgICAgIFwiJmlhY3V0ZVwiOiBcIsOtXCIsXG5cdCAgICAgICAgICAgIFwiJmlhY3V0ZTtcIjogXCLDrVwiLFxuXHQgICAgICAgICAgICBcIiZpY2lyY1wiOiBcIsOuXCIsXG5cdCAgICAgICAgICAgIFwiJmljaXJjO1wiOiBcIsOuXCIsXG5cdCAgICAgICAgICAgIFwiJml1bWxcIjogXCLDr1wiLFxuXHQgICAgICAgICAgICBcIiZpdW1sO1wiOiBcIsOvXCIsXG5cdCAgICAgICAgICAgIFwiJmV0aFwiOiBcIsOwXCIsXG5cdCAgICAgICAgICAgIFwiJmV0aDtcIjogXCLDsFwiLFxuXHQgICAgICAgICAgICBcIiZudGlsZGVcIjogXCLDsVwiLFxuXHQgICAgICAgICAgICBcIiZudGlsZGU7XCI6IFwiw7FcIixcblx0ICAgICAgICAgICAgXCImb2dyYXZlXCI6IFwiw7JcIixcblx0ICAgICAgICAgICAgXCImb2dyYXZlO1wiOiBcIsOyXCIsXG5cdCAgICAgICAgICAgIFwiJm9hY3V0ZVwiOiBcIsOzXCIsXG5cdCAgICAgICAgICAgIFwiJm9hY3V0ZTtcIjogXCLDs1wiLFxuXHQgICAgICAgICAgICBcIiZvY2lyY1wiOiBcIsO0XCIsXG5cdCAgICAgICAgICAgIFwiJm9jaXJjO1wiOiBcIsO0XCIsXG5cdCAgICAgICAgICAgIFwiJm90aWxkZVwiOiBcIsO1XCIsXG5cdCAgICAgICAgICAgIFwiJm90aWxkZTtcIjogXCLDtVwiLFxuXHQgICAgICAgICAgICBcIiZvdW1sXCI6IFwiw7ZcIixcblx0ICAgICAgICAgICAgXCImb3VtbDtcIjogXCLDtlwiLFxuXHQgICAgICAgICAgICBcIiZkaXZpZGVcIjogXCLDt1wiLFxuXHQgICAgICAgICAgICBcIiZkaXZpZGU7XCI6IFwiw7dcIixcblx0ICAgICAgICAgICAgXCImb3NsYXNoXCI6IFwiw7hcIixcblx0ICAgICAgICAgICAgXCImb3NsYXNoO1wiOiBcIsO4XCIsXG5cdCAgICAgICAgICAgIFwiJnVncmF2ZVwiOiBcIsO5XCIsXG5cdCAgICAgICAgICAgIFwiJnVncmF2ZTtcIjogXCLDuVwiLFxuXHQgICAgICAgICAgICBcIiZ1YWN1dGVcIjogXCLDulwiLFxuXHQgICAgICAgICAgICBcIiZ1YWN1dGU7XCI6IFwiw7pcIixcblx0ICAgICAgICAgICAgXCImdWNpcmNcIjogXCLDu1wiLFxuXHQgICAgICAgICAgICBcIiZ1Y2lyYztcIjogXCLDu1wiLFxuXHQgICAgICAgICAgICBcIiZ1dW1sXCI6IFwiw7xcIixcblx0ICAgICAgICAgICAgXCImdXVtbDtcIjogXCLDvFwiLFxuXHQgICAgICAgICAgICBcIiZ5YWN1dGVcIjogXCLDvVwiLFxuXHQgICAgICAgICAgICBcIiZ5YWN1dGU7XCI6IFwiw71cIixcblx0ICAgICAgICAgICAgXCImdGhvcm5cIjogXCLDvlwiLFxuXHQgICAgICAgICAgICBcIiZ0aG9ybjtcIjogXCLDvlwiLFxuXHQgICAgICAgICAgICBcIiZ5dW1sXCI6IFwiw79cIixcblx0ICAgICAgICAgICAgXCImeXVtbDtcIjogXCLDv1wiLFxuXHQgICAgICAgICAgICBcIiZxdW90XCI6ICdcIicsXG5cdCAgICAgICAgICAgIFwiJnF1b3Q7XCI6ICdcIicsXG5cdCAgICAgICAgICAgIFwiJmFtcFwiOiBcIiZcIixcblx0ICAgICAgICAgICAgXCImYW1wO1wiOiBcIiZcIixcblx0ICAgICAgICAgICAgXCImbHRcIjogXCI8XCIsXG5cdCAgICAgICAgICAgIFwiJmx0O1wiOiBcIjxcIixcblx0ICAgICAgICAgICAgXCImZ3RcIjogXCI+XCIsXG5cdCAgICAgICAgICAgIFwiJmd0O1wiOiBcIj5cIixcblx0ICAgICAgICAgICAgXCImT0VsaWc7XCI6IFwixZJcIixcblx0ICAgICAgICAgICAgXCImb2VsaWc7XCI6IFwixZNcIixcblx0ICAgICAgICAgICAgXCImU2Nhcm9uO1wiOiBcIsWgXCIsXG5cdCAgICAgICAgICAgIFwiJnNjYXJvbjtcIjogXCLFoVwiLFxuXHQgICAgICAgICAgICBcIiZZdW1sO1wiOiBcIsW4XCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmM7XCI6IFwiy4ZcIixcblx0ICAgICAgICAgICAgXCImdGlsZGU7XCI6IFwiy5xcIixcblx0ICAgICAgICAgICAgXCImZW5zcDtcIjogXCLigIJcIixcblx0ICAgICAgICAgICAgXCImZW1zcDtcIjogXCLigINcIixcblx0ICAgICAgICAgICAgXCImdGhpbnNwO1wiOiBcIuKAiVwiLFxuXHQgICAgICAgICAgICBcIiZ6d25qO1wiOiBcIuKAjFwiLFxuXHQgICAgICAgICAgICBcIiZ6d2o7XCI6IFwi4oCNXCIsXG5cdCAgICAgICAgICAgIFwiJmxybTtcIjogXCLigI5cIixcblx0ICAgICAgICAgICAgXCImcmxtO1wiOiBcIuKAj1wiLFxuXHQgICAgICAgICAgICBcIiZuZGFzaDtcIjogXCLigJNcIixcblx0ICAgICAgICAgICAgXCImbWRhc2g7XCI6IFwi4oCUXCIsXG5cdCAgICAgICAgICAgIFwiJmxzcXVvO1wiOiBcIuKAmFwiLFxuXHQgICAgICAgICAgICBcIiZyc3F1bztcIjogXCLigJlcIixcblx0ICAgICAgICAgICAgXCImc2JxdW87XCI6IFwi4oCaXCIsXG5cdCAgICAgICAgICAgIFwiJmxkcXVvO1wiOiBcIuKAnFwiLFxuXHQgICAgICAgICAgICBcIiZyZHF1bztcIjogXCLigJ1cIixcblx0ICAgICAgICAgICAgXCImYmRxdW87XCI6IFwi4oCeXCIsXG5cdCAgICAgICAgICAgIFwiJmRhZ2dlcjtcIjogXCLigKBcIixcblx0ICAgICAgICAgICAgXCImRGFnZ2VyO1wiOiBcIuKAoVwiLFxuXHQgICAgICAgICAgICBcIiZwZXJtaWw7XCI6IFwi4oCwXCIsXG5cdCAgICAgICAgICAgIFwiJmxzYXF1bztcIjogXCLigLlcIixcblx0ICAgICAgICAgICAgXCImcnNhcXVvO1wiOiBcIuKAulwiLFxuXHQgICAgICAgICAgICBcIiZldXJvO1wiOiBcIuKCrFwiLFxuXHQgICAgICAgICAgICBcIiZmbm9mO1wiOiBcIsaSXCIsXG5cdCAgICAgICAgICAgIFwiJkFscGhhO1wiOiBcIs6RXCIsXG5cdCAgICAgICAgICAgIFwiJkJldGE7XCI6IFwizpJcIixcblx0ICAgICAgICAgICAgXCImR2FtbWE7XCI6IFwizpNcIixcblx0ICAgICAgICAgICAgXCImRGVsdGE7XCI6IFwizpRcIixcblx0ICAgICAgICAgICAgXCImRXBzaWxvbjtcIjogXCLOlVwiLFxuXHQgICAgICAgICAgICBcIiZaZXRhO1wiOiBcIs6WXCIsXG5cdCAgICAgICAgICAgIFwiJkV0YTtcIjogXCLOl1wiLFxuXHQgICAgICAgICAgICBcIiZUaGV0YTtcIjogXCLOmFwiLFxuXHQgICAgICAgICAgICBcIiZJb3RhO1wiOiBcIs6ZXCIsXG5cdCAgICAgICAgICAgIFwiJkthcHBhO1wiOiBcIs6aXCIsXG5cdCAgICAgICAgICAgIFwiJkxhbWJkYTtcIjogXCLOm1wiLFxuXHQgICAgICAgICAgICBcIiZNdTtcIjogXCLOnFwiLFxuXHQgICAgICAgICAgICBcIiZOdTtcIjogXCLOnVwiLFxuXHQgICAgICAgICAgICBcIiZYaTtcIjogXCLOnlwiLFxuXHQgICAgICAgICAgICBcIiZPbWljcm9uO1wiOiBcIs6fXCIsXG5cdCAgICAgICAgICAgIFwiJlBpO1wiOiBcIs6gXCIsXG5cdCAgICAgICAgICAgIFwiJlJobztcIjogXCLOoVwiLFxuXHQgICAgICAgICAgICBcIiZTaWdtYTtcIjogXCLOo1wiLFxuXHQgICAgICAgICAgICBcIiZUYXU7XCI6IFwizqRcIixcblx0ICAgICAgICAgICAgXCImVXBzaWxvbjtcIjogXCLOpVwiLFxuXHQgICAgICAgICAgICBcIiZQaGk7XCI6IFwizqZcIixcblx0ICAgICAgICAgICAgXCImQ2hpO1wiOiBcIs6nXCIsXG5cdCAgICAgICAgICAgIFwiJlBzaTtcIjogXCLOqFwiLFxuXHQgICAgICAgICAgICBcIiZPbWVnYTtcIjogXCLOqVwiLFxuXHQgICAgICAgICAgICBcIiZhbHBoYTtcIjogXCLOsVwiLFxuXHQgICAgICAgICAgICBcIiZiZXRhO1wiOiBcIs6yXCIsXG5cdCAgICAgICAgICAgIFwiJmdhbW1hO1wiOiBcIs6zXCIsXG5cdCAgICAgICAgICAgIFwiJmRlbHRhO1wiOiBcIs60XCIsXG5cdCAgICAgICAgICAgIFwiJmVwc2lsb247XCI6IFwizrVcIixcblx0ICAgICAgICAgICAgXCImemV0YTtcIjogXCLOtlwiLFxuXHQgICAgICAgICAgICBcIiZldGE7XCI6IFwizrdcIixcblx0ICAgICAgICAgICAgXCImdGhldGE7XCI6IFwizrhcIixcblx0ICAgICAgICAgICAgXCImaW90YTtcIjogXCLOuVwiLFxuXHQgICAgICAgICAgICBcIiZrYXBwYTtcIjogXCLOulwiLFxuXHQgICAgICAgICAgICBcIiZsYW1iZGE7XCI6IFwizrtcIixcblx0ICAgICAgICAgICAgXCImbXU7XCI6IFwizrxcIixcblx0ICAgICAgICAgICAgXCImbnU7XCI6IFwizr1cIixcblx0ICAgICAgICAgICAgXCImeGk7XCI6IFwizr5cIixcblx0ICAgICAgICAgICAgXCImb21pY3JvbjtcIjogXCLOv1wiLFxuXHQgICAgICAgICAgICBcIiZwaTtcIjogXCLPgFwiLFxuXHQgICAgICAgICAgICBcIiZyaG87XCI6IFwiz4FcIixcblx0ICAgICAgICAgICAgXCImc2lnbWFmO1wiOiBcIs+CXCIsXG5cdCAgICAgICAgICAgIFwiJnNpZ21hO1wiOiBcIs+DXCIsXG5cdCAgICAgICAgICAgIFwiJnRhdTtcIjogXCLPhFwiLFxuXHQgICAgICAgICAgICBcIiZ1cHNpbG9uO1wiOiBcIs+FXCIsXG5cdCAgICAgICAgICAgIFwiJnBoaTtcIjogXCLPhlwiLFxuXHQgICAgICAgICAgICBcIiZjaGk7XCI6IFwiz4dcIixcblx0ICAgICAgICAgICAgXCImcHNpO1wiOiBcIs+IXCIsXG5cdCAgICAgICAgICAgIFwiJm9tZWdhO1wiOiBcIs+JXCIsXG5cdCAgICAgICAgICAgIFwiJnRoZXRhc3ltO1wiOiBcIs+RXCIsXG5cdCAgICAgICAgICAgIFwiJnVwc2loO1wiOiBcIs+SXCIsXG5cdCAgICAgICAgICAgIFwiJnBpdjtcIjogXCLPllwiLFxuXHQgICAgICAgICAgICBcIiZidWxsO1wiOiBcIuKAolwiLFxuXHQgICAgICAgICAgICBcIiZoZWxsaXA7XCI6IFwi4oCmXCIsXG5cdCAgICAgICAgICAgIFwiJnByaW1lO1wiOiBcIuKAslwiLFxuXHQgICAgICAgICAgICBcIiZQcmltZTtcIjogXCLigLNcIixcblx0ICAgICAgICAgICAgXCImb2xpbmU7XCI6IFwi4oC+XCIsXG5cdCAgICAgICAgICAgIFwiJmZyYXNsO1wiOiBcIuKBhFwiLFxuXHQgICAgICAgICAgICBcIiZ3ZWllcnA7XCI6IFwi4oSYXCIsXG5cdCAgICAgICAgICAgIFwiJmltYWdlO1wiOiBcIuKEkVwiLFxuXHQgICAgICAgICAgICBcIiZyZWFsO1wiOiBcIuKEnFwiLFxuXHQgICAgICAgICAgICBcIiZ0cmFkZTtcIjogXCLihKJcIixcblx0ICAgICAgICAgICAgXCImYWxlZnN5bTtcIjogXCLihLVcIixcblx0ICAgICAgICAgICAgXCImbGFycjtcIjogXCLihpBcIixcblx0ICAgICAgICAgICAgXCImdWFycjtcIjogXCLihpFcIixcblx0ICAgICAgICAgICAgXCImcmFycjtcIjogXCLihpJcIixcblx0ICAgICAgICAgICAgXCImZGFycjtcIjogXCLihpNcIixcblx0ICAgICAgICAgICAgXCImaGFycjtcIjogXCLihpRcIixcblx0ICAgICAgICAgICAgXCImY3JhcnI7XCI6IFwi4oa1XCIsXG5cdCAgICAgICAgICAgIFwiJmxBcnI7XCI6IFwi4oeQXCIsXG5cdCAgICAgICAgICAgIFwiJnVBcnI7XCI6IFwi4oeRXCIsXG5cdCAgICAgICAgICAgIFwiJnJBcnI7XCI6IFwi4oeSXCIsXG5cdCAgICAgICAgICAgIFwiJmRBcnI7XCI6IFwi4oeTXCIsXG5cdCAgICAgICAgICAgIFwiJmhBcnI7XCI6IFwi4oeUXCIsXG5cdCAgICAgICAgICAgIFwiJmZvcmFsbDtcIjogXCLiiIBcIixcblx0ICAgICAgICAgICAgXCImcGFydDtcIjogXCLiiIJcIixcblx0ICAgICAgICAgICAgXCImZXhpc3Q7XCI6IFwi4oiDXCIsXG5cdCAgICAgICAgICAgIFwiJmVtcHR5O1wiOiBcIuKIhVwiLFxuXHQgICAgICAgICAgICBcIiZuYWJsYTtcIjogXCLiiIdcIixcblx0ICAgICAgICAgICAgXCImaXNpbjtcIjogXCLiiIhcIixcblx0ICAgICAgICAgICAgXCImbm90aW47XCI6IFwi4oiJXCIsXG5cdCAgICAgICAgICAgIFwiJm5pO1wiOiBcIuKIi1wiLFxuXHQgICAgICAgICAgICBcIiZwcm9kO1wiOiBcIuKIj1wiLFxuXHQgICAgICAgICAgICBcIiZzdW07XCI6IFwi4oiRXCIsXG5cdCAgICAgICAgICAgIFwiJm1pbnVzO1wiOiBcIuKIklwiLFxuXHQgICAgICAgICAgICBcIiZsb3dhc3Q7XCI6IFwi4oiXXCIsXG5cdCAgICAgICAgICAgIFwiJnJhZGljO1wiOiBcIuKImlwiLFxuXHQgICAgICAgICAgICBcIiZwcm9wO1wiOiBcIuKInVwiLFxuXHQgICAgICAgICAgICBcIiZpbmZpbjtcIjogXCLiiJ5cIixcblx0ICAgICAgICAgICAgXCImYW5nO1wiOiBcIuKIoFwiLFxuXHQgICAgICAgICAgICBcIiZhbmQ7XCI6IFwi4oinXCIsXG5cdCAgICAgICAgICAgIFwiJm9yO1wiOiBcIuKIqFwiLFxuXHQgICAgICAgICAgICBcIiZjYXA7XCI6IFwi4oipXCIsXG5cdCAgICAgICAgICAgIFwiJmN1cDtcIjogXCLiiKpcIixcblx0ICAgICAgICAgICAgXCImaW50O1wiOiBcIuKIq1wiLFxuXHQgICAgICAgICAgICBcIiZ0aGVyZTQ7XCI6IFwi4oi0XCIsXG5cdCAgICAgICAgICAgIFwiJnNpbTtcIjogXCLiiLxcIixcblx0ICAgICAgICAgICAgXCImY29uZztcIjogXCLiiYVcIixcblx0ICAgICAgICAgICAgXCImYXN5bXA7XCI6IFwi4omIXCIsXG5cdCAgICAgICAgICAgIFwiJm5lO1wiOiBcIuKJoFwiLFxuXHQgICAgICAgICAgICBcIiZlcXVpdjtcIjogXCLiiaFcIixcblx0ICAgICAgICAgICAgXCImbGU7XCI6IFwi4omkXCIsXG5cdCAgICAgICAgICAgIFwiJmdlO1wiOiBcIuKJpVwiLFxuXHQgICAgICAgICAgICBcIiZzdWI7XCI6IFwi4oqCXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cDtcIjogXCLiioNcIixcblx0ICAgICAgICAgICAgXCImbnN1YjtcIjogXCLiioRcIixcblx0ICAgICAgICAgICAgXCImc3ViZTtcIjogXCLiioZcIixcblx0ICAgICAgICAgICAgXCImc3VwZTtcIjogXCLiiodcIixcblx0ICAgICAgICAgICAgXCImb3BsdXM7XCI6IFwi4oqVXCIsXG5cdCAgICAgICAgICAgIFwiJm90aW1lcztcIjogXCLiipdcIixcblx0ICAgICAgICAgICAgXCImcGVycDtcIjogXCLiiqVcIixcblx0ICAgICAgICAgICAgXCImc2RvdDtcIjogXCLii4VcIixcblx0ICAgICAgICAgICAgXCImbGNlaWw7XCI6IFwi4oyIXCIsXG5cdCAgICAgICAgICAgIFwiJnJjZWlsO1wiOiBcIuKMiVwiLFxuXHQgICAgICAgICAgICBcIiZsZmxvb3I7XCI6IFwi4oyKXCIsXG5cdCAgICAgICAgICAgIFwiJnJmbG9vcjtcIjogXCLijItcIixcblx0ICAgICAgICAgICAgXCImbGFuZztcIjogXCLijKlcIixcblx0ICAgICAgICAgICAgXCImcmFuZztcIjogXCLijKpcIixcblx0ICAgICAgICAgICAgXCImbG96O1wiOiBcIuKXilwiLFxuXHQgICAgICAgICAgICBcIiZzcGFkZXM7XCI6IFwi4pmgXCIsXG5cdCAgICAgICAgICAgIFwiJmNsdWJzO1wiOiBcIuKZo1wiLFxuXHQgICAgICAgICAgICBcIiZoZWFydHM7XCI6IFwi4pmlXCIsXG5cdCAgICAgICAgICAgIFwiJmRpYW1zO1wiOiBcIuKZplwiXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjaGFyYWN0ZXJzOiB7XG5cdCAgICAgICAgICAgIFwiJ1wiOiBcIiZhcG9zO1wiLFxuXHQgICAgICAgICAgICBcIsKgXCI6IFwiJm5ic3A7XCIsXG5cdCAgICAgICAgICAgIFwiwqFcIjogXCImaWV4Y2w7XCIsXG5cdCAgICAgICAgICAgIFwiwqJcIjogXCImY2VudDtcIixcblx0ICAgICAgICAgICAgXCLCo1wiOiBcIiZwb3VuZDtcIixcblx0ICAgICAgICAgICAgXCLCpFwiOiBcIiZjdXJyZW47XCIsXG5cdCAgICAgICAgICAgIFwiwqVcIjogXCImeWVuO1wiLFxuXHQgICAgICAgICAgICBcIsKmXCI6IFwiJmJydmJhcjtcIixcblx0ICAgICAgICAgICAgXCLCp1wiOiBcIiZzZWN0O1wiLFxuXHQgICAgICAgICAgICBcIsKoXCI6IFwiJnVtbDtcIixcblx0ICAgICAgICAgICAgXCLCqVwiOiBcIiZjb3B5O1wiLFxuXHQgICAgICAgICAgICBcIsKqXCI6IFwiJm9yZGY7XCIsXG5cdCAgICAgICAgICAgIFwiwqtcIjogXCImbGFxdW87XCIsXG5cdCAgICAgICAgICAgIFwiwqxcIjogXCImbm90O1wiLFxuXHQgICAgICAgICAgICBcIsKtXCI6IFwiJnNoeTtcIixcblx0ICAgICAgICAgICAgXCLCrlwiOiBcIiZyZWc7XCIsXG5cdCAgICAgICAgICAgIFwiwq9cIjogXCImbWFjcjtcIixcblx0ICAgICAgICAgICAgXCLCsFwiOiBcIiZkZWc7XCIsXG5cdCAgICAgICAgICAgIFwiwrFcIjogXCImcGx1c21uO1wiLFxuXHQgICAgICAgICAgICBcIsKyXCI6IFwiJnN1cDI7XCIsXG5cdCAgICAgICAgICAgIFwiwrNcIjogXCImc3VwMztcIixcblx0ICAgICAgICAgICAgXCLCtFwiOiBcIiZhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLCtVwiOiBcIiZtaWNybztcIixcblx0ICAgICAgICAgICAgXCLCtlwiOiBcIiZwYXJhO1wiLFxuXHQgICAgICAgICAgICBcIsK3XCI6IFwiJm1pZGRvdDtcIixcblx0ICAgICAgICAgICAgXCLCuFwiOiBcIiZjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLCuVwiOiBcIiZzdXAxO1wiLFxuXHQgICAgICAgICAgICBcIsK6XCI6IFwiJm9yZG07XCIsXG5cdCAgICAgICAgICAgIFwiwrtcIjogXCImcmFxdW87XCIsXG5cdCAgICAgICAgICAgIFwiwrxcIjogXCImZnJhYzE0O1wiLFxuXHQgICAgICAgICAgICBcIsK9XCI6IFwiJmZyYWMxMjtcIixcblx0ICAgICAgICAgICAgXCLCvlwiOiBcIiZmcmFjMzQ7XCIsXG5cdCAgICAgICAgICAgIFwiwr9cIjogXCImaXF1ZXN0O1wiLFxuXHQgICAgICAgICAgICBcIsOAXCI6IFwiJkFncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLDgVwiOiBcIiZBYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwiw4JcIjogXCImQWNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwiw4NcIjogXCImQXRpbGRlO1wiLFxuXHQgICAgICAgICAgICBcIsOEXCI6IFwiJkF1bWw7XCIsXG5cdCAgICAgICAgICAgIFwiw4VcIjogXCImQXJpbmc7XCIsXG5cdCAgICAgICAgICAgIFwiw4ZcIjogXCImQUVsaWc7XCIsXG5cdCAgICAgICAgICAgIFwiw4dcIjogXCImQ2NlZGlsO1wiLFxuXHQgICAgICAgICAgICBcIsOIXCI6IFwiJkVncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLDiVwiOiBcIiZFYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwiw4pcIjogXCImRWNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwiw4tcIjogXCImRXVtbDtcIixcblx0ICAgICAgICAgICAgXCLDjFwiOiBcIiZJZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwiw41cIjogXCImSWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOOXCI6IFwiJkljaXJjO1wiLFxuXHQgICAgICAgICAgICBcIsOPXCI6IFwiJkl1bWw7XCIsXG5cdCAgICAgICAgICAgIFwiw5BcIjogXCImRVRIO1wiLFxuXHQgICAgICAgICAgICBcIsORXCI6IFwiJk50aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLDklwiOiBcIiZPZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwiw5NcIjogXCImT2FjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOUXCI6IFwiJk9jaXJjO1wiLFxuXHQgICAgICAgICAgICBcIsOVXCI6IFwiJk90aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLDllwiOiBcIiZPdW1sO1wiLFxuXHQgICAgICAgICAgICBcIsOXXCI6IFwiJnRpbWVzO1wiLFxuXHQgICAgICAgICAgICBcIsOYXCI6IFwiJk9zbGFzaDtcIixcblx0ICAgICAgICAgICAgXCLDmVwiOiBcIiZVZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwiw5pcIjogXCImVWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsObXCI6IFwiJlVjaXJjO1wiLFxuXHQgICAgICAgICAgICBcIsOcXCI6IFwiJlV1bWw7XCIsXG5cdCAgICAgICAgICAgIFwiw51cIjogXCImWWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOeXCI6IFwiJlRIT1JOO1wiLFxuXHQgICAgICAgICAgICBcIsOfXCI6IFwiJnN6bGlnO1wiLFxuXHQgICAgICAgICAgICBcIsOgXCI6IFwiJmFncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLDoVwiOiBcIiZhYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwiw6JcIjogXCImYWNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwiw6NcIjogXCImYXRpbGRlO1wiLFxuXHQgICAgICAgICAgICBcIsOkXCI6IFwiJmF1bWw7XCIsXG5cdCAgICAgICAgICAgIFwiw6VcIjogXCImYXJpbmc7XCIsXG5cdCAgICAgICAgICAgIFwiw6ZcIjogXCImYWVsaWc7XCIsXG5cdCAgICAgICAgICAgIFwiw6dcIjogXCImY2NlZGlsO1wiLFxuXHQgICAgICAgICAgICBcIsOoXCI6IFwiJmVncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLDqVwiOiBcIiZlYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwiw6pcIjogXCImZWNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwiw6tcIjogXCImZXVtbDtcIixcblx0ICAgICAgICAgICAgXCLDrFwiOiBcIiZpZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwiw61cIjogXCImaWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOuXCI6IFwiJmljaXJjO1wiLFxuXHQgICAgICAgICAgICBcIsOvXCI6IFwiJml1bWw7XCIsXG5cdCAgICAgICAgICAgIFwiw7BcIjogXCImZXRoO1wiLFxuXHQgICAgICAgICAgICBcIsOxXCI6IFwiJm50aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLDslwiOiBcIiZvZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwiw7NcIjogXCImb2FjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsO0XCI6IFwiJm9jaXJjO1wiLFxuXHQgICAgICAgICAgICBcIsO1XCI6IFwiJm90aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLDtlwiOiBcIiZvdW1sO1wiLFxuXHQgICAgICAgICAgICBcIsO3XCI6IFwiJmRpdmlkZTtcIixcblx0ICAgICAgICAgICAgXCLDuFwiOiBcIiZvc2xhc2g7XCIsXG5cdCAgICAgICAgICAgIFwiw7lcIjogXCImdWdyYXZlO1wiLFxuXHQgICAgICAgICAgICBcIsO6XCI6IFwiJnVhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLDu1wiOiBcIiZ1Y2lyYztcIixcblx0ICAgICAgICAgICAgXCLDvFwiOiBcIiZ1dW1sO1wiLFxuXHQgICAgICAgICAgICBcIsO9XCI6IFwiJnlhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLDvlwiOiBcIiZ0aG9ybjtcIixcblx0ICAgICAgICAgICAgXCLDv1wiOiBcIiZ5dW1sO1wiLFxuXHQgICAgICAgICAgICAnXCInOiBcIiZxdW90O1wiLFxuXHQgICAgICAgICAgICBcIiZcIjogXCImYW1wO1wiLFxuXHQgICAgICAgICAgICBcIjxcIjogXCImbHQ7XCIsXG5cdCAgICAgICAgICAgIFwiPlwiOiBcIiZndDtcIixcblx0ICAgICAgICAgICAgXCLFklwiOiBcIiZPRWxpZztcIixcblx0ICAgICAgICAgICAgXCLFk1wiOiBcIiZvZWxpZztcIixcblx0ICAgICAgICAgICAgXCLFoFwiOiBcIiZTY2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwixaFcIjogXCImc2Nhcm9uO1wiLFxuXHQgICAgICAgICAgICBcIsW4XCI6IFwiJll1bWw7XCIsXG5cdCAgICAgICAgICAgIFwiy4ZcIjogXCImY2lyYztcIixcblx0ICAgICAgICAgICAgXCLLnFwiOiBcIiZ0aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLigIJcIjogXCImZW5zcDtcIixcblx0ICAgICAgICAgICAgXCLigINcIjogXCImZW1zcDtcIixcblx0ICAgICAgICAgICAgXCLigIlcIjogXCImdGhpbnNwO1wiLFxuXHQgICAgICAgICAgICBcIuKAjFwiOiBcIiZ6d25qO1wiLFxuXHQgICAgICAgICAgICBcIuKAjVwiOiBcIiZ6d2o7XCIsXG5cdCAgICAgICAgICAgIFwi4oCOXCI6IFwiJmxybTtcIixcblx0ICAgICAgICAgICAgXCLigI9cIjogXCImcmxtO1wiLFxuXHQgICAgICAgICAgICBcIuKAk1wiOiBcIiZuZGFzaDtcIixcblx0ICAgICAgICAgICAgXCLigJRcIjogXCImbWRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwi4oCYXCI6IFwiJmxzcXVvO1wiLFxuXHQgICAgICAgICAgICBcIuKAmVwiOiBcIiZyc3F1bztcIixcblx0ICAgICAgICAgICAgXCLigJpcIjogXCImc2JxdW87XCIsXG5cdCAgICAgICAgICAgIFwi4oCcXCI6IFwiJmxkcXVvO1wiLFxuXHQgICAgICAgICAgICBcIuKAnVwiOiBcIiZyZHF1bztcIixcblx0ICAgICAgICAgICAgXCLigJ5cIjogXCImYmRxdW87XCIsXG5cdCAgICAgICAgICAgIFwi4oCgXCI6IFwiJmRhZ2dlcjtcIixcblx0ICAgICAgICAgICAgXCLigKFcIjogXCImRGFnZ2VyO1wiLFxuXHQgICAgICAgICAgICBcIuKAsFwiOiBcIiZwZXJtaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oC5XCI6IFwiJmxzYXF1bztcIixcblx0ICAgICAgICAgICAgXCLigLpcIjogXCImcnNhcXVvO1wiLFxuXHQgICAgICAgICAgICBcIuKCrFwiOiBcIiZldXJvO1wiLFxuXHQgICAgICAgICAgICBcIsaSXCI6IFwiJmZub2Y7XCIsXG5cdCAgICAgICAgICAgIFwizpFcIjogXCImQWxwaGE7XCIsXG5cdCAgICAgICAgICAgIFwizpJcIjogXCImQmV0YTtcIixcblx0ICAgICAgICAgICAgXCLOk1wiOiBcIiZHYW1tYTtcIixcblx0ICAgICAgICAgICAgXCLOlFwiOiBcIiZEZWx0YTtcIixcblx0ICAgICAgICAgICAgXCLOlVwiOiBcIiZFcHNpbG9uO1wiLFxuXHQgICAgICAgICAgICBcIs6WXCI6IFwiJlpldGE7XCIsXG5cdCAgICAgICAgICAgIFwizpdcIjogXCImRXRhO1wiLFxuXHQgICAgICAgICAgICBcIs6YXCI6IFwiJlRoZXRhO1wiLFxuXHQgICAgICAgICAgICBcIs6ZXCI6IFwiJklvdGE7XCIsXG5cdCAgICAgICAgICAgIFwizppcIjogXCImS2FwcGE7XCIsXG5cdCAgICAgICAgICAgIFwizptcIjogXCImTGFtYmRhO1wiLFxuXHQgICAgICAgICAgICBcIs6cXCI6IFwiJk11O1wiLFxuXHQgICAgICAgICAgICBcIs6dXCI6IFwiJk51O1wiLFxuXHQgICAgICAgICAgICBcIs6eXCI6IFwiJlhpO1wiLFxuXHQgICAgICAgICAgICBcIs6fXCI6IFwiJk9taWNyb247XCIsXG5cdCAgICAgICAgICAgIFwizqBcIjogXCImUGk7XCIsXG5cdCAgICAgICAgICAgIFwizqFcIjogXCImUmhvO1wiLFxuXHQgICAgICAgICAgICBcIs6jXCI6IFwiJlNpZ21hO1wiLFxuXHQgICAgICAgICAgICBcIs6kXCI6IFwiJlRhdTtcIixcblx0ICAgICAgICAgICAgXCLOpVwiOiBcIiZVcHNpbG9uO1wiLFxuXHQgICAgICAgICAgICBcIs6mXCI6IFwiJlBoaTtcIixcblx0ICAgICAgICAgICAgXCLOp1wiOiBcIiZDaGk7XCIsXG5cdCAgICAgICAgICAgIFwizqhcIjogXCImUHNpO1wiLFxuXHQgICAgICAgICAgICBcIs6pXCI6IFwiJk9tZWdhO1wiLFxuXHQgICAgICAgICAgICBcIs6xXCI6IFwiJmFscGhhO1wiLFxuXHQgICAgICAgICAgICBcIs6yXCI6IFwiJmJldGE7XCIsXG5cdCAgICAgICAgICAgIFwizrNcIjogXCImZ2FtbWE7XCIsXG5cdCAgICAgICAgICAgIFwizrRcIjogXCImZGVsdGE7XCIsXG5cdCAgICAgICAgICAgIFwizrVcIjogXCImZXBzaWxvbjtcIixcblx0ICAgICAgICAgICAgXCLOtlwiOiBcIiZ6ZXRhO1wiLFxuXHQgICAgICAgICAgICBcIs63XCI6IFwiJmV0YTtcIixcblx0ICAgICAgICAgICAgXCLOuFwiOiBcIiZ0aGV0YTtcIixcblx0ICAgICAgICAgICAgXCLOuVwiOiBcIiZpb3RhO1wiLFxuXHQgICAgICAgICAgICBcIs66XCI6IFwiJmthcHBhO1wiLFxuXHQgICAgICAgICAgICBcIs67XCI6IFwiJmxhbWJkYTtcIixcblx0ICAgICAgICAgICAgXCLOvFwiOiBcIiZtdTtcIixcblx0ICAgICAgICAgICAgXCLOvVwiOiBcIiZudTtcIixcblx0ICAgICAgICAgICAgXCLOvlwiOiBcIiZ4aTtcIixcblx0ICAgICAgICAgICAgXCLOv1wiOiBcIiZvbWljcm9uO1wiLFxuXHQgICAgICAgICAgICBcIs+AXCI6IFwiJnBpO1wiLFxuXHQgICAgICAgICAgICBcIs+BXCI6IFwiJnJobztcIixcblx0ICAgICAgICAgICAgXCLPglwiOiBcIiZzaWdtYWY7XCIsXG5cdCAgICAgICAgICAgIFwiz4NcIjogXCImc2lnbWE7XCIsXG5cdCAgICAgICAgICAgIFwiz4RcIjogXCImdGF1O1wiLFxuXHQgICAgICAgICAgICBcIs+FXCI6IFwiJnVwc2lsb247XCIsXG5cdCAgICAgICAgICAgIFwiz4ZcIjogXCImcGhpO1wiLFxuXHQgICAgICAgICAgICBcIs+HXCI6IFwiJmNoaTtcIixcblx0ICAgICAgICAgICAgXCLPiFwiOiBcIiZwc2k7XCIsXG5cdCAgICAgICAgICAgIFwiz4lcIjogXCImb21lZ2E7XCIsXG5cdCAgICAgICAgICAgIFwiz5FcIjogXCImdGhldGFzeW07XCIsXG5cdCAgICAgICAgICAgIFwiz5JcIjogXCImdXBzaWg7XCIsXG5cdCAgICAgICAgICAgIFwiz5ZcIjogXCImcGl2O1wiLFxuXHQgICAgICAgICAgICBcIuKAolwiOiBcIiZidWxsO1wiLFxuXHQgICAgICAgICAgICBcIuKAplwiOiBcIiZoZWxsaXA7XCIsXG5cdCAgICAgICAgICAgIFwi4oCyXCI6IFwiJnByaW1lO1wiLFxuXHQgICAgICAgICAgICBcIuKAs1wiOiBcIiZQcmltZTtcIixcblx0ICAgICAgICAgICAgXCLigL5cIjogXCImb2xpbmU7XCIsXG5cdCAgICAgICAgICAgIFwi4oGEXCI6IFwiJmZyYXNsO1wiLFxuXHQgICAgICAgICAgICBcIuKEmFwiOiBcIiZ3ZWllcnA7XCIsXG5cdCAgICAgICAgICAgIFwi4oSRXCI6IFwiJmltYWdlO1wiLFxuXHQgICAgICAgICAgICBcIuKEnFwiOiBcIiZyZWFsO1wiLFxuXHQgICAgICAgICAgICBcIuKEolwiOiBcIiZ0cmFkZTtcIixcblx0ICAgICAgICAgICAgXCLihLVcIjogXCImYWxlZnN5bTtcIixcblx0ICAgICAgICAgICAgXCLihpBcIjogXCImbGFycjtcIixcblx0ICAgICAgICAgICAgXCLihpFcIjogXCImdWFycjtcIixcblx0ICAgICAgICAgICAgXCLihpJcIjogXCImcmFycjtcIixcblx0ICAgICAgICAgICAgXCLihpNcIjogXCImZGFycjtcIixcblx0ICAgICAgICAgICAgXCLihpRcIjogXCImaGFycjtcIixcblx0ICAgICAgICAgICAgXCLihrVcIjogXCImY3JhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oeQXCI6IFwiJmxBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oeRXCI6IFwiJnVBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oeSXCI6IFwiJnJBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oeTXCI6IFwiJmRBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oeUXCI6IFwiJmhBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oiAXCI6IFwiJmZvcmFsbDtcIixcblx0ICAgICAgICAgICAgXCLiiIJcIjogXCImcGFydDtcIixcblx0ICAgICAgICAgICAgXCLiiINcIjogXCImZXhpc3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4oiFXCI6IFwiJmVtcHR5O1wiLFxuXHQgICAgICAgICAgICBcIuKIh1wiOiBcIiZuYWJsYTtcIixcblx0ICAgICAgICAgICAgXCLiiIhcIjogXCImaXNpbjtcIixcblx0ICAgICAgICAgICAgXCLiiIlcIjogXCImbm90aW47XCIsXG5cdCAgICAgICAgICAgIFwi4oiLXCI6IFwiJm5pO1wiLFxuXHQgICAgICAgICAgICBcIuKIj1wiOiBcIiZwcm9kO1wiLFxuXHQgICAgICAgICAgICBcIuKIkVwiOiBcIiZzdW07XCIsXG5cdCAgICAgICAgICAgIFwi4oiSXCI6IFwiJm1pbnVzO1wiLFxuXHQgICAgICAgICAgICBcIuKIl1wiOiBcIiZsb3dhc3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4oiaXCI6IFwiJnJhZGljO1wiLFxuXHQgICAgICAgICAgICBcIuKInVwiOiBcIiZwcm9wO1wiLFxuXHQgICAgICAgICAgICBcIuKInlwiOiBcIiZpbmZpbjtcIixcblx0ICAgICAgICAgICAgXCLiiKBcIjogXCImYW5nO1wiLFxuXHQgICAgICAgICAgICBcIuKIp1wiOiBcIiZhbmQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oioXCI6IFwiJm9yO1wiLFxuXHQgICAgICAgICAgICBcIuKIqVwiOiBcIiZjYXA7XCIsXG5cdCAgICAgICAgICAgIFwi4oiqXCI6IFwiJmN1cDtcIixcblx0ICAgICAgICAgICAgXCLiiKtcIjogXCImaW50O1wiLFxuXHQgICAgICAgICAgICBcIuKItFwiOiBcIiZ0aGVyZTQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oi8XCI6IFwiJnNpbTtcIixcblx0ICAgICAgICAgICAgXCLiiYVcIjogXCImY29uZztcIixcblx0ICAgICAgICAgICAgXCLiiYhcIjogXCImYXN5bXA7XCIsXG5cdCAgICAgICAgICAgIFwi4omgXCI6IFwiJm5lO1wiLFxuXHQgICAgICAgICAgICBcIuKJoVwiOiBcIiZlcXVpdjtcIixcblx0ICAgICAgICAgICAgXCLiiaRcIjogXCImbGU7XCIsXG5cdCAgICAgICAgICAgIFwi4omlXCI6IFwiJmdlO1wiLFxuXHQgICAgICAgICAgICBcIuKKglwiOiBcIiZzdWI7XCIsXG5cdCAgICAgICAgICAgIFwi4oqDXCI6IFwiJnN1cDtcIixcblx0ICAgICAgICAgICAgXCLiioRcIjogXCImbnN1YjtcIixcblx0ICAgICAgICAgICAgXCLiioZcIjogXCImc3ViZTtcIixcblx0ICAgICAgICAgICAgXCLiiodcIjogXCImc3VwZTtcIixcblx0ICAgICAgICAgICAgXCLiipVcIjogXCImb3BsdXM7XCIsXG5cdCAgICAgICAgICAgIFwi4oqXXCI6IFwiJm90aW1lcztcIixcblx0ICAgICAgICAgICAgXCLiiqVcIjogXCImcGVycDtcIixcblx0ICAgICAgICAgICAgXCLii4VcIjogXCImc2RvdDtcIixcblx0ICAgICAgICAgICAgXCLijIhcIjogXCImbGNlaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oyJXCI6IFwiJnJjZWlsO1wiLFxuXHQgICAgICAgICAgICBcIuKMilwiOiBcIiZsZmxvb3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oyLXCI6IFwiJnJmbG9vcjtcIixcblx0ICAgICAgICAgICAgXCLijKlcIjogXCImbGFuZztcIixcblx0ICAgICAgICAgICAgXCLijKpcIjogXCImcmFuZztcIixcblx0ICAgICAgICAgICAgXCLil4pcIjogXCImbG96O1wiLFxuXHQgICAgICAgICAgICBcIuKZoFwiOiBcIiZzcGFkZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4pmjXCI6IFwiJmNsdWJzO1wiLFxuXHQgICAgICAgICAgICBcIuKZpVwiOiBcIiZoZWFydHM7XCIsXG5cdCAgICAgICAgICAgIFwi4pmmXCI6IFwiJmRpYW1zO1wiXG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGh0bWw1OiB7XG5cdCAgICAgICAgZW50aXRpZXM6IHtcblx0ICAgICAgICAgICAgXCImQUVsaWdcIjogXCLDhlwiLFxuXHQgICAgICAgICAgICBcIiZBRWxpZztcIjogXCLDhlwiLFxuXHQgICAgICAgICAgICBcIiZBTVBcIjogXCImXCIsXG5cdCAgICAgICAgICAgIFwiJkFNUDtcIjogXCImXCIsXG5cdCAgICAgICAgICAgIFwiJkFhY3V0ZVwiOiBcIsOBXCIsXG5cdCAgICAgICAgICAgIFwiJkFhY3V0ZTtcIjogXCLDgVwiLFxuXHQgICAgICAgICAgICBcIiZBYnJldmU7XCI6IFwixIJcIixcblx0ICAgICAgICAgICAgXCImQWNpcmNcIjogXCLDglwiLFxuXHQgICAgICAgICAgICBcIiZBY2lyYztcIjogXCLDglwiLFxuXHQgICAgICAgICAgICBcIiZBY3k7XCI6IFwi0JBcIixcblx0ICAgICAgICAgICAgXCImQWZyO1wiOiBcIvCdlIRcIixcblx0ICAgICAgICAgICAgXCImQWdyYXZlXCI6IFwiw4BcIixcblx0ICAgICAgICAgICAgXCImQWdyYXZlO1wiOiBcIsOAXCIsXG5cdCAgICAgICAgICAgIFwiJkFscGhhO1wiOiBcIs6RXCIsXG5cdCAgICAgICAgICAgIFwiJkFtYWNyO1wiOiBcIsSAXCIsXG5cdCAgICAgICAgICAgIFwiJkFuZDtcIjogXCLiqZNcIixcblx0ICAgICAgICAgICAgXCImQW9nb247XCI6IFwixIRcIixcblx0ICAgICAgICAgICAgXCImQW9wZjtcIjogXCLwnZS4XCIsXG5cdCAgICAgICAgICAgIFwiJkFwcGx5RnVuY3Rpb247XCI6IFwi4oGhXCIsXG5cdCAgICAgICAgICAgIFwiJkFyaW5nXCI6IFwiw4VcIixcblx0ICAgICAgICAgICAgXCImQXJpbmc7XCI6IFwiw4VcIixcblx0ICAgICAgICAgICAgXCImQXNjcjtcIjogXCLwnZKcXCIsXG5cdCAgICAgICAgICAgIFwiJkFzc2lnbjtcIjogXCLiiZRcIixcblx0ICAgICAgICAgICAgXCImQXRpbGRlXCI6IFwiw4NcIixcblx0ICAgICAgICAgICAgXCImQXRpbGRlO1wiOiBcIsODXCIsXG5cdCAgICAgICAgICAgIFwiJkF1bWxcIjogXCLDhFwiLFxuXHQgICAgICAgICAgICBcIiZBdW1sO1wiOiBcIsOEXCIsXG5cdCAgICAgICAgICAgIFwiJkJhY2tzbGFzaDtcIjogXCLiiJZcIixcblx0ICAgICAgICAgICAgXCImQmFydjtcIjogXCLiq6dcIixcblx0ICAgICAgICAgICAgXCImQmFyd2VkO1wiOiBcIuKMhlwiLFxuXHQgICAgICAgICAgICBcIiZCY3k7XCI6IFwi0JFcIixcblx0ICAgICAgICAgICAgXCImQmVjYXVzZTtcIjogXCLiiLVcIixcblx0ICAgICAgICAgICAgXCImQmVybm91bGxpcztcIjogXCLihKxcIixcblx0ICAgICAgICAgICAgXCImQmV0YTtcIjogXCLOklwiLFxuXHQgICAgICAgICAgICBcIiZCZnI7XCI6IFwi8J2UhVwiLFxuXHQgICAgICAgICAgICBcIiZCb3BmO1wiOiBcIvCdlLlcIixcblx0ICAgICAgICAgICAgXCImQnJldmU7XCI6IFwiy5hcIixcblx0ICAgICAgICAgICAgXCImQnNjcjtcIjogXCLihKxcIixcblx0ICAgICAgICAgICAgXCImQnVtcGVxO1wiOiBcIuKJjlwiLFxuXHQgICAgICAgICAgICBcIiZDSGN5O1wiOiBcItCnXCIsXG5cdCAgICAgICAgICAgIFwiJkNPUFlcIjogXCLCqVwiLFxuXHQgICAgICAgICAgICBcIiZDT1BZO1wiOiBcIsKpXCIsXG5cdCAgICAgICAgICAgIFwiJkNhY3V0ZTtcIjogXCLEhlwiLFxuXHQgICAgICAgICAgICBcIiZDYXA7XCI6IFwi4ouSXCIsXG5cdCAgICAgICAgICAgIFwiJkNhcGl0YWxEaWZmZXJlbnRpYWxEO1wiOiBcIuKFhVwiLFxuXHQgICAgICAgICAgICBcIiZDYXlsZXlzO1wiOiBcIuKErVwiLFxuXHQgICAgICAgICAgICBcIiZDY2Fyb247XCI6IFwixIxcIixcblx0ICAgICAgICAgICAgXCImQ2NlZGlsXCI6IFwiw4dcIixcblx0ICAgICAgICAgICAgXCImQ2NlZGlsO1wiOiBcIsOHXCIsXG5cdCAgICAgICAgICAgIFwiJkNjaXJjO1wiOiBcIsSIXCIsXG5cdCAgICAgICAgICAgIFwiJkNjb25pbnQ7XCI6IFwi4oiwXCIsXG5cdCAgICAgICAgICAgIFwiJkNkb3Q7XCI6IFwixIpcIixcblx0ICAgICAgICAgICAgXCImQ2VkaWxsYTtcIjogXCLCuFwiLFxuXHQgICAgICAgICAgICBcIiZDZW50ZXJEb3Q7XCI6IFwiwrdcIixcblx0ICAgICAgICAgICAgXCImQ2ZyO1wiOiBcIuKErVwiLFxuXHQgICAgICAgICAgICBcIiZDaGk7XCI6IFwizqdcIixcblx0ICAgICAgICAgICAgXCImQ2lyY2xlRG90O1wiOiBcIuKKmVwiLFxuXHQgICAgICAgICAgICBcIiZDaXJjbGVNaW51cztcIjogXCLiipZcIixcblx0ICAgICAgICAgICAgXCImQ2lyY2xlUGx1cztcIjogXCLiipVcIixcblx0ICAgICAgICAgICAgXCImQ2lyY2xlVGltZXM7XCI6IFwi4oqXXCIsXG5cdCAgICAgICAgICAgIFwiJkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjogXCLiiLJcIixcblx0ICAgICAgICAgICAgXCImQ2xvc2VDdXJseURvdWJsZVF1b3RlO1wiOiBcIuKAnVwiLFxuXHQgICAgICAgICAgICBcIiZDbG9zZUN1cmx5UXVvdGU7XCI6IFwi4oCZXCIsXG5cdCAgICAgICAgICAgIFwiJkNvbG9uO1wiOiBcIuKIt1wiLFxuXHQgICAgICAgICAgICBcIiZDb2xvbmU7XCI6IFwi4qm0XCIsXG5cdCAgICAgICAgICAgIFwiJkNvbmdydWVudDtcIjogXCLiiaFcIixcblx0ICAgICAgICAgICAgXCImQ29uaW50O1wiOiBcIuKIr1wiLFxuXHQgICAgICAgICAgICBcIiZDb250b3VySW50ZWdyYWw7XCI6IFwi4oiuXCIsXG5cdCAgICAgICAgICAgIFwiJkNvcGY7XCI6IFwi4oSCXCIsXG5cdCAgICAgICAgICAgIFwiJkNvcHJvZHVjdDtcIjogXCLiiJBcIixcblx0ICAgICAgICAgICAgXCImQ291bnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjogXCLiiLNcIixcblx0ICAgICAgICAgICAgXCImQ3Jvc3M7XCI6IFwi4qivXCIsXG5cdCAgICAgICAgICAgIFwiJkNzY3I7XCI6IFwi8J2SnlwiLFxuXHQgICAgICAgICAgICBcIiZDdXA7XCI6IFwi4ouTXCIsXG5cdCAgICAgICAgICAgIFwiJkN1cENhcDtcIjogXCLiiY1cIixcblx0ICAgICAgICAgICAgXCImREQ7XCI6IFwi4oWFXCIsXG5cdCAgICAgICAgICAgIFwiJkREb3RyYWhkO1wiOiBcIuKkkVwiLFxuXHQgICAgICAgICAgICBcIiZESmN5O1wiOiBcItCCXCIsXG5cdCAgICAgICAgICAgIFwiJkRTY3k7XCI6IFwi0IVcIixcblx0ICAgICAgICAgICAgXCImRFpjeTtcIjogXCLQj1wiLFxuXHQgICAgICAgICAgICBcIiZEYWdnZXI7XCI6IFwi4oChXCIsXG5cdCAgICAgICAgICAgIFwiJkRhcnI7XCI6IFwi4oahXCIsXG5cdCAgICAgICAgICAgIFwiJkRhc2h2O1wiOiBcIuKrpFwiLFxuXHQgICAgICAgICAgICBcIiZEY2Fyb247XCI6IFwixI5cIixcblx0ICAgICAgICAgICAgXCImRGN5O1wiOiBcItCUXCIsXG5cdCAgICAgICAgICAgIFwiJkRlbDtcIjogXCLiiIdcIixcblx0ICAgICAgICAgICAgXCImRGVsdGE7XCI6IFwizpRcIixcblx0ICAgICAgICAgICAgXCImRGZyO1wiOiBcIvCdlIdcIixcblx0ICAgICAgICAgICAgXCImRGlhY3JpdGljYWxBY3V0ZTtcIjogXCLCtFwiLFxuXHQgICAgICAgICAgICBcIiZEaWFjcml0aWNhbERvdDtcIjogXCLLmVwiLFxuXHQgICAgICAgICAgICBcIiZEaWFjcml0aWNhbERvdWJsZUFjdXRlO1wiOiBcIsudXCIsXG5cdCAgICAgICAgICAgIFwiJkRpYWNyaXRpY2FsR3JhdmU7XCI6IFwiYFwiLFxuXHQgICAgICAgICAgICBcIiZEaWFjcml0aWNhbFRpbGRlO1wiOiBcIsucXCIsXG5cdCAgICAgICAgICAgIFwiJkRpYW1vbmQ7XCI6IFwi4ouEXCIsXG5cdCAgICAgICAgICAgIFwiJkRpZmZlcmVudGlhbEQ7XCI6IFwi4oWGXCIsXG5cdCAgICAgICAgICAgIFwiJkRvcGY7XCI6IFwi8J2Uu1wiLFxuXHQgICAgICAgICAgICBcIiZEb3Q7XCI6IFwiwqhcIixcblx0ICAgICAgICAgICAgXCImRG90RG90O1wiOiBcIuKDnFwiLFxuXHQgICAgICAgICAgICBcIiZEb3RFcXVhbDtcIjogXCLiiZBcIixcblx0ICAgICAgICAgICAgXCImRG91YmxlQ29udG91ckludGVncmFsO1wiOiBcIuKIr1wiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVEb3Q7XCI6IFwiwqhcIixcblx0ICAgICAgICAgICAgXCImRG91YmxlRG93bkFycm93O1wiOiBcIuKHk1wiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVMZWZ0QXJyb3c7XCI6IFwi4oeQXCIsXG5cdCAgICAgICAgICAgIFwiJkRvdWJsZUxlZnRSaWdodEFycm93O1wiOiBcIuKHlFwiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVMZWZ0VGVlO1wiOiBcIuKrpFwiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVMb25nTGVmdEFycm93O1wiOiBcIuKfuFwiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3c7XCI6IFwi4p+6XCIsXG5cdCAgICAgICAgICAgIFwiJkRvdWJsZUxvbmdSaWdodEFycm93O1wiOiBcIuKfuVwiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVSaWdodEFycm93O1wiOiBcIuKHklwiLFxuXHQgICAgICAgICAgICBcIiZEb3VibGVSaWdodFRlZTtcIjogXCLiiqhcIixcblx0ICAgICAgICAgICAgXCImRG91YmxlVXBBcnJvdztcIjogXCLih5FcIixcblx0ICAgICAgICAgICAgXCImRG91YmxlVXBEb3duQXJyb3c7XCI6IFwi4oeVXCIsXG5cdCAgICAgICAgICAgIFwiJkRvdWJsZVZlcnRpY2FsQmFyO1wiOiBcIuKIpVwiLFxuXHQgICAgICAgICAgICBcIiZEb3duQXJyb3c7XCI6IFwi4oaTXCIsXG5cdCAgICAgICAgICAgIFwiJkRvd25BcnJvd0JhcjtcIjogXCLipJNcIixcblx0ICAgICAgICAgICAgXCImRG93bkFycm93VXBBcnJvdztcIjogXCLih7VcIixcblx0ICAgICAgICAgICAgXCImRG93bkJyZXZlO1wiOiBcIsyRXCIsXG5cdCAgICAgICAgICAgIFwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCI6IFwi4qWQXCIsXG5cdCAgICAgICAgICAgIFwiJkRvd25MZWZ0VGVlVmVjdG9yO1wiOiBcIuKlnlwiLFxuXHQgICAgICAgICAgICBcIiZEb3duTGVmdFZlY3RvcjtcIjogXCLihr1cIixcblx0ICAgICAgICAgICAgXCImRG93bkxlZnRWZWN0b3JCYXI7XCI6IFwi4qWWXCIsXG5cdCAgICAgICAgICAgIFwiJkRvd25SaWdodFRlZVZlY3RvcjtcIjogXCLipZ9cIixcblx0ICAgICAgICAgICAgXCImRG93blJpZ2h0VmVjdG9yO1wiOiBcIuKHgVwiLFxuXHQgICAgICAgICAgICBcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCI6IFwi4qWXXCIsXG5cdCAgICAgICAgICAgIFwiJkRvd25UZWU7XCI6IFwi4oqkXCIsXG5cdCAgICAgICAgICAgIFwiJkRvd25UZWVBcnJvdztcIjogXCLihqdcIixcblx0ICAgICAgICAgICAgXCImRG93bmFycm93O1wiOiBcIuKHk1wiLFxuXHQgICAgICAgICAgICBcIiZEc2NyO1wiOiBcIvCdkp9cIixcblx0ICAgICAgICAgICAgXCImRHN0cm9rO1wiOiBcIsSQXCIsXG5cdCAgICAgICAgICAgIFwiJkVORztcIjogXCLFilwiLFxuXHQgICAgICAgICAgICBcIiZFVEhcIjogXCLDkFwiLFxuXHQgICAgICAgICAgICBcIiZFVEg7XCI6IFwiw5BcIixcblx0ICAgICAgICAgICAgXCImRWFjdXRlXCI6IFwiw4lcIixcblx0ICAgICAgICAgICAgXCImRWFjdXRlO1wiOiBcIsOJXCIsXG5cdCAgICAgICAgICAgIFwiJkVjYXJvbjtcIjogXCLEmlwiLFxuXHQgICAgICAgICAgICBcIiZFY2lyY1wiOiBcIsOKXCIsXG5cdCAgICAgICAgICAgIFwiJkVjaXJjO1wiOiBcIsOKXCIsXG5cdCAgICAgICAgICAgIFwiJkVjeTtcIjogXCLQrVwiLFxuXHQgICAgICAgICAgICBcIiZFZG90O1wiOiBcIsSWXCIsXG5cdCAgICAgICAgICAgIFwiJkVmcjtcIjogXCLwnZSIXCIsXG5cdCAgICAgICAgICAgIFwiJkVncmF2ZVwiOiBcIsOIXCIsXG5cdCAgICAgICAgICAgIFwiJkVncmF2ZTtcIjogXCLDiFwiLFxuXHQgICAgICAgICAgICBcIiZFbGVtZW50O1wiOiBcIuKIiFwiLFxuXHQgICAgICAgICAgICBcIiZFbWFjcjtcIjogXCLEklwiLFxuXHQgICAgICAgICAgICBcIiZFbXB0eVNtYWxsU3F1YXJlO1wiOiBcIuKXu1wiLFxuXHQgICAgICAgICAgICBcIiZFbXB0eVZlcnlTbWFsbFNxdWFyZTtcIjogXCLilqtcIixcblx0ICAgICAgICAgICAgXCImRW9nb247XCI6IFwixJhcIixcblx0ICAgICAgICAgICAgXCImRW9wZjtcIjogXCLwnZS8XCIsXG5cdCAgICAgICAgICAgIFwiJkVwc2lsb247XCI6IFwizpVcIixcblx0ICAgICAgICAgICAgXCImRXF1YWw7XCI6IFwi4qm1XCIsXG5cdCAgICAgICAgICAgIFwiJkVxdWFsVGlsZGU7XCI6IFwi4omCXCIsXG5cdCAgICAgICAgICAgIFwiJkVxdWlsaWJyaXVtO1wiOiBcIuKHjFwiLFxuXHQgICAgICAgICAgICBcIiZFc2NyO1wiOiBcIuKEsFwiLFxuXHQgICAgICAgICAgICBcIiZFc2ltO1wiOiBcIuKps1wiLFxuXHQgICAgICAgICAgICBcIiZFdGE7XCI6IFwizpdcIixcblx0ICAgICAgICAgICAgXCImRXVtbFwiOiBcIsOLXCIsXG5cdCAgICAgICAgICAgIFwiJkV1bWw7XCI6IFwiw4tcIixcblx0ICAgICAgICAgICAgXCImRXhpc3RzO1wiOiBcIuKIg1wiLFxuXHQgICAgICAgICAgICBcIiZFeHBvbmVudGlhbEU7XCI6IFwi4oWHXCIsXG5cdCAgICAgICAgICAgIFwiJkZjeTtcIjogXCLQpFwiLFxuXHQgICAgICAgICAgICBcIiZGZnI7XCI6IFwi8J2UiVwiLFxuXHQgICAgICAgICAgICBcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIjogXCLil7xcIixcblx0ICAgICAgICAgICAgXCImRmlsbGVkVmVyeVNtYWxsU3F1YXJlO1wiOiBcIuKWqlwiLFxuXHQgICAgICAgICAgICBcIiZGb3BmO1wiOiBcIvCdlL1cIixcblx0ICAgICAgICAgICAgXCImRm9yQWxsO1wiOiBcIuKIgFwiLFxuXHQgICAgICAgICAgICBcIiZGb3VyaWVydHJmO1wiOiBcIuKEsVwiLFxuXHQgICAgICAgICAgICBcIiZGc2NyO1wiOiBcIuKEsVwiLFxuXHQgICAgICAgICAgICBcIiZHSmN5O1wiOiBcItCDXCIsXG5cdCAgICAgICAgICAgIFwiJkdUXCI6IFwiPlwiLFxuXHQgICAgICAgICAgICBcIiZHVDtcIjogXCI+XCIsXG5cdCAgICAgICAgICAgIFwiJkdhbW1hO1wiOiBcIs6TXCIsXG5cdCAgICAgICAgICAgIFwiJkdhbW1hZDtcIjogXCLPnFwiLFxuXHQgICAgICAgICAgICBcIiZHYnJldmU7XCI6IFwixJ5cIixcblx0ICAgICAgICAgICAgXCImR2NlZGlsO1wiOiBcIsSiXCIsXG5cdCAgICAgICAgICAgIFwiJkdjaXJjO1wiOiBcIsScXCIsXG5cdCAgICAgICAgICAgIFwiJkdjeTtcIjogXCLQk1wiLFxuXHQgICAgICAgICAgICBcIiZHZG90O1wiOiBcIsSgXCIsXG5cdCAgICAgICAgICAgIFwiJkdmcjtcIjogXCLwnZSKXCIsXG5cdCAgICAgICAgICAgIFwiJkdnO1wiOiBcIuKLmVwiLFxuXHQgICAgICAgICAgICBcIiZHb3BmO1wiOiBcIvCdlL5cIixcblx0ICAgICAgICAgICAgXCImR3JlYXRlckVxdWFsO1wiOiBcIuKJpVwiLFxuXHQgICAgICAgICAgICBcIiZHcmVhdGVyRXF1YWxMZXNzO1wiOiBcIuKLm1wiLFxuXHQgICAgICAgICAgICBcIiZHcmVhdGVyRnVsbEVxdWFsO1wiOiBcIuKJp1wiLFxuXHQgICAgICAgICAgICBcIiZHcmVhdGVyR3JlYXRlcjtcIjogXCLiqqJcIixcblx0ICAgICAgICAgICAgXCImR3JlYXRlckxlc3M7XCI6IFwi4om3XCIsXG5cdCAgICAgICAgICAgIFwiJkdyZWF0ZXJTbGFudEVxdWFsO1wiOiBcIuKpvlwiLFxuXHQgICAgICAgICAgICBcIiZHcmVhdGVyVGlsZGU7XCI6IFwi4omzXCIsXG5cdCAgICAgICAgICAgIFwiJkdzY3I7XCI6IFwi8J2SolwiLFxuXHQgICAgICAgICAgICBcIiZHdDtcIjogXCLiiatcIixcblx0ICAgICAgICAgICAgXCImSEFSRGN5O1wiOiBcItCqXCIsXG5cdCAgICAgICAgICAgIFwiJkhhY2VrO1wiOiBcIsuHXCIsXG5cdCAgICAgICAgICAgIFwiJkhhdDtcIjogXCJeXCIsXG5cdCAgICAgICAgICAgIFwiJkhjaXJjO1wiOiBcIsSkXCIsXG5cdCAgICAgICAgICAgIFwiJkhmcjtcIjogXCLihIxcIixcblx0ICAgICAgICAgICAgXCImSGlsYmVydFNwYWNlO1wiOiBcIuKEi1wiLFxuXHQgICAgICAgICAgICBcIiZIb3BmO1wiOiBcIuKEjVwiLFxuXHQgICAgICAgICAgICBcIiZIb3Jpem9udGFsTGluZTtcIjogXCLilIBcIixcblx0ICAgICAgICAgICAgXCImSHNjcjtcIjogXCLihItcIixcblx0ICAgICAgICAgICAgXCImSHN0cm9rO1wiOiBcIsSmXCIsXG5cdCAgICAgICAgICAgIFwiJkh1bXBEb3duSHVtcDtcIjogXCLiiY5cIixcblx0ICAgICAgICAgICAgXCImSHVtcEVxdWFsO1wiOiBcIuKJj1wiLFxuXHQgICAgICAgICAgICBcIiZJRWN5O1wiOiBcItCVXCIsXG5cdCAgICAgICAgICAgIFwiJklKbGlnO1wiOiBcIsSyXCIsXG5cdCAgICAgICAgICAgIFwiJklPY3k7XCI6IFwi0IFcIixcblx0ICAgICAgICAgICAgXCImSWFjdXRlXCI6IFwiw41cIixcblx0ICAgICAgICAgICAgXCImSWFjdXRlO1wiOiBcIsONXCIsXG5cdCAgICAgICAgICAgIFwiJkljaXJjXCI6IFwiw45cIixcblx0ICAgICAgICAgICAgXCImSWNpcmM7XCI6IFwiw45cIixcblx0ICAgICAgICAgICAgXCImSWN5O1wiOiBcItCYXCIsXG5cdCAgICAgICAgICAgIFwiJklkb3Q7XCI6IFwixLBcIixcblx0ICAgICAgICAgICAgXCImSWZyO1wiOiBcIuKEkVwiLFxuXHQgICAgICAgICAgICBcIiZJZ3JhdmVcIjogXCLDjFwiLFxuXHQgICAgICAgICAgICBcIiZJZ3JhdmU7XCI6IFwiw4xcIixcblx0ICAgICAgICAgICAgXCImSW07XCI6IFwi4oSRXCIsXG5cdCAgICAgICAgICAgIFwiJkltYWNyO1wiOiBcIsSqXCIsXG5cdCAgICAgICAgICAgIFwiJkltYWdpbmFyeUk7XCI6IFwi4oWIXCIsXG5cdCAgICAgICAgICAgIFwiJkltcGxpZXM7XCI6IFwi4oeSXCIsXG5cdCAgICAgICAgICAgIFwiJkludDtcIjogXCLiiKxcIixcblx0ICAgICAgICAgICAgXCImSW50ZWdyYWw7XCI6IFwi4oirXCIsXG5cdCAgICAgICAgICAgIFwiJkludGVyc2VjdGlvbjtcIjogXCLii4JcIixcblx0ICAgICAgICAgICAgXCImSW52aXNpYmxlQ29tbWE7XCI6IFwi4oGjXCIsXG5cdCAgICAgICAgICAgIFwiJkludmlzaWJsZVRpbWVzO1wiOiBcIuKBolwiLFxuXHQgICAgICAgICAgICBcIiZJb2dvbjtcIjogXCLErlwiLFxuXHQgICAgICAgICAgICBcIiZJb3BmO1wiOiBcIvCdlYBcIixcblx0ICAgICAgICAgICAgXCImSW90YTtcIjogXCLOmVwiLFxuXHQgICAgICAgICAgICBcIiZJc2NyO1wiOiBcIuKEkFwiLFxuXHQgICAgICAgICAgICBcIiZJdGlsZGU7XCI6IFwixKhcIixcblx0ICAgICAgICAgICAgXCImSXVrY3k7XCI6IFwi0IZcIixcblx0ICAgICAgICAgICAgXCImSXVtbFwiOiBcIsOPXCIsXG5cdCAgICAgICAgICAgIFwiJkl1bWw7XCI6IFwiw49cIixcblx0ICAgICAgICAgICAgXCImSmNpcmM7XCI6IFwixLRcIixcblx0ICAgICAgICAgICAgXCImSmN5O1wiOiBcItCZXCIsXG5cdCAgICAgICAgICAgIFwiJkpmcjtcIjogXCLwnZSNXCIsXG5cdCAgICAgICAgICAgIFwiJkpvcGY7XCI6IFwi8J2VgVwiLFxuXHQgICAgICAgICAgICBcIiZKc2NyO1wiOiBcIvCdkqVcIixcblx0ICAgICAgICAgICAgXCImSnNlcmN5O1wiOiBcItCIXCIsXG5cdCAgICAgICAgICAgIFwiJkp1a2N5O1wiOiBcItCEXCIsXG5cdCAgICAgICAgICAgIFwiJktIY3k7XCI6IFwi0KVcIixcblx0ICAgICAgICAgICAgXCImS0pjeTtcIjogXCLQjFwiLFxuXHQgICAgICAgICAgICBcIiZLYXBwYTtcIjogXCLOmlwiLFxuXHQgICAgICAgICAgICBcIiZLY2VkaWw7XCI6IFwixLZcIixcblx0ICAgICAgICAgICAgXCImS2N5O1wiOiBcItCaXCIsXG5cdCAgICAgICAgICAgIFwiJktmcjtcIjogXCLwnZSOXCIsXG5cdCAgICAgICAgICAgIFwiJktvcGY7XCI6IFwi8J2VglwiLFxuXHQgICAgICAgICAgICBcIiZLc2NyO1wiOiBcIvCdkqZcIixcblx0ICAgICAgICAgICAgXCImTEpjeTtcIjogXCLQiVwiLFxuXHQgICAgICAgICAgICBcIiZMVFwiOiBcIjxcIixcblx0ICAgICAgICAgICAgXCImTFQ7XCI6IFwiPFwiLFxuXHQgICAgICAgICAgICBcIiZMYWN1dGU7XCI6IFwixLlcIixcblx0ICAgICAgICAgICAgXCImTGFtYmRhO1wiOiBcIs6bXCIsXG5cdCAgICAgICAgICAgIFwiJkxhbmc7XCI6IFwi4p+qXCIsXG5cdCAgICAgICAgICAgIFwiJkxhcGxhY2V0cmY7XCI6IFwi4oSSXCIsXG5cdCAgICAgICAgICAgIFwiJkxhcnI7XCI6IFwi4oaeXCIsXG5cdCAgICAgICAgICAgIFwiJkxjYXJvbjtcIjogXCLEvVwiLFxuXHQgICAgICAgICAgICBcIiZMY2VkaWw7XCI6IFwixLtcIixcblx0ICAgICAgICAgICAgXCImTGN5O1wiOiBcItCbXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRBbmdsZUJyYWNrZXQ7XCI6IFwi4p+oXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRBcnJvdztcIjogXCLihpBcIixcblx0ICAgICAgICAgICAgXCImTGVmdEFycm93QmFyO1wiOiBcIuKHpFwiLFxuXHQgICAgICAgICAgICBcIiZMZWZ0QXJyb3dSaWdodEFycm93O1wiOiBcIuKHhlwiLFxuXHQgICAgICAgICAgICBcIiZMZWZ0Q2VpbGluZztcIjogXCLijIhcIixcblx0ICAgICAgICAgICAgXCImTGVmdERvdWJsZUJyYWNrZXQ7XCI6IFwi4p+mXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnREb3duVGVlVmVjdG9yO1wiOiBcIuKloVwiLFxuXHQgICAgICAgICAgICBcIiZMZWZ0RG93blZlY3RvcjtcIjogXCLih4NcIixcblx0ICAgICAgICAgICAgXCImTGVmdERvd25WZWN0b3JCYXI7XCI6IFwi4qWZXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRGbG9vcjtcIjogXCLijIpcIixcblx0ICAgICAgICAgICAgXCImTGVmdFJpZ2h0QXJyb3c7XCI6IFwi4oaUXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRSaWdodFZlY3RvcjtcIjogXCLipY5cIixcblx0ICAgICAgICAgICAgXCImTGVmdFRlZTtcIjogXCLiiqNcIixcblx0ICAgICAgICAgICAgXCImTGVmdFRlZUFycm93O1wiOiBcIuKGpFwiLFxuXHQgICAgICAgICAgICBcIiZMZWZ0VGVlVmVjdG9yO1wiOiBcIuKlmlwiLFxuXHQgICAgICAgICAgICBcIiZMZWZ0VHJpYW5nbGU7XCI6IFwi4oqyXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRUcmlhbmdsZUJhcjtcIjogXCLip49cIixcblx0ICAgICAgICAgICAgXCImTGVmdFRyaWFuZ2xlRXF1YWw7XCI6IFwi4oq0XCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRVcERvd25WZWN0b3I7XCI6IFwi4qWRXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRVcFRlZVZlY3RvcjtcIjogXCLipaBcIixcblx0ICAgICAgICAgICAgXCImTGVmdFVwVmVjdG9yO1wiOiBcIuKGv1wiLFxuXHQgICAgICAgICAgICBcIiZMZWZ0VXBWZWN0b3JCYXI7XCI6IFwi4qWYXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRWZWN0b3I7XCI6IFwi4oa8XCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRWZWN0b3JCYXI7XCI6IFwi4qWSXCIsXG5cdCAgICAgICAgICAgIFwiJkxlZnRhcnJvdztcIjogXCLih5BcIixcblx0ICAgICAgICAgICAgXCImTGVmdHJpZ2h0YXJyb3c7XCI6IFwi4oeUXCIsXG5cdCAgICAgICAgICAgIFwiJkxlc3NFcXVhbEdyZWF0ZXI7XCI6IFwi4ouaXCIsXG5cdCAgICAgICAgICAgIFwiJkxlc3NGdWxsRXF1YWw7XCI6IFwi4ommXCIsXG5cdCAgICAgICAgICAgIFwiJkxlc3NHcmVhdGVyO1wiOiBcIuKJtlwiLFxuXHQgICAgICAgICAgICBcIiZMZXNzTGVzcztcIjogXCLiqqFcIixcblx0ICAgICAgICAgICAgXCImTGVzc1NsYW50RXF1YWw7XCI6IFwi4qm9XCIsXG5cdCAgICAgICAgICAgIFwiJkxlc3NUaWxkZTtcIjogXCLiibJcIixcblx0ICAgICAgICAgICAgXCImTGZyO1wiOiBcIvCdlI9cIixcblx0ICAgICAgICAgICAgXCImTGw7XCI6IFwi4ouYXCIsXG5cdCAgICAgICAgICAgIFwiJkxsZWZ0YXJyb3c7XCI6IFwi4oeaXCIsXG5cdCAgICAgICAgICAgIFwiJkxtaWRvdDtcIjogXCLEv1wiLFxuXHQgICAgICAgICAgICBcIiZMb25nTGVmdEFycm93O1wiOiBcIuKftVwiLFxuXHQgICAgICAgICAgICBcIiZMb25nTGVmdFJpZ2h0QXJyb3c7XCI6IFwi4p+3XCIsXG5cdCAgICAgICAgICAgIFwiJkxvbmdSaWdodEFycm93O1wiOiBcIuKftlwiLFxuXHQgICAgICAgICAgICBcIiZMb25nbGVmdGFycm93O1wiOiBcIuKfuFwiLFxuXHQgICAgICAgICAgICBcIiZMb25nbGVmdHJpZ2h0YXJyb3c7XCI6IFwi4p+6XCIsXG5cdCAgICAgICAgICAgIFwiJkxvbmdyaWdodGFycm93O1wiOiBcIuKfuVwiLFxuXHQgICAgICAgICAgICBcIiZMb3BmO1wiOiBcIvCdlYNcIixcblx0ICAgICAgICAgICAgXCImTG93ZXJMZWZ0QXJyb3c7XCI6IFwi4oaZXCIsXG5cdCAgICAgICAgICAgIFwiJkxvd2VyUmlnaHRBcnJvdztcIjogXCLihphcIixcblx0ICAgICAgICAgICAgXCImTHNjcjtcIjogXCLihJJcIixcblx0ICAgICAgICAgICAgXCImTHNoO1wiOiBcIuKGsFwiLFxuXHQgICAgICAgICAgICBcIiZMc3Ryb2s7XCI6IFwixYFcIixcblx0ICAgICAgICAgICAgXCImTHQ7XCI6IFwi4omqXCIsXG5cdCAgICAgICAgICAgIFwiJk1hcDtcIjogXCLipIVcIixcblx0ICAgICAgICAgICAgXCImTWN5O1wiOiBcItCcXCIsXG5cdCAgICAgICAgICAgIFwiJk1lZGl1bVNwYWNlO1wiOiBcIuKBn1wiLFxuXHQgICAgICAgICAgICBcIiZNZWxsaW50cmY7XCI6IFwi4oSzXCIsXG5cdCAgICAgICAgICAgIFwiJk1mcjtcIjogXCLwnZSQXCIsXG5cdCAgICAgICAgICAgIFwiJk1pbnVzUGx1cztcIjogXCLiiJNcIixcblx0ICAgICAgICAgICAgXCImTW9wZjtcIjogXCLwnZWEXCIsXG5cdCAgICAgICAgICAgIFwiJk1zY3I7XCI6IFwi4oSzXCIsXG5cdCAgICAgICAgICAgIFwiJk11O1wiOiBcIs6cXCIsXG5cdCAgICAgICAgICAgIFwiJk5KY3k7XCI6IFwi0IpcIixcblx0ICAgICAgICAgICAgXCImTmFjdXRlO1wiOiBcIsWDXCIsXG5cdCAgICAgICAgICAgIFwiJk5jYXJvbjtcIjogXCLFh1wiLFxuXHQgICAgICAgICAgICBcIiZOY2VkaWw7XCI6IFwixYVcIixcblx0ICAgICAgICAgICAgXCImTmN5O1wiOiBcItCdXCIsXG5cdCAgICAgICAgICAgIFwiJk5lZ2F0aXZlTWVkaXVtU3BhY2U7XCI6IFwi4oCLXCIsXG5cdCAgICAgICAgICAgIFwiJk5lZ2F0aXZlVGhpY2tTcGFjZTtcIjogXCLigItcIixcblx0ICAgICAgICAgICAgXCImTmVnYXRpdmVUaGluU3BhY2U7XCI6IFwi4oCLXCIsXG5cdCAgICAgICAgICAgIFwiJk5lZ2F0aXZlVmVyeVRoaW5TcGFjZTtcIjogXCLigItcIixcblx0ICAgICAgICAgICAgXCImTmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6IFwi4omrXCIsXG5cdCAgICAgICAgICAgIFwiJk5lc3RlZExlc3NMZXNzO1wiOiBcIuKJqlwiLFxuXHQgICAgICAgICAgICBcIiZOZXdMaW5lO1wiOiBcIlxcblwiLFxuXHQgICAgICAgICAgICBcIiZOZnI7XCI6IFwi8J2UkVwiLFxuXHQgICAgICAgICAgICBcIiZOb0JyZWFrO1wiOiBcIuKBoFwiLFxuXHQgICAgICAgICAgICBcIiZOb25CcmVha2luZ1NwYWNlO1wiOiBcIsKgXCIsXG5cdCAgICAgICAgICAgIFwiJk5vcGY7XCI6IFwi4oSVXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdDtcIjogXCLiq6xcIixcblx0ICAgICAgICAgICAgXCImTm90Q29uZ3J1ZW50O1wiOiBcIuKJolwiLFxuXHQgICAgICAgICAgICBcIiZOb3RDdXBDYXA7XCI6IFwi4omtXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiOiBcIuKIplwiLFxuXHQgICAgICAgICAgICBcIiZOb3RFbGVtZW50O1wiOiBcIuKIiVwiLFxuXHQgICAgICAgICAgICBcIiZOb3RFcXVhbDtcIjogXCLiiaBcIixcblx0ICAgICAgICAgICAgXCImTm90RXF1YWxUaWxkZTtcIjogXCLiiYLMuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RFeGlzdHM7XCI6IFwi4oiEXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdEdyZWF0ZXI7XCI6IFwi4omvXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdEdyZWF0ZXJFcXVhbDtcIjogXCLiibFcIixcblx0ICAgICAgICAgICAgXCImTm90R3JlYXRlckZ1bGxFcXVhbDtcIjogXCLiiafMuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RHcmVhdGVyR3JlYXRlcjtcIjogXCLiiavMuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RHcmVhdGVyTGVzcztcIjogXCLiiblcIixcblx0ICAgICAgICAgICAgXCImTm90R3JlYXRlclNsYW50RXF1YWw7XCI6IFwi4qm+zLhcIixcblx0ICAgICAgICAgICAgXCImTm90R3JlYXRlclRpbGRlO1wiOiBcIuKJtVwiLFxuXHQgICAgICAgICAgICBcIiZOb3RIdW1wRG93bkh1bXA7XCI6IFwi4omOzLhcIixcblx0ICAgICAgICAgICAgXCImTm90SHVtcEVxdWFsO1wiOiBcIuKJj8y4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdExlZnRUcmlhbmdsZTtcIjogXCLii6pcIixcblx0ICAgICAgICAgICAgXCImTm90TGVmdFRyaWFuZ2xlQmFyO1wiOiBcIuKnj8y4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdExlZnRUcmlhbmdsZUVxdWFsO1wiOiBcIuKLrFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RMZXNzO1wiOiBcIuKJrlwiLFxuXHQgICAgICAgICAgICBcIiZOb3RMZXNzRXF1YWw7XCI6IFwi4omwXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdExlc3NHcmVhdGVyO1wiOiBcIuKJuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RMZXNzTGVzcztcIjogXCLiiarMuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RMZXNzU2xhbnRFcXVhbDtcIjogXCLiqb3MuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RMZXNzVGlsZGU7XCI6IFwi4om0XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiOiBcIuKqosy4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdE5lc3RlZExlc3NMZXNzO1wiOiBcIuKqocy4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFByZWNlZGVzO1wiOiBcIuKKgFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RQcmVjZWRlc0VxdWFsO1wiOiBcIuKqr8y4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDtcIjogXCLii6BcIixcblx0ICAgICAgICAgICAgXCImTm90UmV2ZXJzZUVsZW1lbnQ7XCI6IFwi4oiMXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFJpZ2h0VHJpYW5nbGU7XCI6IFwi4ourXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7XCI6IFwi4qeQzLhcIixcblx0ICAgICAgICAgICAgXCImTm90UmlnaHRUcmlhbmdsZUVxdWFsO1wiOiBcIuKLrVwiLFxuXHQgICAgICAgICAgICBcIiZOb3RTcXVhcmVTdWJzZXQ7XCI6IFwi4oqPzLhcIixcblx0ICAgICAgICAgICAgXCImTm90U3F1YXJlU3Vic2V0RXF1YWw7XCI6IFwi4ouiXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFNxdWFyZVN1cGVyc2V0O1wiOiBcIuKKkMy4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFNxdWFyZVN1cGVyc2V0RXF1YWw7XCI6IFwi4oujXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFN1YnNldDtcIjogXCLiioLig5JcIixcblx0ICAgICAgICAgICAgXCImTm90U3Vic2V0RXF1YWw7XCI6IFwi4oqIXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFN1Y2NlZWRzO1wiOiBcIuKKgVwiLFxuXHQgICAgICAgICAgICBcIiZOb3RTdWNjZWVkc0VxdWFsO1wiOiBcIuKqsMy4XCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFN1Y2NlZWRzU2xhbnRFcXVhbDtcIjogXCLii6FcIixcblx0ICAgICAgICAgICAgXCImTm90U3VjY2VlZHNUaWxkZTtcIjogXCLiib/MuFwiLFxuXHQgICAgICAgICAgICBcIiZOb3RTdXBlcnNldDtcIjogXCLiioPig5JcIixcblx0ICAgICAgICAgICAgXCImTm90U3VwZXJzZXRFcXVhbDtcIjogXCLiiolcIixcblx0ICAgICAgICAgICAgXCImTm90VGlsZGU7XCI6IFwi4omBXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFRpbGRlRXF1YWw7XCI6IFwi4omEXCIsXG5cdCAgICAgICAgICAgIFwiJk5vdFRpbGRlRnVsbEVxdWFsO1wiOiBcIuKJh1wiLFxuXHQgICAgICAgICAgICBcIiZOb3RUaWxkZVRpbGRlO1wiOiBcIuKJiVwiLFxuXHQgICAgICAgICAgICBcIiZOb3RWZXJ0aWNhbEJhcjtcIjogXCLiiKRcIixcblx0ICAgICAgICAgICAgXCImTnNjcjtcIjogXCLwnZKpXCIsXG5cdCAgICAgICAgICAgIFwiJk50aWxkZVwiOiBcIsORXCIsXG5cdCAgICAgICAgICAgIFwiJk50aWxkZTtcIjogXCLDkVwiLFxuXHQgICAgICAgICAgICBcIiZOdTtcIjogXCLOnVwiLFxuXHQgICAgICAgICAgICBcIiZPRWxpZztcIjogXCLFklwiLFxuXHQgICAgICAgICAgICBcIiZPYWN1dGVcIjogXCLDk1wiLFxuXHQgICAgICAgICAgICBcIiZPYWN1dGU7XCI6IFwiw5NcIixcblx0ICAgICAgICAgICAgXCImT2NpcmNcIjogXCLDlFwiLFxuXHQgICAgICAgICAgICBcIiZPY2lyYztcIjogXCLDlFwiLFxuXHQgICAgICAgICAgICBcIiZPY3k7XCI6IFwi0J5cIixcblx0ICAgICAgICAgICAgXCImT2RibGFjO1wiOiBcIsWQXCIsXG5cdCAgICAgICAgICAgIFwiJk9mcjtcIjogXCLwnZSSXCIsXG5cdCAgICAgICAgICAgIFwiJk9ncmF2ZVwiOiBcIsOSXCIsXG5cdCAgICAgICAgICAgIFwiJk9ncmF2ZTtcIjogXCLDklwiLFxuXHQgICAgICAgICAgICBcIiZPbWFjcjtcIjogXCLFjFwiLFxuXHQgICAgICAgICAgICBcIiZPbWVnYTtcIjogXCLOqVwiLFxuXHQgICAgICAgICAgICBcIiZPbWljcm9uO1wiOiBcIs6fXCIsXG5cdCAgICAgICAgICAgIFwiJk9vcGY7XCI6IFwi8J2VhlwiLFxuXHQgICAgICAgICAgICBcIiZPcGVuQ3VybHlEb3VibGVRdW90ZTtcIjogXCLigJxcIixcblx0ICAgICAgICAgICAgXCImT3BlbkN1cmx5UXVvdGU7XCI6IFwi4oCYXCIsXG5cdCAgICAgICAgICAgIFwiJk9yO1wiOiBcIuKplFwiLFxuXHQgICAgICAgICAgICBcIiZPc2NyO1wiOiBcIvCdkqpcIixcblx0ICAgICAgICAgICAgXCImT3NsYXNoXCI6IFwiw5hcIixcblx0ICAgICAgICAgICAgXCImT3NsYXNoO1wiOiBcIsOYXCIsXG5cdCAgICAgICAgICAgIFwiJk90aWxkZVwiOiBcIsOVXCIsXG5cdCAgICAgICAgICAgIFwiJk90aWxkZTtcIjogXCLDlVwiLFxuXHQgICAgICAgICAgICBcIiZPdGltZXM7XCI6IFwi4qi3XCIsXG5cdCAgICAgICAgICAgIFwiJk91bWxcIjogXCLDllwiLFxuXHQgICAgICAgICAgICBcIiZPdW1sO1wiOiBcIsOWXCIsXG5cdCAgICAgICAgICAgIFwiJk92ZXJCYXI7XCI6IFwi4oC+XCIsXG5cdCAgICAgICAgICAgIFwiJk92ZXJCcmFjZTtcIjogXCLij55cIixcblx0ICAgICAgICAgICAgXCImT3ZlckJyYWNrZXQ7XCI6IFwi4o60XCIsXG5cdCAgICAgICAgICAgIFwiJk92ZXJQYXJlbnRoZXNpcztcIjogXCLij5xcIixcblx0ICAgICAgICAgICAgXCImUGFydGlhbEQ7XCI6IFwi4oiCXCIsXG5cdCAgICAgICAgICAgIFwiJlBjeTtcIjogXCLQn1wiLFxuXHQgICAgICAgICAgICBcIiZQZnI7XCI6IFwi8J2Uk1wiLFxuXHQgICAgICAgICAgICBcIiZQaGk7XCI6IFwizqZcIixcblx0ICAgICAgICAgICAgXCImUGk7XCI6IFwizqBcIixcblx0ICAgICAgICAgICAgXCImUGx1c01pbnVzO1wiOiBcIsKxXCIsXG5cdCAgICAgICAgICAgIFwiJlBvaW5jYXJlcGxhbmU7XCI6IFwi4oSMXCIsXG5cdCAgICAgICAgICAgIFwiJlBvcGY7XCI6IFwi4oSZXCIsXG5cdCAgICAgICAgICAgIFwiJlByO1wiOiBcIuKqu1wiLFxuXHQgICAgICAgICAgICBcIiZQcmVjZWRlcztcIjogXCLiibpcIixcblx0ICAgICAgICAgICAgXCImUHJlY2VkZXNFcXVhbDtcIjogXCLiqq9cIixcblx0ICAgICAgICAgICAgXCImUHJlY2VkZXNTbGFudEVxdWFsO1wiOiBcIuKJvFwiLFxuXHQgICAgICAgICAgICBcIiZQcmVjZWRlc1RpbGRlO1wiOiBcIuKJvlwiLFxuXHQgICAgICAgICAgICBcIiZQcmltZTtcIjogXCLigLNcIixcblx0ICAgICAgICAgICAgXCImUHJvZHVjdDtcIjogXCLiiI9cIixcblx0ICAgICAgICAgICAgXCImUHJvcG9ydGlvbjtcIjogXCLiiLdcIixcblx0ICAgICAgICAgICAgXCImUHJvcG9ydGlvbmFsO1wiOiBcIuKInVwiLFxuXHQgICAgICAgICAgICBcIiZQc2NyO1wiOiBcIvCdkqtcIixcblx0ICAgICAgICAgICAgXCImUHNpO1wiOiBcIs6oXCIsXG5cdCAgICAgICAgICAgIFwiJlFVT1RcIjogJ1wiJyxcblx0ICAgICAgICAgICAgXCImUVVPVDtcIjogJ1wiJyxcblx0ICAgICAgICAgICAgXCImUWZyO1wiOiBcIvCdlJRcIixcblx0ICAgICAgICAgICAgXCImUW9wZjtcIjogXCLihJpcIixcblx0ICAgICAgICAgICAgXCImUXNjcjtcIjogXCLwnZKsXCIsXG5cdCAgICAgICAgICAgIFwiJlJCYXJyO1wiOiBcIuKkkFwiLFxuXHQgICAgICAgICAgICBcIiZSRUdcIjogXCLCrlwiLFxuXHQgICAgICAgICAgICBcIiZSRUc7XCI6IFwiwq5cIixcblx0ICAgICAgICAgICAgXCImUmFjdXRlO1wiOiBcIsWUXCIsXG5cdCAgICAgICAgICAgIFwiJlJhbmc7XCI6IFwi4p+rXCIsXG5cdCAgICAgICAgICAgIFwiJlJhcnI7XCI6IFwi4oagXCIsXG5cdCAgICAgICAgICAgIFwiJlJhcnJ0bDtcIjogXCLipJZcIixcblx0ICAgICAgICAgICAgXCImUmNhcm9uO1wiOiBcIsWYXCIsXG5cdCAgICAgICAgICAgIFwiJlJjZWRpbDtcIjogXCLFllwiLFxuXHQgICAgICAgICAgICBcIiZSY3k7XCI6IFwi0KBcIixcblx0ICAgICAgICAgICAgXCImUmU7XCI6IFwi4oScXCIsXG5cdCAgICAgICAgICAgIFwiJlJldmVyc2VFbGVtZW50O1wiOiBcIuKIi1wiLFxuXHQgICAgICAgICAgICBcIiZSZXZlcnNlRXF1aWxpYnJpdW07XCI6IFwi4oeLXCIsXG5cdCAgICAgICAgICAgIFwiJlJldmVyc2VVcEVxdWlsaWJyaXVtO1wiOiBcIuKlr1wiLFxuXHQgICAgICAgICAgICBcIiZSZnI7XCI6IFwi4oScXCIsXG5cdCAgICAgICAgICAgIFwiJlJobztcIjogXCLOoVwiLFxuXHQgICAgICAgICAgICBcIiZSaWdodEFuZ2xlQnJhY2tldDtcIjogXCLin6lcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRBcnJvdztcIjogXCLihpJcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRBcnJvd0JhcjtcIjogXCLih6VcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRBcnJvd0xlZnRBcnJvdztcIjogXCLih4RcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRDZWlsaW5nO1wiOiBcIuKMiVwiLFxuXHQgICAgICAgICAgICBcIiZSaWdodERvdWJsZUJyYWNrZXQ7XCI6IFwi4p+nXCIsXG5cdCAgICAgICAgICAgIFwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIjogXCLipZ1cIixcblx0ICAgICAgICAgICAgXCImUmlnaHREb3duVmVjdG9yO1wiOiBcIuKHglwiLFxuXHQgICAgICAgICAgICBcIiZSaWdodERvd25WZWN0b3JCYXI7XCI6IFwi4qWVXCIsXG5cdCAgICAgICAgICAgIFwiJlJpZ2h0Rmxvb3I7XCI6IFwi4oyLXCIsXG5cdCAgICAgICAgICAgIFwiJlJpZ2h0VGVlO1wiOiBcIuKKolwiLFxuXHQgICAgICAgICAgICBcIiZSaWdodFRlZUFycm93O1wiOiBcIuKGplwiLFxuXHQgICAgICAgICAgICBcIiZSaWdodFRlZVZlY3RvcjtcIjogXCLipZtcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRUcmlhbmdsZTtcIjogXCLiirNcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRUcmlhbmdsZUJhcjtcIjogXCLip5BcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRUcmlhbmdsZUVxdWFsO1wiOiBcIuKKtVwiLFxuXHQgICAgICAgICAgICBcIiZSaWdodFVwRG93blZlY3RvcjtcIjogXCLipY9cIixcblx0ICAgICAgICAgICAgXCImUmlnaHRVcFRlZVZlY3RvcjtcIjogXCLipZxcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRVcFZlY3RvcjtcIjogXCLihr5cIixcblx0ICAgICAgICAgICAgXCImUmlnaHRVcFZlY3RvckJhcjtcIjogXCLipZRcIixcblx0ICAgICAgICAgICAgXCImUmlnaHRWZWN0b3I7XCI6IFwi4oeAXCIsXG5cdCAgICAgICAgICAgIFwiJlJpZ2h0VmVjdG9yQmFyO1wiOiBcIuKlk1wiLFxuXHQgICAgICAgICAgICBcIiZSaWdodGFycm93O1wiOiBcIuKHklwiLFxuXHQgICAgICAgICAgICBcIiZSb3BmO1wiOiBcIuKEnVwiLFxuXHQgICAgICAgICAgICBcIiZSb3VuZEltcGxpZXM7XCI6IFwi4qWwXCIsXG5cdCAgICAgICAgICAgIFwiJlJyaWdodGFycm93O1wiOiBcIuKHm1wiLFxuXHQgICAgICAgICAgICBcIiZSc2NyO1wiOiBcIuKEm1wiLFxuXHQgICAgICAgICAgICBcIiZSc2g7XCI6IFwi4oaxXCIsXG5cdCAgICAgICAgICAgIFwiJlJ1bGVEZWxheWVkO1wiOiBcIuKntFwiLFxuXHQgICAgICAgICAgICBcIiZTSENIY3k7XCI6IFwi0KlcIixcblx0ICAgICAgICAgICAgXCImU0hjeTtcIjogXCLQqFwiLFxuXHQgICAgICAgICAgICBcIiZTT0ZUY3k7XCI6IFwi0KxcIixcblx0ICAgICAgICAgICAgXCImU2FjdXRlO1wiOiBcIsWaXCIsXG5cdCAgICAgICAgICAgIFwiJlNjO1wiOiBcIuKqvFwiLFxuXHQgICAgICAgICAgICBcIiZTY2Fyb247XCI6IFwixaBcIixcblx0ICAgICAgICAgICAgXCImU2NlZGlsO1wiOiBcIsWeXCIsXG5cdCAgICAgICAgICAgIFwiJlNjaXJjO1wiOiBcIsWcXCIsXG5cdCAgICAgICAgICAgIFwiJlNjeTtcIjogXCLQoVwiLFxuXHQgICAgICAgICAgICBcIiZTZnI7XCI6IFwi8J2UllwiLFxuXHQgICAgICAgICAgICBcIiZTaG9ydERvd25BcnJvdztcIjogXCLihpNcIixcblx0ICAgICAgICAgICAgXCImU2hvcnRMZWZ0QXJyb3c7XCI6IFwi4oaQXCIsXG5cdCAgICAgICAgICAgIFwiJlNob3J0UmlnaHRBcnJvdztcIjogXCLihpJcIixcblx0ICAgICAgICAgICAgXCImU2hvcnRVcEFycm93O1wiOiBcIuKGkVwiLFxuXHQgICAgICAgICAgICBcIiZTaWdtYTtcIjogXCLOo1wiLFxuXHQgICAgICAgICAgICBcIiZTbWFsbENpcmNsZTtcIjogXCLiiJhcIixcblx0ICAgICAgICAgICAgXCImU29wZjtcIjogXCLwnZWKXCIsXG5cdCAgICAgICAgICAgIFwiJlNxcnQ7XCI6IFwi4oiaXCIsXG5cdCAgICAgICAgICAgIFwiJlNxdWFyZTtcIjogXCLilqFcIixcblx0ICAgICAgICAgICAgXCImU3F1YXJlSW50ZXJzZWN0aW9uO1wiOiBcIuKKk1wiLFxuXHQgICAgICAgICAgICBcIiZTcXVhcmVTdWJzZXQ7XCI6IFwi4oqPXCIsXG5cdCAgICAgICAgICAgIFwiJlNxdWFyZVN1YnNldEVxdWFsO1wiOiBcIuKKkVwiLFxuXHQgICAgICAgICAgICBcIiZTcXVhcmVTdXBlcnNldDtcIjogXCLiipBcIixcblx0ICAgICAgICAgICAgXCImU3F1YXJlU3VwZXJzZXRFcXVhbDtcIjogXCLiipJcIixcblx0ICAgICAgICAgICAgXCImU3F1YXJlVW5pb247XCI6IFwi4oqUXCIsXG5cdCAgICAgICAgICAgIFwiJlNzY3I7XCI6IFwi8J2SrlwiLFxuXHQgICAgICAgICAgICBcIiZTdGFyO1wiOiBcIuKLhlwiLFxuXHQgICAgICAgICAgICBcIiZTdWI7XCI6IFwi4ouQXCIsXG5cdCAgICAgICAgICAgIFwiJlN1YnNldDtcIjogXCLii5BcIixcblx0ICAgICAgICAgICAgXCImU3Vic2V0RXF1YWw7XCI6IFwi4oqGXCIsXG5cdCAgICAgICAgICAgIFwiJlN1Y2NlZWRzO1wiOiBcIuKJu1wiLFxuXHQgICAgICAgICAgICBcIiZTdWNjZWVkc0VxdWFsO1wiOiBcIuKqsFwiLFxuXHQgICAgICAgICAgICBcIiZTdWNjZWVkc1NsYW50RXF1YWw7XCI6IFwi4om9XCIsXG5cdCAgICAgICAgICAgIFwiJlN1Y2NlZWRzVGlsZGU7XCI6IFwi4om/XCIsXG5cdCAgICAgICAgICAgIFwiJlN1Y2hUaGF0O1wiOiBcIuKIi1wiLFxuXHQgICAgICAgICAgICBcIiZTdW07XCI6IFwi4oiRXCIsXG5cdCAgICAgICAgICAgIFwiJlN1cDtcIjogXCLii5FcIixcblx0ICAgICAgICAgICAgXCImU3VwZXJzZXQ7XCI6IFwi4oqDXCIsXG5cdCAgICAgICAgICAgIFwiJlN1cGVyc2V0RXF1YWw7XCI6IFwi4oqHXCIsXG5cdCAgICAgICAgICAgIFwiJlN1cHNldDtcIjogXCLii5FcIixcblx0ICAgICAgICAgICAgXCImVEhPUk5cIjogXCLDnlwiLFxuXHQgICAgICAgICAgICBcIiZUSE9STjtcIjogXCLDnlwiLFxuXHQgICAgICAgICAgICBcIiZUUkFERTtcIjogXCLihKJcIixcblx0ICAgICAgICAgICAgXCImVFNIY3k7XCI6IFwi0ItcIixcblx0ICAgICAgICAgICAgXCImVFNjeTtcIjogXCLQplwiLFxuXHQgICAgICAgICAgICBcIiZUYWI7XCI6IFwiXFx0XCIsXG5cdCAgICAgICAgICAgIFwiJlRhdTtcIjogXCLOpFwiLFxuXHQgICAgICAgICAgICBcIiZUY2Fyb247XCI6IFwixaRcIixcblx0ICAgICAgICAgICAgXCImVGNlZGlsO1wiOiBcIsWiXCIsXG5cdCAgICAgICAgICAgIFwiJlRjeTtcIjogXCLQolwiLFxuXHQgICAgICAgICAgICBcIiZUZnI7XCI6IFwi8J2Ul1wiLFxuXHQgICAgICAgICAgICBcIiZUaGVyZWZvcmU7XCI6IFwi4oi0XCIsXG5cdCAgICAgICAgICAgIFwiJlRoZXRhO1wiOiBcIs6YXCIsXG5cdCAgICAgICAgICAgIFwiJlRoaWNrU3BhY2U7XCI6IFwi4oGf4oCKXCIsXG5cdCAgICAgICAgICAgIFwiJlRoaW5TcGFjZTtcIjogXCLigIlcIixcblx0ICAgICAgICAgICAgXCImVGlsZGU7XCI6IFwi4oi8XCIsXG5cdCAgICAgICAgICAgIFwiJlRpbGRlRXF1YWw7XCI6IFwi4omDXCIsXG5cdCAgICAgICAgICAgIFwiJlRpbGRlRnVsbEVxdWFsO1wiOiBcIuKJhVwiLFxuXHQgICAgICAgICAgICBcIiZUaWxkZVRpbGRlO1wiOiBcIuKJiFwiLFxuXHQgICAgICAgICAgICBcIiZUb3BmO1wiOiBcIvCdlYtcIixcblx0ICAgICAgICAgICAgXCImVHJpcGxlRG90O1wiOiBcIuKDm1wiLFxuXHQgICAgICAgICAgICBcIiZUc2NyO1wiOiBcIvCdkq9cIixcblx0ICAgICAgICAgICAgXCImVHN0cm9rO1wiOiBcIsWmXCIsXG5cdCAgICAgICAgICAgIFwiJlVhY3V0ZVwiOiBcIsOaXCIsXG5cdCAgICAgICAgICAgIFwiJlVhY3V0ZTtcIjogXCLDmlwiLFxuXHQgICAgICAgICAgICBcIiZVYXJyO1wiOiBcIuKGn1wiLFxuXHQgICAgICAgICAgICBcIiZVYXJyb2NpcjtcIjogXCLipYlcIixcblx0ICAgICAgICAgICAgXCImVWJyY3k7XCI6IFwi0I5cIixcblx0ICAgICAgICAgICAgXCImVWJyZXZlO1wiOiBcIsWsXCIsXG5cdCAgICAgICAgICAgIFwiJlVjaXJjXCI6IFwiw5tcIixcblx0ICAgICAgICAgICAgXCImVWNpcmM7XCI6IFwiw5tcIixcblx0ICAgICAgICAgICAgXCImVWN5O1wiOiBcItCjXCIsXG5cdCAgICAgICAgICAgIFwiJlVkYmxhYztcIjogXCLFsFwiLFxuXHQgICAgICAgICAgICBcIiZVZnI7XCI6IFwi8J2UmFwiLFxuXHQgICAgICAgICAgICBcIiZVZ3JhdmVcIjogXCLDmVwiLFxuXHQgICAgICAgICAgICBcIiZVZ3JhdmU7XCI6IFwiw5lcIixcblx0ICAgICAgICAgICAgXCImVW1hY3I7XCI6IFwixapcIixcblx0ICAgICAgICAgICAgXCImVW5kZXJCYXI7XCI6IFwiX1wiLFxuXHQgICAgICAgICAgICBcIiZVbmRlckJyYWNlO1wiOiBcIuKPn1wiLFxuXHQgICAgICAgICAgICBcIiZVbmRlckJyYWNrZXQ7XCI6IFwi4o61XCIsXG5cdCAgICAgICAgICAgIFwiJlVuZGVyUGFyZW50aGVzaXM7XCI6IFwi4o+dXCIsXG5cdCAgICAgICAgICAgIFwiJlVuaW9uO1wiOiBcIuKLg1wiLFxuXHQgICAgICAgICAgICBcIiZVbmlvblBsdXM7XCI6IFwi4oqOXCIsXG5cdCAgICAgICAgICAgIFwiJlVvZ29uO1wiOiBcIsWyXCIsXG5cdCAgICAgICAgICAgIFwiJlVvcGY7XCI6IFwi8J2VjFwiLFxuXHQgICAgICAgICAgICBcIiZVcEFycm93O1wiOiBcIuKGkVwiLFxuXHQgICAgICAgICAgICBcIiZVcEFycm93QmFyO1wiOiBcIuKkklwiLFxuXHQgICAgICAgICAgICBcIiZVcEFycm93RG93bkFycm93O1wiOiBcIuKHhVwiLFxuXHQgICAgICAgICAgICBcIiZVcERvd25BcnJvdztcIjogXCLihpVcIixcblx0ICAgICAgICAgICAgXCImVXBFcXVpbGlicml1bTtcIjogXCLipa5cIixcblx0ICAgICAgICAgICAgXCImVXBUZWU7XCI6IFwi4oqlXCIsXG5cdCAgICAgICAgICAgIFwiJlVwVGVlQXJyb3c7XCI6IFwi4oalXCIsXG5cdCAgICAgICAgICAgIFwiJlVwYXJyb3c7XCI6IFwi4oeRXCIsXG5cdCAgICAgICAgICAgIFwiJlVwZG93bmFycm93O1wiOiBcIuKHlVwiLFxuXHQgICAgICAgICAgICBcIiZVcHBlckxlZnRBcnJvdztcIjogXCLihpZcIixcblx0ICAgICAgICAgICAgXCImVXBwZXJSaWdodEFycm93O1wiOiBcIuKGl1wiLFxuXHQgICAgICAgICAgICBcIiZVcHNpO1wiOiBcIs+SXCIsXG5cdCAgICAgICAgICAgIFwiJlVwc2lsb247XCI6IFwizqVcIixcblx0ICAgICAgICAgICAgXCImVXJpbmc7XCI6IFwixa5cIixcblx0ICAgICAgICAgICAgXCImVXNjcjtcIjogXCLwnZKwXCIsXG5cdCAgICAgICAgICAgIFwiJlV0aWxkZTtcIjogXCLFqFwiLFxuXHQgICAgICAgICAgICBcIiZVdW1sXCI6IFwiw5xcIixcblx0ICAgICAgICAgICAgXCImVXVtbDtcIjogXCLDnFwiLFxuXHQgICAgICAgICAgICBcIiZWRGFzaDtcIjogXCLiiqtcIixcblx0ICAgICAgICAgICAgXCImVmJhcjtcIjogXCLiq6tcIixcblx0ICAgICAgICAgICAgXCImVmN5O1wiOiBcItCSXCIsXG5cdCAgICAgICAgICAgIFwiJlZkYXNoO1wiOiBcIuKKqVwiLFxuXHQgICAgICAgICAgICBcIiZWZGFzaGw7XCI6IFwi4qumXCIsXG5cdCAgICAgICAgICAgIFwiJlZlZTtcIjogXCLii4FcIixcblx0ICAgICAgICAgICAgXCImVmVyYmFyO1wiOiBcIuKAllwiLFxuXHQgICAgICAgICAgICBcIiZWZXJ0O1wiOiBcIuKAllwiLFxuXHQgICAgICAgICAgICBcIiZWZXJ0aWNhbEJhcjtcIjogXCLiiKNcIixcblx0ICAgICAgICAgICAgXCImVmVydGljYWxMaW5lO1wiOiBcInxcIixcblx0ICAgICAgICAgICAgXCImVmVydGljYWxTZXBhcmF0b3I7XCI6IFwi4p2YXCIsXG5cdCAgICAgICAgICAgIFwiJlZlcnRpY2FsVGlsZGU7XCI6IFwi4omAXCIsXG5cdCAgICAgICAgICAgIFwiJlZlcnlUaGluU3BhY2U7XCI6IFwi4oCKXCIsXG5cdCAgICAgICAgICAgIFwiJlZmcjtcIjogXCLwnZSZXCIsXG5cdCAgICAgICAgICAgIFwiJlZvcGY7XCI6IFwi8J2VjVwiLFxuXHQgICAgICAgICAgICBcIiZWc2NyO1wiOiBcIvCdkrFcIixcblx0ICAgICAgICAgICAgXCImVnZkYXNoO1wiOiBcIuKKqlwiLFxuXHQgICAgICAgICAgICBcIiZXY2lyYztcIjogXCLFtFwiLFxuXHQgICAgICAgICAgICBcIiZXZWRnZTtcIjogXCLii4BcIixcblx0ICAgICAgICAgICAgXCImV2ZyO1wiOiBcIvCdlJpcIixcblx0ICAgICAgICAgICAgXCImV29wZjtcIjogXCLwnZWOXCIsXG5cdCAgICAgICAgICAgIFwiJldzY3I7XCI6IFwi8J2SslwiLFxuXHQgICAgICAgICAgICBcIiZYZnI7XCI6IFwi8J2Um1wiLFxuXHQgICAgICAgICAgICBcIiZYaTtcIjogXCLOnlwiLFxuXHQgICAgICAgICAgICBcIiZYb3BmO1wiOiBcIvCdlY9cIixcblx0ICAgICAgICAgICAgXCImWHNjcjtcIjogXCLwnZKzXCIsXG5cdCAgICAgICAgICAgIFwiJllBY3k7XCI6IFwi0K9cIixcblx0ICAgICAgICAgICAgXCImWUljeTtcIjogXCLQh1wiLFxuXHQgICAgICAgICAgICBcIiZZVWN5O1wiOiBcItCuXCIsXG5cdCAgICAgICAgICAgIFwiJllhY3V0ZVwiOiBcIsOdXCIsXG5cdCAgICAgICAgICAgIFwiJllhY3V0ZTtcIjogXCLDnVwiLFxuXHQgICAgICAgICAgICBcIiZZY2lyYztcIjogXCLFtlwiLFxuXHQgICAgICAgICAgICBcIiZZY3k7XCI6IFwi0KtcIixcblx0ICAgICAgICAgICAgXCImWWZyO1wiOiBcIvCdlJxcIixcblx0ICAgICAgICAgICAgXCImWW9wZjtcIjogXCLwnZWQXCIsXG5cdCAgICAgICAgICAgIFwiJllzY3I7XCI6IFwi8J2StFwiLFxuXHQgICAgICAgICAgICBcIiZZdW1sO1wiOiBcIsW4XCIsXG5cdCAgICAgICAgICAgIFwiJlpIY3k7XCI6IFwi0JZcIixcblx0ICAgICAgICAgICAgXCImWmFjdXRlO1wiOiBcIsW5XCIsXG5cdCAgICAgICAgICAgIFwiJlpjYXJvbjtcIjogXCLFvVwiLFxuXHQgICAgICAgICAgICBcIiZaY3k7XCI6IFwi0JdcIixcblx0ICAgICAgICAgICAgXCImWmRvdDtcIjogXCLFu1wiLFxuXHQgICAgICAgICAgICBcIiZaZXJvV2lkdGhTcGFjZTtcIjogXCLigItcIixcblx0ICAgICAgICAgICAgXCImWmV0YTtcIjogXCLOllwiLFxuXHQgICAgICAgICAgICBcIiZaZnI7XCI6IFwi4oSoXCIsXG5cdCAgICAgICAgICAgIFwiJlpvcGY7XCI6IFwi4oSkXCIsXG5cdCAgICAgICAgICAgIFwiJlpzY3I7XCI6IFwi8J2StVwiLFxuXHQgICAgICAgICAgICBcIiZhYWN1dGVcIjogXCLDoVwiLFxuXHQgICAgICAgICAgICBcIiZhYWN1dGU7XCI6IFwiw6FcIixcblx0ICAgICAgICAgICAgXCImYWJyZXZlO1wiOiBcIsSDXCIsXG5cdCAgICAgICAgICAgIFwiJmFjO1wiOiBcIuKIvlwiLFxuXHQgICAgICAgICAgICBcIiZhY0U7XCI6IFwi4oi+zLNcIixcblx0ICAgICAgICAgICAgXCImYWNkO1wiOiBcIuKIv1wiLFxuXHQgICAgICAgICAgICBcIiZhY2lyY1wiOiBcIsOiXCIsXG5cdCAgICAgICAgICAgIFwiJmFjaXJjO1wiOiBcIsOiXCIsXG5cdCAgICAgICAgICAgIFwiJmFjdXRlXCI6IFwiwrRcIixcblx0ICAgICAgICAgICAgXCImYWN1dGU7XCI6IFwiwrRcIixcblx0ICAgICAgICAgICAgXCImYWN5O1wiOiBcItCwXCIsXG5cdCAgICAgICAgICAgIFwiJmFlbGlnXCI6IFwiw6ZcIixcblx0ICAgICAgICAgICAgXCImYWVsaWc7XCI6IFwiw6ZcIixcblx0ICAgICAgICAgICAgXCImYWY7XCI6IFwi4oGhXCIsXG5cdCAgICAgICAgICAgIFwiJmFmcjtcIjogXCLwnZSeXCIsXG5cdCAgICAgICAgICAgIFwiJmFncmF2ZVwiOiBcIsOgXCIsXG5cdCAgICAgICAgICAgIFwiJmFncmF2ZTtcIjogXCLDoFwiLFxuXHQgICAgICAgICAgICBcIiZhbGVmc3ltO1wiOiBcIuKEtVwiLFxuXHQgICAgICAgICAgICBcIiZhbGVwaDtcIjogXCLihLVcIixcblx0ICAgICAgICAgICAgXCImYWxwaGE7XCI6IFwizrFcIixcblx0ICAgICAgICAgICAgXCImYW1hY3I7XCI6IFwixIFcIixcblx0ICAgICAgICAgICAgXCImYW1hbGc7XCI6IFwi4qi/XCIsXG5cdCAgICAgICAgICAgIFwiJmFtcFwiOiBcIiZcIixcblx0ICAgICAgICAgICAgXCImYW1wO1wiOiBcIiZcIixcblx0ICAgICAgICAgICAgXCImYW5kO1wiOiBcIuKIp1wiLFxuXHQgICAgICAgICAgICBcIiZhbmRhbmQ7XCI6IFwi4qmVXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZGQ7XCI6IFwi4qmcXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZHNsb3BlO1wiOiBcIuKpmFwiLFxuXHQgICAgICAgICAgICBcIiZhbmR2O1wiOiBcIuKpmlwiLFxuXHQgICAgICAgICAgICBcIiZhbmc7XCI6IFwi4oigXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ2U7XCI6IFwi4qakXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ2xlO1wiOiBcIuKIoFwiLFxuXHQgICAgICAgICAgICBcIiZhbmdtc2Q7XCI6IFwi4oihXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ21zZGFhO1wiOiBcIuKmqFwiLFxuXHQgICAgICAgICAgICBcIiZhbmdtc2RhYjtcIjogXCLipqlcIixcblx0ICAgICAgICAgICAgXCImYW5nbXNkYWM7XCI6IFwi4qaqXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ21zZGFkO1wiOiBcIuKmq1wiLFxuXHQgICAgICAgICAgICBcIiZhbmdtc2RhZTtcIjogXCLipqxcIixcblx0ICAgICAgICAgICAgXCImYW5nbXNkYWY7XCI6IFwi4qatXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ21zZGFnO1wiOiBcIuKmrlwiLFxuXHQgICAgICAgICAgICBcIiZhbmdtc2RhaDtcIjogXCLipq9cIixcblx0ICAgICAgICAgICAgXCImYW5ncnQ7XCI6IFwi4oifXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ3J0dmI7XCI6IFwi4oq+XCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ3J0dmJkO1wiOiBcIuKmnVwiLFxuXHQgICAgICAgICAgICBcIiZhbmdzcGg7XCI6IFwi4oiiXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ3N0O1wiOiBcIsOFXCIsXG5cdCAgICAgICAgICAgIFwiJmFuZ3phcnI7XCI6IFwi4o28XCIsXG5cdCAgICAgICAgICAgIFwiJmFvZ29uO1wiOiBcIsSFXCIsXG5cdCAgICAgICAgICAgIFwiJmFvcGY7XCI6IFwi8J2VklwiLFxuXHQgICAgICAgICAgICBcIiZhcDtcIjogXCLiiYhcIixcblx0ICAgICAgICAgICAgXCImYXBFO1wiOiBcIuKpsFwiLFxuXHQgICAgICAgICAgICBcIiZhcGFjaXI7XCI6IFwi4qmvXCIsXG5cdCAgICAgICAgICAgIFwiJmFwZTtcIjogXCLiiYpcIixcblx0ICAgICAgICAgICAgXCImYXBpZDtcIjogXCLiiYtcIixcblx0ICAgICAgICAgICAgXCImYXBvcztcIjogXCInXCIsXG5cdCAgICAgICAgICAgIFwiJmFwcHJveDtcIjogXCLiiYhcIixcblx0ICAgICAgICAgICAgXCImYXBwcm94ZXE7XCI6IFwi4omKXCIsXG5cdCAgICAgICAgICAgIFwiJmFyaW5nXCI6IFwiw6VcIixcblx0ICAgICAgICAgICAgXCImYXJpbmc7XCI6IFwiw6VcIixcblx0ICAgICAgICAgICAgXCImYXNjcjtcIjogXCLwnZK2XCIsXG5cdCAgICAgICAgICAgIFwiJmFzdDtcIjogXCIqXCIsXG5cdCAgICAgICAgICAgIFwiJmFzeW1wO1wiOiBcIuKJiFwiLFxuXHQgICAgICAgICAgICBcIiZhc3ltcGVxO1wiOiBcIuKJjVwiLFxuXHQgICAgICAgICAgICBcIiZhdGlsZGVcIjogXCLDo1wiLFxuXHQgICAgICAgICAgICBcIiZhdGlsZGU7XCI6IFwiw6NcIixcblx0ICAgICAgICAgICAgXCImYXVtbFwiOiBcIsOkXCIsXG5cdCAgICAgICAgICAgIFwiJmF1bWw7XCI6IFwiw6RcIixcblx0ICAgICAgICAgICAgXCImYXdjb25pbnQ7XCI6IFwi4oizXCIsXG5cdCAgICAgICAgICAgIFwiJmF3aW50O1wiOiBcIuKokVwiLFxuXHQgICAgICAgICAgICBcIiZiTm90O1wiOiBcIuKrrVwiLFxuXHQgICAgICAgICAgICBcIiZiYWNrY29uZztcIjogXCLiiYxcIixcblx0ICAgICAgICAgICAgXCImYmFja2Vwc2lsb247XCI6IFwiz7ZcIixcblx0ICAgICAgICAgICAgXCImYmFja3ByaW1lO1wiOiBcIuKAtVwiLFxuXHQgICAgICAgICAgICBcIiZiYWNrc2ltO1wiOiBcIuKIvVwiLFxuXHQgICAgICAgICAgICBcIiZiYWNrc2ltZXE7XCI6IFwi4ouNXCIsXG5cdCAgICAgICAgICAgIFwiJmJhcnZlZTtcIjogXCLiir1cIixcblx0ICAgICAgICAgICAgXCImYmFyd2VkO1wiOiBcIuKMhVwiLFxuXHQgICAgICAgICAgICBcIiZiYXJ3ZWRnZTtcIjogXCLijIVcIixcblx0ICAgICAgICAgICAgXCImYmJyaztcIjogXCLijrVcIixcblx0ICAgICAgICAgICAgXCImYmJya3Ricms7XCI6IFwi4o62XCIsXG5cdCAgICAgICAgICAgIFwiJmJjb25nO1wiOiBcIuKJjFwiLFxuXHQgICAgICAgICAgICBcIiZiY3k7XCI6IFwi0LFcIixcblx0ICAgICAgICAgICAgXCImYmRxdW87XCI6IFwi4oCeXCIsXG5cdCAgICAgICAgICAgIFwiJmJlY2F1cztcIjogXCLiiLVcIixcblx0ICAgICAgICAgICAgXCImYmVjYXVzZTtcIjogXCLiiLVcIixcblx0ICAgICAgICAgICAgXCImYmVtcHR5djtcIjogXCLiprBcIixcblx0ICAgICAgICAgICAgXCImYmVwc2k7XCI6IFwiz7ZcIixcblx0ICAgICAgICAgICAgXCImYmVybm91O1wiOiBcIuKErFwiLFxuXHQgICAgICAgICAgICBcIiZiZXRhO1wiOiBcIs6yXCIsXG5cdCAgICAgICAgICAgIFwiJmJldGg7XCI6IFwi4oS2XCIsXG5cdCAgICAgICAgICAgIFwiJmJldHdlZW47XCI6IFwi4omsXCIsXG5cdCAgICAgICAgICAgIFwiJmJmcjtcIjogXCLwnZSfXCIsXG5cdCAgICAgICAgICAgIFwiJmJpZ2NhcDtcIjogXCLii4JcIixcblx0ICAgICAgICAgICAgXCImYmlnY2lyYztcIjogXCLil69cIixcblx0ICAgICAgICAgICAgXCImYmlnY3VwO1wiOiBcIuKLg1wiLFxuXHQgICAgICAgICAgICBcIiZiaWdvZG90O1wiOiBcIuKogFwiLFxuXHQgICAgICAgICAgICBcIiZiaWdvcGx1cztcIjogXCLiqIFcIixcblx0ICAgICAgICAgICAgXCImYmlnb3RpbWVzO1wiOiBcIuKoglwiLFxuXHQgICAgICAgICAgICBcIiZiaWdzcWN1cDtcIjogXCLiqIZcIixcblx0ICAgICAgICAgICAgXCImYmlnc3RhcjtcIjogXCLimIVcIixcblx0ICAgICAgICAgICAgXCImYmlndHJpYW5nbGVkb3duO1wiOiBcIuKWvVwiLFxuXHQgICAgICAgICAgICBcIiZiaWd0cmlhbmdsZXVwO1wiOiBcIuKWs1wiLFxuXHQgICAgICAgICAgICBcIiZiaWd1cGx1cztcIjogXCLiqIRcIixcblx0ICAgICAgICAgICAgXCImYmlndmVlO1wiOiBcIuKLgVwiLFxuXHQgICAgICAgICAgICBcIiZiaWd3ZWRnZTtcIjogXCLii4BcIixcblx0ICAgICAgICAgICAgXCImYmthcm93O1wiOiBcIuKkjVwiLFxuXHQgICAgICAgICAgICBcIiZibGFja2xvemVuZ2U7XCI6IFwi4qerXCIsXG5cdCAgICAgICAgICAgIFwiJmJsYWNrc3F1YXJlO1wiOiBcIuKWqlwiLFxuXHQgICAgICAgICAgICBcIiZibGFja3RyaWFuZ2xlO1wiOiBcIuKWtFwiLFxuXHQgICAgICAgICAgICBcIiZibGFja3RyaWFuZ2xlZG93bjtcIjogXCLilr5cIixcblx0ICAgICAgICAgICAgXCImYmxhY2t0cmlhbmdsZWxlZnQ7XCI6IFwi4peCXCIsXG5cdCAgICAgICAgICAgIFwiJmJsYWNrdHJpYW5nbGVyaWdodDtcIjogXCLilrhcIixcblx0ICAgICAgICAgICAgXCImYmxhbms7XCI6IFwi4pCjXCIsXG5cdCAgICAgICAgICAgIFwiJmJsazEyO1wiOiBcIuKWklwiLFxuXHQgICAgICAgICAgICBcIiZibGsxNDtcIjogXCLilpFcIixcblx0ICAgICAgICAgICAgXCImYmxrMzQ7XCI6IFwi4paTXCIsXG5cdCAgICAgICAgICAgIFwiJmJsb2NrO1wiOiBcIuKWiFwiLFxuXHQgICAgICAgICAgICBcIiZibmU7XCI6IFwiPeKDpVwiLFxuXHQgICAgICAgICAgICBcIiZibmVxdWl2O1wiOiBcIuKJoeKDpVwiLFxuXHQgICAgICAgICAgICBcIiZibm90O1wiOiBcIuKMkFwiLFxuXHQgICAgICAgICAgICBcIiZib3BmO1wiOiBcIvCdlZNcIixcblx0ICAgICAgICAgICAgXCImYm90O1wiOiBcIuKKpVwiLFxuXHQgICAgICAgICAgICBcIiZib3R0b207XCI6IFwi4oqlXCIsXG5cdCAgICAgICAgICAgIFwiJmJvd3RpZTtcIjogXCLii4hcIixcblx0ICAgICAgICAgICAgXCImYm94REw7XCI6IFwi4pWXXCIsXG5cdCAgICAgICAgICAgIFwiJmJveERSO1wiOiBcIuKVlFwiLFxuXHQgICAgICAgICAgICBcIiZib3hEbDtcIjogXCLilZZcIixcblx0ICAgICAgICAgICAgXCImYm94RHI7XCI6IFwi4pWTXCIsXG5cdCAgICAgICAgICAgIFwiJmJveEg7XCI6IFwi4pWQXCIsXG5cdCAgICAgICAgICAgIFwiJmJveEhEO1wiOiBcIuKVplwiLFxuXHQgICAgICAgICAgICBcIiZib3hIVTtcIjogXCLilalcIixcblx0ICAgICAgICAgICAgXCImYm94SGQ7XCI6IFwi4pWkXCIsXG5cdCAgICAgICAgICAgIFwiJmJveEh1O1wiOiBcIuKVp1wiLFxuXHQgICAgICAgICAgICBcIiZib3hVTDtcIjogXCLilZ1cIixcblx0ICAgICAgICAgICAgXCImYm94VVI7XCI6IFwi4pWaXCIsXG5cdCAgICAgICAgICAgIFwiJmJveFVsO1wiOiBcIuKVnFwiLFxuXHQgICAgICAgICAgICBcIiZib3hVcjtcIjogXCLilZlcIixcblx0ICAgICAgICAgICAgXCImYm94VjtcIjogXCLilZFcIixcblx0ICAgICAgICAgICAgXCImYm94Vkg7XCI6IFwi4pWsXCIsXG5cdCAgICAgICAgICAgIFwiJmJveFZMO1wiOiBcIuKVo1wiLFxuXHQgICAgICAgICAgICBcIiZib3hWUjtcIjogXCLilaBcIixcblx0ICAgICAgICAgICAgXCImYm94Vmg7XCI6IFwi4pWrXCIsXG5cdCAgICAgICAgICAgIFwiJmJveFZsO1wiOiBcIuKVolwiLFxuXHQgICAgICAgICAgICBcIiZib3hWcjtcIjogXCLilZ9cIixcblx0ICAgICAgICAgICAgXCImYm94Ym94O1wiOiBcIuKniVwiLFxuXHQgICAgICAgICAgICBcIiZib3hkTDtcIjogXCLilZVcIixcblx0ICAgICAgICAgICAgXCImYm94ZFI7XCI6IFwi4pWSXCIsXG5cdCAgICAgICAgICAgIFwiJmJveGRsO1wiOiBcIuKUkFwiLFxuXHQgICAgICAgICAgICBcIiZib3hkcjtcIjogXCLilIxcIixcblx0ICAgICAgICAgICAgXCImYm94aDtcIjogXCLilIBcIixcblx0ICAgICAgICAgICAgXCImYm94aEQ7XCI6IFwi4pWlXCIsXG5cdCAgICAgICAgICAgIFwiJmJveGhVO1wiOiBcIuKVqFwiLFxuXHQgICAgICAgICAgICBcIiZib3hoZDtcIjogXCLilKxcIixcblx0ICAgICAgICAgICAgXCImYm94aHU7XCI6IFwi4pS0XCIsXG5cdCAgICAgICAgICAgIFwiJmJveG1pbnVzO1wiOiBcIuKKn1wiLFxuXHQgICAgICAgICAgICBcIiZib3hwbHVzO1wiOiBcIuKKnlwiLFxuXHQgICAgICAgICAgICBcIiZib3h0aW1lcztcIjogXCLiiqBcIixcblx0ICAgICAgICAgICAgXCImYm94dUw7XCI6IFwi4pWbXCIsXG5cdCAgICAgICAgICAgIFwiJmJveHVSO1wiOiBcIuKVmFwiLFxuXHQgICAgICAgICAgICBcIiZib3h1bDtcIjogXCLilJhcIixcblx0ICAgICAgICAgICAgXCImYm94dXI7XCI6IFwi4pSUXCIsXG5cdCAgICAgICAgICAgIFwiJmJveHY7XCI6IFwi4pSCXCIsXG5cdCAgICAgICAgICAgIFwiJmJveHZIO1wiOiBcIuKVqlwiLFxuXHQgICAgICAgICAgICBcIiZib3h2TDtcIjogXCLilaFcIixcblx0ICAgICAgICAgICAgXCImYm94dlI7XCI6IFwi4pWeXCIsXG5cdCAgICAgICAgICAgIFwiJmJveHZoO1wiOiBcIuKUvFwiLFxuXHQgICAgICAgICAgICBcIiZib3h2bDtcIjogXCLilKRcIixcblx0ICAgICAgICAgICAgXCImYm94dnI7XCI6IFwi4pScXCIsXG5cdCAgICAgICAgICAgIFwiJmJwcmltZTtcIjogXCLigLVcIixcblx0ICAgICAgICAgICAgXCImYnJldmU7XCI6IFwiy5hcIixcblx0ICAgICAgICAgICAgXCImYnJ2YmFyXCI6IFwiwqZcIixcblx0ICAgICAgICAgICAgXCImYnJ2YmFyO1wiOiBcIsKmXCIsXG5cdCAgICAgICAgICAgIFwiJmJzY3I7XCI6IFwi8J2St1wiLFxuXHQgICAgICAgICAgICBcIiZic2VtaTtcIjogXCLigY9cIixcblx0ICAgICAgICAgICAgXCImYnNpbTtcIjogXCLiiL1cIixcblx0ICAgICAgICAgICAgXCImYnNpbWU7XCI6IFwi4ouNXCIsXG5cdCAgICAgICAgICAgIFwiJmJzb2w7XCI6IFwiXFxcXFwiLFxuXHQgICAgICAgICAgICBcIiZic29sYjtcIjogXCLip4VcIixcblx0ICAgICAgICAgICAgXCImYnNvbGhzdWI7XCI6IFwi4p+IXCIsXG5cdCAgICAgICAgICAgIFwiJmJ1bGw7XCI6IFwi4oCiXCIsXG5cdCAgICAgICAgICAgIFwiJmJ1bGxldDtcIjogXCLigKJcIixcblx0ICAgICAgICAgICAgXCImYnVtcDtcIjogXCLiiY5cIixcblx0ICAgICAgICAgICAgXCImYnVtcEU7XCI6IFwi4qquXCIsXG5cdCAgICAgICAgICAgIFwiJmJ1bXBlO1wiOiBcIuKJj1wiLFxuXHQgICAgICAgICAgICBcIiZidW1wZXE7XCI6IFwi4omPXCIsXG5cdCAgICAgICAgICAgIFwiJmNhY3V0ZTtcIjogXCLEh1wiLFxuXHQgICAgICAgICAgICBcIiZjYXA7XCI6IFwi4oipXCIsXG5cdCAgICAgICAgICAgIFwiJmNhcGFuZDtcIjogXCLiqYRcIixcblx0ICAgICAgICAgICAgXCImY2FwYnJjdXA7XCI6IFwi4qmJXCIsXG5cdCAgICAgICAgICAgIFwiJmNhcGNhcDtcIjogXCLiqYtcIixcblx0ICAgICAgICAgICAgXCImY2FwY3VwO1wiOiBcIuKph1wiLFxuXHQgICAgICAgICAgICBcIiZjYXBkb3Q7XCI6IFwi4qmAXCIsXG5cdCAgICAgICAgICAgIFwiJmNhcHM7XCI6IFwi4oip77iAXCIsXG5cdCAgICAgICAgICAgIFwiJmNhcmV0O1wiOiBcIuKBgVwiLFxuXHQgICAgICAgICAgICBcIiZjYXJvbjtcIjogXCLLh1wiLFxuXHQgICAgICAgICAgICBcIiZjY2FwcztcIjogXCLiqY1cIixcblx0ICAgICAgICAgICAgXCImY2Nhcm9uO1wiOiBcIsSNXCIsXG5cdCAgICAgICAgICAgIFwiJmNjZWRpbFwiOiBcIsOnXCIsXG5cdCAgICAgICAgICAgIFwiJmNjZWRpbDtcIjogXCLDp1wiLFxuXHQgICAgICAgICAgICBcIiZjY2lyYztcIjogXCLEiVwiLFxuXHQgICAgICAgICAgICBcIiZjY3VwcztcIjogXCLiqYxcIixcblx0ICAgICAgICAgICAgXCImY2N1cHNzbTtcIjogXCLiqZBcIixcblx0ICAgICAgICAgICAgXCImY2RvdDtcIjogXCLEi1wiLFxuXHQgICAgICAgICAgICBcIiZjZWRpbFwiOiBcIsK4XCIsXG5cdCAgICAgICAgICAgIFwiJmNlZGlsO1wiOiBcIsK4XCIsXG5cdCAgICAgICAgICAgIFwiJmNlbXB0eXY7XCI6IFwi4qayXCIsXG5cdCAgICAgICAgICAgIFwiJmNlbnRcIjogXCLColwiLFxuXHQgICAgICAgICAgICBcIiZjZW50O1wiOiBcIsKiXCIsXG5cdCAgICAgICAgICAgIFwiJmNlbnRlcmRvdDtcIjogXCLCt1wiLFxuXHQgICAgICAgICAgICBcIiZjZnI7XCI6IFwi8J2UoFwiLFxuXHQgICAgICAgICAgICBcIiZjaGN5O1wiOiBcItGHXCIsXG5cdCAgICAgICAgICAgIFwiJmNoZWNrO1wiOiBcIuKck1wiLFxuXHQgICAgICAgICAgICBcIiZjaGVja21hcms7XCI6IFwi4pyTXCIsXG5cdCAgICAgICAgICAgIFwiJmNoaTtcIjogXCLPh1wiLFxuXHQgICAgICAgICAgICBcIiZjaXI7XCI6IFwi4peLXCIsXG5cdCAgICAgICAgICAgIFwiJmNpckU7XCI6IFwi4qeDXCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmM7XCI6IFwiy4ZcIixcblx0ICAgICAgICAgICAgXCImY2lyY2VxO1wiOiBcIuKJl1wiLFxuXHQgICAgICAgICAgICBcIiZjaXJjbGVhcnJvd2xlZnQ7XCI6IFwi4oa6XCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmNsZWFycm93cmlnaHQ7XCI6IFwi4oa7XCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmNsZWRSO1wiOiBcIsKuXCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmNsZWRTO1wiOiBcIuKTiFwiLFxuXHQgICAgICAgICAgICBcIiZjaXJjbGVkYXN0O1wiOiBcIuKKm1wiLFxuXHQgICAgICAgICAgICBcIiZjaXJjbGVkY2lyYztcIjogXCLiippcIixcblx0ICAgICAgICAgICAgXCImY2lyY2xlZGRhc2g7XCI6IFwi4oqdXCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmU7XCI6IFwi4omXXCIsXG5cdCAgICAgICAgICAgIFwiJmNpcmZuaW50O1wiOiBcIuKokFwiLFxuXHQgICAgICAgICAgICBcIiZjaXJtaWQ7XCI6IFwi4quvXCIsXG5cdCAgICAgICAgICAgIFwiJmNpcnNjaXI7XCI6IFwi4qeCXCIsXG5cdCAgICAgICAgICAgIFwiJmNsdWJzO1wiOiBcIuKZo1wiLFxuXHQgICAgICAgICAgICBcIiZjbHVic3VpdDtcIjogXCLimaNcIixcblx0ICAgICAgICAgICAgXCImY29sb247XCI6IFwiOlwiLFxuXHQgICAgICAgICAgICBcIiZjb2xvbmU7XCI6IFwi4omUXCIsXG5cdCAgICAgICAgICAgIFwiJmNvbG9uZXE7XCI6IFwi4omUXCIsXG5cdCAgICAgICAgICAgIFwiJmNvbW1hO1wiOiBcIixcIixcblx0ICAgICAgICAgICAgXCImY29tbWF0O1wiOiBcIkBcIixcblx0ICAgICAgICAgICAgXCImY29tcDtcIjogXCLiiIFcIixcblx0ICAgICAgICAgICAgXCImY29tcGZuO1wiOiBcIuKImFwiLFxuXHQgICAgICAgICAgICBcIiZjb21wbGVtZW50O1wiOiBcIuKIgVwiLFxuXHQgICAgICAgICAgICBcIiZjb21wbGV4ZXM7XCI6IFwi4oSCXCIsXG5cdCAgICAgICAgICAgIFwiJmNvbmc7XCI6IFwi4omFXCIsXG5cdCAgICAgICAgICAgIFwiJmNvbmdkb3Q7XCI6IFwi4qmtXCIsXG5cdCAgICAgICAgICAgIFwiJmNvbmludDtcIjogXCLiiK5cIixcblx0ICAgICAgICAgICAgXCImY29wZjtcIjogXCLwnZWUXCIsXG5cdCAgICAgICAgICAgIFwiJmNvcHJvZDtcIjogXCLiiJBcIixcblx0ICAgICAgICAgICAgXCImY29weVwiOiBcIsKpXCIsXG5cdCAgICAgICAgICAgIFwiJmNvcHk7XCI6IFwiwqlcIixcblx0ICAgICAgICAgICAgXCImY29weXNyO1wiOiBcIuKEl1wiLFxuXHQgICAgICAgICAgICBcIiZjcmFycjtcIjogXCLihrVcIixcblx0ICAgICAgICAgICAgXCImY3Jvc3M7XCI6IFwi4pyXXCIsXG5cdCAgICAgICAgICAgIFwiJmNzY3I7XCI6IFwi8J2SuFwiLFxuXHQgICAgICAgICAgICBcIiZjc3ViO1wiOiBcIuKrj1wiLFxuXHQgICAgICAgICAgICBcIiZjc3ViZTtcIjogXCLiq5FcIixcblx0ICAgICAgICAgICAgXCImY3N1cDtcIjogXCLiq5BcIixcblx0ICAgICAgICAgICAgXCImY3N1cGU7XCI6IFwi4quSXCIsXG5cdCAgICAgICAgICAgIFwiJmN0ZG90O1wiOiBcIuKLr1wiLFxuXHQgICAgICAgICAgICBcIiZjdWRhcnJsO1wiOiBcIuKkuFwiLFxuXHQgICAgICAgICAgICBcIiZjdWRhcnJyO1wiOiBcIuKktVwiLFxuXHQgICAgICAgICAgICBcIiZjdWVwcjtcIjogXCLii55cIixcblx0ICAgICAgICAgICAgXCImY3Vlc2M7XCI6IFwi4oufXCIsXG5cdCAgICAgICAgICAgIFwiJmN1bGFycjtcIjogXCLihrZcIixcblx0ICAgICAgICAgICAgXCImY3VsYXJycDtcIjogXCLipL1cIixcblx0ICAgICAgICAgICAgXCImY3VwO1wiOiBcIuKIqlwiLFxuXHQgICAgICAgICAgICBcIiZjdXBicmNhcDtcIjogXCLiqYhcIixcblx0ICAgICAgICAgICAgXCImY3VwY2FwO1wiOiBcIuKphlwiLFxuXHQgICAgICAgICAgICBcIiZjdXBjdXA7XCI6IFwi4qmKXCIsXG5cdCAgICAgICAgICAgIFwiJmN1cGRvdDtcIjogXCLiio1cIixcblx0ICAgICAgICAgICAgXCImY3Vwb3I7XCI6IFwi4qmFXCIsXG5cdCAgICAgICAgICAgIFwiJmN1cHM7XCI6IFwi4oiq77iAXCIsXG5cdCAgICAgICAgICAgIFwiJmN1cmFycjtcIjogXCLihrdcIixcblx0ICAgICAgICAgICAgXCImY3VyYXJybTtcIjogXCLipLxcIixcblx0ICAgICAgICAgICAgXCImY3VybHllcXByZWM7XCI6IFwi4oueXCIsXG5cdCAgICAgICAgICAgIFwiJmN1cmx5ZXFzdWNjO1wiOiBcIuKLn1wiLFxuXHQgICAgICAgICAgICBcIiZjdXJseXZlZTtcIjogXCLii45cIixcblx0ICAgICAgICAgICAgXCImY3VybHl3ZWRnZTtcIjogXCLii49cIixcblx0ICAgICAgICAgICAgXCImY3VycmVuXCI6IFwiwqRcIixcblx0ICAgICAgICAgICAgXCImY3VycmVuO1wiOiBcIsKkXCIsXG5cdCAgICAgICAgICAgIFwiJmN1cnZlYXJyb3dsZWZ0O1wiOiBcIuKGtlwiLFxuXHQgICAgICAgICAgICBcIiZjdXJ2ZWFycm93cmlnaHQ7XCI6IFwi4oa3XCIsXG5cdCAgICAgICAgICAgIFwiJmN1dmVlO1wiOiBcIuKLjlwiLFxuXHQgICAgICAgICAgICBcIiZjdXdlZDtcIjogXCLii49cIixcblx0ICAgICAgICAgICAgXCImY3djb25pbnQ7XCI6IFwi4oiyXCIsXG5cdCAgICAgICAgICAgIFwiJmN3aW50O1wiOiBcIuKIsVwiLFxuXHQgICAgICAgICAgICBcIiZjeWxjdHk7XCI6IFwi4oytXCIsXG5cdCAgICAgICAgICAgIFwiJmRBcnI7XCI6IFwi4oeTXCIsXG5cdCAgICAgICAgICAgIFwiJmRIYXI7XCI6IFwi4qWlXCIsXG5cdCAgICAgICAgICAgIFwiJmRhZ2dlcjtcIjogXCLigKBcIixcblx0ICAgICAgICAgICAgXCImZGFsZXRoO1wiOiBcIuKEuFwiLFxuXHQgICAgICAgICAgICBcIiZkYXJyO1wiOiBcIuKGk1wiLFxuXHQgICAgICAgICAgICBcIiZkYXNoO1wiOiBcIuKAkFwiLFxuXHQgICAgICAgICAgICBcIiZkYXNodjtcIjogXCLiiqNcIixcblx0ICAgICAgICAgICAgXCImZGJrYXJvdztcIjogXCLipI9cIixcblx0ICAgICAgICAgICAgXCImZGJsYWM7XCI6IFwiy51cIixcblx0ICAgICAgICAgICAgXCImZGNhcm9uO1wiOiBcIsSPXCIsXG5cdCAgICAgICAgICAgIFwiJmRjeTtcIjogXCLQtFwiLFxuXHQgICAgICAgICAgICBcIiZkZDtcIjogXCLihYZcIixcblx0ICAgICAgICAgICAgXCImZGRhZ2dlcjtcIjogXCLigKFcIixcblx0ICAgICAgICAgICAgXCImZGRhcnI7XCI6IFwi4oeKXCIsXG5cdCAgICAgICAgICAgIFwiJmRkb3RzZXE7XCI6IFwi4qm3XCIsXG5cdCAgICAgICAgICAgIFwiJmRlZ1wiOiBcIsKwXCIsXG5cdCAgICAgICAgICAgIFwiJmRlZztcIjogXCLCsFwiLFxuXHQgICAgICAgICAgICBcIiZkZWx0YTtcIjogXCLOtFwiLFxuXHQgICAgICAgICAgICBcIiZkZW1wdHl2O1wiOiBcIuKmsVwiLFxuXHQgICAgICAgICAgICBcIiZkZmlzaHQ7XCI6IFwi4qW/XCIsXG5cdCAgICAgICAgICAgIFwiJmRmcjtcIjogXCLwnZShXCIsXG5cdCAgICAgICAgICAgIFwiJmRoYXJsO1wiOiBcIuKHg1wiLFxuXHQgICAgICAgICAgICBcIiZkaGFycjtcIjogXCLih4JcIixcblx0ICAgICAgICAgICAgXCImZGlhbTtcIjogXCLii4RcIixcblx0ICAgICAgICAgICAgXCImZGlhbW9uZDtcIjogXCLii4RcIixcblx0ICAgICAgICAgICAgXCImZGlhbW9uZHN1aXQ7XCI6IFwi4pmmXCIsXG5cdCAgICAgICAgICAgIFwiJmRpYW1zO1wiOiBcIuKZplwiLFxuXHQgICAgICAgICAgICBcIiZkaWU7XCI6IFwiwqhcIixcblx0ICAgICAgICAgICAgXCImZGlnYW1tYTtcIjogXCLPnVwiLFxuXHQgICAgICAgICAgICBcIiZkaXNpbjtcIjogXCLii7JcIixcblx0ICAgICAgICAgICAgXCImZGl2O1wiOiBcIsO3XCIsXG5cdCAgICAgICAgICAgIFwiJmRpdmlkZVwiOiBcIsO3XCIsXG5cdCAgICAgICAgICAgIFwiJmRpdmlkZTtcIjogXCLDt1wiLFxuXHQgICAgICAgICAgICBcIiZkaXZpZGVvbnRpbWVzO1wiOiBcIuKLh1wiLFxuXHQgICAgICAgICAgICBcIiZkaXZvbng7XCI6IFwi4ouHXCIsXG5cdCAgICAgICAgICAgIFwiJmRqY3k7XCI6IFwi0ZJcIixcblx0ICAgICAgICAgICAgXCImZGxjb3JuO1wiOiBcIuKMnlwiLFxuXHQgICAgICAgICAgICBcIiZkbGNyb3A7XCI6IFwi4oyNXCIsXG5cdCAgICAgICAgICAgIFwiJmRvbGxhcjtcIjogXCIkXCIsXG5cdCAgICAgICAgICAgIFwiJmRvcGY7XCI6IFwi8J2VlVwiLFxuXHQgICAgICAgICAgICBcIiZkb3Q7XCI6IFwiy5lcIixcblx0ICAgICAgICAgICAgXCImZG90ZXE7XCI6IFwi4omQXCIsXG5cdCAgICAgICAgICAgIFwiJmRvdGVxZG90O1wiOiBcIuKJkVwiLFxuXHQgICAgICAgICAgICBcIiZkb3RtaW51cztcIjogXCLiiLhcIixcblx0ICAgICAgICAgICAgXCImZG90cGx1cztcIjogXCLiiJRcIixcblx0ICAgICAgICAgICAgXCImZG90c3F1YXJlO1wiOiBcIuKKoVwiLFxuXHQgICAgICAgICAgICBcIiZkb3VibGViYXJ3ZWRnZTtcIjogXCLijIZcIixcblx0ICAgICAgICAgICAgXCImZG93bmFycm93O1wiOiBcIuKGk1wiLFxuXHQgICAgICAgICAgICBcIiZkb3duZG93bmFycm93cztcIjogXCLih4pcIixcblx0ICAgICAgICAgICAgXCImZG93bmhhcnBvb25sZWZ0O1wiOiBcIuKHg1wiLFxuXHQgICAgICAgICAgICBcIiZkb3duaGFycG9vbnJpZ2h0O1wiOiBcIuKHglwiLFxuXHQgICAgICAgICAgICBcIiZkcmJrYXJvdztcIjogXCLipJBcIixcblx0ICAgICAgICAgICAgXCImZHJjb3JuO1wiOiBcIuKMn1wiLFxuXHQgICAgICAgICAgICBcIiZkcmNyb3A7XCI6IFwi4oyMXCIsXG5cdCAgICAgICAgICAgIFwiJmRzY3I7XCI6IFwi8J2SuVwiLFxuXHQgICAgICAgICAgICBcIiZkc2N5O1wiOiBcItGVXCIsXG5cdCAgICAgICAgICAgIFwiJmRzb2w7XCI6IFwi4qe2XCIsXG5cdCAgICAgICAgICAgIFwiJmRzdHJvaztcIjogXCLEkVwiLFxuXHQgICAgICAgICAgICBcIiZkdGRvdDtcIjogXCLii7FcIixcblx0ICAgICAgICAgICAgXCImZHRyaTtcIjogXCLilr9cIixcblx0ICAgICAgICAgICAgXCImZHRyaWY7XCI6IFwi4pa+XCIsXG5cdCAgICAgICAgICAgIFwiJmR1YXJyO1wiOiBcIuKHtVwiLFxuXHQgICAgICAgICAgICBcIiZkdWhhcjtcIjogXCLipa9cIixcblx0ICAgICAgICAgICAgXCImZHdhbmdsZTtcIjogXCLipqZcIixcblx0ICAgICAgICAgICAgXCImZHpjeTtcIjogXCLRn1wiLFxuXHQgICAgICAgICAgICBcIiZkemlncmFycjtcIjogXCLin79cIixcblx0ICAgICAgICAgICAgXCImZUREb3Q7XCI6IFwi4qm3XCIsXG5cdCAgICAgICAgICAgIFwiJmVEb3Q7XCI6IFwi4omRXCIsXG5cdCAgICAgICAgICAgIFwiJmVhY3V0ZVwiOiBcIsOpXCIsXG5cdCAgICAgICAgICAgIFwiJmVhY3V0ZTtcIjogXCLDqVwiLFxuXHQgICAgICAgICAgICBcIiZlYXN0ZXI7XCI6IFwi4qmuXCIsXG5cdCAgICAgICAgICAgIFwiJmVjYXJvbjtcIjogXCLEm1wiLFxuXHQgICAgICAgICAgICBcIiZlY2lyO1wiOiBcIuKJllwiLFxuXHQgICAgICAgICAgICBcIiZlY2lyY1wiOiBcIsOqXCIsXG5cdCAgICAgICAgICAgIFwiJmVjaXJjO1wiOiBcIsOqXCIsXG5cdCAgICAgICAgICAgIFwiJmVjb2xvbjtcIjogXCLiiZVcIixcblx0ICAgICAgICAgICAgXCImZWN5O1wiOiBcItGNXCIsXG5cdCAgICAgICAgICAgIFwiJmVkb3Q7XCI6IFwixJdcIixcblx0ICAgICAgICAgICAgXCImZWU7XCI6IFwi4oWHXCIsXG5cdCAgICAgICAgICAgIFwiJmVmRG90O1wiOiBcIuKJklwiLFxuXHQgICAgICAgICAgICBcIiZlZnI7XCI6IFwi8J2UolwiLFxuXHQgICAgICAgICAgICBcIiZlZztcIjogXCLiqppcIixcblx0ICAgICAgICAgICAgXCImZWdyYXZlXCI6IFwiw6hcIixcblx0ICAgICAgICAgICAgXCImZWdyYXZlO1wiOiBcIsOoXCIsXG5cdCAgICAgICAgICAgIFwiJmVncztcIjogXCLiqpZcIixcblx0ICAgICAgICAgICAgXCImZWdzZG90O1wiOiBcIuKqmFwiLFxuXHQgICAgICAgICAgICBcIiZlbDtcIjogXCLiqplcIixcblx0ICAgICAgICAgICAgXCImZWxpbnRlcnM7XCI6IFwi4o+nXCIsXG5cdCAgICAgICAgICAgIFwiJmVsbDtcIjogXCLihJNcIixcblx0ICAgICAgICAgICAgXCImZWxzO1wiOiBcIuKqlVwiLFxuXHQgICAgICAgICAgICBcIiZlbHNkb3Q7XCI6IFwi4qqXXCIsXG5cdCAgICAgICAgICAgIFwiJmVtYWNyO1wiOiBcIsSTXCIsXG5cdCAgICAgICAgICAgIFwiJmVtcHR5O1wiOiBcIuKIhVwiLFxuXHQgICAgICAgICAgICBcIiZlbXB0eXNldDtcIjogXCLiiIVcIixcblx0ICAgICAgICAgICAgXCImZW1wdHl2O1wiOiBcIuKIhVwiLFxuXHQgICAgICAgICAgICBcIiZlbXNwMTM7XCI6IFwi4oCEXCIsXG5cdCAgICAgICAgICAgIFwiJmVtc3AxNDtcIjogXCLigIVcIixcblx0ICAgICAgICAgICAgXCImZW1zcDtcIjogXCLigINcIixcblx0ICAgICAgICAgICAgXCImZW5nO1wiOiBcIsWLXCIsXG5cdCAgICAgICAgICAgIFwiJmVuc3A7XCI6IFwi4oCCXCIsXG5cdCAgICAgICAgICAgIFwiJmVvZ29uO1wiOiBcIsSZXCIsXG5cdCAgICAgICAgICAgIFwiJmVvcGY7XCI6IFwi8J2VllwiLFxuXHQgICAgICAgICAgICBcIiZlcGFyO1wiOiBcIuKLlVwiLFxuXHQgICAgICAgICAgICBcIiZlcGFyc2w7XCI6IFwi4qejXCIsXG5cdCAgICAgICAgICAgIFwiJmVwbHVzO1wiOiBcIuKpsVwiLFxuXHQgICAgICAgICAgICBcIiZlcHNpO1wiOiBcIs61XCIsXG5cdCAgICAgICAgICAgIFwiJmVwc2lsb247XCI6IFwizrVcIixcblx0ICAgICAgICAgICAgXCImZXBzaXY7XCI6IFwiz7VcIixcblx0ICAgICAgICAgICAgXCImZXFjaXJjO1wiOiBcIuKJllwiLFxuXHQgICAgICAgICAgICBcIiZlcWNvbG9uO1wiOiBcIuKJlVwiLFxuXHQgICAgICAgICAgICBcIiZlcXNpbTtcIjogXCLiiYJcIixcblx0ICAgICAgICAgICAgXCImZXFzbGFudGd0cjtcIjogXCLiqpZcIixcblx0ICAgICAgICAgICAgXCImZXFzbGFudGxlc3M7XCI6IFwi4qqVXCIsXG5cdCAgICAgICAgICAgIFwiJmVxdWFscztcIjogXCI9XCIsXG5cdCAgICAgICAgICAgIFwiJmVxdWVzdDtcIjogXCLiiZ9cIixcblx0ICAgICAgICAgICAgXCImZXF1aXY7XCI6IFwi4omhXCIsXG5cdCAgICAgICAgICAgIFwiJmVxdWl2REQ7XCI6IFwi4qm4XCIsXG5cdCAgICAgICAgICAgIFwiJmVxdnBhcnNsO1wiOiBcIuKnpVwiLFxuXHQgICAgICAgICAgICBcIiZlckRvdDtcIjogXCLiiZNcIixcblx0ICAgICAgICAgICAgXCImZXJhcnI7XCI6IFwi4qWxXCIsXG5cdCAgICAgICAgICAgIFwiJmVzY3I7XCI6IFwi4oSvXCIsXG5cdCAgICAgICAgICAgIFwiJmVzZG90O1wiOiBcIuKJkFwiLFxuXHQgICAgICAgICAgICBcIiZlc2ltO1wiOiBcIuKJglwiLFxuXHQgICAgICAgICAgICBcIiZldGE7XCI6IFwizrdcIixcblx0ICAgICAgICAgICAgXCImZXRoXCI6IFwiw7BcIixcblx0ICAgICAgICAgICAgXCImZXRoO1wiOiBcIsOwXCIsXG5cdCAgICAgICAgICAgIFwiJmV1bWxcIjogXCLDq1wiLFxuXHQgICAgICAgICAgICBcIiZldW1sO1wiOiBcIsOrXCIsXG5cdCAgICAgICAgICAgIFwiJmV1cm87XCI6IFwi4oKsXCIsXG5cdCAgICAgICAgICAgIFwiJmV4Y2w7XCI6IFwiIVwiLFxuXHQgICAgICAgICAgICBcIiZleGlzdDtcIjogXCLiiINcIixcblx0ICAgICAgICAgICAgXCImZXhwZWN0YXRpb247XCI6IFwi4oSwXCIsXG5cdCAgICAgICAgICAgIFwiJmV4cG9uZW50aWFsZTtcIjogXCLihYdcIixcblx0ICAgICAgICAgICAgXCImZmFsbGluZ2RvdHNlcTtcIjogXCLiiZJcIixcblx0ICAgICAgICAgICAgXCImZmN5O1wiOiBcItGEXCIsXG5cdCAgICAgICAgICAgIFwiJmZlbWFsZTtcIjogXCLimYBcIixcblx0ICAgICAgICAgICAgXCImZmZpbGlnO1wiOiBcIu+sg1wiLFxuXHQgICAgICAgICAgICBcIiZmZmxpZztcIjogXCLvrIBcIixcblx0ICAgICAgICAgICAgXCImZmZsbGlnO1wiOiBcIu+shFwiLFxuXHQgICAgICAgICAgICBcIiZmZnI7XCI6IFwi8J2Uo1wiLFxuXHQgICAgICAgICAgICBcIiZmaWxpZztcIjogXCLvrIFcIixcblx0ICAgICAgICAgICAgXCImZmpsaWc7XCI6IFwiZmpcIixcblx0ICAgICAgICAgICAgXCImZmxhdDtcIjogXCLima1cIixcblx0ICAgICAgICAgICAgXCImZmxsaWc7XCI6IFwi76yCXCIsXG5cdCAgICAgICAgICAgIFwiJmZsdG5zO1wiOiBcIuKWsVwiLFxuXHQgICAgICAgICAgICBcIiZmbm9mO1wiOiBcIsaSXCIsXG5cdCAgICAgICAgICAgIFwiJmZvcGY7XCI6IFwi8J2Vl1wiLFxuXHQgICAgICAgICAgICBcIiZmb3JhbGw7XCI6IFwi4oiAXCIsXG5cdCAgICAgICAgICAgIFwiJmZvcms7XCI6IFwi4ouUXCIsXG5cdCAgICAgICAgICAgIFwiJmZvcmt2O1wiOiBcIuKrmVwiLFxuXHQgICAgICAgICAgICBcIiZmcGFydGludDtcIjogXCLiqI1cIixcblx0ICAgICAgICAgICAgXCImZnJhYzEyXCI6IFwiwr1cIixcblx0ICAgICAgICAgICAgXCImZnJhYzEyO1wiOiBcIsK9XCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWMxMztcIjogXCLihZNcIixcblx0ICAgICAgICAgICAgXCImZnJhYzE0XCI6IFwiwrxcIixcblx0ICAgICAgICAgICAgXCImZnJhYzE0O1wiOiBcIsK8XCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWMxNTtcIjogXCLihZVcIixcblx0ICAgICAgICAgICAgXCImZnJhYzE2O1wiOiBcIuKFmVwiLFxuXHQgICAgICAgICAgICBcIiZmcmFjMTg7XCI6IFwi4oWbXCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWMyMztcIjogXCLihZRcIixcblx0ICAgICAgICAgICAgXCImZnJhYzI1O1wiOiBcIuKFllwiLFxuXHQgICAgICAgICAgICBcIiZmcmFjMzRcIjogXCLCvlwiLFxuXHQgICAgICAgICAgICBcIiZmcmFjMzQ7XCI6IFwiwr5cIixcblx0ICAgICAgICAgICAgXCImZnJhYzM1O1wiOiBcIuKFl1wiLFxuXHQgICAgICAgICAgICBcIiZmcmFjMzg7XCI6IFwi4oWcXCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWM0NTtcIjogXCLihZhcIixcblx0ICAgICAgICAgICAgXCImZnJhYzU2O1wiOiBcIuKFmlwiLFxuXHQgICAgICAgICAgICBcIiZmcmFjNTg7XCI6IFwi4oWdXCIsXG5cdCAgICAgICAgICAgIFwiJmZyYWM3ODtcIjogXCLihZ5cIixcblx0ICAgICAgICAgICAgXCImZnJhc2w7XCI6IFwi4oGEXCIsXG5cdCAgICAgICAgICAgIFwiJmZyb3duO1wiOiBcIuKMolwiLFxuXHQgICAgICAgICAgICBcIiZmc2NyO1wiOiBcIvCdkrtcIixcblx0ICAgICAgICAgICAgXCImZ0U7XCI6IFwi4omnXCIsXG5cdCAgICAgICAgICAgIFwiJmdFbDtcIjogXCLiqoxcIixcblx0ICAgICAgICAgICAgXCImZ2FjdXRlO1wiOiBcIse1XCIsXG5cdCAgICAgICAgICAgIFwiJmdhbW1hO1wiOiBcIs6zXCIsXG5cdCAgICAgICAgICAgIFwiJmdhbW1hZDtcIjogXCLPnVwiLFxuXHQgICAgICAgICAgICBcIiZnYXA7XCI6IFwi4qqGXCIsXG5cdCAgICAgICAgICAgIFwiJmdicmV2ZTtcIjogXCLEn1wiLFxuXHQgICAgICAgICAgICBcIiZnY2lyYztcIjogXCLEnVwiLFxuXHQgICAgICAgICAgICBcIiZnY3k7XCI6IFwi0LNcIixcblx0ICAgICAgICAgICAgXCImZ2RvdDtcIjogXCLEoVwiLFxuXHQgICAgICAgICAgICBcIiZnZTtcIjogXCLiiaVcIixcblx0ICAgICAgICAgICAgXCImZ2VsO1wiOiBcIuKLm1wiLFxuXHQgICAgICAgICAgICBcIiZnZXE7XCI6IFwi4omlXCIsXG5cdCAgICAgICAgICAgIFwiJmdlcXE7XCI6IFwi4omnXCIsXG5cdCAgICAgICAgICAgIFwiJmdlcXNsYW50O1wiOiBcIuKpvlwiLFxuXHQgICAgICAgICAgICBcIiZnZXM7XCI6IFwi4qm+XCIsXG5cdCAgICAgICAgICAgIFwiJmdlc2NjO1wiOiBcIuKqqVwiLFxuXHQgICAgICAgICAgICBcIiZnZXNkb3Q7XCI6IFwi4qqAXCIsXG5cdCAgICAgICAgICAgIFwiJmdlc2RvdG87XCI6IFwi4qqCXCIsXG5cdCAgICAgICAgICAgIFwiJmdlc2RvdG9sO1wiOiBcIuKqhFwiLFxuXHQgICAgICAgICAgICBcIiZnZXNsO1wiOiBcIuKLm++4gFwiLFxuXHQgICAgICAgICAgICBcIiZnZXNsZXM7XCI6IFwi4qqUXCIsXG5cdCAgICAgICAgICAgIFwiJmdmcjtcIjogXCLwnZSkXCIsXG5cdCAgICAgICAgICAgIFwiJmdnO1wiOiBcIuKJq1wiLFxuXHQgICAgICAgICAgICBcIiZnZ2c7XCI6IFwi4ouZXCIsXG5cdCAgICAgICAgICAgIFwiJmdpbWVsO1wiOiBcIuKEt1wiLFxuXHQgICAgICAgICAgICBcIiZnamN5O1wiOiBcItGTXCIsXG5cdCAgICAgICAgICAgIFwiJmdsO1wiOiBcIuKJt1wiLFxuXHQgICAgICAgICAgICBcIiZnbEU7XCI6IFwi4qqSXCIsXG5cdCAgICAgICAgICAgIFwiJmdsYTtcIjogXCLiqqVcIixcblx0ICAgICAgICAgICAgXCImZ2xqO1wiOiBcIuKqpFwiLFxuXHQgICAgICAgICAgICBcIiZnbkU7XCI6IFwi4ompXCIsXG5cdCAgICAgICAgICAgIFwiJmduYXA7XCI6IFwi4qqKXCIsXG5cdCAgICAgICAgICAgIFwiJmduYXBwcm94O1wiOiBcIuKqilwiLFxuXHQgICAgICAgICAgICBcIiZnbmU7XCI6IFwi4qqIXCIsXG5cdCAgICAgICAgICAgIFwiJmduZXE7XCI6IFwi4qqIXCIsXG5cdCAgICAgICAgICAgIFwiJmduZXFxO1wiOiBcIuKJqVwiLFxuXHQgICAgICAgICAgICBcIiZnbnNpbTtcIjogXCLii6dcIixcblx0ICAgICAgICAgICAgXCImZ29wZjtcIjogXCLwnZWYXCIsXG5cdCAgICAgICAgICAgIFwiJmdyYXZlO1wiOiBcImBcIixcblx0ICAgICAgICAgICAgXCImZ3NjcjtcIjogXCLihIpcIixcblx0ICAgICAgICAgICAgXCImZ3NpbTtcIjogXCLiibNcIixcblx0ICAgICAgICAgICAgXCImZ3NpbWU7XCI6IFwi4qqOXCIsXG5cdCAgICAgICAgICAgIFwiJmdzaW1sO1wiOiBcIuKqkFwiLFxuXHQgICAgICAgICAgICBcIiZndFwiOiBcIj5cIixcblx0ICAgICAgICAgICAgXCImZ3Q7XCI6IFwiPlwiLFxuXHQgICAgICAgICAgICBcIiZndGNjO1wiOiBcIuKqp1wiLFxuXHQgICAgICAgICAgICBcIiZndGNpcjtcIjogXCLiqbpcIixcblx0ICAgICAgICAgICAgXCImZ3Rkb3Q7XCI6IFwi4ouXXCIsXG5cdCAgICAgICAgICAgIFwiJmd0bFBhcjtcIjogXCLippVcIixcblx0ICAgICAgICAgICAgXCImZ3RxdWVzdDtcIjogXCLiqbxcIixcblx0ICAgICAgICAgICAgXCImZ3RyYXBwcm94O1wiOiBcIuKqhlwiLFxuXHQgICAgICAgICAgICBcIiZndHJhcnI7XCI6IFwi4qW4XCIsXG5cdCAgICAgICAgICAgIFwiJmd0cmRvdDtcIjogXCLii5dcIixcblx0ICAgICAgICAgICAgXCImZ3RyZXFsZXNzO1wiOiBcIuKLm1wiLFxuXHQgICAgICAgICAgICBcIiZndHJlcXFsZXNzO1wiOiBcIuKqjFwiLFxuXHQgICAgICAgICAgICBcIiZndHJsZXNzO1wiOiBcIuKJt1wiLFxuXHQgICAgICAgICAgICBcIiZndHJzaW07XCI6IFwi4omzXCIsXG5cdCAgICAgICAgICAgIFwiJmd2ZXJ0bmVxcTtcIjogXCLiianvuIBcIixcblx0ICAgICAgICAgICAgXCImZ3ZuRTtcIjogXCLiianvuIBcIixcblx0ICAgICAgICAgICAgXCImaEFycjtcIjogXCLih5RcIixcblx0ICAgICAgICAgICAgXCImaGFpcnNwO1wiOiBcIuKAilwiLFxuXHQgICAgICAgICAgICBcIiZoYWxmO1wiOiBcIsK9XCIsXG5cdCAgICAgICAgICAgIFwiJmhhbWlsdDtcIjogXCLihItcIixcblx0ICAgICAgICAgICAgXCImaGFyZGN5O1wiOiBcItGKXCIsXG5cdCAgICAgICAgICAgIFwiJmhhcnI7XCI6IFwi4oaUXCIsXG5cdCAgICAgICAgICAgIFwiJmhhcnJjaXI7XCI6IFwi4qWIXCIsXG5cdCAgICAgICAgICAgIFwiJmhhcnJ3O1wiOiBcIuKGrVwiLFxuXHQgICAgICAgICAgICBcIiZoYmFyO1wiOiBcIuKEj1wiLFxuXHQgICAgICAgICAgICBcIiZoY2lyYztcIjogXCLEpVwiLFxuXHQgICAgICAgICAgICBcIiZoZWFydHM7XCI6IFwi4pmlXCIsXG5cdCAgICAgICAgICAgIFwiJmhlYXJ0c3VpdDtcIjogXCLimaVcIixcblx0ICAgICAgICAgICAgXCImaGVsbGlwO1wiOiBcIuKAplwiLFxuXHQgICAgICAgICAgICBcIiZoZXJjb247XCI6IFwi4oq5XCIsXG5cdCAgICAgICAgICAgIFwiJmhmcjtcIjogXCLwnZSlXCIsXG5cdCAgICAgICAgICAgIFwiJmhrc2Vhcm93O1wiOiBcIuKkpVwiLFxuXHQgICAgICAgICAgICBcIiZoa3N3YXJvdztcIjogXCLipKZcIixcblx0ICAgICAgICAgICAgXCImaG9hcnI7XCI6IFwi4oe/XCIsXG5cdCAgICAgICAgICAgIFwiJmhvbXRodDtcIjogXCLiiLtcIixcblx0ICAgICAgICAgICAgXCImaG9va2xlZnRhcnJvdztcIjogXCLihqlcIixcblx0ICAgICAgICAgICAgXCImaG9va3JpZ2h0YXJyb3c7XCI6IFwi4oaqXCIsXG5cdCAgICAgICAgICAgIFwiJmhvcGY7XCI6IFwi8J2VmVwiLFxuXHQgICAgICAgICAgICBcIiZob3JiYXI7XCI6IFwi4oCVXCIsXG5cdCAgICAgICAgICAgIFwiJmhzY3I7XCI6IFwi8J2SvVwiLFxuXHQgICAgICAgICAgICBcIiZoc2xhc2g7XCI6IFwi4oSPXCIsXG5cdCAgICAgICAgICAgIFwiJmhzdHJvaztcIjogXCLEp1wiLFxuXHQgICAgICAgICAgICBcIiZoeWJ1bGw7XCI6IFwi4oGDXCIsXG5cdCAgICAgICAgICAgIFwiJmh5cGhlbjtcIjogXCLigJBcIixcblx0ICAgICAgICAgICAgXCImaWFjdXRlXCI6IFwiw61cIixcblx0ICAgICAgICAgICAgXCImaWFjdXRlO1wiOiBcIsOtXCIsXG5cdCAgICAgICAgICAgIFwiJmljO1wiOiBcIuKBo1wiLFxuXHQgICAgICAgICAgICBcIiZpY2lyY1wiOiBcIsOuXCIsXG5cdCAgICAgICAgICAgIFwiJmljaXJjO1wiOiBcIsOuXCIsXG5cdCAgICAgICAgICAgIFwiJmljeTtcIjogXCLQuFwiLFxuXHQgICAgICAgICAgICBcIiZpZWN5O1wiOiBcItC1XCIsXG5cdCAgICAgICAgICAgIFwiJmlleGNsXCI6IFwiwqFcIixcblx0ICAgICAgICAgICAgXCImaWV4Y2w7XCI6IFwiwqFcIixcblx0ICAgICAgICAgICAgXCImaWZmO1wiOiBcIuKHlFwiLFxuXHQgICAgICAgICAgICBcIiZpZnI7XCI6IFwi8J2UplwiLFxuXHQgICAgICAgICAgICBcIiZpZ3JhdmVcIjogXCLDrFwiLFxuXHQgICAgICAgICAgICBcIiZpZ3JhdmU7XCI6IFwiw6xcIixcblx0ICAgICAgICAgICAgXCImaWk7XCI6IFwi4oWIXCIsXG5cdCAgICAgICAgICAgIFwiJmlpaWludDtcIjogXCLiqIxcIixcblx0ICAgICAgICAgICAgXCImaWlpbnQ7XCI6IFwi4oitXCIsXG5cdCAgICAgICAgICAgIFwiJmlpbmZpbjtcIjogXCLip5xcIixcblx0ICAgICAgICAgICAgXCImaWlvdGE7XCI6IFwi4oSpXCIsXG5cdCAgICAgICAgICAgIFwiJmlqbGlnO1wiOiBcIsSzXCIsXG5cdCAgICAgICAgICAgIFwiJmltYWNyO1wiOiBcIsSrXCIsXG5cdCAgICAgICAgICAgIFwiJmltYWdlO1wiOiBcIuKEkVwiLFxuXHQgICAgICAgICAgICBcIiZpbWFnbGluZTtcIjogXCLihJBcIixcblx0ICAgICAgICAgICAgXCImaW1hZ3BhcnQ7XCI6IFwi4oSRXCIsXG5cdCAgICAgICAgICAgIFwiJmltYXRoO1wiOiBcIsSxXCIsXG5cdCAgICAgICAgICAgIFwiJmltb2Y7XCI6IFwi4oq3XCIsXG5cdCAgICAgICAgICAgIFwiJmltcGVkO1wiOiBcIsa1XCIsXG5cdCAgICAgICAgICAgIFwiJmluO1wiOiBcIuKIiFwiLFxuXHQgICAgICAgICAgICBcIiZpbmNhcmU7XCI6IFwi4oSFXCIsXG5cdCAgICAgICAgICAgIFwiJmluZmluO1wiOiBcIuKInlwiLFxuXHQgICAgICAgICAgICBcIiZpbmZpbnRpZTtcIjogXCLip51cIixcblx0ICAgICAgICAgICAgXCImaW5vZG90O1wiOiBcIsSxXCIsXG5cdCAgICAgICAgICAgIFwiJmludDtcIjogXCLiiKtcIixcblx0ICAgICAgICAgICAgXCImaW50Y2FsO1wiOiBcIuKKulwiLFxuXHQgICAgICAgICAgICBcIiZpbnRlZ2VycztcIjogXCLihKRcIixcblx0ICAgICAgICAgICAgXCImaW50ZXJjYWw7XCI6IFwi4oq6XCIsXG5cdCAgICAgICAgICAgIFwiJmludGxhcmhrO1wiOiBcIuKol1wiLFxuXHQgICAgICAgICAgICBcIiZpbnRwcm9kO1wiOiBcIuKovFwiLFxuXHQgICAgICAgICAgICBcIiZpb2N5O1wiOiBcItGRXCIsXG5cdCAgICAgICAgICAgIFwiJmlvZ29uO1wiOiBcIsSvXCIsXG5cdCAgICAgICAgICAgIFwiJmlvcGY7XCI6IFwi8J2VmlwiLFxuXHQgICAgICAgICAgICBcIiZpb3RhO1wiOiBcIs65XCIsXG5cdCAgICAgICAgICAgIFwiJmlwcm9kO1wiOiBcIuKovFwiLFxuXHQgICAgICAgICAgICBcIiZpcXVlc3RcIjogXCLCv1wiLFxuXHQgICAgICAgICAgICBcIiZpcXVlc3Q7XCI6IFwiwr9cIixcblx0ICAgICAgICAgICAgXCImaXNjcjtcIjogXCLwnZK+XCIsXG5cdCAgICAgICAgICAgIFwiJmlzaW47XCI6IFwi4oiIXCIsXG5cdCAgICAgICAgICAgIFwiJmlzaW5FO1wiOiBcIuKLuVwiLFxuXHQgICAgICAgICAgICBcIiZpc2luZG90O1wiOiBcIuKLtVwiLFxuXHQgICAgICAgICAgICBcIiZpc2lucztcIjogXCLii7RcIixcblx0ICAgICAgICAgICAgXCImaXNpbnN2O1wiOiBcIuKLs1wiLFxuXHQgICAgICAgICAgICBcIiZpc2ludjtcIjogXCLiiIhcIixcblx0ICAgICAgICAgICAgXCImaXQ7XCI6IFwi4oGiXCIsXG5cdCAgICAgICAgICAgIFwiJml0aWxkZTtcIjogXCLEqVwiLFxuXHQgICAgICAgICAgICBcIiZpdWtjeTtcIjogXCLRllwiLFxuXHQgICAgICAgICAgICBcIiZpdW1sXCI6IFwiw69cIixcblx0ICAgICAgICAgICAgXCImaXVtbDtcIjogXCLDr1wiLFxuXHQgICAgICAgICAgICBcIiZqY2lyYztcIjogXCLEtVwiLFxuXHQgICAgICAgICAgICBcIiZqY3k7XCI6IFwi0LlcIixcblx0ICAgICAgICAgICAgXCImamZyO1wiOiBcIvCdlKdcIixcblx0ICAgICAgICAgICAgXCImam1hdGg7XCI6IFwiyLdcIixcblx0ICAgICAgICAgICAgXCImam9wZjtcIjogXCLwnZWbXCIsXG5cdCAgICAgICAgICAgIFwiJmpzY3I7XCI6IFwi8J2Sv1wiLFxuXHQgICAgICAgICAgICBcIiZqc2VyY3k7XCI6IFwi0ZhcIixcblx0ICAgICAgICAgICAgXCImanVrY3k7XCI6IFwi0ZRcIixcblx0ICAgICAgICAgICAgXCIma2FwcGE7XCI6IFwizrpcIixcblx0ICAgICAgICAgICAgXCIma2FwcGF2O1wiOiBcIs+wXCIsXG5cdCAgICAgICAgICAgIFwiJmtjZWRpbDtcIjogXCLEt1wiLFxuXHQgICAgICAgICAgICBcIiZrY3k7XCI6IFwi0LpcIixcblx0ICAgICAgICAgICAgXCIma2ZyO1wiOiBcIvCdlKhcIixcblx0ICAgICAgICAgICAgXCIma2dyZWVuO1wiOiBcIsS4XCIsXG5cdCAgICAgICAgICAgIFwiJmtoY3k7XCI6IFwi0YVcIixcblx0ICAgICAgICAgICAgXCIma2pjeTtcIjogXCLRnFwiLFxuXHQgICAgICAgICAgICBcIiZrb3BmO1wiOiBcIvCdlZxcIixcblx0ICAgICAgICAgICAgXCIma3NjcjtcIjogXCLwnZOAXCIsXG5cdCAgICAgICAgICAgIFwiJmxBYXJyO1wiOiBcIuKHmlwiLFxuXHQgICAgICAgICAgICBcIiZsQXJyO1wiOiBcIuKHkFwiLFxuXHQgICAgICAgICAgICBcIiZsQXRhaWw7XCI6IFwi4qSbXCIsXG5cdCAgICAgICAgICAgIFwiJmxCYXJyO1wiOiBcIuKkjlwiLFxuXHQgICAgICAgICAgICBcIiZsRTtcIjogXCLiiaZcIixcblx0ICAgICAgICAgICAgXCImbEVnO1wiOiBcIuKqi1wiLFxuXHQgICAgICAgICAgICBcIiZsSGFyO1wiOiBcIuKlolwiLFxuXHQgICAgICAgICAgICBcIiZsYWN1dGU7XCI6IFwixLpcIixcblx0ICAgICAgICAgICAgXCImbGFlbXB0eXY7XCI6IFwi4qa0XCIsXG5cdCAgICAgICAgICAgIFwiJmxhZ3JhbjtcIjogXCLihJJcIixcblx0ICAgICAgICAgICAgXCImbGFtYmRhO1wiOiBcIs67XCIsXG5cdCAgICAgICAgICAgIFwiJmxhbmc7XCI6IFwi4p+oXCIsXG5cdCAgICAgICAgICAgIFwiJmxhbmdkO1wiOiBcIuKmkVwiLFxuXHQgICAgICAgICAgICBcIiZsYW5nbGU7XCI6IFwi4p+oXCIsXG5cdCAgICAgICAgICAgIFwiJmxhcDtcIjogXCLiqoVcIixcblx0ICAgICAgICAgICAgXCImbGFxdW9cIjogXCLCq1wiLFxuXHQgICAgICAgICAgICBcIiZsYXF1bztcIjogXCLCq1wiLFxuXHQgICAgICAgICAgICBcIiZsYXJyO1wiOiBcIuKGkFwiLFxuXHQgICAgICAgICAgICBcIiZsYXJyYjtcIjogXCLih6RcIixcblx0ICAgICAgICAgICAgXCImbGFycmJmcztcIjogXCLipJ9cIixcblx0ICAgICAgICAgICAgXCImbGFycmZzO1wiOiBcIuKknVwiLFxuXHQgICAgICAgICAgICBcIiZsYXJyaGs7XCI6IFwi4oapXCIsXG5cdCAgICAgICAgICAgIFwiJmxhcnJscDtcIjogXCLihqtcIixcblx0ICAgICAgICAgICAgXCImbGFycnBsO1wiOiBcIuKkuVwiLFxuXHQgICAgICAgICAgICBcIiZsYXJyc2ltO1wiOiBcIuKls1wiLFxuXHQgICAgICAgICAgICBcIiZsYXJydGw7XCI6IFwi4oaiXCIsXG5cdCAgICAgICAgICAgIFwiJmxhdDtcIjogXCLiqqtcIixcblx0ICAgICAgICAgICAgXCImbGF0YWlsO1wiOiBcIuKkmVwiLFxuXHQgICAgICAgICAgICBcIiZsYXRlO1wiOiBcIuKqrVwiLFxuXHQgICAgICAgICAgICBcIiZsYXRlcztcIjogXCLiqq3vuIBcIixcblx0ICAgICAgICAgICAgXCImbGJhcnI7XCI6IFwi4qSMXCIsXG5cdCAgICAgICAgICAgIFwiJmxiYnJrO1wiOiBcIuKdslwiLFxuXHQgICAgICAgICAgICBcIiZsYnJhY2U7XCI6IFwie1wiLFxuXHQgICAgICAgICAgICBcIiZsYnJhY2s7XCI6IFwiW1wiLFxuXHQgICAgICAgICAgICBcIiZsYnJrZTtcIjogXCLipotcIixcblx0ICAgICAgICAgICAgXCImbGJya3NsZDtcIjogXCLipo9cIixcblx0ICAgICAgICAgICAgXCImbGJya3NsdTtcIjogXCLipo1cIixcblx0ICAgICAgICAgICAgXCImbGNhcm9uO1wiOiBcIsS+XCIsXG5cdCAgICAgICAgICAgIFwiJmxjZWRpbDtcIjogXCLEvFwiLFxuXHQgICAgICAgICAgICBcIiZsY2VpbDtcIjogXCLijIhcIixcblx0ICAgICAgICAgICAgXCImbGN1YjtcIjogXCJ7XCIsXG5cdCAgICAgICAgICAgIFwiJmxjeTtcIjogXCLQu1wiLFxuXHQgICAgICAgICAgICBcIiZsZGNhO1wiOiBcIuKktlwiLFxuXHQgICAgICAgICAgICBcIiZsZHF1bztcIjogXCLigJxcIixcblx0ICAgICAgICAgICAgXCImbGRxdW9yO1wiOiBcIuKAnlwiLFxuXHQgICAgICAgICAgICBcIiZsZHJkaGFyO1wiOiBcIuKlp1wiLFxuXHQgICAgICAgICAgICBcIiZsZHJ1c2hhcjtcIjogXCLipYtcIixcblx0ICAgICAgICAgICAgXCImbGRzaDtcIjogXCLihrJcIixcblx0ICAgICAgICAgICAgXCImbGU7XCI6IFwi4omkXCIsXG5cdCAgICAgICAgICAgIFwiJmxlZnRhcnJvdztcIjogXCLihpBcIixcblx0ICAgICAgICAgICAgXCImbGVmdGFycm93dGFpbDtcIjogXCLihqJcIixcblx0ICAgICAgICAgICAgXCImbGVmdGhhcnBvb25kb3duO1wiOiBcIuKGvVwiLFxuXHQgICAgICAgICAgICBcIiZsZWZ0aGFycG9vbnVwO1wiOiBcIuKGvFwiLFxuXHQgICAgICAgICAgICBcIiZsZWZ0bGVmdGFycm93cztcIjogXCLih4dcIixcblx0ICAgICAgICAgICAgXCImbGVmdHJpZ2h0YXJyb3c7XCI6IFwi4oaUXCIsXG5cdCAgICAgICAgICAgIFwiJmxlZnRyaWdodGFycm93cztcIjogXCLih4ZcIixcblx0ICAgICAgICAgICAgXCImbGVmdHJpZ2h0aGFycG9vbnM7XCI6IFwi4oeLXCIsXG5cdCAgICAgICAgICAgIFwiJmxlZnRyaWdodHNxdWlnYXJyb3c7XCI6IFwi4oatXCIsXG5cdCAgICAgICAgICAgIFwiJmxlZnR0aHJlZXRpbWVzO1wiOiBcIuKLi1wiLFxuXHQgICAgICAgICAgICBcIiZsZWc7XCI6IFwi4ouaXCIsXG5cdCAgICAgICAgICAgIFwiJmxlcTtcIjogXCLiiaRcIixcblx0ICAgICAgICAgICAgXCImbGVxcTtcIjogXCLiiaZcIixcblx0ICAgICAgICAgICAgXCImbGVxc2xhbnQ7XCI6IFwi4qm9XCIsXG5cdCAgICAgICAgICAgIFwiJmxlcztcIjogXCLiqb1cIixcblx0ICAgICAgICAgICAgXCImbGVzY2M7XCI6IFwi4qqoXCIsXG5cdCAgICAgICAgICAgIFwiJmxlc2RvdDtcIjogXCLiqb9cIixcblx0ICAgICAgICAgICAgXCImbGVzZG90bztcIjogXCLiqoFcIixcblx0ICAgICAgICAgICAgXCImbGVzZG90b3I7XCI6IFwi4qqDXCIsXG5cdCAgICAgICAgICAgIFwiJmxlc2c7XCI6IFwi4oua77iAXCIsXG5cdCAgICAgICAgICAgIFwiJmxlc2dlcztcIjogXCLiqpNcIixcblx0ICAgICAgICAgICAgXCImbGVzc2FwcHJveDtcIjogXCLiqoVcIixcblx0ICAgICAgICAgICAgXCImbGVzc2RvdDtcIjogXCLii5ZcIixcblx0ICAgICAgICAgICAgXCImbGVzc2VxZ3RyO1wiOiBcIuKLmlwiLFxuXHQgICAgICAgICAgICBcIiZsZXNzZXFxZ3RyO1wiOiBcIuKqi1wiLFxuXHQgICAgICAgICAgICBcIiZsZXNzZ3RyO1wiOiBcIuKJtlwiLFxuXHQgICAgICAgICAgICBcIiZsZXNzc2ltO1wiOiBcIuKJslwiLFxuXHQgICAgICAgICAgICBcIiZsZmlzaHQ7XCI6IFwi4qW8XCIsXG5cdCAgICAgICAgICAgIFwiJmxmbG9vcjtcIjogXCLijIpcIixcblx0ICAgICAgICAgICAgXCImbGZyO1wiOiBcIvCdlKlcIixcblx0ICAgICAgICAgICAgXCImbGc7XCI6IFwi4om2XCIsXG5cdCAgICAgICAgICAgIFwiJmxnRTtcIjogXCLiqpFcIixcblx0ICAgICAgICAgICAgXCImbGhhcmQ7XCI6IFwi4oa9XCIsXG5cdCAgICAgICAgICAgIFwiJmxoYXJ1O1wiOiBcIuKGvFwiLFxuXHQgICAgICAgICAgICBcIiZsaGFydWw7XCI6IFwi4qWqXCIsXG5cdCAgICAgICAgICAgIFwiJmxoYmxrO1wiOiBcIuKWhFwiLFxuXHQgICAgICAgICAgICBcIiZsamN5O1wiOiBcItGZXCIsXG5cdCAgICAgICAgICAgIFwiJmxsO1wiOiBcIuKJqlwiLFxuXHQgICAgICAgICAgICBcIiZsbGFycjtcIjogXCLih4dcIixcblx0ICAgICAgICAgICAgXCImbGxjb3JuZXI7XCI6IFwi4oyeXCIsXG5cdCAgICAgICAgICAgIFwiJmxsaGFyZDtcIjogXCLipatcIixcblx0ICAgICAgICAgICAgXCImbGx0cmk7XCI6IFwi4pe6XCIsXG5cdCAgICAgICAgICAgIFwiJmxtaWRvdDtcIjogXCLFgFwiLFxuXHQgICAgICAgICAgICBcIiZsbW91c3Q7XCI6IFwi4o6wXCIsXG5cdCAgICAgICAgICAgIFwiJmxtb3VzdGFjaGU7XCI6IFwi4o6wXCIsXG5cdCAgICAgICAgICAgIFwiJmxuRTtcIjogXCLiiahcIixcblx0ICAgICAgICAgICAgXCImbG5hcDtcIjogXCLiqolcIixcblx0ICAgICAgICAgICAgXCImbG5hcHByb3g7XCI6IFwi4qqJXCIsXG5cdCAgICAgICAgICAgIFwiJmxuZTtcIjogXCLiqodcIixcblx0ICAgICAgICAgICAgXCImbG5lcTtcIjogXCLiqodcIixcblx0ICAgICAgICAgICAgXCImbG5lcXE7XCI6IFwi4omoXCIsXG5cdCAgICAgICAgICAgIFwiJmxuc2ltO1wiOiBcIuKLplwiLFxuXHQgICAgICAgICAgICBcIiZsb2FuZztcIjogXCLin6xcIixcblx0ICAgICAgICAgICAgXCImbG9hcnI7XCI6IFwi4oe9XCIsXG5cdCAgICAgICAgICAgIFwiJmxvYnJrO1wiOiBcIuKfplwiLFxuXHQgICAgICAgICAgICBcIiZsb25nbGVmdGFycm93O1wiOiBcIuKftVwiLFxuXHQgICAgICAgICAgICBcIiZsb25nbGVmdHJpZ2h0YXJyb3c7XCI6IFwi4p+3XCIsXG5cdCAgICAgICAgICAgIFwiJmxvbmdtYXBzdG87XCI6IFwi4p+8XCIsXG5cdCAgICAgICAgICAgIFwiJmxvbmdyaWdodGFycm93O1wiOiBcIuKftlwiLFxuXHQgICAgICAgICAgICBcIiZsb29wYXJyb3dsZWZ0O1wiOiBcIuKGq1wiLFxuXHQgICAgICAgICAgICBcIiZsb29wYXJyb3dyaWdodDtcIjogXCLihqxcIixcblx0ICAgICAgICAgICAgXCImbG9wYXI7XCI6IFwi4qaFXCIsXG5cdCAgICAgICAgICAgIFwiJmxvcGY7XCI6IFwi8J2VnVwiLFxuXHQgICAgICAgICAgICBcIiZsb3BsdXM7XCI6IFwi4qitXCIsXG5cdCAgICAgICAgICAgIFwiJmxvdGltZXM7XCI6IFwi4qi0XCIsXG5cdCAgICAgICAgICAgIFwiJmxvd2FzdDtcIjogXCLiiJdcIixcblx0ICAgICAgICAgICAgXCImbG93YmFyO1wiOiBcIl9cIixcblx0ICAgICAgICAgICAgXCImbG96O1wiOiBcIuKXilwiLFxuXHQgICAgICAgICAgICBcIiZsb3plbmdlO1wiOiBcIuKXilwiLFxuXHQgICAgICAgICAgICBcIiZsb3pmO1wiOiBcIuKnq1wiLFxuXHQgICAgICAgICAgICBcIiZscGFyO1wiOiBcIihcIixcblx0ICAgICAgICAgICAgXCImbHBhcmx0O1wiOiBcIuKmk1wiLFxuXHQgICAgICAgICAgICBcIiZscmFycjtcIjogXCLih4ZcIixcblx0ICAgICAgICAgICAgXCImbHJjb3JuZXI7XCI6IFwi4oyfXCIsXG5cdCAgICAgICAgICAgIFwiJmxyaGFyO1wiOiBcIuKHi1wiLFxuXHQgICAgICAgICAgICBcIiZscmhhcmQ7XCI6IFwi4qWtXCIsXG5cdCAgICAgICAgICAgIFwiJmxybTtcIjogXCLigI5cIixcblx0ICAgICAgICAgICAgXCImbHJ0cmk7XCI6IFwi4oq/XCIsXG5cdCAgICAgICAgICAgIFwiJmxzYXF1bztcIjogXCLigLlcIixcblx0ICAgICAgICAgICAgXCImbHNjcjtcIjogXCLwnZOBXCIsXG5cdCAgICAgICAgICAgIFwiJmxzaDtcIjogXCLihrBcIixcblx0ICAgICAgICAgICAgXCImbHNpbTtcIjogXCLiibJcIixcblx0ICAgICAgICAgICAgXCImbHNpbWU7XCI6IFwi4qqNXCIsXG5cdCAgICAgICAgICAgIFwiJmxzaW1nO1wiOiBcIuKqj1wiLFxuXHQgICAgICAgICAgICBcIiZsc3FiO1wiOiBcIltcIixcblx0ICAgICAgICAgICAgXCImbHNxdW87XCI6IFwi4oCYXCIsXG5cdCAgICAgICAgICAgIFwiJmxzcXVvcjtcIjogXCLigJpcIixcblx0ICAgICAgICAgICAgXCImbHN0cm9rO1wiOiBcIsWCXCIsXG5cdCAgICAgICAgICAgIFwiJmx0XCI6IFwiPFwiLFxuXHQgICAgICAgICAgICBcIiZsdDtcIjogXCI8XCIsXG5cdCAgICAgICAgICAgIFwiJmx0Y2M7XCI6IFwi4qqmXCIsXG5cdCAgICAgICAgICAgIFwiJmx0Y2lyO1wiOiBcIuKpuVwiLFxuXHQgICAgICAgICAgICBcIiZsdGRvdDtcIjogXCLii5ZcIixcblx0ICAgICAgICAgICAgXCImbHRocmVlO1wiOiBcIuKLi1wiLFxuXHQgICAgICAgICAgICBcIiZsdGltZXM7XCI6IFwi4ouJXCIsXG5cdCAgICAgICAgICAgIFwiJmx0bGFycjtcIjogXCLipbZcIixcblx0ICAgICAgICAgICAgXCImbHRxdWVzdDtcIjogXCLiqbtcIixcblx0ICAgICAgICAgICAgXCImbHRyUGFyO1wiOiBcIuKmllwiLFxuXHQgICAgICAgICAgICBcIiZsdHJpO1wiOiBcIuKXg1wiLFxuXHQgICAgICAgICAgICBcIiZsdHJpZTtcIjogXCLiirRcIixcblx0ICAgICAgICAgICAgXCImbHRyaWY7XCI6IFwi4peCXCIsXG5cdCAgICAgICAgICAgIFwiJmx1cmRzaGFyO1wiOiBcIuKlilwiLFxuXHQgICAgICAgICAgICBcIiZsdXJ1aGFyO1wiOiBcIuKlplwiLFxuXHQgICAgICAgICAgICBcIiZsdmVydG5lcXE7XCI6IFwi4omo77iAXCIsXG5cdCAgICAgICAgICAgIFwiJmx2bkU7XCI6IFwi4omo77iAXCIsXG5cdCAgICAgICAgICAgIFwiJm1ERG90O1wiOiBcIuKIulwiLFxuXHQgICAgICAgICAgICBcIiZtYWNyXCI6IFwiwq9cIixcblx0ICAgICAgICAgICAgXCImbWFjcjtcIjogXCLCr1wiLFxuXHQgICAgICAgICAgICBcIiZtYWxlO1wiOiBcIuKZglwiLFxuXHQgICAgICAgICAgICBcIiZtYWx0O1wiOiBcIuKcoFwiLFxuXHQgICAgICAgICAgICBcIiZtYWx0ZXNlO1wiOiBcIuKcoFwiLFxuXHQgICAgICAgICAgICBcIiZtYXA7XCI6IFwi4oamXCIsXG5cdCAgICAgICAgICAgIFwiJm1hcHN0bztcIjogXCLihqZcIixcblx0ICAgICAgICAgICAgXCImbWFwc3RvZG93bjtcIjogXCLihqdcIixcblx0ICAgICAgICAgICAgXCImbWFwc3RvbGVmdDtcIjogXCLihqRcIixcblx0ICAgICAgICAgICAgXCImbWFwc3RvdXA7XCI6IFwi4oalXCIsXG5cdCAgICAgICAgICAgIFwiJm1hcmtlcjtcIjogXCLilq5cIixcblx0ICAgICAgICAgICAgXCImbWNvbW1hO1wiOiBcIuKoqVwiLFxuXHQgICAgICAgICAgICBcIiZtY3k7XCI6IFwi0LxcIixcblx0ICAgICAgICAgICAgXCImbWRhc2g7XCI6IFwi4oCUXCIsXG5cdCAgICAgICAgICAgIFwiJm1lYXN1cmVkYW5nbGU7XCI6IFwi4oihXCIsXG5cdCAgICAgICAgICAgIFwiJm1mcjtcIjogXCLwnZSqXCIsXG5cdCAgICAgICAgICAgIFwiJm1obztcIjogXCLihKdcIixcblx0ICAgICAgICAgICAgXCImbWljcm9cIjogXCLCtVwiLFxuXHQgICAgICAgICAgICBcIiZtaWNybztcIjogXCLCtVwiLFxuXHQgICAgICAgICAgICBcIiZtaWQ7XCI6IFwi4oijXCIsXG5cdCAgICAgICAgICAgIFwiJm1pZGFzdDtcIjogXCIqXCIsXG5cdCAgICAgICAgICAgIFwiJm1pZGNpcjtcIjogXCLiq7BcIixcblx0ICAgICAgICAgICAgXCImbWlkZG90XCI6IFwiwrdcIixcblx0ICAgICAgICAgICAgXCImbWlkZG90O1wiOiBcIsK3XCIsXG5cdCAgICAgICAgICAgIFwiJm1pbnVzO1wiOiBcIuKIklwiLFxuXHQgICAgICAgICAgICBcIiZtaW51c2I7XCI6IFwi4oqfXCIsXG5cdCAgICAgICAgICAgIFwiJm1pbnVzZDtcIjogXCLiiLhcIixcblx0ICAgICAgICAgICAgXCImbWludXNkdTtcIjogXCLiqKpcIixcblx0ICAgICAgICAgICAgXCImbWxjcDtcIjogXCLiq5tcIixcblx0ICAgICAgICAgICAgXCImbWxkcjtcIjogXCLigKZcIixcblx0ICAgICAgICAgICAgXCImbW5wbHVzO1wiOiBcIuKIk1wiLFxuXHQgICAgICAgICAgICBcIiZtb2RlbHM7XCI6IFwi4oqnXCIsXG5cdCAgICAgICAgICAgIFwiJm1vcGY7XCI6IFwi8J2VnlwiLFxuXHQgICAgICAgICAgICBcIiZtcDtcIjogXCLiiJNcIixcblx0ICAgICAgICAgICAgXCImbXNjcjtcIjogXCLwnZOCXCIsXG5cdCAgICAgICAgICAgIFwiJm1zdHBvcztcIjogXCLiiL5cIixcblx0ICAgICAgICAgICAgXCImbXU7XCI6IFwizrxcIixcblx0ICAgICAgICAgICAgXCImbXVsdGltYXA7XCI6IFwi4oq4XCIsXG5cdCAgICAgICAgICAgIFwiJm11bWFwO1wiOiBcIuKKuFwiLFxuXHQgICAgICAgICAgICBcIiZuR2c7XCI6IFwi4ouZzLhcIixcblx0ICAgICAgICAgICAgXCImbkd0O1wiOiBcIuKJq+KDklwiLFxuXHQgICAgICAgICAgICBcIiZuR3R2O1wiOiBcIuKJq8y4XCIsXG5cdCAgICAgICAgICAgIFwiJm5MZWZ0YXJyb3c7XCI6IFwi4oeNXCIsXG5cdCAgICAgICAgICAgIFwiJm5MZWZ0cmlnaHRhcnJvdztcIjogXCLih45cIixcblx0ICAgICAgICAgICAgXCImbkxsO1wiOiBcIuKLmMy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5MdDtcIjogXCLiiarig5JcIixcblx0ICAgICAgICAgICAgXCImbkx0djtcIjogXCLiiarMuFwiLFxuXHQgICAgICAgICAgICBcIiZuUmlnaHRhcnJvdztcIjogXCLih49cIixcblx0ICAgICAgICAgICAgXCImblZEYXNoO1wiOiBcIuKKr1wiLFxuXHQgICAgICAgICAgICBcIiZuVmRhc2g7XCI6IFwi4oquXCIsXG5cdCAgICAgICAgICAgIFwiJm5hYmxhO1wiOiBcIuKIh1wiLFxuXHQgICAgICAgICAgICBcIiZuYWN1dGU7XCI6IFwixYRcIixcblx0ICAgICAgICAgICAgXCImbmFuZztcIjogXCLiiKDig5JcIixcblx0ICAgICAgICAgICAgXCImbmFwO1wiOiBcIuKJiVwiLFxuXHQgICAgICAgICAgICBcIiZuYXBFO1wiOiBcIuKpsMy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5hcGlkO1wiOiBcIuKJi8y4XCIsXG5cdCAgICAgICAgICAgIFwiJm5hcG9zO1wiOiBcIsWJXCIsXG5cdCAgICAgICAgICAgIFwiJm5hcHByb3g7XCI6IFwi4omJXCIsXG5cdCAgICAgICAgICAgIFwiJm5hdHVyO1wiOiBcIuKZrlwiLFxuXHQgICAgICAgICAgICBcIiZuYXR1cmFsO1wiOiBcIuKZrlwiLFxuXHQgICAgICAgICAgICBcIiZuYXR1cmFscztcIjogXCLihJVcIixcblx0ICAgICAgICAgICAgXCImbmJzcFwiOiBcIsKgXCIsXG5cdCAgICAgICAgICAgIFwiJm5ic3A7XCI6IFwiwqBcIixcblx0ICAgICAgICAgICAgXCImbmJ1bXA7XCI6IFwi4omOzLhcIixcblx0ICAgICAgICAgICAgXCImbmJ1bXBlO1wiOiBcIuKJj8y4XCIsXG5cdCAgICAgICAgICAgIFwiJm5jYXA7XCI6IFwi4qmDXCIsXG5cdCAgICAgICAgICAgIFwiJm5jYXJvbjtcIjogXCLFiFwiLFxuXHQgICAgICAgICAgICBcIiZuY2VkaWw7XCI6IFwixYZcIixcblx0ICAgICAgICAgICAgXCImbmNvbmc7XCI6IFwi4omHXCIsXG5cdCAgICAgICAgICAgIFwiJm5jb25nZG90O1wiOiBcIuKprcy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5jdXA7XCI6IFwi4qmCXCIsXG5cdCAgICAgICAgICAgIFwiJm5jeTtcIjogXCLQvVwiLFxuXHQgICAgICAgICAgICBcIiZuZGFzaDtcIjogXCLigJNcIixcblx0ICAgICAgICAgICAgXCImbmU7XCI6IFwi4omgXCIsXG5cdCAgICAgICAgICAgIFwiJm5lQXJyO1wiOiBcIuKHl1wiLFxuXHQgICAgICAgICAgICBcIiZuZWFyaGs7XCI6IFwi4qSkXCIsXG5cdCAgICAgICAgICAgIFwiJm5lYXJyO1wiOiBcIuKGl1wiLFxuXHQgICAgICAgICAgICBcIiZuZWFycm93O1wiOiBcIuKGl1wiLFxuXHQgICAgICAgICAgICBcIiZuZWRvdDtcIjogXCLiiZDMuFwiLFxuXHQgICAgICAgICAgICBcIiZuZXF1aXY7XCI6IFwi4omiXCIsXG5cdCAgICAgICAgICAgIFwiJm5lc2VhcjtcIjogXCLipKhcIixcblx0ICAgICAgICAgICAgXCImbmVzaW07XCI6IFwi4omCzLhcIixcblx0ICAgICAgICAgICAgXCImbmV4aXN0O1wiOiBcIuKIhFwiLFxuXHQgICAgICAgICAgICBcIiZuZXhpc3RzO1wiOiBcIuKIhFwiLFxuXHQgICAgICAgICAgICBcIiZuZnI7XCI6IFwi8J2Uq1wiLFxuXHQgICAgICAgICAgICBcIiZuZ0U7XCI6IFwi4omnzLhcIixcblx0ICAgICAgICAgICAgXCImbmdlO1wiOiBcIuKJsVwiLFxuXHQgICAgICAgICAgICBcIiZuZ2VxO1wiOiBcIuKJsVwiLFxuXHQgICAgICAgICAgICBcIiZuZ2VxcTtcIjogXCLiiafMuFwiLFxuXHQgICAgICAgICAgICBcIiZuZ2Vxc2xhbnQ7XCI6IFwi4qm+zLhcIixcblx0ICAgICAgICAgICAgXCImbmdlcztcIjogXCLiqb7MuFwiLFxuXHQgICAgICAgICAgICBcIiZuZ3NpbTtcIjogXCLiibVcIixcblx0ICAgICAgICAgICAgXCImbmd0O1wiOiBcIuKJr1wiLFxuXHQgICAgICAgICAgICBcIiZuZ3RyO1wiOiBcIuKJr1wiLFxuXHQgICAgICAgICAgICBcIiZuaEFycjtcIjogXCLih45cIixcblx0ICAgICAgICAgICAgXCImbmhhcnI7XCI6IFwi4oauXCIsXG5cdCAgICAgICAgICAgIFwiJm5ocGFyO1wiOiBcIuKrslwiLFxuXHQgICAgICAgICAgICBcIiZuaTtcIjogXCLiiItcIixcblx0ICAgICAgICAgICAgXCImbmlzO1wiOiBcIuKLvFwiLFxuXHQgICAgICAgICAgICBcIiZuaXNkO1wiOiBcIuKLulwiLFxuXHQgICAgICAgICAgICBcIiZuaXY7XCI6IFwi4oiLXCIsXG5cdCAgICAgICAgICAgIFwiJm5qY3k7XCI6IFwi0ZpcIixcblx0ICAgICAgICAgICAgXCImbmxBcnI7XCI6IFwi4oeNXCIsXG5cdCAgICAgICAgICAgIFwiJm5sRTtcIjogXCLiiabMuFwiLFxuXHQgICAgICAgICAgICBcIiZubGFycjtcIjogXCLihppcIixcblx0ICAgICAgICAgICAgXCImbmxkcjtcIjogXCLigKVcIixcblx0ICAgICAgICAgICAgXCImbmxlO1wiOiBcIuKJsFwiLFxuXHQgICAgICAgICAgICBcIiZubGVmdGFycm93O1wiOiBcIuKGmlwiLFxuXHQgICAgICAgICAgICBcIiZubGVmdHJpZ2h0YXJyb3c7XCI6IFwi4oauXCIsXG5cdCAgICAgICAgICAgIFwiJm5sZXE7XCI6IFwi4omwXCIsXG5cdCAgICAgICAgICAgIFwiJm5sZXFxO1wiOiBcIuKJpsy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5sZXFzbGFudDtcIjogXCLiqb3MuFwiLFxuXHQgICAgICAgICAgICBcIiZubGVzO1wiOiBcIuKpvcy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5sZXNzO1wiOiBcIuKJrlwiLFxuXHQgICAgICAgICAgICBcIiZubHNpbTtcIjogXCLiibRcIixcblx0ICAgICAgICAgICAgXCImbmx0O1wiOiBcIuKJrlwiLFxuXHQgICAgICAgICAgICBcIiZubHRyaTtcIjogXCLii6pcIixcblx0ICAgICAgICAgICAgXCImbmx0cmllO1wiOiBcIuKLrFwiLFxuXHQgICAgICAgICAgICBcIiZubWlkO1wiOiBcIuKIpFwiLFxuXHQgICAgICAgICAgICBcIiZub3BmO1wiOiBcIvCdlZ9cIixcblx0ICAgICAgICAgICAgXCImbm90XCI6IFwiwqxcIixcblx0ICAgICAgICAgICAgXCImbm90O1wiOiBcIsKsXCIsXG5cdCAgICAgICAgICAgIFwiJm5vdGluO1wiOiBcIuKIiVwiLFxuXHQgICAgICAgICAgICBcIiZub3RpbkU7XCI6IFwi4ou5zLhcIixcblx0ICAgICAgICAgICAgXCImbm90aW5kb3Q7XCI6IFwi4ou1zLhcIixcblx0ICAgICAgICAgICAgXCImbm90aW52YTtcIjogXCLiiIlcIixcblx0ICAgICAgICAgICAgXCImbm90aW52YjtcIjogXCLii7dcIixcblx0ICAgICAgICAgICAgXCImbm90aW52YztcIjogXCLii7ZcIixcblx0ICAgICAgICAgICAgXCImbm90bmk7XCI6IFwi4oiMXCIsXG5cdCAgICAgICAgICAgIFwiJm5vdG5pdmE7XCI6IFwi4oiMXCIsXG5cdCAgICAgICAgICAgIFwiJm5vdG5pdmI7XCI6IFwi4ou+XCIsXG5cdCAgICAgICAgICAgIFwiJm5vdG5pdmM7XCI6IFwi4ou9XCIsXG5cdCAgICAgICAgICAgIFwiJm5wYXI7XCI6IFwi4oimXCIsXG5cdCAgICAgICAgICAgIFwiJm5wYXJhbGxlbDtcIjogXCLiiKZcIixcblx0ICAgICAgICAgICAgXCImbnBhcnNsO1wiOiBcIuKrveKDpVwiLFxuXHQgICAgICAgICAgICBcIiZucGFydDtcIjogXCLiiILMuFwiLFxuXHQgICAgICAgICAgICBcIiZucG9saW50O1wiOiBcIuKolFwiLFxuXHQgICAgICAgICAgICBcIiZucHI7XCI6IFwi4oqAXCIsXG5cdCAgICAgICAgICAgIFwiJm5wcmN1ZTtcIjogXCLii6BcIixcblx0ICAgICAgICAgICAgXCImbnByZTtcIjogXCLiqq/MuFwiLFxuXHQgICAgICAgICAgICBcIiZucHJlYztcIjogXCLiioBcIixcblx0ICAgICAgICAgICAgXCImbnByZWNlcTtcIjogXCLiqq/MuFwiLFxuXHQgICAgICAgICAgICBcIiZuckFycjtcIjogXCLih49cIixcblx0ICAgICAgICAgICAgXCImbnJhcnI7XCI6IFwi4oabXCIsXG5cdCAgICAgICAgICAgIFwiJm5yYXJyYztcIjogXCLipLPMuFwiLFxuXHQgICAgICAgICAgICBcIiZucmFycnc7XCI6IFwi4oadzLhcIixcblx0ICAgICAgICAgICAgXCImbnJpZ2h0YXJyb3c7XCI6IFwi4oabXCIsXG5cdCAgICAgICAgICAgIFwiJm5ydHJpO1wiOiBcIuKLq1wiLFxuXHQgICAgICAgICAgICBcIiZucnRyaWU7XCI6IFwi4outXCIsXG5cdCAgICAgICAgICAgIFwiJm5zYztcIjogXCLiioFcIixcblx0ICAgICAgICAgICAgXCImbnNjY3VlO1wiOiBcIuKLoVwiLFxuXHQgICAgICAgICAgICBcIiZuc2NlO1wiOiBcIuKqsMy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5zY3I7XCI6IFwi8J2Tg1wiLFxuXHQgICAgICAgICAgICBcIiZuc2hvcnRtaWQ7XCI6IFwi4oikXCIsXG5cdCAgICAgICAgICAgIFwiJm5zaG9ydHBhcmFsbGVsO1wiOiBcIuKIplwiLFxuXHQgICAgICAgICAgICBcIiZuc2ltO1wiOiBcIuKJgVwiLFxuXHQgICAgICAgICAgICBcIiZuc2ltZTtcIjogXCLiiYRcIixcblx0ICAgICAgICAgICAgXCImbnNpbWVxO1wiOiBcIuKJhFwiLFxuXHQgICAgICAgICAgICBcIiZuc21pZDtcIjogXCLiiKRcIixcblx0ICAgICAgICAgICAgXCImbnNwYXI7XCI6IFwi4oimXCIsXG5cdCAgICAgICAgICAgIFwiJm5zcXN1YmU7XCI6IFwi4ouiXCIsXG5cdCAgICAgICAgICAgIFwiJm5zcXN1cGU7XCI6IFwi4oujXCIsXG5cdCAgICAgICAgICAgIFwiJm5zdWI7XCI6IFwi4oqEXCIsXG5cdCAgICAgICAgICAgIFwiJm5zdWJFO1wiOiBcIuKrhcy4XCIsXG5cdCAgICAgICAgICAgIFwiJm5zdWJlO1wiOiBcIuKKiFwiLFxuXHQgICAgICAgICAgICBcIiZuc3Vic2V0O1wiOiBcIuKKguKDklwiLFxuXHQgICAgICAgICAgICBcIiZuc3Vic2V0ZXE7XCI6IFwi4oqIXCIsXG5cdCAgICAgICAgICAgIFwiJm5zdWJzZXRlcXE7XCI6IFwi4quFzLhcIixcblx0ICAgICAgICAgICAgXCImbnN1Y2M7XCI6IFwi4oqBXCIsXG5cdCAgICAgICAgICAgIFwiJm5zdWNjZXE7XCI6IFwi4qqwzLhcIixcblx0ICAgICAgICAgICAgXCImbnN1cDtcIjogXCLiioVcIixcblx0ICAgICAgICAgICAgXCImbnN1cEU7XCI6IFwi4quGzLhcIixcblx0ICAgICAgICAgICAgXCImbnN1cGU7XCI6IFwi4oqJXCIsXG5cdCAgICAgICAgICAgIFwiJm5zdXBzZXQ7XCI6IFwi4oqD4oOSXCIsXG5cdCAgICAgICAgICAgIFwiJm5zdXBzZXRlcTtcIjogXCLiiolcIixcblx0ICAgICAgICAgICAgXCImbnN1cHNldGVxcTtcIjogXCLiq4bMuFwiLFxuXHQgICAgICAgICAgICBcIiZudGdsO1wiOiBcIuKJuVwiLFxuXHQgICAgICAgICAgICBcIiZudGlsZGVcIjogXCLDsVwiLFxuXHQgICAgICAgICAgICBcIiZudGlsZGU7XCI6IFwiw7FcIixcblx0ICAgICAgICAgICAgXCImbnRsZztcIjogXCLiibhcIixcblx0ICAgICAgICAgICAgXCImbnRyaWFuZ2xlbGVmdDtcIjogXCLii6pcIixcblx0ICAgICAgICAgICAgXCImbnRyaWFuZ2xlbGVmdGVxO1wiOiBcIuKLrFwiLFxuXHQgICAgICAgICAgICBcIiZudHJpYW5nbGVyaWdodDtcIjogXCLii6tcIixcblx0ICAgICAgICAgICAgXCImbnRyaWFuZ2xlcmlnaHRlcTtcIjogXCLii61cIixcblx0ICAgICAgICAgICAgXCImbnU7XCI6IFwizr1cIixcblx0ICAgICAgICAgICAgXCImbnVtO1wiOiBcIiNcIixcblx0ICAgICAgICAgICAgXCImbnVtZXJvO1wiOiBcIuKEllwiLFxuXHQgICAgICAgICAgICBcIiZudW1zcDtcIjogXCLigIdcIixcblx0ICAgICAgICAgICAgXCImbnZEYXNoO1wiOiBcIuKKrVwiLFxuXHQgICAgICAgICAgICBcIiZudkhhcnI7XCI6IFwi4qSEXCIsXG5cdCAgICAgICAgICAgIFwiJm52YXA7XCI6IFwi4omN4oOSXCIsXG5cdCAgICAgICAgICAgIFwiJm52ZGFzaDtcIjogXCLiiqxcIixcblx0ICAgICAgICAgICAgXCImbnZnZTtcIjogXCLiiaXig5JcIixcblx0ICAgICAgICAgICAgXCImbnZndDtcIjogXCI+4oOSXCIsXG5cdCAgICAgICAgICAgIFwiJm52aW5maW47XCI6IFwi4qeeXCIsXG5cdCAgICAgICAgICAgIFwiJm52bEFycjtcIjogXCLipIJcIixcblx0ICAgICAgICAgICAgXCImbnZsZTtcIjogXCLiiaTig5JcIixcblx0ICAgICAgICAgICAgXCImbnZsdDtcIjogXCI84oOSXCIsXG5cdCAgICAgICAgICAgIFwiJm52bHRyaWU7XCI6IFwi4oq04oOSXCIsXG5cdCAgICAgICAgICAgIFwiJm52ckFycjtcIjogXCLipINcIixcblx0ICAgICAgICAgICAgXCImbnZydHJpZTtcIjogXCLiirXig5JcIixcblx0ICAgICAgICAgICAgXCImbnZzaW07XCI6IFwi4oi84oOSXCIsXG5cdCAgICAgICAgICAgIFwiJm53QXJyO1wiOiBcIuKHllwiLFxuXHQgICAgICAgICAgICBcIiZud2FyaGs7XCI6IFwi4qSjXCIsXG5cdCAgICAgICAgICAgIFwiJm53YXJyO1wiOiBcIuKGllwiLFxuXHQgICAgICAgICAgICBcIiZud2Fycm93O1wiOiBcIuKGllwiLFxuXHQgICAgICAgICAgICBcIiZud25lYXI7XCI6IFwi4qSnXCIsXG5cdCAgICAgICAgICAgIFwiJm9TO1wiOiBcIuKTiFwiLFxuXHQgICAgICAgICAgICBcIiZvYWN1dGVcIjogXCLDs1wiLFxuXHQgICAgICAgICAgICBcIiZvYWN1dGU7XCI6IFwiw7NcIixcblx0ICAgICAgICAgICAgXCImb2FzdDtcIjogXCLiiptcIixcblx0ICAgICAgICAgICAgXCImb2NpcjtcIjogXCLiippcIixcblx0ICAgICAgICAgICAgXCImb2NpcmNcIjogXCLDtFwiLFxuXHQgICAgICAgICAgICBcIiZvY2lyYztcIjogXCLDtFwiLFxuXHQgICAgICAgICAgICBcIiZvY3k7XCI6IFwi0L5cIixcblx0ICAgICAgICAgICAgXCImb2Rhc2g7XCI6IFwi4oqdXCIsXG5cdCAgICAgICAgICAgIFwiJm9kYmxhYztcIjogXCLFkVwiLFxuXHQgICAgICAgICAgICBcIiZvZGl2O1wiOiBcIuKouFwiLFxuXHQgICAgICAgICAgICBcIiZvZG90O1wiOiBcIuKKmVwiLFxuXHQgICAgICAgICAgICBcIiZvZHNvbGQ7XCI6IFwi4qa8XCIsXG5cdCAgICAgICAgICAgIFwiJm9lbGlnO1wiOiBcIsWTXCIsXG5cdCAgICAgICAgICAgIFwiJm9mY2lyO1wiOiBcIuKmv1wiLFxuXHQgICAgICAgICAgICBcIiZvZnI7XCI6IFwi8J2UrFwiLFxuXHQgICAgICAgICAgICBcIiZvZ29uO1wiOiBcIsubXCIsXG5cdCAgICAgICAgICAgIFwiJm9ncmF2ZVwiOiBcIsOyXCIsXG5cdCAgICAgICAgICAgIFwiJm9ncmF2ZTtcIjogXCLDslwiLFxuXHQgICAgICAgICAgICBcIiZvZ3Q7XCI6IFwi4qeBXCIsXG5cdCAgICAgICAgICAgIFwiJm9oYmFyO1wiOiBcIuKmtVwiLFxuXHQgICAgICAgICAgICBcIiZvaG07XCI6IFwizqlcIixcblx0ICAgICAgICAgICAgXCImb2ludDtcIjogXCLiiK5cIixcblx0ICAgICAgICAgICAgXCImb2xhcnI7XCI6IFwi4oa6XCIsXG5cdCAgICAgICAgICAgIFwiJm9sY2lyO1wiOiBcIuKmvlwiLFxuXHQgICAgICAgICAgICBcIiZvbGNyb3NzO1wiOiBcIuKmu1wiLFxuXHQgICAgICAgICAgICBcIiZvbGluZTtcIjogXCLigL5cIixcblx0ICAgICAgICAgICAgXCImb2x0O1wiOiBcIuKngFwiLFxuXHQgICAgICAgICAgICBcIiZvbWFjcjtcIjogXCLFjVwiLFxuXHQgICAgICAgICAgICBcIiZvbWVnYTtcIjogXCLPiVwiLFxuXHQgICAgICAgICAgICBcIiZvbWljcm9uO1wiOiBcIs6/XCIsXG5cdCAgICAgICAgICAgIFwiJm9taWQ7XCI6IFwi4qa2XCIsXG5cdCAgICAgICAgICAgIFwiJm9taW51cztcIjogXCLiipZcIixcblx0ICAgICAgICAgICAgXCImb29wZjtcIjogXCLwnZWgXCIsXG5cdCAgICAgICAgICAgIFwiJm9wYXI7XCI6IFwi4qa3XCIsXG5cdCAgICAgICAgICAgIFwiJm9wZXJwO1wiOiBcIuKmuVwiLFxuXHQgICAgICAgICAgICBcIiZvcGx1cztcIjogXCLiipVcIixcblx0ICAgICAgICAgICAgXCImb3I7XCI6IFwi4oioXCIsXG5cdCAgICAgICAgICAgIFwiJm9yYXJyO1wiOiBcIuKGu1wiLFxuXHQgICAgICAgICAgICBcIiZvcmQ7XCI6IFwi4qmdXCIsXG5cdCAgICAgICAgICAgIFwiJm9yZGVyO1wiOiBcIuKEtFwiLFxuXHQgICAgICAgICAgICBcIiZvcmRlcm9mO1wiOiBcIuKEtFwiLFxuXHQgICAgICAgICAgICBcIiZvcmRmXCI6IFwiwqpcIixcblx0ICAgICAgICAgICAgXCImb3JkZjtcIjogXCLCqlwiLFxuXHQgICAgICAgICAgICBcIiZvcmRtXCI6IFwiwrpcIixcblx0ICAgICAgICAgICAgXCImb3JkbTtcIjogXCLCulwiLFxuXHQgICAgICAgICAgICBcIiZvcmlnb2Y7XCI6IFwi4oq2XCIsXG5cdCAgICAgICAgICAgIFwiJm9yb3I7XCI6IFwi4qmWXCIsXG5cdCAgICAgICAgICAgIFwiJm9yc2xvcGU7XCI6IFwi4qmXXCIsXG5cdCAgICAgICAgICAgIFwiJm9ydjtcIjogXCLiqZtcIixcblx0ICAgICAgICAgICAgXCImb3NjcjtcIjogXCLihLRcIixcblx0ICAgICAgICAgICAgXCImb3NsYXNoXCI6IFwiw7hcIixcblx0ICAgICAgICAgICAgXCImb3NsYXNoO1wiOiBcIsO4XCIsXG5cdCAgICAgICAgICAgIFwiJm9zb2w7XCI6IFwi4oqYXCIsXG5cdCAgICAgICAgICAgIFwiJm90aWxkZVwiOiBcIsO1XCIsXG5cdCAgICAgICAgICAgIFwiJm90aWxkZTtcIjogXCLDtVwiLFxuXHQgICAgICAgICAgICBcIiZvdGltZXM7XCI6IFwi4oqXXCIsXG5cdCAgICAgICAgICAgIFwiJm90aW1lc2FzO1wiOiBcIuKotlwiLFxuXHQgICAgICAgICAgICBcIiZvdW1sXCI6IFwiw7ZcIixcblx0ICAgICAgICAgICAgXCImb3VtbDtcIjogXCLDtlwiLFxuXHQgICAgICAgICAgICBcIiZvdmJhcjtcIjogXCLijL1cIixcblx0ICAgICAgICAgICAgXCImcGFyO1wiOiBcIuKIpVwiLFxuXHQgICAgICAgICAgICBcIiZwYXJhXCI6IFwiwrZcIixcblx0ICAgICAgICAgICAgXCImcGFyYTtcIjogXCLCtlwiLFxuXHQgICAgICAgICAgICBcIiZwYXJhbGxlbDtcIjogXCLiiKVcIixcblx0ICAgICAgICAgICAgXCImcGFyc2ltO1wiOiBcIuKrs1wiLFxuXHQgICAgICAgICAgICBcIiZwYXJzbDtcIjogXCLiq71cIixcblx0ICAgICAgICAgICAgXCImcGFydDtcIjogXCLiiIJcIixcblx0ICAgICAgICAgICAgXCImcGN5O1wiOiBcItC/XCIsXG5cdCAgICAgICAgICAgIFwiJnBlcmNudDtcIjogXCIlXCIsXG5cdCAgICAgICAgICAgIFwiJnBlcmlvZDtcIjogXCIuXCIsXG5cdCAgICAgICAgICAgIFwiJnBlcm1pbDtcIjogXCLigLBcIixcblx0ICAgICAgICAgICAgXCImcGVycDtcIjogXCLiiqVcIixcblx0ICAgICAgICAgICAgXCImcGVydGVuaztcIjogXCLigLFcIixcblx0ICAgICAgICAgICAgXCImcGZyO1wiOiBcIvCdlK1cIixcblx0ICAgICAgICAgICAgXCImcGhpO1wiOiBcIs+GXCIsXG5cdCAgICAgICAgICAgIFwiJnBoaXY7XCI6IFwiz5VcIixcblx0ICAgICAgICAgICAgXCImcGhtbWF0O1wiOiBcIuKEs1wiLFxuXHQgICAgICAgICAgICBcIiZwaG9uZTtcIjogXCLimI5cIixcblx0ICAgICAgICAgICAgXCImcGk7XCI6IFwiz4BcIixcblx0ICAgICAgICAgICAgXCImcGl0Y2hmb3JrO1wiOiBcIuKLlFwiLFxuXHQgICAgICAgICAgICBcIiZwaXY7XCI6IFwiz5ZcIixcblx0ICAgICAgICAgICAgXCImcGxhbmNrO1wiOiBcIuKEj1wiLFxuXHQgICAgICAgICAgICBcIiZwbGFuY2toO1wiOiBcIuKEjlwiLFxuXHQgICAgICAgICAgICBcIiZwbGFua3Y7XCI6IFwi4oSPXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXM7XCI6IFwiK1wiLFxuXHQgICAgICAgICAgICBcIiZwbHVzYWNpcjtcIjogXCLiqKNcIixcblx0ICAgICAgICAgICAgXCImcGx1c2I7XCI6IFwi4oqeXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXNjaXI7XCI6IFwi4qiiXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXNkbztcIjogXCLiiJRcIixcblx0ICAgICAgICAgICAgXCImcGx1c2R1O1wiOiBcIuKopVwiLFxuXHQgICAgICAgICAgICBcIiZwbHVzZTtcIjogXCLiqbJcIixcblx0ICAgICAgICAgICAgXCImcGx1c21uXCI6IFwiwrFcIixcblx0ICAgICAgICAgICAgXCImcGx1c21uO1wiOiBcIsKxXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXNzaW07XCI6IFwi4qimXCIsXG5cdCAgICAgICAgICAgIFwiJnBsdXN0d287XCI6IFwi4qinXCIsXG5cdCAgICAgICAgICAgIFwiJnBtO1wiOiBcIsKxXCIsXG5cdCAgICAgICAgICAgIFwiJnBvaW50aW50O1wiOiBcIuKolVwiLFxuXHQgICAgICAgICAgICBcIiZwb3BmO1wiOiBcIvCdlaFcIixcblx0ICAgICAgICAgICAgXCImcG91bmRcIjogXCLCo1wiLFxuXHQgICAgICAgICAgICBcIiZwb3VuZDtcIjogXCLCo1wiLFxuXHQgICAgICAgICAgICBcIiZwcjtcIjogXCLiibpcIixcblx0ICAgICAgICAgICAgXCImcHJFO1wiOiBcIuKqs1wiLFxuXHQgICAgICAgICAgICBcIiZwcmFwO1wiOiBcIuKqt1wiLFxuXHQgICAgICAgICAgICBcIiZwcmN1ZTtcIjogXCLiibxcIixcblx0ICAgICAgICAgICAgXCImcHJlO1wiOiBcIuKqr1wiLFxuXHQgICAgICAgICAgICBcIiZwcmVjO1wiOiBcIuKJulwiLFxuXHQgICAgICAgICAgICBcIiZwcmVjYXBwcm94O1wiOiBcIuKqt1wiLFxuXHQgICAgICAgICAgICBcIiZwcmVjY3VybHllcTtcIjogXCLiibxcIixcblx0ICAgICAgICAgICAgXCImcHJlY2VxO1wiOiBcIuKqr1wiLFxuXHQgICAgICAgICAgICBcIiZwcmVjbmFwcHJveDtcIjogXCLiqrlcIixcblx0ICAgICAgICAgICAgXCImcHJlY25lcXE7XCI6IFwi4qq1XCIsXG5cdCAgICAgICAgICAgIFwiJnByZWNuc2ltO1wiOiBcIuKLqFwiLFxuXHQgICAgICAgICAgICBcIiZwcmVjc2ltO1wiOiBcIuKJvlwiLFxuXHQgICAgICAgICAgICBcIiZwcmltZTtcIjogXCLigLJcIixcblx0ICAgICAgICAgICAgXCImcHJpbWVzO1wiOiBcIuKEmVwiLFxuXHQgICAgICAgICAgICBcIiZwcm5FO1wiOiBcIuKqtVwiLFxuXHQgICAgICAgICAgICBcIiZwcm5hcDtcIjogXCLiqrlcIixcblx0ICAgICAgICAgICAgXCImcHJuc2ltO1wiOiBcIuKLqFwiLFxuXHQgICAgICAgICAgICBcIiZwcm9kO1wiOiBcIuKIj1wiLFxuXHQgICAgICAgICAgICBcIiZwcm9mYWxhcjtcIjogXCLijK5cIixcblx0ICAgICAgICAgICAgXCImcHJvZmxpbmU7XCI6IFwi4oySXCIsXG5cdCAgICAgICAgICAgIFwiJnByb2ZzdXJmO1wiOiBcIuKMk1wiLFxuXHQgICAgICAgICAgICBcIiZwcm9wO1wiOiBcIuKInVwiLFxuXHQgICAgICAgICAgICBcIiZwcm9wdG87XCI6IFwi4oidXCIsXG5cdCAgICAgICAgICAgIFwiJnByc2ltO1wiOiBcIuKJvlwiLFxuXHQgICAgICAgICAgICBcIiZwcnVyZWw7XCI6IFwi4oqwXCIsXG5cdCAgICAgICAgICAgIFwiJnBzY3I7XCI6IFwi8J2ThVwiLFxuXHQgICAgICAgICAgICBcIiZwc2k7XCI6IFwiz4hcIixcblx0ICAgICAgICAgICAgXCImcHVuY3NwO1wiOiBcIuKAiFwiLFxuXHQgICAgICAgICAgICBcIiZxZnI7XCI6IFwi8J2UrlwiLFxuXHQgICAgICAgICAgICBcIiZxaW50O1wiOiBcIuKojFwiLFxuXHQgICAgICAgICAgICBcIiZxb3BmO1wiOiBcIvCdlaJcIixcblx0ICAgICAgICAgICAgXCImcXByaW1lO1wiOiBcIuKBl1wiLFxuXHQgICAgICAgICAgICBcIiZxc2NyO1wiOiBcIvCdk4ZcIixcblx0ICAgICAgICAgICAgXCImcXVhdGVybmlvbnM7XCI6IFwi4oSNXCIsXG5cdCAgICAgICAgICAgIFwiJnF1YXRpbnQ7XCI6IFwi4qiWXCIsXG5cdCAgICAgICAgICAgIFwiJnF1ZXN0O1wiOiBcIj9cIixcblx0ICAgICAgICAgICAgXCImcXVlc3RlcTtcIjogXCLiiZ9cIixcblx0ICAgICAgICAgICAgXCImcXVvdFwiOiAnXCInLFxuXHQgICAgICAgICAgICBcIiZxdW90O1wiOiAnXCInLFxuXHQgICAgICAgICAgICBcIiZyQWFycjtcIjogXCLih5tcIixcblx0ICAgICAgICAgICAgXCImckFycjtcIjogXCLih5JcIixcblx0ICAgICAgICAgICAgXCImckF0YWlsO1wiOiBcIuKknFwiLFxuXHQgICAgICAgICAgICBcIiZyQmFycjtcIjogXCLipI9cIixcblx0ICAgICAgICAgICAgXCImckhhcjtcIjogXCLipaRcIixcblx0ICAgICAgICAgICAgXCImcmFjZTtcIjogXCLiiL3MsVwiLFxuXHQgICAgICAgICAgICBcIiZyYWN1dGU7XCI6IFwixZVcIixcblx0ICAgICAgICAgICAgXCImcmFkaWM7XCI6IFwi4oiaXCIsXG5cdCAgICAgICAgICAgIFwiJnJhZW1wdHl2O1wiOiBcIuKms1wiLFxuXHQgICAgICAgICAgICBcIiZyYW5nO1wiOiBcIuKfqVwiLFxuXHQgICAgICAgICAgICBcIiZyYW5nZDtcIjogXCLippJcIixcblx0ICAgICAgICAgICAgXCImcmFuZ2U7XCI6IFwi4qalXCIsXG5cdCAgICAgICAgICAgIFwiJnJhbmdsZTtcIjogXCLin6lcIixcblx0ICAgICAgICAgICAgXCImcmFxdW9cIjogXCLCu1wiLFxuXHQgICAgICAgICAgICBcIiZyYXF1bztcIjogXCLCu1wiLFxuXHQgICAgICAgICAgICBcIiZyYXJyO1wiOiBcIuKGklwiLFxuXHQgICAgICAgICAgICBcIiZyYXJyYXA7XCI6IFwi4qW1XCIsXG5cdCAgICAgICAgICAgIFwiJnJhcnJiO1wiOiBcIuKHpVwiLFxuXHQgICAgICAgICAgICBcIiZyYXJyYmZzO1wiOiBcIuKkoFwiLFxuXHQgICAgICAgICAgICBcIiZyYXJyYztcIjogXCLipLNcIixcblx0ICAgICAgICAgICAgXCImcmFycmZzO1wiOiBcIuKknlwiLFxuXHQgICAgICAgICAgICBcIiZyYXJyaGs7XCI6IFwi4oaqXCIsXG5cdCAgICAgICAgICAgIFwiJnJhcnJscDtcIjogXCLihqxcIixcblx0ICAgICAgICAgICAgXCImcmFycnBsO1wiOiBcIuKlhVwiLFxuXHQgICAgICAgICAgICBcIiZyYXJyc2ltO1wiOiBcIuKltFwiLFxuXHQgICAgICAgICAgICBcIiZyYXJydGw7XCI6IFwi4oajXCIsXG5cdCAgICAgICAgICAgIFwiJnJhcnJ3O1wiOiBcIuKGnVwiLFxuXHQgICAgICAgICAgICBcIiZyYXRhaWw7XCI6IFwi4qSaXCIsXG5cdCAgICAgICAgICAgIFwiJnJhdGlvO1wiOiBcIuKItlwiLFxuXHQgICAgICAgICAgICBcIiZyYXRpb25hbHM7XCI6IFwi4oSaXCIsXG5cdCAgICAgICAgICAgIFwiJnJiYXJyO1wiOiBcIuKkjVwiLFxuXHQgICAgICAgICAgICBcIiZyYmJyaztcIjogXCLinbNcIixcblx0ICAgICAgICAgICAgXCImcmJyYWNlO1wiOiBcIn1cIixcblx0ICAgICAgICAgICAgXCImcmJyYWNrO1wiOiBcIl1cIixcblx0ICAgICAgICAgICAgXCImcmJya2U7XCI6IFwi4qaMXCIsXG5cdCAgICAgICAgICAgIFwiJnJicmtzbGQ7XCI6IFwi4qaOXCIsXG5cdCAgICAgICAgICAgIFwiJnJicmtzbHU7XCI6IFwi4qaQXCIsXG5cdCAgICAgICAgICAgIFwiJnJjYXJvbjtcIjogXCLFmVwiLFxuXHQgICAgICAgICAgICBcIiZyY2VkaWw7XCI6IFwixZdcIixcblx0ICAgICAgICAgICAgXCImcmNlaWw7XCI6IFwi4oyJXCIsXG5cdCAgICAgICAgICAgIFwiJnJjdWI7XCI6IFwifVwiLFxuXHQgICAgICAgICAgICBcIiZyY3k7XCI6IFwi0YBcIixcblx0ICAgICAgICAgICAgXCImcmRjYTtcIjogXCLipLdcIixcblx0ICAgICAgICAgICAgXCImcmRsZGhhcjtcIjogXCLipalcIixcblx0ICAgICAgICAgICAgXCImcmRxdW87XCI6IFwi4oCdXCIsXG5cdCAgICAgICAgICAgIFwiJnJkcXVvcjtcIjogXCLigJ1cIixcblx0ICAgICAgICAgICAgXCImcmRzaDtcIjogXCLihrNcIixcblx0ICAgICAgICAgICAgXCImcmVhbDtcIjogXCLihJxcIixcblx0ICAgICAgICAgICAgXCImcmVhbGluZTtcIjogXCLihJtcIixcblx0ICAgICAgICAgICAgXCImcmVhbHBhcnQ7XCI6IFwi4oScXCIsXG5cdCAgICAgICAgICAgIFwiJnJlYWxzO1wiOiBcIuKEnVwiLFxuXHQgICAgICAgICAgICBcIiZyZWN0O1wiOiBcIuKWrVwiLFxuXHQgICAgICAgICAgICBcIiZyZWdcIjogXCLCrlwiLFxuXHQgICAgICAgICAgICBcIiZyZWc7XCI6IFwiwq5cIixcblx0ICAgICAgICAgICAgXCImcmZpc2h0O1wiOiBcIuKlvVwiLFxuXHQgICAgICAgICAgICBcIiZyZmxvb3I7XCI6IFwi4oyLXCIsXG5cdCAgICAgICAgICAgIFwiJnJmcjtcIjogXCLwnZSvXCIsXG5cdCAgICAgICAgICAgIFwiJnJoYXJkO1wiOiBcIuKHgVwiLFxuXHQgICAgICAgICAgICBcIiZyaGFydTtcIjogXCLih4BcIixcblx0ICAgICAgICAgICAgXCImcmhhcnVsO1wiOiBcIuKlrFwiLFxuXHQgICAgICAgICAgICBcIiZyaG87XCI6IFwiz4FcIixcblx0ICAgICAgICAgICAgXCImcmhvdjtcIjogXCLPsVwiLFxuXHQgICAgICAgICAgICBcIiZyaWdodGFycm93O1wiOiBcIuKGklwiLFxuXHQgICAgICAgICAgICBcIiZyaWdodGFycm93dGFpbDtcIjogXCLihqNcIixcblx0ICAgICAgICAgICAgXCImcmlnaHRoYXJwb29uZG93bjtcIjogXCLih4FcIixcblx0ICAgICAgICAgICAgXCImcmlnaHRoYXJwb29udXA7XCI6IFwi4oeAXCIsXG5cdCAgICAgICAgICAgIFwiJnJpZ2h0bGVmdGFycm93cztcIjogXCLih4RcIixcblx0ICAgICAgICAgICAgXCImcmlnaHRsZWZ0aGFycG9vbnM7XCI6IFwi4oeMXCIsXG5cdCAgICAgICAgICAgIFwiJnJpZ2h0cmlnaHRhcnJvd3M7XCI6IFwi4oeJXCIsXG5cdCAgICAgICAgICAgIFwiJnJpZ2h0c3F1aWdhcnJvdztcIjogXCLihp1cIixcblx0ICAgICAgICAgICAgXCImcmlnaHR0aHJlZXRpbWVzO1wiOiBcIuKLjFwiLFxuXHQgICAgICAgICAgICBcIiZyaW5nO1wiOiBcIsuaXCIsXG5cdCAgICAgICAgICAgIFwiJnJpc2luZ2RvdHNlcTtcIjogXCLiiZNcIixcblx0ICAgICAgICAgICAgXCImcmxhcnI7XCI6IFwi4oeEXCIsXG5cdCAgICAgICAgICAgIFwiJnJsaGFyO1wiOiBcIuKHjFwiLFxuXHQgICAgICAgICAgICBcIiZybG07XCI6IFwi4oCPXCIsXG5cdCAgICAgICAgICAgIFwiJnJtb3VzdDtcIjogXCLijrFcIixcblx0ICAgICAgICAgICAgXCImcm1vdXN0YWNoZTtcIjogXCLijrFcIixcblx0ICAgICAgICAgICAgXCImcm5taWQ7XCI6IFwi4quuXCIsXG5cdCAgICAgICAgICAgIFwiJnJvYW5nO1wiOiBcIuKfrVwiLFxuXHQgICAgICAgICAgICBcIiZyb2FycjtcIjogXCLih75cIixcblx0ICAgICAgICAgICAgXCImcm9icms7XCI6IFwi4p+nXCIsXG5cdCAgICAgICAgICAgIFwiJnJvcGFyO1wiOiBcIuKmhlwiLFxuXHQgICAgICAgICAgICBcIiZyb3BmO1wiOiBcIvCdlaNcIixcblx0ICAgICAgICAgICAgXCImcm9wbHVzO1wiOiBcIuKorlwiLFxuXHQgICAgICAgICAgICBcIiZyb3RpbWVzO1wiOiBcIuKotVwiLFxuXHQgICAgICAgICAgICBcIiZycGFyO1wiOiBcIilcIixcblx0ICAgICAgICAgICAgXCImcnBhcmd0O1wiOiBcIuKmlFwiLFxuXHQgICAgICAgICAgICBcIiZycHBvbGludDtcIjogXCLiqJJcIixcblx0ICAgICAgICAgICAgXCImcnJhcnI7XCI6IFwi4oeJXCIsXG5cdCAgICAgICAgICAgIFwiJnJzYXF1bztcIjogXCLigLpcIixcblx0ICAgICAgICAgICAgXCImcnNjcjtcIjogXCLwnZOHXCIsXG5cdCAgICAgICAgICAgIFwiJnJzaDtcIjogXCLihrFcIixcblx0ICAgICAgICAgICAgXCImcnNxYjtcIjogXCJdXCIsXG5cdCAgICAgICAgICAgIFwiJnJzcXVvO1wiOiBcIuKAmVwiLFxuXHQgICAgICAgICAgICBcIiZyc3F1b3I7XCI6IFwi4oCZXCIsXG5cdCAgICAgICAgICAgIFwiJnJ0aHJlZTtcIjogXCLii4xcIixcblx0ICAgICAgICAgICAgXCImcnRpbWVzO1wiOiBcIuKLilwiLFxuXHQgICAgICAgICAgICBcIiZydHJpO1wiOiBcIuKWuVwiLFxuXHQgICAgICAgICAgICBcIiZydHJpZTtcIjogXCLiirVcIixcblx0ICAgICAgICAgICAgXCImcnRyaWY7XCI6IFwi4pa4XCIsXG5cdCAgICAgICAgICAgIFwiJnJ0cmlsdHJpO1wiOiBcIuKnjlwiLFxuXHQgICAgICAgICAgICBcIiZydWx1aGFyO1wiOiBcIuKlqFwiLFxuXHQgICAgICAgICAgICBcIiZyeDtcIjogXCLihJ5cIixcblx0ICAgICAgICAgICAgXCImc2FjdXRlO1wiOiBcIsWbXCIsXG5cdCAgICAgICAgICAgIFwiJnNicXVvO1wiOiBcIuKAmlwiLFxuXHQgICAgICAgICAgICBcIiZzYztcIjogXCLiibtcIixcblx0ICAgICAgICAgICAgXCImc2NFO1wiOiBcIuKqtFwiLFxuXHQgICAgICAgICAgICBcIiZzY2FwO1wiOiBcIuKquFwiLFxuXHQgICAgICAgICAgICBcIiZzY2Fyb247XCI6IFwixaFcIixcblx0ICAgICAgICAgICAgXCImc2NjdWU7XCI6IFwi4om9XCIsXG5cdCAgICAgICAgICAgIFwiJnNjZTtcIjogXCLiqrBcIixcblx0ICAgICAgICAgICAgXCImc2NlZGlsO1wiOiBcIsWfXCIsXG5cdCAgICAgICAgICAgIFwiJnNjaXJjO1wiOiBcIsWdXCIsXG5cdCAgICAgICAgICAgIFwiJnNjbkU7XCI6IFwi4qq2XCIsXG5cdCAgICAgICAgICAgIFwiJnNjbmFwO1wiOiBcIuKqulwiLFxuXHQgICAgICAgICAgICBcIiZzY25zaW07XCI6IFwi4oupXCIsXG5cdCAgICAgICAgICAgIFwiJnNjcG9saW50O1wiOiBcIuKok1wiLFxuXHQgICAgICAgICAgICBcIiZzY3NpbTtcIjogXCLiib9cIixcblx0ICAgICAgICAgICAgXCImc2N5O1wiOiBcItGBXCIsXG5cdCAgICAgICAgICAgIFwiJnNkb3Q7XCI6IFwi4ouFXCIsXG5cdCAgICAgICAgICAgIFwiJnNkb3RiO1wiOiBcIuKKoVwiLFxuXHQgICAgICAgICAgICBcIiZzZG90ZTtcIjogXCLiqaZcIixcblx0ICAgICAgICAgICAgXCImc2VBcnI7XCI6IFwi4oeYXCIsXG5cdCAgICAgICAgICAgIFwiJnNlYXJoaztcIjogXCLipKVcIixcblx0ICAgICAgICAgICAgXCImc2VhcnI7XCI6IFwi4oaYXCIsXG5cdCAgICAgICAgICAgIFwiJnNlYXJyb3c7XCI6IFwi4oaYXCIsXG5cdCAgICAgICAgICAgIFwiJnNlY3RcIjogXCLCp1wiLFxuXHQgICAgICAgICAgICBcIiZzZWN0O1wiOiBcIsKnXCIsXG5cdCAgICAgICAgICAgIFwiJnNlbWk7XCI6IFwiO1wiLFxuXHQgICAgICAgICAgICBcIiZzZXN3YXI7XCI6IFwi4qSpXCIsXG5cdCAgICAgICAgICAgIFwiJnNldG1pbnVzO1wiOiBcIuKIllwiLFxuXHQgICAgICAgICAgICBcIiZzZXRtbjtcIjogXCLiiJZcIixcblx0ICAgICAgICAgICAgXCImc2V4dDtcIjogXCLinLZcIixcblx0ICAgICAgICAgICAgXCImc2ZyO1wiOiBcIvCdlLBcIixcblx0ICAgICAgICAgICAgXCImc2Zyb3duO1wiOiBcIuKMolwiLFxuXHQgICAgICAgICAgICBcIiZzaGFycDtcIjogXCLima9cIixcblx0ICAgICAgICAgICAgXCImc2hjaGN5O1wiOiBcItGJXCIsXG5cdCAgICAgICAgICAgIFwiJnNoY3k7XCI6IFwi0YhcIixcblx0ICAgICAgICAgICAgXCImc2hvcnRtaWQ7XCI6IFwi4oijXCIsXG5cdCAgICAgICAgICAgIFwiJnNob3J0cGFyYWxsZWw7XCI6IFwi4oilXCIsXG5cdCAgICAgICAgICAgIFwiJnNoeVwiOiBcIsKtXCIsXG5cdCAgICAgICAgICAgIFwiJnNoeTtcIjogXCLCrVwiLFxuXHQgICAgICAgICAgICBcIiZzaWdtYTtcIjogXCLPg1wiLFxuXHQgICAgICAgICAgICBcIiZzaWdtYWY7XCI6IFwiz4JcIixcblx0ICAgICAgICAgICAgXCImc2lnbWF2O1wiOiBcIs+CXCIsXG5cdCAgICAgICAgICAgIFwiJnNpbTtcIjogXCLiiLxcIixcblx0ICAgICAgICAgICAgXCImc2ltZG90O1wiOiBcIuKpqlwiLFxuXHQgICAgICAgICAgICBcIiZzaW1lO1wiOiBcIuKJg1wiLFxuXHQgICAgICAgICAgICBcIiZzaW1lcTtcIjogXCLiiYNcIixcblx0ICAgICAgICAgICAgXCImc2ltZztcIjogXCLiqp5cIixcblx0ICAgICAgICAgICAgXCImc2ltZ0U7XCI6IFwi4qqgXCIsXG5cdCAgICAgICAgICAgIFwiJnNpbWw7XCI6IFwi4qqdXCIsXG5cdCAgICAgICAgICAgIFwiJnNpbWxFO1wiOiBcIuKqn1wiLFxuXHQgICAgICAgICAgICBcIiZzaW1uZTtcIjogXCLiiYZcIixcblx0ICAgICAgICAgICAgXCImc2ltcGx1cztcIjogXCLiqKRcIixcblx0ICAgICAgICAgICAgXCImc2ltcmFycjtcIjogXCLipbJcIixcblx0ICAgICAgICAgICAgXCImc2xhcnI7XCI6IFwi4oaQXCIsXG5cdCAgICAgICAgICAgIFwiJnNtYWxsc2V0bWludXM7XCI6IFwi4oiWXCIsXG5cdCAgICAgICAgICAgIFwiJnNtYXNocDtcIjogXCLiqLNcIixcblx0ICAgICAgICAgICAgXCImc21lcGFyc2w7XCI6IFwi4qekXCIsXG5cdCAgICAgICAgICAgIFwiJnNtaWQ7XCI6IFwi4oijXCIsXG5cdCAgICAgICAgICAgIFwiJnNtaWxlO1wiOiBcIuKMo1wiLFxuXHQgICAgICAgICAgICBcIiZzbXQ7XCI6IFwi4qqqXCIsXG5cdCAgICAgICAgICAgIFwiJnNtdGU7XCI6IFwi4qqsXCIsXG5cdCAgICAgICAgICAgIFwiJnNtdGVzO1wiOiBcIuKqrO+4gFwiLFxuXHQgICAgICAgICAgICBcIiZzb2Z0Y3k7XCI6IFwi0YxcIixcblx0ICAgICAgICAgICAgXCImc29sO1wiOiBcIi9cIixcblx0ICAgICAgICAgICAgXCImc29sYjtcIjogXCLip4RcIixcblx0ICAgICAgICAgICAgXCImc29sYmFyO1wiOiBcIuKMv1wiLFxuXHQgICAgICAgICAgICBcIiZzb3BmO1wiOiBcIvCdlaRcIixcblx0ICAgICAgICAgICAgXCImc3BhZGVzO1wiOiBcIuKZoFwiLFxuXHQgICAgICAgICAgICBcIiZzcGFkZXN1aXQ7XCI6IFwi4pmgXCIsXG5cdCAgICAgICAgICAgIFwiJnNwYXI7XCI6IFwi4oilXCIsXG5cdCAgICAgICAgICAgIFwiJnNxY2FwO1wiOiBcIuKKk1wiLFxuXHQgICAgICAgICAgICBcIiZzcWNhcHM7XCI6IFwi4oqT77iAXCIsXG5cdCAgICAgICAgICAgIFwiJnNxY3VwO1wiOiBcIuKKlFwiLFxuXHQgICAgICAgICAgICBcIiZzcWN1cHM7XCI6IFwi4oqU77iAXCIsXG5cdCAgICAgICAgICAgIFwiJnNxc3ViO1wiOiBcIuKKj1wiLFxuXHQgICAgICAgICAgICBcIiZzcXN1YmU7XCI6IFwi4oqRXCIsXG5cdCAgICAgICAgICAgIFwiJnNxc3Vic2V0O1wiOiBcIuKKj1wiLFxuXHQgICAgICAgICAgICBcIiZzcXN1YnNldGVxO1wiOiBcIuKKkVwiLFxuXHQgICAgICAgICAgICBcIiZzcXN1cDtcIjogXCLiipBcIixcblx0ICAgICAgICAgICAgXCImc3FzdXBlO1wiOiBcIuKKklwiLFxuXHQgICAgICAgICAgICBcIiZzcXN1cHNldDtcIjogXCLiipBcIixcblx0ICAgICAgICAgICAgXCImc3FzdXBzZXRlcTtcIjogXCLiipJcIixcblx0ICAgICAgICAgICAgXCImc3F1O1wiOiBcIuKWoVwiLFxuXHQgICAgICAgICAgICBcIiZzcXVhcmU7XCI6IFwi4pahXCIsXG5cdCAgICAgICAgICAgIFwiJnNxdWFyZjtcIjogXCLilqpcIixcblx0ICAgICAgICAgICAgXCImc3F1ZjtcIjogXCLilqpcIixcblx0ICAgICAgICAgICAgXCImc3JhcnI7XCI6IFwi4oaSXCIsXG5cdCAgICAgICAgICAgIFwiJnNzY3I7XCI6IFwi8J2TiFwiLFxuXHQgICAgICAgICAgICBcIiZzc2V0bW47XCI6IFwi4oiWXCIsXG5cdCAgICAgICAgICAgIFwiJnNzbWlsZTtcIjogXCLijKNcIixcblx0ICAgICAgICAgICAgXCImc3N0YXJmO1wiOiBcIuKLhlwiLFxuXHQgICAgICAgICAgICBcIiZzdGFyO1wiOiBcIuKYhlwiLFxuXHQgICAgICAgICAgICBcIiZzdGFyZjtcIjogXCLimIVcIixcblx0ICAgICAgICAgICAgXCImc3RyYWlnaHRlcHNpbG9uO1wiOiBcIs+1XCIsXG5cdCAgICAgICAgICAgIFwiJnN0cmFpZ2h0cGhpO1wiOiBcIs+VXCIsXG5cdCAgICAgICAgICAgIFwiJnN0cm5zO1wiOiBcIsKvXCIsXG5cdCAgICAgICAgICAgIFwiJnN1YjtcIjogXCLiioJcIixcblx0ICAgICAgICAgICAgXCImc3ViRTtcIjogXCLiq4VcIixcblx0ICAgICAgICAgICAgXCImc3ViZG90O1wiOiBcIuKqvVwiLFxuXHQgICAgICAgICAgICBcIiZzdWJlO1wiOiBcIuKKhlwiLFxuXHQgICAgICAgICAgICBcIiZzdWJlZG90O1wiOiBcIuKrg1wiLFxuXHQgICAgICAgICAgICBcIiZzdWJtdWx0O1wiOiBcIuKrgVwiLFxuXHQgICAgICAgICAgICBcIiZzdWJuRTtcIjogXCLiq4tcIixcblx0ICAgICAgICAgICAgXCImc3VibmU7XCI6IFwi4oqKXCIsXG5cdCAgICAgICAgICAgIFwiJnN1YnBsdXM7XCI6IFwi4qq/XCIsXG5cdCAgICAgICAgICAgIFwiJnN1YnJhcnI7XCI6IFwi4qW5XCIsXG5cdCAgICAgICAgICAgIFwiJnN1YnNldDtcIjogXCLiioJcIixcblx0ICAgICAgICAgICAgXCImc3Vic2V0ZXE7XCI6IFwi4oqGXCIsXG5cdCAgICAgICAgICAgIFwiJnN1YnNldGVxcTtcIjogXCLiq4VcIixcblx0ICAgICAgICAgICAgXCImc3Vic2V0bmVxO1wiOiBcIuKKilwiLFxuXHQgICAgICAgICAgICBcIiZzdWJzZXRuZXFxO1wiOiBcIuKri1wiLFxuXHQgICAgICAgICAgICBcIiZzdWJzaW07XCI6IFwi4quHXCIsXG5cdCAgICAgICAgICAgIFwiJnN1YnN1YjtcIjogXCLiq5VcIixcblx0ICAgICAgICAgICAgXCImc3Vic3VwO1wiOiBcIuKrk1wiLFxuXHQgICAgICAgICAgICBcIiZzdWNjO1wiOiBcIuKJu1wiLFxuXHQgICAgICAgICAgICBcIiZzdWNjYXBwcm94O1wiOiBcIuKquFwiLFxuXHQgICAgICAgICAgICBcIiZzdWNjY3VybHllcTtcIjogXCLiib1cIixcblx0ICAgICAgICAgICAgXCImc3VjY2VxO1wiOiBcIuKqsFwiLFxuXHQgICAgICAgICAgICBcIiZzdWNjbmFwcHJveDtcIjogXCLiqrpcIixcblx0ICAgICAgICAgICAgXCImc3VjY25lcXE7XCI6IFwi4qq2XCIsXG5cdCAgICAgICAgICAgIFwiJnN1Y2Nuc2ltO1wiOiBcIuKLqVwiLFxuXHQgICAgICAgICAgICBcIiZzdWNjc2ltO1wiOiBcIuKJv1wiLFxuXHQgICAgICAgICAgICBcIiZzdW07XCI6IFwi4oiRXCIsXG5cdCAgICAgICAgICAgIFwiJnN1bmc7XCI6IFwi4pmqXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cDFcIjogXCLCuVwiLFxuXHQgICAgICAgICAgICBcIiZzdXAxO1wiOiBcIsK5XCIsXG5cdCAgICAgICAgICAgIFwiJnN1cDJcIjogXCLCslwiLFxuXHQgICAgICAgICAgICBcIiZzdXAyO1wiOiBcIsKyXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cDNcIjogXCLCs1wiLFxuXHQgICAgICAgICAgICBcIiZzdXAzO1wiOiBcIsKzXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cDtcIjogXCLiioNcIixcblx0ICAgICAgICAgICAgXCImc3VwRTtcIjogXCLiq4ZcIixcblx0ICAgICAgICAgICAgXCImc3VwZG90O1wiOiBcIuKqvlwiLFxuXHQgICAgICAgICAgICBcIiZzdXBkc3ViO1wiOiBcIuKrmFwiLFxuXHQgICAgICAgICAgICBcIiZzdXBlO1wiOiBcIuKKh1wiLFxuXHQgICAgICAgICAgICBcIiZzdXBlZG90O1wiOiBcIuKrhFwiLFxuXHQgICAgICAgICAgICBcIiZzdXBoc29sO1wiOiBcIuKfiVwiLFxuXHQgICAgICAgICAgICBcIiZzdXBoc3ViO1wiOiBcIuKrl1wiLFxuXHQgICAgICAgICAgICBcIiZzdXBsYXJyO1wiOiBcIuKlu1wiLFxuXHQgICAgICAgICAgICBcIiZzdXBtdWx0O1wiOiBcIuKrglwiLFxuXHQgICAgICAgICAgICBcIiZzdXBuRTtcIjogXCLiq4xcIixcblx0ICAgICAgICAgICAgXCImc3VwbmU7XCI6IFwi4oqLXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cHBsdXM7XCI6IFwi4quAXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cHNldDtcIjogXCLiioNcIixcblx0ICAgICAgICAgICAgXCImc3Vwc2V0ZXE7XCI6IFwi4oqHXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cHNldGVxcTtcIjogXCLiq4ZcIixcblx0ICAgICAgICAgICAgXCImc3Vwc2V0bmVxO1wiOiBcIuKKi1wiLFxuXHQgICAgICAgICAgICBcIiZzdXBzZXRuZXFxO1wiOiBcIuKrjFwiLFxuXHQgICAgICAgICAgICBcIiZzdXBzaW07XCI6IFwi4quIXCIsXG5cdCAgICAgICAgICAgIFwiJnN1cHN1YjtcIjogXCLiq5RcIixcblx0ICAgICAgICAgICAgXCImc3Vwc3VwO1wiOiBcIuKrllwiLFxuXHQgICAgICAgICAgICBcIiZzd0FycjtcIjogXCLih5lcIixcblx0ICAgICAgICAgICAgXCImc3dhcmhrO1wiOiBcIuKkplwiLFxuXHQgICAgICAgICAgICBcIiZzd2FycjtcIjogXCLihplcIixcblx0ICAgICAgICAgICAgXCImc3dhcnJvdztcIjogXCLihplcIixcblx0ICAgICAgICAgICAgXCImc3dud2FyO1wiOiBcIuKkqlwiLFxuXHQgICAgICAgICAgICBcIiZzemxpZ1wiOiBcIsOfXCIsXG5cdCAgICAgICAgICAgIFwiJnN6bGlnO1wiOiBcIsOfXCIsXG5cdCAgICAgICAgICAgIFwiJnRhcmdldDtcIjogXCLijJZcIixcblx0ICAgICAgICAgICAgXCImdGF1O1wiOiBcIs+EXCIsXG5cdCAgICAgICAgICAgIFwiJnRicms7XCI6IFwi4o60XCIsXG5cdCAgICAgICAgICAgIFwiJnRjYXJvbjtcIjogXCLFpVwiLFxuXHQgICAgICAgICAgICBcIiZ0Y2VkaWw7XCI6IFwixaNcIixcblx0ICAgICAgICAgICAgXCImdGN5O1wiOiBcItGCXCIsXG5cdCAgICAgICAgICAgIFwiJnRkb3Q7XCI6IFwi4oObXCIsXG5cdCAgICAgICAgICAgIFwiJnRlbHJlYztcIjogXCLijJVcIixcblx0ICAgICAgICAgICAgXCImdGZyO1wiOiBcIvCdlLFcIixcblx0ICAgICAgICAgICAgXCImdGhlcmU0O1wiOiBcIuKItFwiLFxuXHQgICAgICAgICAgICBcIiZ0aGVyZWZvcmU7XCI6IFwi4oi0XCIsXG5cdCAgICAgICAgICAgIFwiJnRoZXRhO1wiOiBcIs64XCIsXG5cdCAgICAgICAgICAgIFwiJnRoZXRhc3ltO1wiOiBcIs+RXCIsXG5cdCAgICAgICAgICAgIFwiJnRoZXRhdjtcIjogXCLPkVwiLFxuXHQgICAgICAgICAgICBcIiZ0aGlja2FwcHJveDtcIjogXCLiiYhcIixcblx0ICAgICAgICAgICAgXCImdGhpY2tzaW07XCI6IFwi4oi8XCIsXG5cdCAgICAgICAgICAgIFwiJnRoaW5zcDtcIjogXCLigIlcIixcblx0ICAgICAgICAgICAgXCImdGhrYXA7XCI6IFwi4omIXCIsXG5cdCAgICAgICAgICAgIFwiJnRoa3NpbTtcIjogXCLiiLxcIixcblx0ICAgICAgICAgICAgXCImdGhvcm5cIjogXCLDvlwiLFxuXHQgICAgICAgICAgICBcIiZ0aG9ybjtcIjogXCLDvlwiLFxuXHQgICAgICAgICAgICBcIiZ0aWxkZTtcIjogXCLLnFwiLFxuXHQgICAgICAgICAgICBcIiZ0aW1lc1wiOiBcIsOXXCIsXG5cdCAgICAgICAgICAgIFwiJnRpbWVzO1wiOiBcIsOXXCIsXG5cdCAgICAgICAgICAgIFwiJnRpbWVzYjtcIjogXCLiiqBcIixcblx0ICAgICAgICAgICAgXCImdGltZXNiYXI7XCI6IFwi4qixXCIsXG5cdCAgICAgICAgICAgIFwiJnRpbWVzZDtcIjogXCLiqLBcIixcblx0ICAgICAgICAgICAgXCImdGludDtcIjogXCLiiK1cIixcblx0ICAgICAgICAgICAgXCImdG9lYTtcIjogXCLipKhcIixcblx0ICAgICAgICAgICAgXCImdG9wO1wiOiBcIuKKpFwiLFxuXHQgICAgICAgICAgICBcIiZ0b3Bib3Q7XCI6IFwi4oy2XCIsXG5cdCAgICAgICAgICAgIFwiJnRvcGNpcjtcIjogXCLiq7FcIixcblx0ICAgICAgICAgICAgXCImdG9wZjtcIjogXCLwnZWlXCIsXG5cdCAgICAgICAgICAgIFwiJnRvcGZvcms7XCI6IFwi4quaXCIsXG5cdCAgICAgICAgICAgIFwiJnRvc2E7XCI6IFwi4qSpXCIsXG5cdCAgICAgICAgICAgIFwiJnRwcmltZTtcIjogXCLigLRcIixcblx0ICAgICAgICAgICAgXCImdHJhZGU7XCI6IFwi4oSiXCIsXG5cdCAgICAgICAgICAgIFwiJnRyaWFuZ2xlO1wiOiBcIuKWtVwiLFxuXHQgICAgICAgICAgICBcIiZ0cmlhbmdsZWRvd247XCI6IFwi4pa/XCIsXG5cdCAgICAgICAgICAgIFwiJnRyaWFuZ2xlbGVmdDtcIjogXCLil4NcIixcblx0ICAgICAgICAgICAgXCImdHJpYW5nbGVsZWZ0ZXE7XCI6IFwi4oq0XCIsXG5cdCAgICAgICAgICAgIFwiJnRyaWFuZ2xlcTtcIjogXCLiiZxcIixcblx0ICAgICAgICAgICAgXCImdHJpYW5nbGVyaWdodDtcIjogXCLilrlcIixcblx0ICAgICAgICAgICAgXCImdHJpYW5nbGVyaWdodGVxO1wiOiBcIuKKtVwiLFxuXHQgICAgICAgICAgICBcIiZ0cmlkb3Q7XCI6IFwi4pesXCIsXG5cdCAgICAgICAgICAgIFwiJnRyaWU7XCI6IFwi4omcXCIsXG5cdCAgICAgICAgICAgIFwiJnRyaW1pbnVzO1wiOiBcIuKoulwiLFxuXHQgICAgICAgICAgICBcIiZ0cmlwbHVzO1wiOiBcIuKouVwiLFxuXHQgICAgICAgICAgICBcIiZ0cmlzYjtcIjogXCLip41cIixcblx0ICAgICAgICAgICAgXCImdHJpdGltZTtcIjogXCLiqLtcIixcblx0ICAgICAgICAgICAgXCImdHJwZXppdW07XCI6IFwi4o+iXCIsXG5cdCAgICAgICAgICAgIFwiJnRzY3I7XCI6IFwi8J2TiVwiLFxuXHQgICAgICAgICAgICBcIiZ0c2N5O1wiOiBcItGGXCIsXG5cdCAgICAgICAgICAgIFwiJnRzaGN5O1wiOiBcItGbXCIsXG5cdCAgICAgICAgICAgIFwiJnRzdHJvaztcIjogXCLFp1wiLFxuXHQgICAgICAgICAgICBcIiZ0d2l4dDtcIjogXCLiiaxcIixcblx0ICAgICAgICAgICAgXCImdHdvaGVhZGxlZnRhcnJvdztcIjogXCLihp5cIixcblx0ICAgICAgICAgICAgXCImdHdvaGVhZHJpZ2h0YXJyb3c7XCI6IFwi4oagXCIsXG5cdCAgICAgICAgICAgIFwiJnVBcnI7XCI6IFwi4oeRXCIsXG5cdCAgICAgICAgICAgIFwiJnVIYXI7XCI6IFwi4qWjXCIsXG5cdCAgICAgICAgICAgIFwiJnVhY3V0ZVwiOiBcIsO6XCIsXG5cdCAgICAgICAgICAgIFwiJnVhY3V0ZTtcIjogXCLDulwiLFxuXHQgICAgICAgICAgICBcIiZ1YXJyO1wiOiBcIuKGkVwiLFxuXHQgICAgICAgICAgICBcIiZ1YnJjeTtcIjogXCLRnlwiLFxuXHQgICAgICAgICAgICBcIiZ1YnJldmU7XCI6IFwixa1cIixcblx0ICAgICAgICAgICAgXCImdWNpcmNcIjogXCLDu1wiLFxuXHQgICAgICAgICAgICBcIiZ1Y2lyYztcIjogXCLDu1wiLFxuXHQgICAgICAgICAgICBcIiZ1Y3k7XCI6IFwi0YNcIixcblx0ICAgICAgICAgICAgXCImdWRhcnI7XCI6IFwi4oeFXCIsXG5cdCAgICAgICAgICAgIFwiJnVkYmxhYztcIjogXCLFsVwiLFxuXHQgICAgICAgICAgICBcIiZ1ZGhhcjtcIjogXCLipa5cIixcblx0ICAgICAgICAgICAgXCImdWZpc2h0O1wiOiBcIuKlvlwiLFxuXHQgICAgICAgICAgICBcIiZ1ZnI7XCI6IFwi8J2UslwiLFxuXHQgICAgICAgICAgICBcIiZ1Z3JhdmVcIjogXCLDuVwiLFxuXHQgICAgICAgICAgICBcIiZ1Z3JhdmU7XCI6IFwiw7lcIixcblx0ICAgICAgICAgICAgXCImdWhhcmw7XCI6IFwi4oa/XCIsXG5cdCAgICAgICAgICAgIFwiJnVoYXJyO1wiOiBcIuKGvlwiLFxuXHQgICAgICAgICAgICBcIiZ1aGJsaztcIjogXCLiloBcIixcblx0ICAgICAgICAgICAgXCImdWxjb3JuO1wiOiBcIuKMnFwiLFxuXHQgICAgICAgICAgICBcIiZ1bGNvcm5lcjtcIjogXCLijJxcIixcblx0ICAgICAgICAgICAgXCImdWxjcm9wO1wiOiBcIuKMj1wiLFxuXHQgICAgICAgICAgICBcIiZ1bHRyaTtcIjogXCLil7hcIixcblx0ICAgICAgICAgICAgXCImdW1hY3I7XCI6IFwixatcIixcblx0ICAgICAgICAgICAgXCImdW1sXCI6IFwiwqhcIixcblx0ICAgICAgICAgICAgXCImdW1sO1wiOiBcIsKoXCIsXG5cdCAgICAgICAgICAgIFwiJnVvZ29uO1wiOiBcIsWzXCIsXG5cdCAgICAgICAgICAgIFwiJnVvcGY7XCI6IFwi8J2VplwiLFxuXHQgICAgICAgICAgICBcIiZ1cGFycm93O1wiOiBcIuKGkVwiLFxuXHQgICAgICAgICAgICBcIiZ1cGRvd25hcnJvdztcIjogXCLihpVcIixcblx0ICAgICAgICAgICAgXCImdXBoYXJwb29ubGVmdDtcIjogXCLihr9cIixcblx0ICAgICAgICAgICAgXCImdXBoYXJwb29ucmlnaHQ7XCI6IFwi4oa+XCIsXG5cdCAgICAgICAgICAgIFwiJnVwbHVzO1wiOiBcIuKKjlwiLFxuXHQgICAgICAgICAgICBcIiZ1cHNpO1wiOiBcIs+FXCIsXG5cdCAgICAgICAgICAgIFwiJnVwc2loO1wiOiBcIs+SXCIsXG5cdCAgICAgICAgICAgIFwiJnVwc2lsb247XCI6IFwiz4VcIixcblx0ICAgICAgICAgICAgXCImdXB1cGFycm93cztcIjogXCLih4hcIixcblx0ICAgICAgICAgICAgXCImdXJjb3JuO1wiOiBcIuKMnVwiLFxuXHQgICAgICAgICAgICBcIiZ1cmNvcm5lcjtcIjogXCLijJ1cIixcblx0ICAgICAgICAgICAgXCImdXJjcm9wO1wiOiBcIuKMjlwiLFxuXHQgICAgICAgICAgICBcIiZ1cmluZztcIjogXCLFr1wiLFxuXHQgICAgICAgICAgICBcIiZ1cnRyaTtcIjogXCLil7lcIixcblx0ICAgICAgICAgICAgXCImdXNjcjtcIjogXCLwnZOKXCIsXG5cdCAgICAgICAgICAgIFwiJnV0ZG90O1wiOiBcIuKLsFwiLFxuXHQgICAgICAgICAgICBcIiZ1dGlsZGU7XCI6IFwixalcIixcblx0ICAgICAgICAgICAgXCImdXRyaTtcIjogXCLilrVcIixcblx0ICAgICAgICAgICAgXCImdXRyaWY7XCI6IFwi4pa0XCIsXG5cdCAgICAgICAgICAgIFwiJnV1YXJyO1wiOiBcIuKHiFwiLFxuXHQgICAgICAgICAgICBcIiZ1dW1sXCI6IFwiw7xcIixcblx0ICAgICAgICAgICAgXCImdXVtbDtcIjogXCLDvFwiLFxuXHQgICAgICAgICAgICBcIiZ1d2FuZ2xlO1wiOiBcIuKmp1wiLFxuXHQgICAgICAgICAgICBcIiZ2QXJyO1wiOiBcIuKHlVwiLFxuXHQgICAgICAgICAgICBcIiZ2QmFyO1wiOiBcIuKrqFwiLFxuXHQgICAgICAgICAgICBcIiZ2QmFydjtcIjogXCLiq6lcIixcblx0ICAgICAgICAgICAgXCImdkRhc2g7XCI6IFwi4oqoXCIsXG5cdCAgICAgICAgICAgIFwiJnZhbmdydDtcIjogXCLippxcIixcblx0ICAgICAgICAgICAgXCImdmFyZXBzaWxvbjtcIjogXCLPtVwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJrYXBwYTtcIjogXCLPsFwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJub3RoaW5nO1wiOiBcIuKIhVwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJwaGk7XCI6IFwiz5VcIixcblx0ICAgICAgICAgICAgXCImdmFycGk7XCI6IFwiz5ZcIixcblx0ICAgICAgICAgICAgXCImdmFycHJvcHRvO1wiOiBcIuKInVwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJyO1wiOiBcIuKGlVwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJyaG87XCI6IFwiz7FcIixcblx0ICAgICAgICAgICAgXCImdmFyc2lnbWE7XCI6IFwiz4JcIixcblx0ICAgICAgICAgICAgXCImdmFyc3Vic2V0bmVxO1wiOiBcIuKKiu+4gFwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJzdWJzZXRuZXFxO1wiOiBcIuKri++4gFwiLFxuXHQgICAgICAgICAgICBcIiZ2YXJzdXBzZXRuZXE7XCI6IFwi4oqL77iAXCIsXG5cdCAgICAgICAgICAgIFwiJnZhcnN1cHNldG5lcXE7XCI6IFwi4quM77iAXCIsXG5cdCAgICAgICAgICAgIFwiJnZhcnRoZXRhO1wiOiBcIs+RXCIsXG5cdCAgICAgICAgICAgIFwiJnZhcnRyaWFuZ2xlbGVmdDtcIjogXCLiirJcIixcblx0ICAgICAgICAgICAgXCImdmFydHJpYW5nbGVyaWdodDtcIjogXCLiirNcIixcblx0ICAgICAgICAgICAgXCImdmN5O1wiOiBcItCyXCIsXG5cdCAgICAgICAgICAgIFwiJnZkYXNoO1wiOiBcIuKKolwiLFxuXHQgICAgICAgICAgICBcIiZ2ZWU7XCI6IFwi4oioXCIsXG5cdCAgICAgICAgICAgIFwiJnZlZWJhcjtcIjogXCLiirtcIixcblx0ICAgICAgICAgICAgXCImdmVlZXE7XCI6IFwi4omaXCIsXG5cdCAgICAgICAgICAgIFwiJnZlbGxpcDtcIjogXCLii65cIixcblx0ICAgICAgICAgICAgXCImdmVyYmFyO1wiOiBcInxcIixcblx0ICAgICAgICAgICAgXCImdmVydDtcIjogXCJ8XCIsXG5cdCAgICAgICAgICAgIFwiJnZmcjtcIjogXCLwnZSzXCIsXG5cdCAgICAgICAgICAgIFwiJnZsdHJpO1wiOiBcIuKKslwiLFxuXHQgICAgICAgICAgICBcIiZ2bnN1YjtcIjogXCLiioLig5JcIixcblx0ICAgICAgICAgICAgXCImdm5zdXA7XCI6IFwi4oqD4oOSXCIsXG5cdCAgICAgICAgICAgIFwiJnZvcGY7XCI6IFwi8J2Vp1wiLFxuXHQgICAgICAgICAgICBcIiZ2cHJvcDtcIjogXCLiiJ1cIixcblx0ICAgICAgICAgICAgXCImdnJ0cmk7XCI6IFwi4oqzXCIsXG5cdCAgICAgICAgICAgIFwiJnZzY3I7XCI6IFwi8J2Ti1wiLFxuXHQgICAgICAgICAgICBcIiZ2c3VibkU7XCI6IFwi4quL77iAXCIsXG5cdCAgICAgICAgICAgIFwiJnZzdWJuZTtcIjogXCLiiorvuIBcIixcblx0ICAgICAgICAgICAgXCImdnN1cG5FO1wiOiBcIuKrjO+4gFwiLFxuXHQgICAgICAgICAgICBcIiZ2c3VwbmU7XCI6IFwi4oqL77iAXCIsXG5cdCAgICAgICAgICAgIFwiJnZ6aWd6YWc7XCI6IFwi4qaaXCIsXG5cdCAgICAgICAgICAgIFwiJndjaXJjO1wiOiBcIsW1XCIsXG5cdCAgICAgICAgICAgIFwiJndlZGJhcjtcIjogXCLiqZ9cIixcblx0ICAgICAgICAgICAgXCImd2VkZ2U7XCI6IFwi4oinXCIsXG5cdCAgICAgICAgICAgIFwiJndlZGdlcTtcIjogXCLiiZlcIixcblx0ICAgICAgICAgICAgXCImd2VpZXJwO1wiOiBcIuKEmFwiLFxuXHQgICAgICAgICAgICBcIiZ3ZnI7XCI6IFwi8J2UtFwiLFxuXHQgICAgICAgICAgICBcIiZ3b3BmO1wiOiBcIvCdlahcIixcblx0ICAgICAgICAgICAgXCImd3A7XCI6IFwi4oSYXCIsXG5cdCAgICAgICAgICAgIFwiJndyO1wiOiBcIuKJgFwiLFxuXHQgICAgICAgICAgICBcIiZ3cmVhdGg7XCI6IFwi4omAXCIsXG5cdCAgICAgICAgICAgIFwiJndzY3I7XCI6IFwi8J2TjFwiLFxuXHQgICAgICAgICAgICBcIiZ4Y2FwO1wiOiBcIuKLglwiLFxuXHQgICAgICAgICAgICBcIiZ4Y2lyYztcIjogXCLil69cIixcblx0ICAgICAgICAgICAgXCImeGN1cDtcIjogXCLii4NcIixcblx0ICAgICAgICAgICAgXCImeGR0cmk7XCI6IFwi4pa9XCIsXG5cdCAgICAgICAgICAgIFwiJnhmcjtcIjogXCLwnZS1XCIsXG5cdCAgICAgICAgICAgIFwiJnhoQXJyO1wiOiBcIuKfulwiLFxuXHQgICAgICAgICAgICBcIiZ4aGFycjtcIjogXCLin7dcIixcblx0ICAgICAgICAgICAgXCImeGk7XCI6IFwizr5cIixcblx0ICAgICAgICAgICAgXCImeGxBcnI7XCI6IFwi4p+4XCIsXG5cdCAgICAgICAgICAgIFwiJnhsYXJyO1wiOiBcIuKftVwiLFxuXHQgICAgICAgICAgICBcIiZ4bWFwO1wiOiBcIuKfvFwiLFxuXHQgICAgICAgICAgICBcIiZ4bmlzO1wiOiBcIuKLu1wiLFxuXHQgICAgICAgICAgICBcIiZ4b2RvdDtcIjogXCLiqIBcIixcblx0ICAgICAgICAgICAgXCImeG9wZjtcIjogXCLwnZWpXCIsXG5cdCAgICAgICAgICAgIFwiJnhvcGx1cztcIjogXCLiqIFcIixcblx0ICAgICAgICAgICAgXCImeG90aW1lO1wiOiBcIuKoglwiLFxuXHQgICAgICAgICAgICBcIiZ4ckFycjtcIjogXCLin7lcIixcblx0ICAgICAgICAgICAgXCImeHJhcnI7XCI6IFwi4p+2XCIsXG5cdCAgICAgICAgICAgIFwiJnhzY3I7XCI6IFwi8J2TjVwiLFxuXHQgICAgICAgICAgICBcIiZ4c3FjdXA7XCI6IFwi4qiGXCIsXG5cdCAgICAgICAgICAgIFwiJnh1cGx1cztcIjogXCLiqIRcIixcblx0ICAgICAgICAgICAgXCImeHV0cmk7XCI6IFwi4pazXCIsXG5cdCAgICAgICAgICAgIFwiJnh2ZWU7XCI6IFwi4ouBXCIsXG5cdCAgICAgICAgICAgIFwiJnh3ZWRnZTtcIjogXCLii4BcIixcblx0ICAgICAgICAgICAgXCImeWFjdXRlXCI6IFwiw71cIixcblx0ICAgICAgICAgICAgXCImeWFjdXRlO1wiOiBcIsO9XCIsXG5cdCAgICAgICAgICAgIFwiJnlhY3k7XCI6IFwi0Y9cIixcblx0ICAgICAgICAgICAgXCImeWNpcmM7XCI6IFwixbdcIixcblx0ICAgICAgICAgICAgXCImeWN5O1wiOiBcItGLXCIsXG5cdCAgICAgICAgICAgIFwiJnllblwiOiBcIsKlXCIsXG5cdCAgICAgICAgICAgIFwiJnllbjtcIjogXCLCpVwiLFxuXHQgICAgICAgICAgICBcIiZ5ZnI7XCI6IFwi8J2UtlwiLFxuXHQgICAgICAgICAgICBcIiZ5aWN5O1wiOiBcItGXXCIsXG5cdCAgICAgICAgICAgIFwiJnlvcGY7XCI6IFwi8J2VqlwiLFxuXHQgICAgICAgICAgICBcIiZ5c2NyO1wiOiBcIvCdk45cIixcblx0ICAgICAgICAgICAgXCImeXVjeTtcIjogXCLRjlwiLFxuXHQgICAgICAgICAgICBcIiZ5dW1sXCI6IFwiw79cIixcblx0ICAgICAgICAgICAgXCImeXVtbDtcIjogXCLDv1wiLFxuXHQgICAgICAgICAgICBcIiZ6YWN1dGU7XCI6IFwixbpcIixcblx0ICAgICAgICAgICAgXCImemNhcm9uO1wiOiBcIsW+XCIsXG5cdCAgICAgICAgICAgIFwiJnpjeTtcIjogXCLQt1wiLFxuXHQgICAgICAgICAgICBcIiZ6ZG90O1wiOiBcIsW8XCIsXG5cdCAgICAgICAgICAgIFwiJnplZXRyZjtcIjogXCLihKhcIixcblx0ICAgICAgICAgICAgXCImemV0YTtcIjogXCLOtlwiLFxuXHQgICAgICAgICAgICBcIiZ6ZnI7XCI6IFwi8J2Ut1wiLFxuXHQgICAgICAgICAgICBcIiZ6aGN5O1wiOiBcItC2XCIsXG5cdCAgICAgICAgICAgIFwiJnppZ3JhcnI7XCI6IFwi4oedXCIsXG5cdCAgICAgICAgICAgIFwiJnpvcGY7XCI6IFwi8J2Vq1wiLFxuXHQgICAgICAgICAgICBcIiZ6c2NyO1wiOiBcIvCdk49cIixcblx0ICAgICAgICAgICAgXCImendqO1wiOiBcIuKAjVwiLFxuXHQgICAgICAgICAgICBcIiZ6d25qO1wiOiBcIuKAjFwiXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjaGFyYWN0ZXJzOiB7XG5cdCAgICAgICAgICAgIFwiw4ZcIjogXCImQUVsaWc7XCIsXG5cdCAgICAgICAgICAgIFwiJlwiOiBcIiZhbXA7XCIsXG5cdCAgICAgICAgICAgIFwiw4FcIjogXCImQWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsSCXCI6IFwiJkFicmV2ZTtcIixcblx0ICAgICAgICAgICAgXCLDglwiOiBcIiZBY2lyYztcIixcblx0ICAgICAgICAgICAgXCLQkFwiOiBcIiZBY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UhFwiOiBcIiZBZnI7XCIsXG5cdCAgICAgICAgICAgIFwiw4BcIjogXCImQWdyYXZlO1wiLFxuXHQgICAgICAgICAgICBcIs6RXCI6IFwiJkFscGhhO1wiLFxuXHQgICAgICAgICAgICBcIsSAXCI6IFwiJkFtYWNyO1wiLFxuXHQgICAgICAgICAgICBcIuKpk1wiOiBcIiZBbmQ7XCIsXG5cdCAgICAgICAgICAgIFwixIRcIjogXCImQW9nb247XCIsXG5cdCAgICAgICAgICAgIFwi8J2UuFwiOiBcIiZBb3BmO1wiLFxuXHQgICAgICAgICAgICBcIuKBoVwiOiBcIiZhZjtcIixcblx0ICAgICAgICAgICAgXCLDhVwiOiBcIiZhbmdzdDtcIixcblx0ICAgICAgICAgICAgXCLwnZKcXCI6IFwiJkFzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4omUXCI6IFwiJmNvbG9uZXE7XCIsXG5cdCAgICAgICAgICAgIFwiw4NcIjogXCImQXRpbGRlO1wiLFxuXHQgICAgICAgICAgICBcIsOEXCI6IFwiJkF1bWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oiWXCI6IFwiJnNzZXRtbjtcIixcblx0ICAgICAgICAgICAgXCLiq6dcIjogXCImQmFydjtcIixcblx0ICAgICAgICAgICAgXCLijIZcIjogXCImZG91YmxlYmFyd2VkZ2U7XCIsXG5cdCAgICAgICAgICAgIFwi0JFcIjogXCImQmN5O1wiLFxuXHQgICAgICAgICAgICBcIuKItVwiOiBcIiZiZWNhdXNlO1wiLFxuXHQgICAgICAgICAgICBcIuKErFwiOiBcIiZiZXJub3U7XCIsXG5cdCAgICAgICAgICAgIFwizpJcIjogXCImQmV0YTtcIixcblx0ICAgICAgICAgICAgXCLwnZSFXCI6IFwiJkJmcjtcIixcblx0ICAgICAgICAgICAgXCLwnZS5XCI6IFwiJkJvcGY7XCIsXG5cdCAgICAgICAgICAgIFwiy5hcIjogXCImYnJldmU7XCIsXG5cdCAgICAgICAgICAgIFwi4omOXCI6IFwiJmJ1bXA7XCIsXG5cdCAgICAgICAgICAgIFwi0KdcIjogXCImQ0hjeTtcIixcblx0ICAgICAgICAgICAgXCLCqVwiOiBcIiZjb3B5O1wiLFxuXHQgICAgICAgICAgICBcIsSGXCI6IFwiJkNhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLii5JcIjogXCImQ2FwO1wiLFxuXHQgICAgICAgICAgICBcIuKFhVwiOiBcIiZERDtcIixcblx0ICAgICAgICAgICAgXCLihK1cIjogXCImQ2ZyO1wiLFxuXHQgICAgICAgICAgICBcIsSMXCI6IFwiJkNjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLDh1wiOiBcIiZDY2VkaWw7XCIsXG5cdCAgICAgICAgICAgIFwixIhcIjogXCImQ2NpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi4oiwXCI6IFwiJkNjb25pbnQ7XCIsXG5cdCAgICAgICAgICAgIFwixIpcIjogXCImQ2RvdDtcIixcblx0ICAgICAgICAgICAgXCLCuFwiOiBcIiZjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLCt1wiOiBcIiZtaWRkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwizqdcIjogXCImQ2hpO1wiLFxuXHQgICAgICAgICAgICBcIuKKmVwiOiBcIiZvZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKKllwiOiBcIiZvbWludXM7XCIsXG5cdCAgICAgICAgICAgIFwi4oqVXCI6IFwiJm9wbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKKl1wiOiBcIiZvdGltZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4oiyXCI6IFwiJmN3Y29uaW50O1wiLFxuXHQgICAgICAgICAgICBcIuKAnVwiOiBcIiZyZHF1b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oCZXCI6IFwiJnJzcXVvcjtcIixcblx0ICAgICAgICAgICAgXCLiiLdcIjogXCImUHJvcG9ydGlvbjtcIixcblx0ICAgICAgICAgICAgXCLiqbRcIjogXCImQ29sb25lO1wiLFxuXHQgICAgICAgICAgICBcIuKJoVwiOiBcIiZlcXVpdjtcIixcblx0ICAgICAgICAgICAgXCLiiK9cIjogXCImRG91YmxlQ29udG91ckludGVncmFsO1wiLFxuXHQgICAgICAgICAgICBcIuKIrlwiOiBcIiZvaW50O1wiLFxuXHQgICAgICAgICAgICBcIuKEglwiOiBcIiZjb21wbGV4ZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4oiQXCI6IFwiJmNvcHJvZDtcIixcblx0ICAgICAgICAgICAgXCLiiLNcIjogXCImYXdjb25pbnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qivXCI6IFwiJkNyb3NzO1wiLFxuXHQgICAgICAgICAgICBcIvCdkp5cIjogXCImQ3NjcjtcIixcblx0ICAgICAgICAgICAgXCLii5NcIjogXCImQ3VwO1wiLFxuXHQgICAgICAgICAgICBcIuKJjVwiOiBcIiZhc3ltcGVxO1wiLFxuXHQgICAgICAgICAgICBcIuKkkVwiOiBcIiZERG90cmFoZDtcIixcblx0ICAgICAgICAgICAgXCLQglwiOiBcIiZESmN5O1wiLFxuXHQgICAgICAgICAgICBcItCFXCI6IFwiJkRTY3k7XCIsXG5cdCAgICAgICAgICAgIFwi0I9cIjogXCImRFpjeTtcIixcblx0ICAgICAgICAgICAgXCLigKFcIjogXCImZGRhZ2dlcjtcIixcblx0ICAgICAgICAgICAgXCLihqFcIjogXCImRGFycjtcIixcblx0ICAgICAgICAgICAgXCLiq6RcIjogXCImRG91YmxlTGVmdFRlZTtcIixcblx0ICAgICAgICAgICAgXCLEjlwiOiBcIiZEY2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwi0JRcIjogXCImRGN5O1wiLFxuXHQgICAgICAgICAgICBcIuKIh1wiOiBcIiZuYWJsYTtcIixcblx0ICAgICAgICAgICAgXCLOlFwiOiBcIiZEZWx0YTtcIixcblx0ICAgICAgICAgICAgXCLwnZSHXCI6IFwiJkRmcjtcIixcblx0ICAgICAgICAgICAgXCLCtFwiOiBcIiZhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLLmVwiOiBcIiZkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwiy51cIjogXCImZGJsYWM7XCIsXG5cdCAgICAgICAgICAgIFwiYFwiOiBcIiZncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLLnFwiOiBcIiZ0aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLii4RcIjogXCImZGlhbW9uZDtcIixcblx0ICAgICAgICAgICAgXCLihYZcIjogXCImZGQ7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Uu1wiOiBcIiZEb3BmO1wiLFxuXHQgICAgICAgICAgICBcIsKoXCI6IFwiJnVtbDtcIixcblx0ICAgICAgICAgICAgXCLig5xcIjogXCImRG90RG90O1wiLFxuXHQgICAgICAgICAgICBcIuKJkFwiOiBcIiZlc2RvdDtcIixcblx0ICAgICAgICAgICAgXCLih5NcIjogXCImZEFycjtcIixcblx0ICAgICAgICAgICAgXCLih5BcIjogXCImbEFycjtcIixcblx0ICAgICAgICAgICAgXCLih5RcIjogXCImaWZmO1wiLFxuXHQgICAgICAgICAgICBcIuKfuFwiOiBcIiZ4bEFycjtcIixcblx0ICAgICAgICAgICAgXCLin7pcIjogXCImeGhBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4p+5XCI6IFwiJnhyQXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKHklwiOiBcIiZyQXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKKqFwiOiBcIiZ2RGFzaDtcIixcblx0ICAgICAgICAgICAgXCLih5FcIjogXCImdUFycjtcIixcblx0ICAgICAgICAgICAgXCLih5VcIjogXCImdkFycjtcIixcblx0ICAgICAgICAgICAgXCLiiKVcIjogXCImc3BhcjtcIixcblx0ICAgICAgICAgICAgXCLihpNcIjogXCImZG93bmFycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKkk1wiOiBcIiZEb3duQXJyb3dCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oe1XCI6IFwiJmR1YXJyO1wiLFxuXHQgICAgICAgICAgICBcIsyRXCI6IFwiJkRvd25CcmV2ZTtcIixcblx0ICAgICAgICAgICAgXCLipZBcIjogXCImRG93bkxlZnRSaWdodFZlY3RvcjtcIixcblx0ICAgICAgICAgICAgXCLipZ5cIjogXCImRG93bkxlZnRUZWVWZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oa9XCI6IFwiJmxoYXJkO1wiLFxuXHQgICAgICAgICAgICBcIuKlllwiOiBcIiZEb3duTGVmdFZlY3RvckJhcjtcIixcblx0ICAgICAgICAgICAgXCLipZ9cIjogXCImRG93blJpZ2h0VGVlVmVjdG9yO1wiLFxuXHQgICAgICAgICAgICBcIuKHgVwiOiBcIiZyaWdodGhhcnBvb25kb3duO1wiLFxuXHQgICAgICAgICAgICBcIuKll1wiOiBcIiZEb3duUmlnaHRWZWN0b3JCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oqkXCI6IFwiJnRvcDtcIixcblx0ICAgICAgICAgICAgXCLihqdcIjogXCImbWFwc3RvZG93bjtcIixcblx0ICAgICAgICAgICAgXCLwnZKfXCI6IFwiJkRzY3I7XCIsXG5cdCAgICAgICAgICAgIFwixJBcIjogXCImRHN0cm9rO1wiLFxuXHQgICAgICAgICAgICBcIsWKXCI6IFwiJkVORztcIixcblx0ICAgICAgICAgICAgXCLDkFwiOiBcIiZFVEg7XCIsXG5cdCAgICAgICAgICAgIFwiw4lcIjogXCImRWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsSaXCI6IFwiJkVjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLDilwiOiBcIiZFY2lyYztcIixcblx0ICAgICAgICAgICAgXCLQrVwiOiBcIiZFY3k7XCIsXG5cdCAgICAgICAgICAgIFwixJZcIjogXCImRWRvdDtcIixcblx0ICAgICAgICAgICAgXCLwnZSIXCI6IFwiJkVmcjtcIixcblx0ICAgICAgICAgICAgXCLDiFwiOiBcIiZFZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwi4oiIXCI6IFwiJmlzaW52O1wiLFxuXHQgICAgICAgICAgICBcIsSSXCI6IFwiJkVtYWNyO1wiLFxuXHQgICAgICAgICAgICBcIuKXu1wiOiBcIiZFbXB0eVNtYWxsU3F1YXJlO1wiLFxuXHQgICAgICAgICAgICBcIuKWq1wiOiBcIiZFbXB0eVZlcnlTbWFsbFNxdWFyZTtcIixcblx0ICAgICAgICAgICAgXCLEmFwiOiBcIiZFb2dvbjtcIixcblx0ICAgICAgICAgICAgXCLwnZS8XCI6IFwiJkVvcGY7XCIsXG5cdCAgICAgICAgICAgIFwizpVcIjogXCImRXBzaWxvbjtcIixcblx0ICAgICAgICAgICAgXCLiqbVcIjogXCImRXF1YWw7XCIsXG5cdCAgICAgICAgICAgIFwi4omCXCI6IFwiJmVzaW07XCIsXG5cdCAgICAgICAgICAgIFwi4oeMXCI6IFwiJnJsaGFyO1wiLFxuXHQgICAgICAgICAgICBcIuKEsFwiOiBcIiZleHBlY3RhdGlvbjtcIixcblx0ICAgICAgICAgICAgXCLiqbNcIjogXCImRXNpbTtcIixcblx0ICAgICAgICAgICAgXCLOl1wiOiBcIiZFdGE7XCIsXG5cdCAgICAgICAgICAgIFwiw4tcIjogXCImRXVtbDtcIixcblx0ICAgICAgICAgICAgXCLiiINcIjogXCImZXhpc3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4oWHXCI6IFwiJmV4cG9uZW50aWFsZTtcIixcblx0ICAgICAgICAgICAgXCLQpFwiOiBcIiZGY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UiVwiOiBcIiZGZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4pe8XCI6IFwiJkZpbGxlZFNtYWxsU3F1YXJlO1wiLFxuXHQgICAgICAgICAgICBcIuKWqlwiOiBcIiZzcXVmO1wiLFxuXHQgICAgICAgICAgICBcIvCdlL1cIjogXCImRm9wZjtcIixcblx0ICAgICAgICAgICAgXCLiiIBcIjogXCImZm9yYWxsO1wiLFxuXHQgICAgICAgICAgICBcIuKEsVwiOiBcIiZGc2NyO1wiLFxuXHQgICAgICAgICAgICBcItCDXCI6IFwiJkdKY3k7XCIsXG5cdCAgICAgICAgICAgIFwiPlwiOiBcIiZndDtcIixcblx0ICAgICAgICAgICAgXCLOk1wiOiBcIiZHYW1tYTtcIixcblx0ICAgICAgICAgICAgXCLPnFwiOiBcIiZHYW1tYWQ7XCIsXG5cdCAgICAgICAgICAgIFwixJ5cIjogXCImR2JyZXZlO1wiLFxuXHQgICAgICAgICAgICBcIsSiXCI6IFwiJkdjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLEnFwiOiBcIiZHY2lyYztcIixcblx0ICAgICAgICAgICAgXCLQk1wiOiBcIiZHY3k7XCIsXG5cdCAgICAgICAgICAgIFwixKBcIjogXCImR2RvdDtcIixcblx0ICAgICAgICAgICAgXCLwnZSKXCI6IFwiJkdmcjtcIixcblx0ICAgICAgICAgICAgXCLii5lcIjogXCImZ2dnO1wiLFxuXHQgICAgICAgICAgICBcIvCdlL5cIjogXCImR29wZjtcIixcblx0ICAgICAgICAgICAgXCLiiaVcIjogXCImZ2VxO1wiLFxuXHQgICAgICAgICAgICBcIuKLm1wiOiBcIiZndHJlcWxlc3M7XCIsXG5cdCAgICAgICAgICAgIFwi4omnXCI6IFwiJmdlcXE7XCIsXG5cdCAgICAgICAgICAgIFwi4qqiXCI6IFwiJkdyZWF0ZXJHcmVhdGVyO1wiLFxuXHQgICAgICAgICAgICBcIuKJt1wiOiBcIiZndHJsZXNzO1wiLFxuXHQgICAgICAgICAgICBcIuKpvlwiOiBcIiZnZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4omzXCI6IFwiJmd0cnNpbTtcIixcblx0ICAgICAgICAgICAgXCLwnZKiXCI6IFwiJkdzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4omrXCI6IFwiJmdnO1wiLFxuXHQgICAgICAgICAgICBcItCqXCI6IFwiJkhBUkRjeTtcIixcblx0ICAgICAgICAgICAgXCLLh1wiOiBcIiZjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCJeXCI6IFwiJkhhdDtcIixcblx0ICAgICAgICAgICAgXCLEpFwiOiBcIiZIY2lyYztcIixcblx0ICAgICAgICAgICAgXCLihIxcIjogXCImUG9pbmNhcmVwbGFuZTtcIixcblx0ICAgICAgICAgICAgXCLihItcIjogXCImaGFtaWx0O1wiLFxuXHQgICAgICAgICAgICBcIuKEjVwiOiBcIiZxdWF0ZXJuaW9ucztcIixcblx0ICAgICAgICAgICAgXCLilIBcIjogXCImYm94aDtcIixcblx0ICAgICAgICAgICAgXCLEplwiOiBcIiZIc3Ryb2s7XCIsXG5cdCAgICAgICAgICAgIFwi4omPXCI6IFwiJmJ1bXBlcTtcIixcblx0ICAgICAgICAgICAgXCLQlVwiOiBcIiZJRWN5O1wiLFxuXHQgICAgICAgICAgICBcIsSyXCI6IFwiJklKbGlnO1wiLFxuXHQgICAgICAgICAgICBcItCBXCI6IFwiJklPY3k7XCIsXG5cdCAgICAgICAgICAgIFwiw41cIjogXCImSWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOOXCI6IFwiJkljaXJjO1wiLFxuXHQgICAgICAgICAgICBcItCYXCI6IFwiJkljeTtcIixcblx0ICAgICAgICAgICAgXCLEsFwiOiBcIiZJZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKEkVwiOiBcIiZpbWFncGFydDtcIixcblx0ICAgICAgICAgICAgXCLDjFwiOiBcIiZJZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwixKpcIjogXCImSW1hY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oWIXCI6IFwiJmlpO1wiLFxuXHQgICAgICAgICAgICBcIuKIrFwiOiBcIiZJbnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oirXCI6IFwiJmludDtcIixcblx0ICAgICAgICAgICAgXCLii4JcIjogXCImeGNhcDtcIixcblx0ICAgICAgICAgICAgXCLigaNcIjogXCImaWM7XCIsXG5cdCAgICAgICAgICAgIFwi4oGiXCI6IFwiJml0O1wiLFxuXHQgICAgICAgICAgICBcIsSuXCI6IFwiJklvZ29uO1wiLFxuXHQgICAgICAgICAgICBcIvCdlYBcIjogXCImSW9wZjtcIixcblx0ICAgICAgICAgICAgXCLOmVwiOiBcIiZJb3RhO1wiLFxuXHQgICAgICAgICAgICBcIuKEkFwiOiBcIiZpbWFnbGluZTtcIixcblx0ICAgICAgICAgICAgXCLEqFwiOiBcIiZJdGlsZGU7XCIsXG5cdCAgICAgICAgICAgIFwi0IZcIjogXCImSXVrY3k7XCIsXG5cdCAgICAgICAgICAgIFwiw49cIjogXCImSXVtbDtcIixcblx0ICAgICAgICAgICAgXCLEtFwiOiBcIiZKY2lyYztcIixcblx0ICAgICAgICAgICAgXCLQmVwiOiBcIiZKY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UjVwiOiBcIiZKZnI7XCIsXG5cdCAgICAgICAgICAgIFwi8J2VgVwiOiBcIiZKb3BmO1wiLFxuXHQgICAgICAgICAgICBcIvCdkqVcIjogXCImSnNjcjtcIixcblx0ICAgICAgICAgICAgXCLQiFwiOiBcIiZKc2VyY3k7XCIsXG5cdCAgICAgICAgICAgIFwi0IRcIjogXCImSnVrY3k7XCIsXG5cdCAgICAgICAgICAgIFwi0KVcIjogXCImS0hjeTtcIixcblx0ICAgICAgICAgICAgXCLQjFwiOiBcIiZLSmN5O1wiLFxuXHQgICAgICAgICAgICBcIs6aXCI6IFwiJkthcHBhO1wiLFxuXHQgICAgICAgICAgICBcIsS2XCI6IFwiJktjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLQmlwiOiBcIiZLY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UjlwiOiBcIiZLZnI7XCIsXG5cdCAgICAgICAgICAgIFwi8J2VglwiOiBcIiZLb3BmO1wiLFxuXHQgICAgICAgICAgICBcIvCdkqZcIjogXCImS3NjcjtcIixcblx0ICAgICAgICAgICAgXCLQiVwiOiBcIiZMSmN5O1wiLFxuXHQgICAgICAgICAgICBcIjxcIjogXCImbHQ7XCIsXG5cdCAgICAgICAgICAgIFwixLlcIjogXCImTGFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIs6bXCI6IFwiJkxhbWJkYTtcIixcblx0ICAgICAgICAgICAgXCLin6pcIjogXCImTGFuZztcIixcblx0ICAgICAgICAgICAgXCLihJJcIjogXCImbGFncmFuO1wiLFxuXHQgICAgICAgICAgICBcIuKGnlwiOiBcIiZ0d29oZWFkbGVmdGFycm93O1wiLFxuXHQgICAgICAgICAgICBcIsS9XCI6IFwiJkxjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLEu1wiOiBcIiZMY2VkaWw7XCIsXG5cdCAgICAgICAgICAgIFwi0JtcIjogXCImTGN5O1wiLFxuXHQgICAgICAgICAgICBcIuKfqFwiOiBcIiZsYW5nbGU7XCIsXG5cdCAgICAgICAgICAgIFwi4oaQXCI6IFwiJnNsYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKHpFwiOiBcIiZsYXJyYjtcIixcblx0ICAgICAgICAgICAgXCLih4ZcIjogXCImbHJhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oyIXCI6IFwiJmxjZWlsO1wiLFxuXHQgICAgICAgICAgICBcIuKfplwiOiBcIiZsb2JyaztcIixcblx0ICAgICAgICAgICAgXCLipaFcIjogXCImTGVmdERvd25UZWVWZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oeDXCI6IFwiJmRvd25oYXJwb29ubGVmdDtcIixcblx0ICAgICAgICAgICAgXCLipZlcIjogXCImTGVmdERvd25WZWN0b3JCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oyKXCI6IFwiJmxmbG9vcjtcIixcblx0ICAgICAgICAgICAgXCLihpRcIjogXCImbGVmdHJpZ2h0YXJyb3c7XCIsXG5cdCAgICAgICAgICAgIFwi4qWOXCI6IFwiJkxlZnRSaWdodFZlY3RvcjtcIixcblx0ICAgICAgICAgICAgXCLiiqNcIjogXCImZGFzaHY7XCIsXG5cdCAgICAgICAgICAgIFwi4oakXCI6IFwiJm1hcHN0b2xlZnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qWaXCI6IFwiJkxlZnRUZWVWZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oqyXCI6IFwiJnZsdHJpO1wiLFxuXHQgICAgICAgICAgICBcIuKnj1wiOiBcIiZMZWZ0VHJpYW5nbGVCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oq0XCI6IFwiJnRyaWFuZ2xlbGVmdGVxO1wiLFxuXHQgICAgICAgICAgICBcIuKlkVwiOiBcIiZMZWZ0VXBEb3duVmVjdG9yO1wiLFxuXHQgICAgICAgICAgICBcIuKloFwiOiBcIiZMZWZ0VXBUZWVWZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oa/XCI6IFwiJnVwaGFycG9vbmxlZnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qWYXCI6IFwiJkxlZnRVcFZlY3RvckJhcjtcIixcblx0ICAgICAgICAgICAgXCLihrxcIjogXCImbGhhcnU7XCIsXG5cdCAgICAgICAgICAgIFwi4qWSXCI6IFwiJkxlZnRWZWN0b3JCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4ouaXCI6IFwiJmxlc3NlcWd0cjtcIixcblx0ICAgICAgICAgICAgXCLiiaZcIjogXCImbGVxcTtcIixcblx0ICAgICAgICAgICAgXCLiibZcIjogXCImbGc7XCIsXG5cdCAgICAgICAgICAgIFwi4qqhXCI6IFwiJkxlc3NMZXNzO1wiLFxuXHQgICAgICAgICAgICBcIuKpvVwiOiBcIiZsZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4omyXCI6IFwiJmxzaW07XCIsXG5cdCAgICAgICAgICAgIFwi8J2Uj1wiOiBcIiZMZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4ouYXCI6IFwiJkxsO1wiLFxuXHQgICAgICAgICAgICBcIuKHmlwiOiBcIiZsQWFycjtcIixcblx0ICAgICAgICAgICAgXCLEv1wiOiBcIiZMbWlkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4p+1XCI6IFwiJnhsYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKft1wiOiBcIiZ4aGFycjtcIixcblx0ICAgICAgICAgICAgXCLin7ZcIjogXCImeHJhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Vg1wiOiBcIiZMb3BmO1wiLFxuXHQgICAgICAgICAgICBcIuKGmVwiOiBcIiZzd2Fycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKGmFwiOiBcIiZzZWFycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKGsFwiOiBcIiZsc2g7XCIsXG5cdCAgICAgICAgICAgIFwixYFcIjogXCImTHN0cm9rO1wiLFxuXHQgICAgICAgICAgICBcIuKJqlwiOiBcIiZsbDtcIixcblx0ICAgICAgICAgICAgXCLipIVcIjogXCImTWFwO1wiLFxuXHQgICAgICAgICAgICBcItCcXCI6IFwiJk1jeTtcIixcblx0ICAgICAgICAgICAgXCLigZ9cIjogXCImTWVkaXVtU3BhY2U7XCIsXG5cdCAgICAgICAgICAgIFwi4oSzXCI6IFwiJnBobW1hdDtcIixcblx0ICAgICAgICAgICAgXCLwnZSQXCI6IFwiJk1mcjtcIixcblx0ICAgICAgICAgICAgXCLiiJNcIjogXCImbXA7XCIsXG5cdCAgICAgICAgICAgIFwi8J2VhFwiOiBcIiZNb3BmO1wiLFxuXHQgICAgICAgICAgICBcIs6cXCI6IFwiJk11O1wiLFxuXHQgICAgICAgICAgICBcItCKXCI6IFwiJk5KY3k7XCIsXG5cdCAgICAgICAgICAgIFwixYNcIjogXCImTmFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsWHXCI6IFwiJk5jYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLFhVwiOiBcIiZOY2VkaWw7XCIsXG5cdCAgICAgICAgICAgIFwi0J1cIjogXCImTmN5O1wiLFxuXHQgICAgICAgICAgICBcIuKAi1wiOiBcIiZaZXJvV2lkdGhTcGFjZTtcIixcblx0ICAgICAgICAgICAgXCJcXG5cIjogXCImTmV3TGluZTtcIixcblx0ICAgICAgICAgICAgXCLwnZSRXCI6IFwiJk5mcjtcIixcblx0ICAgICAgICAgICAgXCLigaBcIjogXCImTm9CcmVhaztcIixcblx0ICAgICAgICAgICAgXCLCoFwiOiBcIiZuYnNwO1wiLFxuXHQgICAgICAgICAgICBcIuKElVwiOiBcIiZuYXR1cmFscztcIixcblx0ICAgICAgICAgICAgXCLiq6xcIjogXCImTm90O1wiLFxuXHQgICAgICAgICAgICBcIuKJolwiOiBcIiZuZXF1aXY7XCIsXG5cdCAgICAgICAgICAgIFwi4omtXCI6IFwiJk5vdEN1cENhcDtcIixcblx0ICAgICAgICAgICAgXCLiiKZcIjogXCImbnNwYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oiJXCI6IFwiJm5vdGludmE7XCIsXG5cdCAgICAgICAgICAgIFwi4omgXCI6IFwiJm5lO1wiLFxuXHQgICAgICAgICAgICBcIuKJgsy4XCI6IFwiJm5lc2ltO1wiLFxuXHQgICAgICAgICAgICBcIuKIhFwiOiBcIiZuZXhpc3RzO1wiLFxuXHQgICAgICAgICAgICBcIuKJr1wiOiBcIiZuZ3RyO1wiLFxuXHQgICAgICAgICAgICBcIuKJsVwiOiBcIiZuZ2VxO1wiLFxuXHQgICAgICAgICAgICBcIuKJp8y4XCI6IFwiJm5nZXFxO1wiLFxuXHQgICAgICAgICAgICBcIuKJq8y4XCI6IFwiJm5HdHY7XCIsXG5cdCAgICAgICAgICAgIFwi4om5XCI6IFwiJm50Z2w7XCIsXG5cdCAgICAgICAgICAgIFwi4qm+zLhcIjogXCImbmdlcztcIixcblx0ICAgICAgICAgICAgXCLiibVcIjogXCImbmdzaW07XCIsXG5cdCAgICAgICAgICAgIFwi4omOzLhcIjogXCImbmJ1bXA7XCIsXG5cdCAgICAgICAgICAgIFwi4omPzLhcIjogXCImbmJ1bXBlO1wiLFxuXHQgICAgICAgICAgICBcIuKLqlwiOiBcIiZudHJpYW5nbGVsZWZ0O1wiLFxuXHQgICAgICAgICAgICBcIuKnj8y4XCI6IFwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIixcblx0ICAgICAgICAgICAgXCLii6xcIjogXCImbnRyaWFuZ2xlbGVmdGVxO1wiLFxuXHQgICAgICAgICAgICBcIuKJrlwiOiBcIiZubHQ7XCIsXG5cdCAgICAgICAgICAgIFwi4omwXCI6IFwiJm5sZXE7XCIsXG5cdCAgICAgICAgICAgIFwi4om4XCI6IFwiJm50bGc7XCIsXG5cdCAgICAgICAgICAgIFwi4omqzLhcIjogXCImbkx0djtcIixcblx0ICAgICAgICAgICAgXCLiqb3MuFwiOiBcIiZubGVzO1wiLFxuXHQgICAgICAgICAgICBcIuKJtFwiOiBcIiZubHNpbTtcIixcblx0ICAgICAgICAgICAgXCLiqqLMuFwiOiBcIiZOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcjtcIixcblx0ICAgICAgICAgICAgXCLiqqHMuFwiOiBcIiZOb3ROZXN0ZWRMZXNzTGVzcztcIixcblx0ICAgICAgICAgICAgXCLiioBcIjogXCImbnByZWM7XCIsXG5cdCAgICAgICAgICAgIFwi4qqvzLhcIjogXCImbnByZWNlcTtcIixcblx0ICAgICAgICAgICAgXCLii6BcIjogXCImbnByY3VlO1wiLFxuXHQgICAgICAgICAgICBcIuKIjFwiOiBcIiZub3RuaXZhO1wiLFxuXHQgICAgICAgICAgICBcIuKLq1wiOiBcIiZudHJpYW5nbGVyaWdodDtcIixcblx0ICAgICAgICAgICAgXCLip5DMuFwiOiBcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiLFxuXHQgICAgICAgICAgICBcIuKLrVwiOiBcIiZudHJpYW5nbGVyaWdodGVxO1wiLFxuXHQgICAgICAgICAgICBcIuKKj8y4XCI6IFwiJk5vdFNxdWFyZVN1YnNldDtcIixcblx0ICAgICAgICAgICAgXCLii6JcIjogXCImbnNxc3ViZTtcIixcblx0ICAgICAgICAgICAgXCLiipDMuFwiOiBcIiZOb3RTcXVhcmVTdXBlcnNldDtcIixcblx0ICAgICAgICAgICAgXCLii6NcIjogXCImbnNxc3VwZTtcIixcblx0ICAgICAgICAgICAgXCLiioLig5JcIjogXCImdm5zdWI7XCIsXG5cdCAgICAgICAgICAgIFwi4oqIXCI6IFwiJm5zdWJzZXRlcTtcIixcblx0ICAgICAgICAgICAgXCLiioFcIjogXCImbnN1Y2M7XCIsXG5cdCAgICAgICAgICAgIFwi4qqwzLhcIjogXCImbnN1Y2NlcTtcIixcblx0ICAgICAgICAgICAgXCLii6FcIjogXCImbnNjY3VlO1wiLFxuXHQgICAgICAgICAgICBcIuKJv8y4XCI6IFwiJk5vdFN1Y2NlZWRzVGlsZGU7XCIsXG5cdCAgICAgICAgICAgIFwi4oqD4oOSXCI6IFwiJnZuc3VwO1wiLFxuXHQgICAgICAgICAgICBcIuKKiVwiOiBcIiZuc3Vwc2V0ZXE7XCIsXG5cdCAgICAgICAgICAgIFwi4omBXCI6IFwiJm5zaW07XCIsXG5cdCAgICAgICAgICAgIFwi4omEXCI6IFwiJm5zaW1lcTtcIixcblx0ICAgICAgICAgICAgXCLiiYdcIjogXCImbmNvbmc7XCIsXG5cdCAgICAgICAgICAgIFwi4omJXCI6IFwiJm5hcHByb3g7XCIsXG5cdCAgICAgICAgICAgIFwi4oikXCI6IFwiJm5zbWlkO1wiLFxuXHQgICAgICAgICAgICBcIvCdkqlcIjogXCImTnNjcjtcIixcblx0ICAgICAgICAgICAgXCLDkVwiOiBcIiZOdGlsZGU7XCIsXG5cdCAgICAgICAgICAgIFwizp1cIjogXCImTnU7XCIsXG5cdCAgICAgICAgICAgIFwixZJcIjogXCImT0VsaWc7XCIsXG5cdCAgICAgICAgICAgIFwiw5NcIjogXCImT2FjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOUXCI6IFwiJk9jaXJjO1wiLFxuXHQgICAgICAgICAgICBcItCeXCI6IFwiJk9jeTtcIixcblx0ICAgICAgICAgICAgXCLFkFwiOiBcIiZPZGJsYWM7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UklwiOiBcIiZPZnI7XCIsXG5cdCAgICAgICAgICAgIFwiw5JcIjogXCImT2dyYXZlO1wiLFxuXHQgICAgICAgICAgICBcIsWMXCI6IFwiJk9tYWNyO1wiLFxuXHQgICAgICAgICAgICBcIs6pXCI6IFwiJm9obTtcIixcblx0ICAgICAgICAgICAgXCLOn1wiOiBcIiZPbWljcm9uO1wiLFxuXHQgICAgICAgICAgICBcIvCdlYZcIjogXCImT29wZjtcIixcblx0ICAgICAgICAgICAgXCLigJxcIjogXCImbGRxdW87XCIsXG5cdCAgICAgICAgICAgIFwi4oCYXCI6IFwiJmxzcXVvO1wiLFxuXHQgICAgICAgICAgICBcIuKplFwiOiBcIiZPcjtcIixcblx0ICAgICAgICAgICAgXCLwnZKqXCI6IFwiJk9zY3I7XCIsXG5cdCAgICAgICAgICAgIFwiw5hcIjogXCImT3NsYXNoO1wiLFxuXHQgICAgICAgICAgICBcIsOVXCI6IFwiJk90aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLiqLdcIjogXCImT3RpbWVzO1wiLFxuXHQgICAgICAgICAgICBcIsOWXCI6IFwiJk91bWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oC+XCI6IFwiJm9saW5lO1wiLFxuXHQgICAgICAgICAgICBcIuKPnlwiOiBcIiZPdmVyQnJhY2U7XCIsXG5cdCAgICAgICAgICAgIFwi4o60XCI6IFwiJnRicms7XCIsXG5cdCAgICAgICAgICAgIFwi4o+cXCI6IFwiJk92ZXJQYXJlbnRoZXNpcztcIixcblx0ICAgICAgICAgICAgXCLiiIJcIjogXCImcGFydDtcIixcblx0ICAgICAgICAgICAgXCLQn1wiOiBcIiZQY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Uk1wiOiBcIiZQZnI7XCIsXG5cdCAgICAgICAgICAgIFwizqZcIjogXCImUGhpO1wiLFxuXHQgICAgICAgICAgICBcIs6gXCI6IFwiJlBpO1wiLFxuXHQgICAgICAgICAgICBcIsKxXCI6IFwiJnBtO1wiLFxuXHQgICAgICAgICAgICBcIuKEmVwiOiBcIiZwcmltZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4qq7XCI6IFwiJlByO1wiLFxuXHQgICAgICAgICAgICBcIuKJulwiOiBcIiZwcmVjO1wiLFxuXHQgICAgICAgICAgICBcIuKqr1wiOiBcIiZwcmVjZXE7XCIsXG5cdCAgICAgICAgICAgIFwi4om8XCI6IFwiJnByZWNjdXJseWVxO1wiLFxuXHQgICAgICAgICAgICBcIuKJvlwiOiBcIiZwcnNpbTtcIixcblx0ICAgICAgICAgICAgXCLigLNcIjogXCImUHJpbWU7XCIsXG5cdCAgICAgICAgICAgIFwi4oiPXCI6IFwiJnByb2Q7XCIsXG5cdCAgICAgICAgICAgIFwi4oidXCI6IFwiJnZwcm9wO1wiLFxuXHQgICAgICAgICAgICBcIvCdkqtcIjogXCImUHNjcjtcIixcblx0ICAgICAgICAgICAgXCLOqFwiOiBcIiZQc2k7XCIsXG5cdCAgICAgICAgICAgICdcIic6IFwiJnF1b3Q7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UlFwiOiBcIiZRZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oSaXCI6IFwiJnJhdGlvbmFscztcIixcblx0ICAgICAgICAgICAgXCLwnZKsXCI6IFwiJlFzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4qSQXCI6IFwiJmRyYmthcm93O1wiLFxuXHQgICAgICAgICAgICBcIsKuXCI6IFwiJnJlZztcIixcblx0ICAgICAgICAgICAgXCLFlFwiOiBcIiZSYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwi4p+rXCI6IFwiJlJhbmc7XCIsXG5cdCAgICAgICAgICAgIFwi4oagXCI6IFwiJnR3b2hlYWRyaWdodGFycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKkllwiOiBcIiZSYXJydGw7XCIsXG5cdCAgICAgICAgICAgIFwixZhcIjogXCImUmNhcm9uO1wiLFxuXHQgICAgICAgICAgICBcIsWWXCI6IFwiJlJjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLQoFwiOiBcIiZSY3k7XCIsXG5cdCAgICAgICAgICAgIFwi4oScXCI6IFwiJnJlYWxwYXJ0O1wiLFxuXHQgICAgICAgICAgICBcIuKIi1wiOiBcIiZuaXY7XCIsXG5cdCAgICAgICAgICAgIFwi4oeLXCI6IFwiJmxyaGFyO1wiLFxuXHQgICAgICAgICAgICBcIuKlr1wiOiBcIiZkdWhhcjtcIixcblx0ICAgICAgICAgICAgXCLOoVwiOiBcIiZSaG87XCIsXG5cdCAgICAgICAgICAgIFwi4p+pXCI6IFwiJnJhbmdsZTtcIixcblx0ICAgICAgICAgICAgXCLihpJcIjogXCImc3JhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oelXCI6IFwiJnJhcnJiO1wiLFxuXHQgICAgICAgICAgICBcIuKHhFwiOiBcIiZybGFycjtcIixcblx0ICAgICAgICAgICAgXCLijIlcIjogXCImcmNlaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4p+nXCI6IFwiJnJvYnJrO1wiLFxuXHQgICAgICAgICAgICBcIuKlnVwiOiBcIiZSaWdodERvd25UZWVWZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oeCXCI6IFwiJmRvd25oYXJwb29ucmlnaHQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qWVXCI6IFwiJlJpZ2h0RG93blZlY3RvckJhcjtcIixcblx0ICAgICAgICAgICAgXCLijItcIjogXCImcmZsb29yO1wiLFxuXHQgICAgICAgICAgICBcIuKKolwiOiBcIiZ2ZGFzaDtcIixcblx0ICAgICAgICAgICAgXCLihqZcIjogXCImbWFwc3RvO1wiLFxuXHQgICAgICAgICAgICBcIuKlm1wiOiBcIiZSaWdodFRlZVZlY3RvcjtcIixcblx0ICAgICAgICAgICAgXCLiirNcIjogXCImdnJ0cmk7XCIsXG5cdCAgICAgICAgICAgIFwi4qeQXCI6IFwiJlJpZ2h0VHJpYW5nbGVCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oq1XCI6IFwiJnRyaWFuZ2xlcmlnaHRlcTtcIixcblx0ICAgICAgICAgICAgXCLipY9cIjogXCImUmlnaHRVcERvd25WZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4qWcXCI6IFwiJlJpZ2h0VXBUZWVWZWN0b3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oa+XCI6IFwiJnVwaGFycG9vbnJpZ2h0O1wiLFxuXHQgICAgICAgICAgICBcIuKllFwiOiBcIiZSaWdodFVwVmVjdG9yQmFyO1wiLFxuXHQgICAgICAgICAgICBcIuKHgFwiOiBcIiZyaWdodGhhcnBvb251cDtcIixcblx0ICAgICAgICAgICAgXCLipZNcIjogXCImUmlnaHRWZWN0b3JCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oSdXCI6IFwiJnJlYWxzO1wiLFxuXHQgICAgICAgICAgICBcIuKlsFwiOiBcIiZSb3VuZEltcGxpZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4oebXCI6IFwiJnJBYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKEm1wiOiBcIiZyZWFsaW5lO1wiLFxuXHQgICAgICAgICAgICBcIuKGsVwiOiBcIiZyc2g7XCIsXG5cdCAgICAgICAgICAgIFwi4qe0XCI6IFwiJlJ1bGVEZWxheWVkO1wiLFxuXHQgICAgICAgICAgICBcItCpXCI6IFwiJlNIQ0hjeTtcIixcblx0ICAgICAgICAgICAgXCLQqFwiOiBcIiZTSGN5O1wiLFxuXHQgICAgICAgICAgICBcItCsXCI6IFwiJlNPRlRjeTtcIixcblx0ICAgICAgICAgICAgXCLFmlwiOiBcIiZTYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwi4qq8XCI6IFwiJlNjO1wiLFxuXHQgICAgICAgICAgICBcIsWgXCI6IFwiJlNjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLFnlwiOiBcIiZTY2VkaWw7XCIsXG5cdCAgICAgICAgICAgIFwixZxcIjogXCImU2NpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi0KFcIjogXCImU2N5O1wiLFxuXHQgICAgICAgICAgICBcIvCdlJZcIjogXCImU2ZyO1wiLFxuXHQgICAgICAgICAgICBcIuKGkVwiOiBcIiZ1cGFycm93O1wiLFxuXHQgICAgICAgICAgICBcIs6jXCI6IFwiJlNpZ21hO1wiLFxuXHQgICAgICAgICAgICBcIuKImFwiOiBcIiZjb21wZm47XCIsXG5cdCAgICAgICAgICAgIFwi8J2VilwiOiBcIiZTb3BmO1wiLFxuXHQgICAgICAgICAgICBcIuKImlwiOiBcIiZyYWRpYztcIixcblx0ICAgICAgICAgICAgXCLilqFcIjogXCImc3F1YXJlO1wiLFxuXHQgICAgICAgICAgICBcIuKKk1wiOiBcIiZzcWNhcDtcIixcblx0ICAgICAgICAgICAgXCLiio9cIjogXCImc3FzdWJzZXQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oqRXCI6IFwiJnNxc3Vic2V0ZXE7XCIsXG5cdCAgICAgICAgICAgIFwi4oqQXCI6IFwiJnNxc3Vwc2V0O1wiLFxuXHQgICAgICAgICAgICBcIuKKklwiOiBcIiZzcXN1cHNldGVxO1wiLFxuXHQgICAgICAgICAgICBcIuKKlFwiOiBcIiZzcWN1cDtcIixcblx0ICAgICAgICAgICAgXCLwnZKuXCI6IFwiJlNzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4ouGXCI6IFwiJnNzdGFyZjtcIixcblx0ICAgICAgICAgICAgXCLii5BcIjogXCImU3Vic2V0O1wiLFxuXHQgICAgICAgICAgICBcIuKKhlwiOiBcIiZzdWJzZXRlcTtcIixcblx0ICAgICAgICAgICAgXCLiibtcIjogXCImc3VjYztcIixcblx0ICAgICAgICAgICAgXCLiqrBcIjogXCImc3VjY2VxO1wiLFxuXHQgICAgICAgICAgICBcIuKJvVwiOiBcIiZzdWNjY3VybHllcTtcIixcblx0ICAgICAgICAgICAgXCLiib9cIjogXCImc3VjY3NpbTtcIixcblx0ICAgICAgICAgICAgXCLiiJFcIjogXCImc3VtO1wiLFxuXHQgICAgICAgICAgICBcIuKLkVwiOiBcIiZTdXBzZXQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oqDXCI6IFwiJnN1cHNldDtcIixcblx0ICAgICAgICAgICAgXCLiiodcIjogXCImc3Vwc2V0ZXE7XCIsXG5cdCAgICAgICAgICAgIFwiw55cIjogXCImVEhPUk47XCIsXG5cdCAgICAgICAgICAgIFwi4oSiXCI6IFwiJnRyYWRlO1wiLFxuXHQgICAgICAgICAgICBcItCLXCI6IFwiJlRTSGN5O1wiLFxuXHQgICAgICAgICAgICBcItCmXCI6IFwiJlRTY3k7XCIsXG5cdCAgICAgICAgICAgIFwiXFx0XCI6IFwiJlRhYjtcIixcblx0ICAgICAgICAgICAgXCLOpFwiOiBcIiZUYXU7XCIsXG5cdCAgICAgICAgICAgIFwixaRcIjogXCImVGNhcm9uO1wiLFxuXHQgICAgICAgICAgICBcIsWiXCI6IFwiJlRjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLQolwiOiBcIiZUY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Ul1wiOiBcIiZUZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oi0XCI6IFwiJnRoZXJlZm9yZTtcIixcblx0ICAgICAgICAgICAgXCLOmFwiOiBcIiZUaGV0YTtcIixcblx0ICAgICAgICAgICAgXCLigZ/igIpcIjogXCImVGhpY2tTcGFjZTtcIixcblx0ICAgICAgICAgICAgXCLigIlcIjogXCImdGhpbnNwO1wiLFxuXHQgICAgICAgICAgICBcIuKIvFwiOiBcIiZ0aGtzaW07XCIsXG5cdCAgICAgICAgICAgIFwi4omDXCI6IFwiJnNpbWVxO1wiLFxuXHQgICAgICAgICAgICBcIuKJhVwiOiBcIiZjb25nO1wiLFxuXHQgICAgICAgICAgICBcIuKJiFwiOiBcIiZ0aGthcDtcIixcblx0ICAgICAgICAgICAgXCLwnZWLXCI6IFwiJlRvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4oObXCI6IFwiJnRkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Sr1wiOiBcIiZUc2NyO1wiLFxuXHQgICAgICAgICAgICBcIsWmXCI6IFwiJlRzdHJvaztcIixcblx0ICAgICAgICAgICAgXCLDmlwiOiBcIiZVYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwi4oafXCI6IFwiJlVhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4qWJXCI6IFwiJlVhcnJvY2lyO1wiLFxuXHQgICAgICAgICAgICBcItCOXCI6IFwiJlVicmN5O1wiLFxuXHQgICAgICAgICAgICBcIsWsXCI6IFwiJlVicmV2ZTtcIixcblx0ICAgICAgICAgICAgXCLDm1wiOiBcIiZVY2lyYztcIixcblx0ICAgICAgICAgICAgXCLQo1wiOiBcIiZVY3k7XCIsXG5cdCAgICAgICAgICAgIFwixbBcIjogXCImVWRibGFjO1wiLFxuXHQgICAgICAgICAgICBcIvCdlJhcIjogXCImVWZyO1wiLFxuXHQgICAgICAgICAgICBcIsOZXCI6IFwiJlVncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLFqlwiOiBcIiZVbWFjcjtcIixcblx0ICAgICAgICAgICAgXzogXCImbG93YmFyO1wiLFxuXHQgICAgICAgICAgICBcIuKPn1wiOiBcIiZVbmRlckJyYWNlO1wiLFxuXHQgICAgICAgICAgICBcIuKOtVwiOiBcIiZiYnJrO1wiLFxuXHQgICAgICAgICAgICBcIuKPnVwiOiBcIiZVbmRlclBhcmVudGhlc2lzO1wiLFxuXHQgICAgICAgICAgICBcIuKLg1wiOiBcIiZ4Y3VwO1wiLFxuXHQgICAgICAgICAgICBcIuKKjlwiOiBcIiZ1cGx1cztcIixcblx0ICAgICAgICAgICAgXCLFslwiOiBcIiZVb2dvbjtcIixcblx0ICAgICAgICAgICAgXCLwnZWMXCI6IFwiJlVvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4qSSXCI6IFwiJlVwQXJyb3dCYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oeFXCI6IFwiJnVkYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKGlVwiOiBcIiZ2YXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKlrlwiOiBcIiZ1ZGhhcjtcIixcblx0ICAgICAgICAgICAgXCLiiqVcIjogXCImcGVycDtcIixcblx0ICAgICAgICAgICAgXCLihqVcIjogXCImbWFwc3RvdXA7XCIsXG5cdCAgICAgICAgICAgIFwi4oaWXCI6IFwiJm53YXJyb3c7XCIsXG5cdCAgICAgICAgICAgIFwi4oaXXCI6IFwiJm5lYXJyb3c7XCIsXG5cdCAgICAgICAgICAgIFwiz5JcIjogXCImdXBzaWg7XCIsXG5cdCAgICAgICAgICAgIFwizqVcIjogXCImVXBzaWxvbjtcIixcblx0ICAgICAgICAgICAgXCLFrlwiOiBcIiZVcmluZztcIixcblx0ICAgICAgICAgICAgXCLwnZKwXCI6IFwiJlVzY3I7XCIsXG5cdCAgICAgICAgICAgIFwixahcIjogXCImVXRpbGRlO1wiLFxuXHQgICAgICAgICAgICBcIsOcXCI6IFwiJlV1bWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oqrXCI6IFwiJlZEYXNoO1wiLFxuXHQgICAgICAgICAgICBcIuKrq1wiOiBcIiZWYmFyO1wiLFxuXHQgICAgICAgICAgICBcItCSXCI6IFwiJlZjeTtcIixcblx0ICAgICAgICAgICAgXCLiiqlcIjogXCImVmRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwi4qumXCI6IFwiJlZkYXNobDtcIixcblx0ICAgICAgICAgICAgXCLii4FcIjogXCImeHZlZTtcIixcblx0ICAgICAgICAgICAgXCLigJZcIjogXCImVmVydDtcIixcblx0ICAgICAgICAgICAgXCLiiKNcIjogXCImc21pZDtcIixcblx0ICAgICAgICAgICAgXCJ8XCI6IFwiJnZlcnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4p2YXCI6IFwiJlZlcnRpY2FsU2VwYXJhdG9yO1wiLFxuXHQgICAgICAgICAgICBcIuKJgFwiOiBcIiZ3cmVhdGg7XCIsXG5cdCAgICAgICAgICAgIFwi4oCKXCI6IFwiJmhhaXJzcDtcIixcblx0ICAgICAgICAgICAgXCLwnZSZXCI6IFwiJlZmcjtcIixcblx0ICAgICAgICAgICAgXCLwnZWNXCI6IFwiJlZvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi8J2SsVwiOiBcIiZWc2NyO1wiLFxuXHQgICAgICAgICAgICBcIuKKqlwiOiBcIiZWdmRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwixbRcIjogXCImV2NpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi4ouAXCI6IFwiJnh3ZWRnZTtcIixcblx0ICAgICAgICAgICAgXCLwnZSaXCI6IFwiJldmcjtcIixcblx0ICAgICAgICAgICAgXCLwnZWOXCI6IFwiJldvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi8J2SslwiOiBcIiZXc2NyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlJtcIjogXCImWGZyO1wiLFxuXHQgICAgICAgICAgICBcIs6eXCI6IFwiJlhpO1wiLFxuXHQgICAgICAgICAgICBcIvCdlY9cIjogXCImWG9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZKzXCI6IFwiJlhzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi0K9cIjogXCImWUFjeTtcIixcblx0ICAgICAgICAgICAgXCLQh1wiOiBcIiZZSWN5O1wiLFxuXHQgICAgICAgICAgICBcItCuXCI6IFwiJllVY3k7XCIsXG5cdCAgICAgICAgICAgIFwiw51cIjogXCImWWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsW2XCI6IFwiJlljaXJjO1wiLFxuXHQgICAgICAgICAgICBcItCrXCI6IFwiJlljeTtcIixcblx0ICAgICAgICAgICAgXCLwnZScXCI6IFwiJllmcjtcIixcblx0ICAgICAgICAgICAgXCLwnZWQXCI6IFwiJllvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi8J2StFwiOiBcIiZZc2NyO1wiLFxuXHQgICAgICAgICAgICBcIsW4XCI6IFwiJll1bWw7XCIsXG5cdCAgICAgICAgICAgIFwi0JZcIjogXCImWkhjeTtcIixcblx0ICAgICAgICAgICAgXCLFuVwiOiBcIiZaYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwixb1cIjogXCImWmNhcm9uO1wiLFxuXHQgICAgICAgICAgICBcItCXXCI6IFwiJlpjeTtcIixcblx0ICAgICAgICAgICAgXCLFu1wiOiBcIiZaZG90O1wiLFxuXHQgICAgICAgICAgICBcIs6WXCI6IFwiJlpldGE7XCIsXG5cdCAgICAgICAgICAgIFwi4oSoXCI6IFwiJnplZXRyZjtcIixcblx0ICAgICAgICAgICAgXCLihKRcIjogXCImaW50ZWdlcnM7XCIsXG5cdCAgICAgICAgICAgIFwi8J2StVwiOiBcIiZac2NyO1wiLFxuXHQgICAgICAgICAgICBcIsOhXCI6IFwiJmFhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLEg1wiOiBcIiZhYnJldmU7XCIsXG5cdCAgICAgICAgICAgIFwi4oi+XCI6IFwiJm1zdHBvcztcIixcblx0ICAgICAgICAgICAgXCLiiL7Ms1wiOiBcIiZhY0U7XCIsXG5cdCAgICAgICAgICAgIFwi4oi/XCI6IFwiJmFjZDtcIixcblx0ICAgICAgICAgICAgXCLDolwiOiBcIiZhY2lyYztcIixcblx0ICAgICAgICAgICAgXCLQsFwiOiBcIiZhY3k7XCIsXG5cdCAgICAgICAgICAgIFwiw6ZcIjogXCImYWVsaWc7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UnlwiOiBcIiZhZnI7XCIsXG5cdCAgICAgICAgICAgIFwiw6BcIjogXCImYWdyYXZlO1wiLFxuXHQgICAgICAgICAgICBcIuKEtVwiOiBcIiZhbGVwaDtcIixcblx0ICAgICAgICAgICAgXCLOsVwiOiBcIiZhbHBoYTtcIixcblx0ICAgICAgICAgICAgXCLEgVwiOiBcIiZhbWFjcjtcIixcblx0ICAgICAgICAgICAgXCLiqL9cIjogXCImYW1hbGc7XCIsXG5cdCAgICAgICAgICAgIFwi4oinXCI6IFwiJndlZGdlO1wiLFxuXHQgICAgICAgICAgICBcIuKplVwiOiBcIiZhbmRhbmQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qmcXCI6IFwiJmFuZGQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qmYXCI6IFwiJmFuZHNsb3BlO1wiLFxuXHQgICAgICAgICAgICBcIuKpmlwiOiBcIiZhbmR2O1wiLFxuXHQgICAgICAgICAgICBcIuKIoFwiOiBcIiZhbmdsZTtcIixcblx0ICAgICAgICAgICAgXCLipqRcIjogXCImYW5nZTtcIixcblx0ICAgICAgICAgICAgXCLiiKFcIjogXCImbWVhc3VyZWRhbmdsZTtcIixcblx0ICAgICAgICAgICAgXCLipqhcIjogXCImYW5nbXNkYWE7XCIsXG5cdCAgICAgICAgICAgIFwi4qapXCI6IFwiJmFuZ21zZGFiO1wiLFxuXHQgICAgICAgICAgICBcIuKmqlwiOiBcIiZhbmdtc2RhYztcIixcblx0ICAgICAgICAgICAgXCLipqtcIjogXCImYW5nbXNkYWQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qasXCI6IFwiJmFuZ21zZGFlO1wiLFxuXHQgICAgICAgICAgICBcIuKmrVwiOiBcIiZhbmdtc2RhZjtcIixcblx0ICAgICAgICAgICAgXCLipq5cIjogXCImYW5nbXNkYWc7XCIsXG5cdCAgICAgICAgICAgIFwi4qavXCI6IFwiJmFuZ21zZGFoO1wiLFxuXHQgICAgICAgICAgICBcIuKIn1wiOiBcIiZhbmdydDtcIixcblx0ICAgICAgICAgICAgXCLiir5cIjogXCImYW5ncnR2YjtcIixcblx0ICAgICAgICAgICAgXCLipp1cIjogXCImYW5ncnR2YmQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oiiXCI6IFwiJmFuZ3NwaDtcIixcblx0ICAgICAgICAgICAgXCLijbxcIjogXCImYW5nemFycjtcIixcblx0ICAgICAgICAgICAgXCLEhVwiOiBcIiZhb2dvbjtcIixcblx0ICAgICAgICAgICAgXCLwnZWSXCI6IFwiJmFvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4qmwXCI6IFwiJmFwRTtcIixcblx0ICAgICAgICAgICAgXCLiqa9cIjogXCImYXBhY2lyO1wiLFxuXHQgICAgICAgICAgICBcIuKJilwiOiBcIiZhcHByb3hlcTtcIixcblx0ICAgICAgICAgICAgXCLiiYtcIjogXCImYXBpZDtcIixcblx0ICAgICAgICAgICAgXCInXCI6IFwiJmFwb3M7XCIsXG5cdCAgICAgICAgICAgIFwiw6VcIjogXCImYXJpbmc7XCIsXG5cdCAgICAgICAgICAgIFwi8J2StlwiOiBcIiZhc2NyO1wiLFxuXHQgICAgICAgICAgICBcIipcIjogXCImbWlkYXN0O1wiLFxuXHQgICAgICAgICAgICBcIsOjXCI6IFwiJmF0aWxkZTtcIixcblx0ICAgICAgICAgICAgXCLDpFwiOiBcIiZhdW1sO1wiLFxuXHQgICAgICAgICAgICBcIuKokVwiOiBcIiZhd2ludDtcIixcblx0ICAgICAgICAgICAgXCLiq61cIjogXCImYk5vdDtcIixcblx0ICAgICAgICAgICAgXCLiiYxcIjogXCImYmNvbmc7XCIsXG5cdCAgICAgICAgICAgIFwiz7ZcIjogXCImYmVwc2k7XCIsXG5cdCAgICAgICAgICAgIFwi4oC1XCI6IFwiJmJwcmltZTtcIixcblx0ICAgICAgICAgICAgXCLiiL1cIjogXCImYnNpbTtcIixcblx0ICAgICAgICAgICAgXCLii41cIjogXCImYnNpbWU7XCIsXG5cdCAgICAgICAgICAgIFwi4oq9XCI6IFwiJmJhcnZlZTtcIixcblx0ICAgICAgICAgICAgXCLijIVcIjogXCImYmFyd2VkZ2U7XCIsXG5cdCAgICAgICAgICAgIFwi4o62XCI6IFwiJmJicmt0YnJrO1wiLFxuXHQgICAgICAgICAgICBcItCxXCI6IFwiJmJjeTtcIixcblx0ICAgICAgICAgICAgXCLigJ5cIjogXCImbGRxdW9yO1wiLFxuXHQgICAgICAgICAgICBcIuKmsFwiOiBcIiZiZW1wdHl2O1wiLFxuXHQgICAgICAgICAgICBcIs6yXCI6IFwiJmJldGE7XCIsXG5cdCAgICAgICAgICAgIFwi4oS2XCI6IFwiJmJldGg7XCIsXG5cdCAgICAgICAgICAgIFwi4omsXCI6IFwiJnR3aXh0O1wiLFxuXHQgICAgICAgICAgICBcIvCdlJ9cIjogXCImYmZyO1wiLFxuXHQgICAgICAgICAgICBcIuKXr1wiOiBcIiZ4Y2lyYztcIixcblx0ICAgICAgICAgICAgXCLiqIBcIjogXCImeG9kb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4qiBXCI6IFwiJnhvcGx1cztcIixcblx0ICAgICAgICAgICAgXCLiqIJcIjogXCImeG90aW1lO1wiLFxuXHQgICAgICAgICAgICBcIuKohlwiOiBcIiZ4c3FjdXA7XCIsXG5cdCAgICAgICAgICAgIFwi4piFXCI6IFwiJnN0YXJmO1wiLFxuXHQgICAgICAgICAgICBcIuKWvVwiOiBcIiZ4ZHRyaTtcIixcblx0ICAgICAgICAgICAgXCLilrNcIjogXCImeHV0cmk7XCIsXG5cdCAgICAgICAgICAgIFwi4qiEXCI6IFwiJnh1cGx1cztcIixcblx0ICAgICAgICAgICAgXCLipI1cIjogXCImcmJhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4qerXCI6IFwiJmxvemY7XCIsXG5cdCAgICAgICAgICAgIFwi4pa0XCI6IFwiJnV0cmlmO1wiLFxuXHQgICAgICAgICAgICBcIuKWvlwiOiBcIiZkdHJpZjtcIixcblx0ICAgICAgICAgICAgXCLil4JcIjogXCImbHRyaWY7XCIsXG5cdCAgICAgICAgICAgIFwi4pa4XCI6IFwiJnJ0cmlmO1wiLFxuXHQgICAgICAgICAgICBcIuKQo1wiOiBcIiZibGFuaztcIixcblx0ICAgICAgICAgICAgXCLilpJcIjogXCImYmxrMTI7XCIsXG5cdCAgICAgICAgICAgIFwi4paRXCI6IFwiJmJsazE0O1wiLFxuXHQgICAgICAgICAgICBcIuKWk1wiOiBcIiZibGszNDtcIixcblx0ICAgICAgICAgICAgXCLilohcIjogXCImYmxvY2s7XCIsXG5cdCAgICAgICAgICAgIFwiPeKDpVwiOiBcIiZibmU7XCIsXG5cdCAgICAgICAgICAgIFwi4omh4oOlXCI6IFwiJmJuZXF1aXY7XCIsXG5cdCAgICAgICAgICAgIFwi4oyQXCI6IFwiJmJub3Q7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Vk1wiOiBcIiZib3BmO1wiLFxuXHQgICAgICAgICAgICBcIuKLiFwiOiBcIiZib3d0aWU7XCIsXG5cdCAgICAgICAgICAgIFwi4pWXXCI6IFwiJmJveERMO1wiLFxuXHQgICAgICAgICAgICBcIuKVlFwiOiBcIiZib3hEUjtcIixcblx0ICAgICAgICAgICAgXCLilZZcIjogXCImYm94RGw7XCIsXG5cdCAgICAgICAgICAgIFwi4pWTXCI6IFwiJmJveERyO1wiLFxuXHQgICAgICAgICAgICBcIuKVkFwiOiBcIiZib3hIO1wiLFxuXHQgICAgICAgICAgICBcIuKVplwiOiBcIiZib3hIRDtcIixcblx0ICAgICAgICAgICAgXCLilalcIjogXCImYm94SFU7XCIsXG5cdCAgICAgICAgICAgIFwi4pWkXCI6IFwiJmJveEhkO1wiLFxuXHQgICAgICAgICAgICBcIuKVp1wiOiBcIiZib3hIdTtcIixcblx0ICAgICAgICAgICAgXCLilZ1cIjogXCImYm94VUw7XCIsXG5cdCAgICAgICAgICAgIFwi4pWaXCI6IFwiJmJveFVSO1wiLFxuXHQgICAgICAgICAgICBcIuKVnFwiOiBcIiZib3hVbDtcIixcblx0ICAgICAgICAgICAgXCLilZlcIjogXCImYm94VXI7XCIsXG5cdCAgICAgICAgICAgIFwi4pWRXCI6IFwiJmJveFY7XCIsXG5cdCAgICAgICAgICAgIFwi4pWsXCI6IFwiJmJveFZIO1wiLFxuXHQgICAgICAgICAgICBcIuKVo1wiOiBcIiZib3hWTDtcIixcblx0ICAgICAgICAgICAgXCLilaBcIjogXCImYm94VlI7XCIsXG5cdCAgICAgICAgICAgIFwi4pWrXCI6IFwiJmJveFZoO1wiLFxuXHQgICAgICAgICAgICBcIuKVolwiOiBcIiZib3hWbDtcIixcblx0ICAgICAgICAgICAgXCLilZ9cIjogXCImYm94VnI7XCIsXG5cdCAgICAgICAgICAgIFwi4qeJXCI6IFwiJmJveGJveDtcIixcblx0ICAgICAgICAgICAgXCLilZVcIjogXCImYm94ZEw7XCIsXG5cdCAgICAgICAgICAgIFwi4pWSXCI6IFwiJmJveGRSO1wiLFxuXHQgICAgICAgICAgICBcIuKUkFwiOiBcIiZib3hkbDtcIixcblx0ICAgICAgICAgICAgXCLilIxcIjogXCImYm94ZHI7XCIsXG5cdCAgICAgICAgICAgIFwi4pWlXCI6IFwiJmJveGhEO1wiLFxuXHQgICAgICAgICAgICBcIuKVqFwiOiBcIiZib3hoVTtcIixcblx0ICAgICAgICAgICAgXCLilKxcIjogXCImYm94aGQ7XCIsXG5cdCAgICAgICAgICAgIFwi4pS0XCI6IFwiJmJveGh1O1wiLFxuXHQgICAgICAgICAgICBcIuKKn1wiOiBcIiZtaW51c2I7XCIsXG5cdCAgICAgICAgICAgIFwi4oqeXCI6IFwiJnBsdXNiO1wiLFxuXHQgICAgICAgICAgICBcIuKKoFwiOiBcIiZ0aW1lc2I7XCIsXG5cdCAgICAgICAgICAgIFwi4pWbXCI6IFwiJmJveHVMO1wiLFxuXHQgICAgICAgICAgICBcIuKVmFwiOiBcIiZib3h1UjtcIixcblx0ICAgICAgICAgICAgXCLilJhcIjogXCImYm94dWw7XCIsXG5cdCAgICAgICAgICAgIFwi4pSUXCI6IFwiJmJveHVyO1wiLFxuXHQgICAgICAgICAgICBcIuKUglwiOiBcIiZib3h2O1wiLFxuXHQgICAgICAgICAgICBcIuKVqlwiOiBcIiZib3h2SDtcIixcblx0ICAgICAgICAgICAgXCLilaFcIjogXCImYm94dkw7XCIsXG5cdCAgICAgICAgICAgIFwi4pWeXCI6IFwiJmJveHZSO1wiLFxuXHQgICAgICAgICAgICBcIuKUvFwiOiBcIiZib3h2aDtcIixcblx0ICAgICAgICAgICAgXCLilKRcIjogXCImYm94dmw7XCIsXG5cdCAgICAgICAgICAgIFwi4pScXCI6IFwiJmJveHZyO1wiLFxuXHQgICAgICAgICAgICBcIsKmXCI6IFwiJmJydmJhcjtcIixcblx0ICAgICAgICAgICAgXCLwnZK3XCI6IFwiJmJzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oGPXCI6IFwiJmJzZW1pO1wiLFxuXHQgICAgICAgICAgICBcIlxcXFxcIjogXCImYnNvbDtcIixcblx0ICAgICAgICAgICAgXCLip4VcIjogXCImYnNvbGI7XCIsXG5cdCAgICAgICAgICAgIFwi4p+IXCI6IFwiJmJzb2xoc3ViO1wiLFxuXHQgICAgICAgICAgICBcIuKAolwiOiBcIiZidWxsZXQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qquXCI6IFwiJmJ1bXBFO1wiLFxuXHQgICAgICAgICAgICBcIsSHXCI6IFwiJmNhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLiiKlcIjogXCImY2FwO1wiLFxuXHQgICAgICAgICAgICBcIuKphFwiOiBcIiZjYXBhbmQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qmJXCI6IFwiJmNhcGJyY3VwO1wiLFxuXHQgICAgICAgICAgICBcIuKpi1wiOiBcIiZjYXBjYXA7XCIsXG5cdCAgICAgICAgICAgIFwi4qmHXCI6IFwiJmNhcGN1cDtcIixcblx0ICAgICAgICAgICAgXCLiqYBcIjogXCImY2FwZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKIqe+4gFwiOiBcIiZjYXBzO1wiLFxuXHQgICAgICAgICAgICBcIuKBgVwiOiBcIiZjYXJldDtcIixcblx0ICAgICAgICAgICAgXCLiqY1cIjogXCImY2NhcHM7XCIsXG5cdCAgICAgICAgICAgIFwixI1cIjogXCImY2Nhcm9uO1wiLFxuXHQgICAgICAgICAgICBcIsOnXCI6IFwiJmNjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLEiVwiOiBcIiZjY2lyYztcIixcblx0ICAgICAgICAgICAgXCLiqYxcIjogXCImY2N1cHM7XCIsXG5cdCAgICAgICAgICAgIFwi4qmQXCI6IFwiJmNjdXBzc207XCIsXG5cdCAgICAgICAgICAgIFwixItcIjogXCImY2RvdDtcIixcblx0ICAgICAgICAgICAgXCLiprJcIjogXCImY2VtcHR5djtcIixcblx0ICAgICAgICAgICAgXCLColwiOiBcIiZjZW50O1wiLFxuXHQgICAgICAgICAgICBcIvCdlKBcIjogXCImY2ZyO1wiLFxuXHQgICAgICAgICAgICBcItGHXCI6IFwiJmNoY3k7XCIsXG5cdCAgICAgICAgICAgIFwi4pyTXCI6IFwiJmNoZWNrbWFyaztcIixcblx0ICAgICAgICAgICAgXCLPh1wiOiBcIiZjaGk7XCIsXG5cdCAgICAgICAgICAgIFwi4peLXCI6IFwiJmNpcjtcIixcblx0ICAgICAgICAgICAgXCLip4NcIjogXCImY2lyRTtcIixcblx0ICAgICAgICAgICAgXCLLhlwiOiBcIiZjaXJjO1wiLFxuXHQgICAgICAgICAgICBcIuKJl1wiOiBcIiZjaXJlO1wiLFxuXHQgICAgICAgICAgICBcIuKGulwiOiBcIiZvbGFycjtcIixcblx0ICAgICAgICAgICAgXCLihrtcIjogXCImb3JhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4pOIXCI6IFwiJm9TO1wiLFxuXHQgICAgICAgICAgICBcIuKKm1wiOiBcIiZvYXN0O1wiLFxuXHQgICAgICAgICAgICBcIuKKmlwiOiBcIiZvY2lyO1wiLFxuXHQgICAgICAgICAgICBcIuKKnVwiOiBcIiZvZGFzaDtcIixcblx0ICAgICAgICAgICAgXCLiqJBcIjogXCImY2lyZm5pbnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4quvXCI6IFwiJmNpcm1pZDtcIixcblx0ICAgICAgICAgICAgXCLip4JcIjogXCImY2lyc2NpcjtcIixcblx0ICAgICAgICAgICAgXCLimaNcIjogXCImY2x1YnN1aXQ7XCIsXG5cdCAgICAgICAgICAgIFwiOlwiOiBcIiZjb2xvbjtcIixcblx0ICAgICAgICAgICAgXCIsXCI6IFwiJmNvbW1hO1wiLFxuXHQgICAgICAgICAgICBcIkBcIjogXCImY29tbWF0O1wiLFxuXHQgICAgICAgICAgICBcIuKIgVwiOiBcIiZjb21wbGVtZW50O1wiLFxuXHQgICAgICAgICAgICBcIuKprVwiOiBcIiZjb25nZG90O1wiLFxuXHQgICAgICAgICAgICBcIvCdlZRcIjogXCImY29wZjtcIixcblx0ICAgICAgICAgICAgXCLihJdcIjogXCImY29weXNyO1wiLFxuXHQgICAgICAgICAgICBcIuKGtVwiOiBcIiZjcmFycjtcIixcblx0ICAgICAgICAgICAgXCLinJdcIjogXCImY3Jvc3M7XCIsXG5cdCAgICAgICAgICAgIFwi8J2SuFwiOiBcIiZjc2NyO1wiLFxuXHQgICAgICAgICAgICBcIuKrj1wiOiBcIiZjc3ViO1wiLFxuXHQgICAgICAgICAgICBcIuKrkVwiOiBcIiZjc3ViZTtcIixcblx0ICAgICAgICAgICAgXCLiq5BcIjogXCImY3N1cDtcIixcblx0ICAgICAgICAgICAgXCLiq5JcIjogXCImY3N1cGU7XCIsXG5cdCAgICAgICAgICAgIFwi4ouvXCI6IFwiJmN0ZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKkuFwiOiBcIiZjdWRhcnJsO1wiLFxuXHQgICAgICAgICAgICBcIuKktVwiOiBcIiZjdWRhcnJyO1wiLFxuXHQgICAgICAgICAgICBcIuKLnlwiOiBcIiZjdXJseWVxcHJlYztcIixcblx0ICAgICAgICAgICAgXCLii59cIjogXCImY3VybHllcXN1Y2M7XCIsXG5cdCAgICAgICAgICAgIFwi4oa2XCI6IFwiJmN1cnZlYXJyb3dsZWZ0O1wiLFxuXHQgICAgICAgICAgICBcIuKkvVwiOiBcIiZjdWxhcnJwO1wiLFxuXHQgICAgICAgICAgICBcIuKIqlwiOiBcIiZjdXA7XCIsXG5cdCAgICAgICAgICAgIFwi4qmIXCI6IFwiJmN1cGJyY2FwO1wiLFxuXHQgICAgICAgICAgICBcIuKphlwiOiBcIiZjdXBjYXA7XCIsXG5cdCAgICAgICAgICAgIFwi4qmKXCI6IFwiJmN1cGN1cDtcIixcblx0ICAgICAgICAgICAgXCLiio1cIjogXCImY3VwZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKphVwiOiBcIiZjdXBvcjtcIixcblx0ICAgICAgICAgICAgXCLiiKrvuIBcIjogXCImY3VwcztcIixcblx0ICAgICAgICAgICAgXCLihrdcIjogXCImY3VydmVhcnJvd3JpZ2h0O1wiLFxuXHQgICAgICAgICAgICBcIuKkvFwiOiBcIiZjdXJhcnJtO1wiLFxuXHQgICAgICAgICAgICBcIuKLjlwiOiBcIiZjdXZlZTtcIixcblx0ICAgICAgICAgICAgXCLii49cIjogXCImY3V3ZWQ7XCIsXG5cdCAgICAgICAgICAgIFwiwqRcIjogXCImY3VycmVuO1wiLFxuXHQgICAgICAgICAgICBcIuKIsVwiOiBcIiZjd2ludDtcIixcblx0ICAgICAgICAgICAgXCLijK1cIjogXCImY3lsY3R5O1wiLFxuXHQgICAgICAgICAgICBcIuKlpVwiOiBcIiZkSGFyO1wiLFxuXHQgICAgICAgICAgICBcIuKAoFwiOiBcIiZkYWdnZXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oS4XCI6IFwiJmRhbGV0aDtcIixcblx0ICAgICAgICAgICAgXCLigJBcIjogXCImaHlwaGVuO1wiLFxuXHQgICAgICAgICAgICBcIuKkj1wiOiBcIiZyQmFycjtcIixcblx0ICAgICAgICAgICAgXCLEj1wiOiBcIiZkY2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwi0LRcIjogXCImZGN5O1wiLFxuXHQgICAgICAgICAgICBcIuKHilwiOiBcIiZkb3duZG93bmFycm93cztcIixcblx0ICAgICAgICAgICAgXCLiqbdcIjogXCImZUREb3Q7XCIsXG5cdCAgICAgICAgICAgIFwiwrBcIjogXCImZGVnO1wiLFxuXHQgICAgICAgICAgICBcIs60XCI6IFwiJmRlbHRhO1wiLFxuXHQgICAgICAgICAgICBcIuKmsVwiOiBcIiZkZW1wdHl2O1wiLFxuXHQgICAgICAgICAgICBcIuKlv1wiOiBcIiZkZmlzaHQ7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UoVwiOiBcIiZkZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4pmmXCI6IFwiJmRpYW1zO1wiLFxuXHQgICAgICAgICAgICBcIs+dXCI6IFwiJmdhbW1hZDtcIixcblx0ICAgICAgICAgICAgXCLii7JcIjogXCImZGlzaW47XCIsXG5cdCAgICAgICAgICAgIFwiw7dcIjogXCImZGl2aWRlO1wiLFxuXHQgICAgICAgICAgICBcIuKLh1wiOiBcIiZkaXZvbng7XCIsXG5cdCAgICAgICAgICAgIFwi0ZJcIjogXCImZGpjeTtcIixcblx0ICAgICAgICAgICAgXCLijJ5cIjogXCImbGxjb3JuZXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oyNXCI6IFwiJmRsY3JvcDtcIixcblx0ICAgICAgICAgICAgJDogXCImZG9sbGFyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlZVcIjogXCImZG9wZjtcIixcblx0ICAgICAgICAgICAgXCLiiZFcIjogXCImZURvdDtcIixcblx0ICAgICAgICAgICAgXCLiiLhcIjogXCImbWludXNkO1wiLFxuXHQgICAgICAgICAgICBcIuKIlFwiOiBcIiZwbHVzZG87XCIsXG5cdCAgICAgICAgICAgIFwi4oqhXCI6IFwiJnNkb3RiO1wiLFxuXHQgICAgICAgICAgICBcIuKMn1wiOiBcIiZscmNvcm5lcjtcIixcblx0ICAgICAgICAgICAgXCLijIxcIjogXCImZHJjcm9wO1wiLFxuXHQgICAgICAgICAgICBcIvCdkrlcIjogXCImZHNjcjtcIixcblx0ICAgICAgICAgICAgXCLRlVwiOiBcIiZkc2N5O1wiLFxuXHQgICAgICAgICAgICBcIuKntlwiOiBcIiZkc29sO1wiLFxuXHQgICAgICAgICAgICBcIsSRXCI6IFwiJmRzdHJvaztcIixcblx0ICAgICAgICAgICAgXCLii7FcIjogXCImZHRkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4pa/XCI6IFwiJnRyaWFuZ2xlZG93bjtcIixcblx0ICAgICAgICAgICAgXCLipqZcIjogXCImZHdhbmdsZTtcIixcblx0ICAgICAgICAgICAgXCLRn1wiOiBcIiZkemN5O1wiLFxuXHQgICAgICAgICAgICBcIuKfv1wiOiBcIiZkemlncmFycjtcIixcblx0ICAgICAgICAgICAgXCLDqVwiOiBcIiZlYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwi4qmuXCI6IFwiJmVhc3RlcjtcIixcblx0ICAgICAgICAgICAgXCLEm1wiOiBcIiZlY2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwi4omWXCI6IFwiJmVxY2lyYztcIixcblx0ICAgICAgICAgICAgXCLDqlwiOiBcIiZlY2lyYztcIixcblx0ICAgICAgICAgICAgXCLiiZVcIjogXCImZXFjb2xvbjtcIixcblx0ICAgICAgICAgICAgXCLRjVwiOiBcIiZlY3k7XCIsXG5cdCAgICAgICAgICAgIFwixJdcIjogXCImZWRvdDtcIixcblx0ICAgICAgICAgICAgXCLiiZJcIjogXCImZmFsbGluZ2RvdHNlcTtcIixcblx0ICAgICAgICAgICAgXCLwnZSiXCI6IFwiJmVmcjtcIixcblx0ICAgICAgICAgICAgXCLiqppcIjogXCImZWc7XCIsXG5cdCAgICAgICAgICAgIFwiw6hcIjogXCImZWdyYXZlO1wiLFxuXHQgICAgICAgICAgICBcIuKqllwiOiBcIiZlcXNsYW50Z3RyO1wiLFxuXHQgICAgICAgICAgICBcIuKqmFwiOiBcIiZlZ3Nkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4qqZXCI6IFwiJmVsO1wiLFxuXHQgICAgICAgICAgICBcIuKPp1wiOiBcIiZlbGludGVycztcIixcblx0ICAgICAgICAgICAgXCLihJNcIjogXCImZWxsO1wiLFxuXHQgICAgICAgICAgICBcIuKqlVwiOiBcIiZlcXNsYW50bGVzcztcIixcblx0ICAgICAgICAgICAgXCLiqpdcIjogXCImZWxzZG90O1wiLFxuXHQgICAgICAgICAgICBcIsSTXCI6IFwiJmVtYWNyO1wiLFxuXHQgICAgICAgICAgICBcIuKIhVwiOiBcIiZ2YXJub3RoaW5nO1wiLFxuXHQgICAgICAgICAgICBcIuKAhFwiOiBcIiZlbXNwMTM7XCIsXG5cdCAgICAgICAgICAgIFwi4oCFXCI6IFwiJmVtc3AxNDtcIixcblx0ICAgICAgICAgICAgXCLigINcIjogXCImZW1zcDtcIixcblx0ICAgICAgICAgICAgXCLFi1wiOiBcIiZlbmc7XCIsXG5cdCAgICAgICAgICAgIFwi4oCCXCI6IFwiJmVuc3A7XCIsXG5cdCAgICAgICAgICAgIFwixJlcIjogXCImZW9nb247XCIsXG5cdCAgICAgICAgICAgIFwi8J2VllwiOiBcIiZlb3BmO1wiLFxuXHQgICAgICAgICAgICBcIuKLlVwiOiBcIiZlcGFyO1wiLFxuXHQgICAgICAgICAgICBcIuKno1wiOiBcIiZlcGFyc2w7XCIsXG5cdCAgICAgICAgICAgIFwi4qmxXCI6IFwiJmVwbHVzO1wiLFxuXHQgICAgICAgICAgICBcIs61XCI6IFwiJmVwc2lsb247XCIsXG5cdCAgICAgICAgICAgIFwiz7VcIjogXCImdmFyZXBzaWxvbjtcIixcblx0ICAgICAgICAgICAgXCI9XCI6IFwiJmVxdWFscztcIixcblx0ICAgICAgICAgICAgXCLiiZ9cIjogXCImcXVlc3RlcTtcIixcblx0ICAgICAgICAgICAgXCLiqbhcIjogXCImZXF1aXZERDtcIixcblx0ICAgICAgICAgICAgXCLip6VcIjogXCImZXF2cGFyc2w7XCIsXG5cdCAgICAgICAgICAgIFwi4omTXCI6IFwiJnJpc2luZ2RvdHNlcTtcIixcblx0ICAgICAgICAgICAgXCLipbFcIjogXCImZXJhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oSvXCI6IFwiJmVzY3I7XCIsXG5cdCAgICAgICAgICAgIFwizrdcIjogXCImZXRhO1wiLFxuXHQgICAgICAgICAgICBcIsOwXCI6IFwiJmV0aDtcIixcblx0ICAgICAgICAgICAgXCLDq1wiOiBcIiZldW1sO1wiLFxuXHQgICAgICAgICAgICBcIuKCrFwiOiBcIiZldXJvO1wiLFxuXHQgICAgICAgICAgICBcIiFcIjogXCImZXhjbDtcIixcblx0ICAgICAgICAgICAgXCLRhFwiOiBcIiZmY3k7XCIsXG5cdCAgICAgICAgICAgIFwi4pmAXCI6IFwiJmZlbWFsZTtcIixcblx0ICAgICAgICAgICAgXCLvrINcIjogXCImZmZpbGlnO1wiLFxuXHQgICAgICAgICAgICBcIu+sgFwiOiBcIiZmZmxpZztcIixcblx0ICAgICAgICAgICAgXCLvrIRcIjogXCImZmZsbGlnO1wiLFxuXHQgICAgICAgICAgICBcIvCdlKNcIjogXCImZmZyO1wiLFxuXHQgICAgICAgICAgICBcIu+sgVwiOiBcIiZmaWxpZztcIixcblx0ICAgICAgICAgICAgZmo6IFwiJmZqbGlnO1wiLFxuXHQgICAgICAgICAgICBcIuKZrVwiOiBcIiZmbGF0O1wiLFxuXHQgICAgICAgICAgICBcIu+sglwiOiBcIiZmbGxpZztcIixcblx0ICAgICAgICAgICAgXCLilrFcIjogXCImZmx0bnM7XCIsXG5cdCAgICAgICAgICAgIFwixpJcIjogXCImZm5vZjtcIixcblx0ICAgICAgICAgICAgXCLwnZWXXCI6IFwiJmZvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4ouUXCI6IFwiJnBpdGNoZm9yaztcIixcblx0ICAgICAgICAgICAgXCLiq5lcIjogXCImZm9ya3Y7XCIsXG5cdCAgICAgICAgICAgIFwi4qiNXCI6IFwiJmZwYXJ0aW50O1wiLFxuXHQgICAgICAgICAgICBcIsK9XCI6IFwiJmhhbGY7XCIsXG5cdCAgICAgICAgICAgIFwi4oWTXCI6IFwiJmZyYWMxMztcIixcblx0ICAgICAgICAgICAgXCLCvFwiOiBcIiZmcmFjMTQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oWVXCI6IFwiJmZyYWMxNTtcIixcblx0ICAgICAgICAgICAgXCLihZlcIjogXCImZnJhYzE2O1wiLFxuXHQgICAgICAgICAgICBcIuKFm1wiOiBcIiZmcmFjMTg7XCIsXG5cdCAgICAgICAgICAgIFwi4oWUXCI6IFwiJmZyYWMyMztcIixcblx0ICAgICAgICAgICAgXCLihZZcIjogXCImZnJhYzI1O1wiLFxuXHQgICAgICAgICAgICBcIsK+XCI6IFwiJmZyYWMzNDtcIixcblx0ICAgICAgICAgICAgXCLihZdcIjogXCImZnJhYzM1O1wiLFxuXHQgICAgICAgICAgICBcIuKFnFwiOiBcIiZmcmFjMzg7XCIsXG5cdCAgICAgICAgICAgIFwi4oWYXCI6IFwiJmZyYWM0NTtcIixcblx0ICAgICAgICAgICAgXCLihZpcIjogXCImZnJhYzU2O1wiLFxuXHQgICAgICAgICAgICBcIuKFnVwiOiBcIiZmcmFjNTg7XCIsXG5cdCAgICAgICAgICAgIFwi4oWeXCI6IFwiJmZyYWM3ODtcIixcblx0ICAgICAgICAgICAgXCLigYRcIjogXCImZnJhc2w7XCIsXG5cdCAgICAgICAgICAgIFwi4oyiXCI6IFwiJnNmcm93bjtcIixcblx0ICAgICAgICAgICAgXCLwnZK7XCI6IFwiJmZzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4qqMXCI6IFwiJmd0cmVxcWxlc3M7XCIsXG5cdCAgICAgICAgICAgIFwix7VcIjogXCImZ2FjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIs6zXCI6IFwiJmdhbW1hO1wiLFxuXHQgICAgICAgICAgICBcIuKqhlwiOiBcIiZndHJhcHByb3g7XCIsXG5cdCAgICAgICAgICAgIFwixJ9cIjogXCImZ2JyZXZlO1wiLFxuXHQgICAgICAgICAgICBcIsSdXCI6IFwiJmdjaXJjO1wiLFxuXHQgICAgICAgICAgICBcItCzXCI6IFwiJmdjeTtcIixcblx0ICAgICAgICAgICAgXCLEoVwiOiBcIiZnZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKqqVwiOiBcIiZnZXNjYztcIixcblx0ICAgICAgICAgICAgXCLiqoBcIjogXCImZ2VzZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKqglwiOiBcIiZnZXNkb3RvO1wiLFxuXHQgICAgICAgICAgICBcIuKqhFwiOiBcIiZnZXNkb3RvbDtcIixcblx0ICAgICAgICAgICAgXCLii5vvuIBcIjogXCImZ2VzbDtcIixcblx0ICAgICAgICAgICAgXCLiqpRcIjogXCImZ2VzbGVzO1wiLFxuXHQgICAgICAgICAgICBcIvCdlKRcIjogXCImZ2ZyO1wiLFxuXHQgICAgICAgICAgICBcIuKEt1wiOiBcIiZnaW1lbDtcIixcblx0ICAgICAgICAgICAgXCLRk1wiOiBcIiZnamN5O1wiLFxuXHQgICAgICAgICAgICBcIuKqklwiOiBcIiZnbEU7XCIsXG5cdCAgICAgICAgICAgIFwi4qqlXCI6IFwiJmdsYTtcIixcblx0ICAgICAgICAgICAgXCLiqqRcIjogXCImZ2xqO1wiLFxuXHQgICAgICAgICAgICBcIuKJqVwiOiBcIiZnbmVxcTtcIixcblx0ICAgICAgICAgICAgXCLiqopcIjogXCImZ25hcHByb3g7XCIsXG5cdCAgICAgICAgICAgIFwi4qqIXCI6IFwiJmduZXE7XCIsXG5cdCAgICAgICAgICAgIFwi4ounXCI6IFwiJmduc2ltO1wiLFxuXHQgICAgICAgICAgICBcIvCdlZhcIjogXCImZ29wZjtcIixcblx0ICAgICAgICAgICAgXCLihIpcIjogXCImZ3NjcjtcIixcblx0ICAgICAgICAgICAgXCLiqo5cIjogXCImZ3NpbWU7XCIsXG5cdCAgICAgICAgICAgIFwi4qqQXCI6IFwiJmdzaW1sO1wiLFxuXHQgICAgICAgICAgICBcIuKqp1wiOiBcIiZndGNjO1wiLFxuXHQgICAgICAgICAgICBcIuKpulwiOiBcIiZndGNpcjtcIixcblx0ICAgICAgICAgICAgXCLii5dcIjogXCImZ3RyZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKmlVwiOiBcIiZndGxQYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4qm8XCI6IFwiJmd0cXVlc3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4qW4XCI6IFwiJmd0cmFycjtcIixcblx0ICAgICAgICAgICAgXCLiianvuIBcIjogXCImZ3ZuRTtcIixcblx0ICAgICAgICAgICAgXCLRilwiOiBcIiZoYXJkY3k7XCIsXG5cdCAgICAgICAgICAgIFwi4qWIXCI6IFwiJmhhcnJjaXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oatXCI6IFwiJmxlZnRyaWdodHNxdWlnYXJyb3c7XCIsXG5cdCAgICAgICAgICAgIFwi4oSPXCI6IFwiJnBsYW5rdjtcIixcblx0ICAgICAgICAgICAgXCLEpVwiOiBcIiZoY2lyYztcIixcblx0ICAgICAgICAgICAgXCLimaVcIjogXCImaGVhcnRzdWl0O1wiLFxuXHQgICAgICAgICAgICBcIuKAplwiOiBcIiZtbGRyO1wiLFxuXHQgICAgICAgICAgICBcIuKKuVwiOiBcIiZoZXJjb247XCIsXG5cdCAgICAgICAgICAgIFwi8J2UpVwiOiBcIiZoZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4qSlXCI6IFwiJnNlYXJoaztcIixcblx0ICAgICAgICAgICAgXCLipKZcIjogXCImc3dhcmhrO1wiLFxuXHQgICAgICAgICAgICBcIuKHv1wiOiBcIiZob2FycjtcIixcblx0ICAgICAgICAgICAgXCLiiLtcIjogXCImaG9tdGh0O1wiLFxuXHQgICAgICAgICAgICBcIuKGqVwiOiBcIiZsYXJyaGs7XCIsXG5cdCAgICAgICAgICAgIFwi4oaqXCI6IFwiJnJhcnJoaztcIixcblx0ICAgICAgICAgICAgXCLwnZWZXCI6IFwiJmhvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4oCVXCI6IFwiJmhvcmJhcjtcIixcblx0ICAgICAgICAgICAgXCLwnZK9XCI6IFwiJmhzY3I7XCIsXG5cdCAgICAgICAgICAgIFwixKdcIjogXCImaHN0cm9rO1wiLFxuXHQgICAgICAgICAgICBcIuKBg1wiOiBcIiZoeWJ1bGw7XCIsXG5cdCAgICAgICAgICAgIFwiw61cIjogXCImaWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsOuXCI6IFwiJmljaXJjO1wiLFxuXHQgICAgICAgICAgICBcItC4XCI6IFwiJmljeTtcIixcblx0ICAgICAgICAgICAgXCLQtVwiOiBcIiZpZWN5O1wiLFxuXHQgICAgICAgICAgICBcIsKhXCI6IFwiJmlleGNsO1wiLFxuXHQgICAgICAgICAgICBcIvCdlKZcIjogXCImaWZyO1wiLFxuXHQgICAgICAgICAgICBcIsOsXCI6IFwiJmlncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLiqIxcIjogXCImcWludDtcIixcblx0ICAgICAgICAgICAgXCLiiK1cIjogXCImdGludDtcIixcblx0ICAgICAgICAgICAgXCLip5xcIjogXCImaWluZmluO1wiLFxuXHQgICAgICAgICAgICBcIuKEqVwiOiBcIiZpaW90YTtcIixcblx0ICAgICAgICAgICAgXCLEs1wiOiBcIiZpamxpZztcIixcblx0ICAgICAgICAgICAgXCLEq1wiOiBcIiZpbWFjcjtcIixcblx0ICAgICAgICAgICAgXCLEsVwiOiBcIiZpbm9kb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4oq3XCI6IFwiJmltb2Y7XCIsXG5cdCAgICAgICAgICAgIFwixrVcIjogXCImaW1wZWQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oSFXCI6IFwiJmluY2FyZTtcIixcblx0ICAgICAgICAgICAgXCLiiJ5cIjogXCImaW5maW47XCIsXG5cdCAgICAgICAgICAgIFwi4qedXCI6IFwiJmluZmludGllO1wiLFxuXHQgICAgICAgICAgICBcIuKKulwiOiBcIiZpbnRlcmNhbDtcIixcblx0ICAgICAgICAgICAgXCLiqJdcIjogXCImaW50bGFyaGs7XCIsXG5cdCAgICAgICAgICAgIFwi4qi8XCI6IFwiJmlwcm9kO1wiLFxuXHQgICAgICAgICAgICBcItGRXCI6IFwiJmlvY3k7XCIsXG5cdCAgICAgICAgICAgIFwixK9cIjogXCImaW9nb247XCIsXG5cdCAgICAgICAgICAgIFwi8J2VmlwiOiBcIiZpb3BmO1wiLFxuXHQgICAgICAgICAgICBcIs65XCI6IFwiJmlvdGE7XCIsXG5cdCAgICAgICAgICAgIFwiwr9cIjogXCImaXF1ZXN0O1wiLFxuXHQgICAgICAgICAgICBcIvCdkr5cIjogXCImaXNjcjtcIixcblx0ICAgICAgICAgICAgXCLii7lcIjogXCImaXNpbkU7XCIsXG5cdCAgICAgICAgICAgIFwi4ou1XCI6IFwiJmlzaW5kb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4ou0XCI6IFwiJmlzaW5zO1wiLFxuXHQgICAgICAgICAgICBcIuKLs1wiOiBcIiZpc2luc3Y7XCIsXG5cdCAgICAgICAgICAgIFwixKlcIjogXCImaXRpbGRlO1wiLFxuXHQgICAgICAgICAgICBcItGWXCI6IFwiJml1a2N5O1wiLFxuXHQgICAgICAgICAgICBcIsOvXCI6IFwiJml1bWw7XCIsXG5cdCAgICAgICAgICAgIFwixLVcIjogXCImamNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi0LlcIjogXCImamN5O1wiLFxuXHQgICAgICAgICAgICBcIvCdlKdcIjogXCImamZyO1wiLFxuXHQgICAgICAgICAgICBcIsi3XCI6IFwiJmptYXRoO1wiLFxuXHQgICAgICAgICAgICBcIvCdlZtcIjogXCImam9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZK/XCI6IFwiJmpzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi0ZhcIjogXCImanNlcmN5O1wiLFxuXHQgICAgICAgICAgICBcItGUXCI6IFwiJmp1a2N5O1wiLFxuXHQgICAgICAgICAgICBcIs66XCI6IFwiJmthcHBhO1wiLFxuXHQgICAgICAgICAgICBcIs+wXCI6IFwiJnZhcmthcHBhO1wiLFxuXHQgICAgICAgICAgICBcIsS3XCI6IFwiJmtjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLQulwiOiBcIiZrY3k7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UqFwiOiBcIiZrZnI7XCIsXG5cdCAgICAgICAgICAgIFwixLhcIjogXCIma2dyZWVuO1wiLFxuXHQgICAgICAgICAgICBcItGFXCI6IFwiJmtoY3k7XCIsXG5cdCAgICAgICAgICAgIFwi0ZxcIjogXCIma2pjeTtcIixcblx0ICAgICAgICAgICAgXCLwnZWcXCI6IFwiJmtvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi8J2TgFwiOiBcIiZrc2NyO1wiLFxuXHQgICAgICAgICAgICBcIuKkm1wiOiBcIiZsQXRhaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4qSOXCI6IFwiJmxCYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKqi1wiOiBcIiZsZXNzZXFxZ3RyO1wiLFxuXHQgICAgICAgICAgICBcIuKlolwiOiBcIiZsSGFyO1wiLFxuXHQgICAgICAgICAgICBcIsS6XCI6IFwiJmxhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLiprRcIjogXCImbGFlbXB0eXY7XCIsXG5cdCAgICAgICAgICAgIFwizrtcIjogXCImbGFtYmRhO1wiLFxuXHQgICAgICAgICAgICBcIuKmkVwiOiBcIiZsYW5nZDtcIixcblx0ICAgICAgICAgICAgXCLiqoVcIjogXCImbGVzc2FwcHJveDtcIixcblx0ICAgICAgICAgICAgXCLCq1wiOiBcIiZsYXF1bztcIixcblx0ICAgICAgICAgICAgXCLipJ9cIjogXCImbGFycmJmcztcIixcblx0ICAgICAgICAgICAgXCLipJ1cIjogXCImbGFycmZzO1wiLFxuXHQgICAgICAgICAgICBcIuKGq1wiOiBcIiZsb29wYXJyb3dsZWZ0O1wiLFxuXHQgICAgICAgICAgICBcIuKkuVwiOiBcIiZsYXJycGw7XCIsXG5cdCAgICAgICAgICAgIFwi4qWzXCI6IFwiJmxhcnJzaW07XCIsXG5cdCAgICAgICAgICAgIFwi4oaiXCI6IFwiJmxlZnRhcnJvd3RhaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4qqrXCI6IFwiJmxhdDtcIixcblx0ICAgICAgICAgICAgXCLipJlcIjogXCImbGF0YWlsO1wiLFxuXHQgICAgICAgICAgICBcIuKqrVwiOiBcIiZsYXRlO1wiLFxuXHQgICAgICAgICAgICBcIuKqre+4gFwiOiBcIiZsYXRlcztcIixcblx0ICAgICAgICAgICAgXCLipIxcIjogXCImbGJhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4p2yXCI6IFwiJmxiYnJrO1wiLFxuXHQgICAgICAgICAgICBcIntcIjogXCImbGN1YjtcIixcblx0ICAgICAgICAgICAgXCJbXCI6IFwiJmxzcWI7XCIsXG5cdCAgICAgICAgICAgIFwi4qaLXCI6IFwiJmxicmtlO1wiLFxuXHQgICAgICAgICAgICBcIuKmj1wiOiBcIiZsYnJrc2xkO1wiLFxuXHQgICAgICAgICAgICBcIuKmjVwiOiBcIiZsYnJrc2x1O1wiLFxuXHQgICAgICAgICAgICBcIsS+XCI6IFwiJmxjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLEvFwiOiBcIiZsY2VkaWw7XCIsXG5cdCAgICAgICAgICAgIFwi0LtcIjogXCImbGN5O1wiLFxuXHQgICAgICAgICAgICBcIuKktlwiOiBcIiZsZGNhO1wiLFxuXHQgICAgICAgICAgICBcIuKlp1wiOiBcIiZsZHJkaGFyO1wiLFxuXHQgICAgICAgICAgICBcIuKli1wiOiBcIiZsZHJ1c2hhcjtcIixcblx0ICAgICAgICAgICAgXCLihrJcIjogXCImbGRzaDtcIixcblx0ICAgICAgICAgICAgXCLiiaRcIjogXCImbGVxO1wiLFxuXHQgICAgICAgICAgICBcIuKHh1wiOiBcIiZsbGFycjtcIixcblx0ICAgICAgICAgICAgXCLii4tcIjogXCImbHRocmVlO1wiLFxuXHQgICAgICAgICAgICBcIuKqqFwiOiBcIiZsZXNjYztcIixcblx0ICAgICAgICAgICAgXCLiqb9cIjogXCImbGVzZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKqgVwiOiBcIiZsZXNkb3RvO1wiLFxuXHQgICAgICAgICAgICBcIuKqg1wiOiBcIiZsZXNkb3RvcjtcIixcblx0ICAgICAgICAgICAgXCLii5rvuIBcIjogXCImbGVzZztcIixcblx0ICAgICAgICAgICAgXCLiqpNcIjogXCImbGVzZ2VzO1wiLFxuXHQgICAgICAgICAgICBcIuKLllwiOiBcIiZsdGRvdDtcIixcblx0ICAgICAgICAgICAgXCLipbxcIjogXCImbGZpc2h0O1wiLFxuXHQgICAgICAgICAgICBcIvCdlKlcIjogXCImbGZyO1wiLFxuXHQgICAgICAgICAgICBcIuKqkVwiOiBcIiZsZ0U7XCIsXG5cdCAgICAgICAgICAgIFwi4qWqXCI6IFwiJmxoYXJ1bDtcIixcblx0ICAgICAgICAgICAgXCLiloRcIjogXCImbGhibGs7XCIsXG5cdCAgICAgICAgICAgIFwi0ZlcIjogXCImbGpjeTtcIixcblx0ICAgICAgICAgICAgXCLipatcIjogXCImbGxoYXJkO1wiLFxuXHQgICAgICAgICAgICBcIuKXulwiOiBcIiZsbHRyaTtcIixcblx0ICAgICAgICAgICAgXCLFgFwiOiBcIiZsbWlkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4o6wXCI6IFwiJmxtb3VzdGFjaGU7XCIsXG5cdCAgICAgICAgICAgIFwi4omoXCI6IFwiJmxuZXFxO1wiLFxuXHQgICAgICAgICAgICBcIuKqiVwiOiBcIiZsbmFwcHJveDtcIixcblx0ICAgICAgICAgICAgXCLiqodcIjogXCImbG5lcTtcIixcblx0ICAgICAgICAgICAgXCLii6ZcIjogXCImbG5zaW07XCIsXG5cdCAgICAgICAgICAgIFwi4p+sXCI6IFwiJmxvYW5nO1wiLFxuXHQgICAgICAgICAgICBcIuKHvVwiOiBcIiZsb2FycjtcIixcblx0ICAgICAgICAgICAgXCLin7xcIjogXCImeG1hcDtcIixcblx0ICAgICAgICAgICAgXCLihqxcIjogXCImcmFycmxwO1wiLFxuXHQgICAgICAgICAgICBcIuKmhVwiOiBcIiZsb3BhcjtcIixcblx0ICAgICAgICAgICAgXCLwnZWdXCI6IFwiJmxvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4qitXCI6IFwiJmxvcGx1cztcIixcblx0ICAgICAgICAgICAgXCLiqLRcIjogXCImbG90aW1lcztcIixcblx0ICAgICAgICAgICAgXCLiiJdcIjogXCImbG93YXN0O1wiLFxuXHQgICAgICAgICAgICBcIuKXilwiOiBcIiZsb3plbmdlO1wiLFxuXHQgICAgICAgICAgICBcIihcIjogXCImbHBhcjtcIixcblx0ICAgICAgICAgICAgXCLippNcIjogXCImbHBhcmx0O1wiLFxuXHQgICAgICAgICAgICBcIuKlrVwiOiBcIiZscmhhcmQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oCOXCI6IFwiJmxybTtcIixcblx0ICAgICAgICAgICAgXCLiir9cIjogXCImbHJ0cmk7XCIsXG5cdCAgICAgICAgICAgIFwi4oC5XCI6IFwiJmxzYXF1bztcIixcblx0ICAgICAgICAgICAgXCLwnZOBXCI6IFwiJmxzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4qqNXCI6IFwiJmxzaW1lO1wiLFxuXHQgICAgICAgICAgICBcIuKqj1wiOiBcIiZsc2ltZztcIixcblx0ICAgICAgICAgICAgXCLigJpcIjogXCImc2JxdW87XCIsXG5cdCAgICAgICAgICAgIFwixYJcIjogXCImbHN0cm9rO1wiLFxuXHQgICAgICAgICAgICBcIuKqplwiOiBcIiZsdGNjO1wiLFxuXHQgICAgICAgICAgICBcIuKpuVwiOiBcIiZsdGNpcjtcIixcblx0ICAgICAgICAgICAgXCLii4lcIjogXCImbHRpbWVzO1wiLFxuXHQgICAgICAgICAgICBcIuKltlwiOiBcIiZsdGxhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4qm7XCI6IFwiJmx0cXVlc3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4qaWXCI6IFwiJmx0clBhcjtcIixcblx0ICAgICAgICAgICAgXCLil4NcIjogXCImdHJpYW5nbGVsZWZ0O1wiLFxuXHQgICAgICAgICAgICBcIuKlilwiOiBcIiZsdXJkc2hhcjtcIixcblx0ICAgICAgICAgICAgXCLipaZcIjogXCImbHVydWhhcjtcIixcblx0ICAgICAgICAgICAgXCLiiajvuIBcIjogXCImbHZuRTtcIixcblx0ICAgICAgICAgICAgXCLiiLpcIjogXCImbUREb3Q7XCIsXG5cdCAgICAgICAgICAgIFwiwq9cIjogXCImc3RybnM7XCIsXG5cdCAgICAgICAgICAgIFwi4pmCXCI6IFwiJm1hbGU7XCIsXG5cdCAgICAgICAgICAgIFwi4pygXCI6IFwiJm1hbHRlc2U7XCIsXG5cdCAgICAgICAgICAgIFwi4pauXCI6IFwiJm1hcmtlcjtcIixcblx0ICAgICAgICAgICAgXCLiqKlcIjogXCImbWNvbW1hO1wiLFxuXHQgICAgICAgICAgICBcItC8XCI6IFwiJm1jeTtcIixcblx0ICAgICAgICAgICAgXCLigJRcIjogXCImbWRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UqlwiOiBcIiZtZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oSnXCI6IFwiJm1obztcIixcblx0ICAgICAgICAgICAgXCLCtVwiOiBcIiZtaWNybztcIixcblx0ICAgICAgICAgICAgXCLiq7BcIjogXCImbWlkY2lyO1wiLFxuXHQgICAgICAgICAgICBcIuKIklwiOiBcIiZtaW51cztcIixcblx0ICAgICAgICAgICAgXCLiqKpcIjogXCImbWludXNkdTtcIixcblx0ICAgICAgICAgICAgXCLiq5tcIjogXCImbWxjcDtcIixcblx0ICAgICAgICAgICAgXCLiiqdcIjogXCImbW9kZWxzO1wiLFxuXHQgICAgICAgICAgICBcIvCdlZ5cIjogXCImbW9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZOCXCI6IFwiJm1zY3I7XCIsXG5cdCAgICAgICAgICAgIFwizrxcIjogXCImbXU7XCIsXG5cdCAgICAgICAgICAgIFwi4oq4XCI6IFwiJm11bWFwO1wiLFxuXHQgICAgICAgICAgICBcIuKLmcy4XCI6IFwiJm5HZztcIixcblx0ICAgICAgICAgICAgXCLiiavig5JcIjogXCImbkd0O1wiLFxuXHQgICAgICAgICAgICBcIuKHjVwiOiBcIiZubEFycjtcIixcblx0ICAgICAgICAgICAgXCLih45cIjogXCImbmhBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4ouYzLhcIjogXCImbkxsO1wiLFxuXHQgICAgICAgICAgICBcIuKJquKDklwiOiBcIiZuTHQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oePXCI6IFwiJm5yQXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKKr1wiOiBcIiZuVkRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwi4oquXCI6IFwiJm5WZGFzaDtcIixcblx0ICAgICAgICAgICAgXCLFhFwiOiBcIiZuYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwi4oig4oOSXCI6IFwiJm5hbmc7XCIsXG5cdCAgICAgICAgICAgIFwi4qmwzLhcIjogXCImbmFwRTtcIixcblx0ICAgICAgICAgICAgXCLiiYvMuFwiOiBcIiZuYXBpZDtcIixcblx0ICAgICAgICAgICAgXCLFiVwiOiBcIiZuYXBvcztcIixcblx0ICAgICAgICAgICAgXCLima5cIjogXCImbmF0dXJhbDtcIixcblx0ICAgICAgICAgICAgXCLiqYNcIjogXCImbmNhcDtcIixcblx0ICAgICAgICAgICAgXCLFiFwiOiBcIiZuY2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwixYZcIjogXCImbmNlZGlsO1wiLFxuXHQgICAgICAgICAgICBcIuKprcy4XCI6IFwiJm5jb25nZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKpglwiOiBcIiZuY3VwO1wiLFxuXHQgICAgICAgICAgICBcItC9XCI6IFwiJm5jeTtcIixcblx0ICAgICAgICAgICAgXCLigJNcIjogXCImbmRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwi4oeXXCI6IFwiJm5lQXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKkpFwiOiBcIiZuZWFyaGs7XCIsXG5cdCAgICAgICAgICAgIFwi4omQzLhcIjogXCImbmVkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4qSoXCI6IFwiJnRvZWE7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Uq1wiOiBcIiZuZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oauXCI6IFwiJm5sZWZ0cmlnaHRhcnJvdztcIixcblx0ICAgICAgICAgICAgXCLiq7JcIjogXCImbmhwYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4ou8XCI6IFwiJm5pcztcIixcblx0ICAgICAgICAgICAgXCLii7pcIjogXCImbmlzZDtcIixcblx0ICAgICAgICAgICAgXCLRmlwiOiBcIiZuamN5O1wiLFxuXHQgICAgICAgICAgICBcIuKJpsy4XCI6IFwiJm5sZXFxO1wiLFxuXHQgICAgICAgICAgICBcIuKGmlwiOiBcIiZubGVmdGFycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKApVwiOiBcIiZubGRyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlZ9cIjogXCImbm9wZjtcIixcblx0ICAgICAgICAgICAgXCLCrFwiOiBcIiZub3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4ou5zLhcIjogXCImbm90aW5FO1wiLFxuXHQgICAgICAgICAgICBcIuKLtcy4XCI6IFwiJm5vdGluZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKLt1wiOiBcIiZub3RpbnZiO1wiLFxuXHQgICAgICAgICAgICBcIuKLtlwiOiBcIiZub3RpbnZjO1wiLFxuXHQgICAgICAgICAgICBcIuKLvlwiOiBcIiZub3RuaXZiO1wiLFxuXHQgICAgICAgICAgICBcIuKLvVwiOiBcIiZub3RuaXZjO1wiLFxuXHQgICAgICAgICAgICBcIuKrveKDpVwiOiBcIiZucGFyc2w7XCIsXG5cdCAgICAgICAgICAgIFwi4oiCzLhcIjogXCImbnBhcnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4qiUXCI6IFwiJm5wb2xpbnQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oabXCI6IFwiJm5yaWdodGFycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKks8y4XCI6IFwiJm5yYXJyYztcIixcblx0ICAgICAgICAgICAgXCLihp3MuFwiOiBcIiZucmFycnc7XCIsXG5cdCAgICAgICAgICAgIFwi8J2Tg1wiOiBcIiZuc2NyO1wiLFxuXHQgICAgICAgICAgICBcIuKKhFwiOiBcIiZuc3ViO1wiLFxuXHQgICAgICAgICAgICBcIuKrhcy4XCI6IFwiJm5zdWJzZXRlcXE7XCIsXG5cdCAgICAgICAgICAgIFwi4oqFXCI6IFwiJm5zdXA7XCIsXG5cdCAgICAgICAgICAgIFwi4quGzLhcIjogXCImbnN1cHNldGVxcTtcIixcblx0ICAgICAgICAgICAgXCLDsVwiOiBcIiZudGlsZGU7XCIsXG5cdCAgICAgICAgICAgIFwizr1cIjogXCImbnU7XCIsXG5cdCAgICAgICAgICAgIFwiI1wiOiBcIiZudW07XCIsXG5cdCAgICAgICAgICAgIFwi4oSWXCI6IFwiJm51bWVybztcIixcblx0ICAgICAgICAgICAgXCLigIdcIjogXCImbnVtc3A7XCIsXG5cdCAgICAgICAgICAgIFwi4oqtXCI6IFwiJm52RGFzaDtcIixcblx0ICAgICAgICAgICAgXCLipIRcIjogXCImbnZIYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKJjeKDklwiOiBcIiZudmFwO1wiLFxuXHQgICAgICAgICAgICBcIuKKrFwiOiBcIiZudmRhc2g7XCIsXG5cdCAgICAgICAgICAgIFwi4oml4oOSXCI6IFwiJm52Z2U7XCIsXG5cdCAgICAgICAgICAgIFwiPuKDklwiOiBcIiZudmd0O1wiLFxuXHQgICAgICAgICAgICBcIuKnnlwiOiBcIiZudmluZmluO1wiLFxuXHQgICAgICAgICAgICBcIuKkglwiOiBcIiZudmxBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4omk4oOSXCI6IFwiJm52bGU7XCIsXG5cdCAgICAgICAgICAgIFwiPOKDklwiOiBcIiZudmx0O1wiLFxuXHQgICAgICAgICAgICBcIuKKtOKDklwiOiBcIiZudmx0cmllO1wiLFxuXHQgICAgICAgICAgICBcIuKkg1wiOiBcIiZudnJBcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4oq14oOSXCI6IFwiJm52cnRyaWU7XCIsXG5cdCAgICAgICAgICAgIFwi4oi84oOSXCI6IFwiJm52c2ltO1wiLFxuXHQgICAgICAgICAgICBcIuKHllwiOiBcIiZud0FycjtcIixcblx0ICAgICAgICAgICAgXCLipKNcIjogXCImbndhcmhrO1wiLFxuXHQgICAgICAgICAgICBcIuKkp1wiOiBcIiZud25lYXI7XCIsXG5cdCAgICAgICAgICAgIFwiw7NcIjogXCImb2FjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIsO0XCI6IFwiJm9jaXJjO1wiLFxuXHQgICAgICAgICAgICBcItC+XCI6IFwiJm9jeTtcIixcblx0ICAgICAgICAgICAgXCLFkVwiOiBcIiZvZGJsYWM7XCIsXG5cdCAgICAgICAgICAgIFwi4qi4XCI6IFwiJm9kaXY7XCIsXG5cdCAgICAgICAgICAgIFwi4qa8XCI6IFwiJm9kc29sZDtcIixcblx0ICAgICAgICAgICAgXCLFk1wiOiBcIiZvZWxpZztcIixcblx0ICAgICAgICAgICAgXCLipr9cIjogXCImb2ZjaXI7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UrFwiOiBcIiZvZnI7XCIsXG5cdCAgICAgICAgICAgIFwiy5tcIjogXCImb2dvbjtcIixcblx0ICAgICAgICAgICAgXCLDslwiOiBcIiZvZ3JhdmU7XCIsXG5cdCAgICAgICAgICAgIFwi4qeBXCI6IFwiJm9ndDtcIixcblx0ICAgICAgICAgICAgXCLiprVcIjogXCImb2hiYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4qa+XCI6IFwiJm9sY2lyO1wiLFxuXHQgICAgICAgICAgICBcIuKmu1wiOiBcIiZvbGNyb3NzO1wiLFxuXHQgICAgICAgICAgICBcIuKngFwiOiBcIiZvbHQ7XCIsXG5cdCAgICAgICAgICAgIFwixY1cIjogXCImb21hY3I7XCIsXG5cdCAgICAgICAgICAgIFwiz4lcIjogXCImb21lZ2E7XCIsXG5cdCAgICAgICAgICAgIFwizr9cIjogXCImb21pY3JvbjtcIixcblx0ICAgICAgICAgICAgXCLiprZcIjogXCImb21pZDtcIixcblx0ICAgICAgICAgICAgXCLwnZWgXCI6IFwiJm9vcGY7XCIsXG5cdCAgICAgICAgICAgIFwi4qa3XCI6IFwiJm9wYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4qa5XCI6IFwiJm9wZXJwO1wiLFxuXHQgICAgICAgICAgICBcIuKIqFwiOiBcIiZ2ZWU7XCIsXG5cdCAgICAgICAgICAgIFwi4qmdXCI6IFwiJm9yZDtcIixcblx0ICAgICAgICAgICAgXCLihLRcIjogXCImb3NjcjtcIixcblx0ICAgICAgICAgICAgXCLCqlwiOiBcIiZvcmRmO1wiLFxuXHQgICAgICAgICAgICBcIsK6XCI6IFwiJm9yZG07XCIsXG5cdCAgICAgICAgICAgIFwi4oq2XCI6IFwiJm9yaWdvZjtcIixcblx0ICAgICAgICAgICAgXCLiqZZcIjogXCImb3JvcjtcIixcblx0ICAgICAgICAgICAgXCLiqZdcIjogXCImb3JzbG9wZTtcIixcblx0ICAgICAgICAgICAgXCLiqZtcIjogXCImb3J2O1wiLFxuXHQgICAgICAgICAgICBcIsO4XCI6IFwiJm9zbGFzaDtcIixcblx0ICAgICAgICAgICAgXCLiiphcIjogXCImb3NvbDtcIixcblx0ICAgICAgICAgICAgXCLDtVwiOiBcIiZvdGlsZGU7XCIsXG5cdCAgICAgICAgICAgIFwi4qi2XCI6IFwiJm90aW1lc2FzO1wiLFxuXHQgICAgICAgICAgICBcIsO2XCI6IFwiJm91bWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oy9XCI6IFwiJm92YmFyO1wiLFxuXHQgICAgICAgICAgICBcIsK2XCI6IFwiJnBhcmE7XCIsXG5cdCAgICAgICAgICAgIFwi4quzXCI6IFwiJnBhcnNpbTtcIixcblx0ICAgICAgICAgICAgXCLiq71cIjogXCImcGFyc2w7XCIsXG5cdCAgICAgICAgICAgIFwi0L9cIjogXCImcGN5O1wiLFxuXHQgICAgICAgICAgICBcIiVcIjogXCImcGVyY250O1wiLFxuXHQgICAgICAgICAgICBcIi5cIjogXCImcGVyaW9kO1wiLFxuXHQgICAgICAgICAgICBcIuKAsFwiOiBcIiZwZXJtaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oCxXCI6IFwiJnBlcnRlbms7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UrVwiOiBcIiZwZnI7XCIsXG5cdCAgICAgICAgICAgIFwiz4ZcIjogXCImcGhpO1wiLFxuXHQgICAgICAgICAgICBcIs+VXCI6IFwiJnZhcnBoaTtcIixcblx0ICAgICAgICAgICAgXCLimI5cIjogXCImcGhvbmU7XCIsXG5cdCAgICAgICAgICAgIFwiz4BcIjogXCImcGk7XCIsXG5cdCAgICAgICAgICAgIFwiz5ZcIjogXCImdmFycGk7XCIsXG5cdCAgICAgICAgICAgIFwi4oSOXCI6IFwiJnBsYW5ja2g7XCIsXG5cdCAgICAgICAgICAgIFwiK1wiOiBcIiZwbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKoo1wiOiBcIiZwbHVzYWNpcjtcIixcblx0ICAgICAgICAgICAgXCLiqKJcIjogXCImcGx1c2NpcjtcIixcblx0ICAgICAgICAgICAgXCLiqKVcIjogXCImcGx1c2R1O1wiLFxuXHQgICAgICAgICAgICBcIuKpslwiOiBcIiZwbHVzZTtcIixcblx0ICAgICAgICAgICAgXCLiqKZcIjogXCImcGx1c3NpbTtcIixcblx0ICAgICAgICAgICAgXCLiqKdcIjogXCImcGx1c3R3bztcIixcblx0ICAgICAgICAgICAgXCLiqJVcIjogXCImcG9pbnRpbnQ7XCIsXG5cdCAgICAgICAgICAgIFwi8J2VoVwiOiBcIiZwb3BmO1wiLFxuXHQgICAgICAgICAgICBcIsKjXCI6IFwiJnBvdW5kO1wiLFxuXHQgICAgICAgICAgICBcIuKqs1wiOiBcIiZwckU7XCIsXG5cdCAgICAgICAgICAgIFwi4qq3XCI6IFwiJnByZWNhcHByb3g7XCIsXG5cdCAgICAgICAgICAgIFwi4qq5XCI6IFwiJnBybmFwO1wiLFxuXHQgICAgICAgICAgICBcIuKqtVwiOiBcIiZwcm5FO1wiLFxuXHQgICAgICAgICAgICBcIuKLqFwiOiBcIiZwcm5zaW07XCIsXG5cdCAgICAgICAgICAgIFwi4oCyXCI6IFwiJnByaW1lO1wiLFxuXHQgICAgICAgICAgICBcIuKMrlwiOiBcIiZwcm9mYWxhcjtcIixcblx0ICAgICAgICAgICAgXCLijJJcIjogXCImcHJvZmxpbmU7XCIsXG5cdCAgICAgICAgICAgIFwi4oyTXCI6IFwiJnByb2ZzdXJmO1wiLFxuXHQgICAgICAgICAgICBcIuKKsFwiOiBcIiZwcnVyZWw7XCIsXG5cdCAgICAgICAgICAgIFwi8J2ThVwiOiBcIiZwc2NyO1wiLFxuXHQgICAgICAgICAgICBcIs+IXCI6IFwiJnBzaTtcIixcblx0ICAgICAgICAgICAgXCLigIhcIjogXCImcHVuY3NwO1wiLFxuXHQgICAgICAgICAgICBcIvCdlK5cIjogXCImcWZyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlaJcIjogXCImcW9wZjtcIixcblx0ICAgICAgICAgICAgXCLigZdcIjogXCImcXByaW1lO1wiLFxuXHQgICAgICAgICAgICBcIvCdk4ZcIjogXCImcXNjcjtcIixcblx0ICAgICAgICAgICAgXCLiqJZcIjogXCImcXVhdGludDtcIixcblx0ICAgICAgICAgICAgXCI/XCI6IFwiJnF1ZXN0O1wiLFxuXHQgICAgICAgICAgICBcIuKknFwiOiBcIiZyQXRhaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4qWkXCI6IFwiJnJIYXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oi9zLFcIjogXCImcmFjZTtcIixcblx0ICAgICAgICAgICAgXCLFlVwiOiBcIiZyYWN1dGU7XCIsXG5cdCAgICAgICAgICAgIFwi4qazXCI6IFwiJnJhZW1wdHl2O1wiLFxuXHQgICAgICAgICAgICBcIuKmklwiOiBcIiZyYW5nZDtcIixcblx0ICAgICAgICAgICAgXCLipqVcIjogXCImcmFuZ2U7XCIsXG5cdCAgICAgICAgICAgIFwiwrtcIjogXCImcmFxdW87XCIsXG5cdCAgICAgICAgICAgIFwi4qW1XCI6IFwiJnJhcnJhcDtcIixcblx0ICAgICAgICAgICAgXCLipKBcIjogXCImcmFycmJmcztcIixcblx0ICAgICAgICAgICAgXCLipLNcIjogXCImcmFycmM7XCIsXG5cdCAgICAgICAgICAgIFwi4qSeXCI6IFwiJnJhcnJmcztcIixcblx0ICAgICAgICAgICAgXCLipYVcIjogXCImcmFycnBsO1wiLFxuXHQgICAgICAgICAgICBcIuKltFwiOiBcIiZyYXJyc2ltO1wiLFxuXHQgICAgICAgICAgICBcIuKGo1wiOiBcIiZyaWdodGFycm93dGFpbDtcIixcblx0ICAgICAgICAgICAgXCLihp1cIjogXCImcmlnaHRzcXVpZ2Fycm93O1wiLFxuXHQgICAgICAgICAgICBcIuKkmlwiOiBcIiZyYXRhaWw7XCIsXG5cdCAgICAgICAgICAgIFwi4oi2XCI6IFwiJnJhdGlvO1wiLFxuXHQgICAgICAgICAgICBcIuKds1wiOiBcIiZyYmJyaztcIixcblx0ICAgICAgICAgICAgXCJ9XCI6IFwiJnJjdWI7XCIsXG5cdCAgICAgICAgICAgIFwiXVwiOiBcIiZyc3FiO1wiLFxuXHQgICAgICAgICAgICBcIuKmjFwiOiBcIiZyYnJrZTtcIixcblx0ICAgICAgICAgICAgXCLipo5cIjogXCImcmJya3NsZDtcIixcblx0ICAgICAgICAgICAgXCLippBcIjogXCImcmJya3NsdTtcIixcblx0ICAgICAgICAgICAgXCLFmVwiOiBcIiZyY2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwixZdcIjogXCImcmNlZGlsO1wiLFxuXHQgICAgICAgICAgICBcItGAXCI6IFwiJnJjeTtcIixcblx0ICAgICAgICAgICAgXCLipLdcIjogXCImcmRjYTtcIixcblx0ICAgICAgICAgICAgXCLipalcIjogXCImcmRsZGhhcjtcIixcblx0ICAgICAgICAgICAgXCLihrNcIjogXCImcmRzaDtcIixcblx0ICAgICAgICAgICAgXCLilq1cIjogXCImcmVjdDtcIixcblx0ICAgICAgICAgICAgXCLipb1cIjogXCImcmZpc2h0O1wiLFxuXHQgICAgICAgICAgICBcIvCdlK9cIjogXCImcmZyO1wiLFxuXHQgICAgICAgICAgICBcIuKlrFwiOiBcIiZyaGFydWw7XCIsXG5cdCAgICAgICAgICAgIFwiz4FcIjogXCImcmhvO1wiLFxuXHQgICAgICAgICAgICBcIs+xXCI6IFwiJnZhcnJobztcIixcblx0ICAgICAgICAgICAgXCLih4lcIjogXCImcnJhcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4ouMXCI6IFwiJnJ0aHJlZTtcIixcblx0ICAgICAgICAgICAgXCLLmlwiOiBcIiZyaW5nO1wiLFxuXHQgICAgICAgICAgICBcIuKAj1wiOiBcIiZybG07XCIsXG5cdCAgICAgICAgICAgIFwi4o6xXCI6IFwiJnJtb3VzdGFjaGU7XCIsXG5cdCAgICAgICAgICAgIFwi4quuXCI6IFwiJnJubWlkO1wiLFxuXHQgICAgICAgICAgICBcIuKfrVwiOiBcIiZyb2FuZztcIixcblx0ICAgICAgICAgICAgXCLih75cIjogXCImcm9hcnI7XCIsXG5cdCAgICAgICAgICAgIFwi4qaGXCI6IFwiJnJvcGFyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlaNcIjogXCImcm9wZjtcIixcblx0ICAgICAgICAgICAgXCLiqK5cIjogXCImcm9wbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKotVwiOiBcIiZyb3RpbWVzO1wiLFxuXHQgICAgICAgICAgICBcIilcIjogXCImcnBhcjtcIixcblx0ICAgICAgICAgICAgXCLippRcIjogXCImcnBhcmd0O1wiLFxuXHQgICAgICAgICAgICBcIuKoklwiOiBcIiZycHBvbGludDtcIixcblx0ICAgICAgICAgICAgXCLigLpcIjogXCImcnNhcXVvO1wiLFxuXHQgICAgICAgICAgICBcIvCdk4dcIjogXCImcnNjcjtcIixcblx0ICAgICAgICAgICAgXCLii4pcIjogXCImcnRpbWVzO1wiLFxuXHQgICAgICAgICAgICBcIuKWuVwiOiBcIiZ0cmlhbmdsZXJpZ2h0O1wiLFxuXHQgICAgICAgICAgICBcIuKnjlwiOiBcIiZydHJpbHRyaTtcIixcblx0ICAgICAgICAgICAgXCLipahcIjogXCImcnVsdWhhcjtcIixcblx0ICAgICAgICAgICAgXCLihJ5cIjogXCImcng7XCIsXG5cdCAgICAgICAgICAgIFwixZtcIjogXCImc2FjdXRlO1wiLFxuXHQgICAgICAgICAgICBcIuKqtFwiOiBcIiZzY0U7XCIsXG5cdCAgICAgICAgICAgIFwi4qq4XCI6IFwiJnN1Y2NhcHByb3g7XCIsXG5cdCAgICAgICAgICAgIFwixaFcIjogXCImc2Nhcm9uO1wiLFxuXHQgICAgICAgICAgICBcIsWfXCI6IFwiJnNjZWRpbDtcIixcblx0ICAgICAgICAgICAgXCLFnVwiOiBcIiZzY2lyYztcIixcblx0ICAgICAgICAgICAgXCLiqrZcIjogXCImc3VjY25lcXE7XCIsXG5cdCAgICAgICAgICAgIFwi4qq6XCI6IFwiJnN1Y2NuYXBwcm94O1wiLFxuXHQgICAgICAgICAgICBcIuKLqVwiOiBcIiZzdWNjbnNpbTtcIixcblx0ICAgICAgICAgICAgXCLiqJNcIjogXCImc2Nwb2xpbnQ7XCIsXG5cdCAgICAgICAgICAgIFwi0YFcIjogXCImc2N5O1wiLFxuXHQgICAgICAgICAgICBcIuKLhVwiOiBcIiZzZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKpplwiOiBcIiZzZG90ZTtcIixcblx0ICAgICAgICAgICAgXCLih5hcIjogXCImc2VBcnI7XCIsXG5cdCAgICAgICAgICAgIFwiwqdcIjogXCImc2VjdDtcIixcblx0ICAgICAgICAgICAgXCI7XCI6IFwiJnNlbWk7XCIsXG5cdCAgICAgICAgICAgIFwi4qSpXCI6IFwiJnRvc2E7XCIsXG5cdCAgICAgICAgICAgIFwi4py2XCI6IFwiJnNleHQ7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UsFwiOiBcIiZzZnI7XCIsXG5cdCAgICAgICAgICAgIFwi4pmvXCI6IFwiJnNoYXJwO1wiLFxuXHQgICAgICAgICAgICBcItGJXCI6IFwiJnNoY2hjeTtcIixcblx0ICAgICAgICAgICAgXCLRiFwiOiBcIiZzaGN5O1wiLFxuXHQgICAgICAgICAgICBcIsKtXCI6IFwiJnNoeTtcIixcblx0ICAgICAgICAgICAgXCLPg1wiOiBcIiZzaWdtYTtcIixcblx0ICAgICAgICAgICAgXCLPglwiOiBcIiZ2YXJzaWdtYTtcIixcblx0ICAgICAgICAgICAgXCLiqapcIjogXCImc2ltZG90O1wiLFxuXHQgICAgICAgICAgICBcIuKqnlwiOiBcIiZzaW1nO1wiLFxuXHQgICAgICAgICAgICBcIuKqoFwiOiBcIiZzaW1nRTtcIixcblx0ICAgICAgICAgICAgXCLiqp1cIjogXCImc2ltbDtcIixcblx0ICAgICAgICAgICAgXCLiqp9cIjogXCImc2ltbEU7XCIsXG5cdCAgICAgICAgICAgIFwi4omGXCI6IFwiJnNpbW5lO1wiLFxuXHQgICAgICAgICAgICBcIuKopFwiOiBcIiZzaW1wbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKlslwiOiBcIiZzaW1yYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKos1wiOiBcIiZzbWFzaHA7XCIsXG5cdCAgICAgICAgICAgIFwi4qekXCI6IFwiJnNtZXBhcnNsO1wiLFxuXHQgICAgICAgICAgICBcIuKMo1wiOiBcIiZzc21pbGU7XCIsXG5cdCAgICAgICAgICAgIFwi4qqqXCI6IFwiJnNtdDtcIixcblx0ICAgICAgICAgICAgXCLiqqxcIjogXCImc210ZTtcIixcblx0ICAgICAgICAgICAgXCLiqqzvuIBcIjogXCImc210ZXM7XCIsXG5cdCAgICAgICAgICAgIFwi0YxcIjogXCImc29mdGN5O1wiLFxuXHQgICAgICAgICAgICBcIi9cIjogXCImc29sO1wiLFxuXHQgICAgICAgICAgICBcIuKnhFwiOiBcIiZzb2xiO1wiLFxuXHQgICAgICAgICAgICBcIuKMv1wiOiBcIiZzb2xiYXI7XCIsXG5cdCAgICAgICAgICAgIFwi8J2VpFwiOiBcIiZzb3BmO1wiLFxuXHQgICAgICAgICAgICBcIuKZoFwiOiBcIiZzcGFkZXN1aXQ7XCIsXG5cdCAgICAgICAgICAgIFwi4oqT77iAXCI6IFwiJnNxY2FwcztcIixcblx0ICAgICAgICAgICAgXCLiipTvuIBcIjogXCImc3FjdXBzO1wiLFxuXHQgICAgICAgICAgICBcIvCdk4hcIjogXCImc3NjcjtcIixcblx0ICAgICAgICAgICAgXCLimIZcIjogXCImc3RhcjtcIixcblx0ICAgICAgICAgICAgXCLiioJcIjogXCImc3Vic2V0O1wiLFxuXHQgICAgICAgICAgICBcIuKrhVwiOiBcIiZzdWJzZXRlcXE7XCIsXG5cdCAgICAgICAgICAgIFwi4qq9XCI6IFwiJnN1YmRvdDtcIixcblx0ICAgICAgICAgICAgXCLiq4NcIjogXCImc3ViZWRvdDtcIixcblx0ICAgICAgICAgICAgXCLiq4FcIjogXCImc3VibXVsdDtcIixcblx0ICAgICAgICAgICAgXCLiq4tcIjogXCImc3Vic2V0bmVxcTtcIixcblx0ICAgICAgICAgICAgXCLiiopcIjogXCImc3Vic2V0bmVxO1wiLFxuXHQgICAgICAgICAgICBcIuKqv1wiOiBcIiZzdWJwbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKluVwiOiBcIiZzdWJyYXJyO1wiLFxuXHQgICAgICAgICAgICBcIuKrh1wiOiBcIiZzdWJzaW07XCIsXG5cdCAgICAgICAgICAgIFwi4quVXCI6IFwiJnN1YnN1YjtcIixcblx0ICAgICAgICAgICAgXCLiq5NcIjogXCImc3Vic3VwO1wiLFxuXHQgICAgICAgICAgICBcIuKZqlwiOiBcIiZzdW5nO1wiLFxuXHQgICAgICAgICAgICBcIsK5XCI6IFwiJnN1cDE7XCIsXG5cdCAgICAgICAgICAgIFwiwrJcIjogXCImc3VwMjtcIixcblx0ICAgICAgICAgICAgXCLCs1wiOiBcIiZzdXAzO1wiLFxuXHQgICAgICAgICAgICBcIuKrhlwiOiBcIiZzdXBzZXRlcXE7XCIsXG5cdCAgICAgICAgICAgIFwi4qq+XCI6IFwiJnN1cGRvdDtcIixcblx0ICAgICAgICAgICAgXCLiq5hcIjogXCImc3VwZHN1YjtcIixcblx0ICAgICAgICAgICAgXCLiq4RcIjogXCImc3VwZWRvdDtcIixcblx0ICAgICAgICAgICAgXCLin4lcIjogXCImc3VwaHNvbDtcIixcblx0ICAgICAgICAgICAgXCLiq5dcIjogXCImc3VwaHN1YjtcIixcblx0ICAgICAgICAgICAgXCLipbtcIjogXCImc3VwbGFycjtcIixcblx0ICAgICAgICAgICAgXCLiq4JcIjogXCImc3VwbXVsdDtcIixcblx0ICAgICAgICAgICAgXCLiq4xcIjogXCImc3Vwc2V0bmVxcTtcIixcblx0ICAgICAgICAgICAgXCLiiotcIjogXCImc3Vwc2V0bmVxO1wiLFxuXHQgICAgICAgICAgICBcIuKrgFwiOiBcIiZzdXBwbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKriFwiOiBcIiZzdXBzaW07XCIsXG5cdCAgICAgICAgICAgIFwi4quUXCI6IFwiJnN1cHN1YjtcIixcblx0ICAgICAgICAgICAgXCLiq5ZcIjogXCImc3Vwc3VwO1wiLFxuXHQgICAgICAgICAgICBcIuKHmVwiOiBcIiZzd0FycjtcIixcblx0ICAgICAgICAgICAgXCLipKpcIjogXCImc3dud2FyO1wiLFxuXHQgICAgICAgICAgICBcIsOfXCI6IFwiJnN6bGlnO1wiLFxuXHQgICAgICAgICAgICBcIuKMllwiOiBcIiZ0YXJnZXQ7XCIsXG5cdCAgICAgICAgICAgIFwiz4RcIjogXCImdGF1O1wiLFxuXHQgICAgICAgICAgICBcIsWlXCI6IFwiJnRjYXJvbjtcIixcblx0ICAgICAgICAgICAgXCLFo1wiOiBcIiZ0Y2VkaWw7XCIsXG5cdCAgICAgICAgICAgIFwi0YJcIjogXCImdGN5O1wiLFxuXHQgICAgICAgICAgICBcIuKMlVwiOiBcIiZ0ZWxyZWM7XCIsXG5cdCAgICAgICAgICAgIFwi8J2UsVwiOiBcIiZ0ZnI7XCIsXG5cdCAgICAgICAgICAgIFwizrhcIjogXCImdGhldGE7XCIsXG5cdCAgICAgICAgICAgIFwiz5FcIjogXCImdmFydGhldGE7XCIsXG5cdCAgICAgICAgICAgIFwiw75cIjogXCImdGhvcm47XCIsXG5cdCAgICAgICAgICAgIFwiw5dcIjogXCImdGltZXM7XCIsXG5cdCAgICAgICAgICAgIFwi4qixXCI6IFwiJnRpbWVzYmFyO1wiLFxuXHQgICAgICAgICAgICBcIuKosFwiOiBcIiZ0aW1lc2Q7XCIsXG5cdCAgICAgICAgICAgIFwi4oy2XCI6IFwiJnRvcGJvdDtcIixcblx0ICAgICAgICAgICAgXCLiq7FcIjogXCImdG9wY2lyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlaVcIjogXCImdG9wZjtcIixcblx0ICAgICAgICAgICAgXCLiq5pcIjogXCImdG9wZm9yaztcIixcblx0ICAgICAgICAgICAgXCLigLRcIjogXCImdHByaW1lO1wiLFxuXHQgICAgICAgICAgICBcIuKWtVwiOiBcIiZ1dHJpO1wiLFxuXHQgICAgICAgICAgICBcIuKJnFwiOiBcIiZ0cmllO1wiLFxuXHQgICAgICAgICAgICBcIuKXrFwiOiBcIiZ0cmlkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwi4qi6XCI6IFwiJnRyaW1pbnVzO1wiLFxuXHQgICAgICAgICAgICBcIuKouVwiOiBcIiZ0cmlwbHVzO1wiLFxuXHQgICAgICAgICAgICBcIuKnjVwiOiBcIiZ0cmlzYjtcIixcblx0ICAgICAgICAgICAgXCLiqLtcIjogXCImdHJpdGltZTtcIixcblx0ICAgICAgICAgICAgXCLij6JcIjogXCImdHJwZXppdW07XCIsXG5cdCAgICAgICAgICAgIFwi8J2TiVwiOiBcIiZ0c2NyO1wiLFxuXHQgICAgICAgICAgICBcItGGXCI6IFwiJnRzY3k7XCIsXG5cdCAgICAgICAgICAgIFwi0ZtcIjogXCImdHNoY3k7XCIsXG5cdCAgICAgICAgICAgIFwixadcIjogXCImdHN0cm9rO1wiLFxuXHQgICAgICAgICAgICBcIuKlo1wiOiBcIiZ1SGFyO1wiLFxuXHQgICAgICAgICAgICBcIsO6XCI6IFwiJnVhY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLRnlwiOiBcIiZ1YnJjeTtcIixcblx0ICAgICAgICAgICAgXCLFrVwiOiBcIiZ1YnJldmU7XCIsXG5cdCAgICAgICAgICAgIFwiw7tcIjogXCImdWNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi0YNcIjogXCImdWN5O1wiLFxuXHQgICAgICAgICAgICBcIsWxXCI6IFwiJnVkYmxhYztcIixcblx0ICAgICAgICAgICAgXCLipb5cIjogXCImdWZpc2h0O1wiLFxuXHQgICAgICAgICAgICBcIvCdlLJcIjogXCImdWZyO1wiLFxuXHQgICAgICAgICAgICBcIsO5XCI6IFwiJnVncmF2ZTtcIixcblx0ICAgICAgICAgICAgXCLiloBcIjogXCImdWhibGs7XCIsXG5cdCAgICAgICAgICAgIFwi4oycXCI6IFwiJnVsY29ybmVyO1wiLFxuXHQgICAgICAgICAgICBcIuKMj1wiOiBcIiZ1bGNyb3A7XCIsXG5cdCAgICAgICAgICAgIFwi4pe4XCI6IFwiJnVsdHJpO1wiLFxuXHQgICAgICAgICAgICBcIsWrXCI6IFwiJnVtYWNyO1wiLFxuXHQgICAgICAgICAgICBcIsWzXCI6IFwiJnVvZ29uO1wiLFxuXHQgICAgICAgICAgICBcIvCdlaZcIjogXCImdW9wZjtcIixcblx0ICAgICAgICAgICAgXCLPhVwiOiBcIiZ1cHNpbG9uO1wiLFxuXHQgICAgICAgICAgICBcIuKHiFwiOiBcIiZ1dWFycjtcIixcblx0ICAgICAgICAgICAgXCLijJ1cIjogXCImdXJjb3JuZXI7XCIsXG5cdCAgICAgICAgICAgIFwi4oyOXCI6IFwiJnVyY3JvcDtcIixcblx0ICAgICAgICAgICAgXCLFr1wiOiBcIiZ1cmluZztcIixcblx0ICAgICAgICAgICAgXCLil7lcIjogXCImdXJ0cmk7XCIsXG5cdCAgICAgICAgICAgIFwi8J2TilwiOiBcIiZ1c2NyO1wiLFxuXHQgICAgICAgICAgICBcIuKLsFwiOiBcIiZ1dGRvdDtcIixcblx0ICAgICAgICAgICAgXCLFqVwiOiBcIiZ1dGlsZGU7XCIsXG5cdCAgICAgICAgICAgIFwiw7xcIjogXCImdXVtbDtcIixcblx0ICAgICAgICAgICAgXCLipqdcIjogXCImdXdhbmdsZTtcIixcblx0ICAgICAgICAgICAgXCLiq6hcIjogXCImdkJhcjtcIixcblx0ICAgICAgICAgICAgXCLiq6lcIjogXCImdkJhcnY7XCIsXG5cdCAgICAgICAgICAgIFwi4qacXCI6IFwiJnZhbmdydDtcIixcblx0ICAgICAgICAgICAgXCLiiorvuIBcIjogXCImdnN1Ym5lO1wiLFxuXHQgICAgICAgICAgICBcIuKri++4gFwiOiBcIiZ2c3VibkU7XCIsXG5cdCAgICAgICAgICAgIFwi4oqL77iAXCI6IFwiJnZzdXBuZTtcIixcblx0ICAgICAgICAgICAgXCLiq4zvuIBcIjogXCImdnN1cG5FO1wiLFxuXHQgICAgICAgICAgICBcItCyXCI6IFwiJnZjeTtcIixcblx0ICAgICAgICAgICAgXCLiirtcIjogXCImdmVlYmFyO1wiLFxuXHQgICAgICAgICAgICBcIuKJmlwiOiBcIiZ2ZWVlcTtcIixcblx0ICAgICAgICAgICAgXCLii65cIjogXCImdmVsbGlwO1wiLFxuXHQgICAgICAgICAgICBcIvCdlLNcIjogXCImdmZyO1wiLFxuXHQgICAgICAgICAgICBcIvCdladcIjogXCImdm9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZOLXCI6IFwiJnZzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4qaaXCI6IFwiJnZ6aWd6YWc7XCIsXG5cdCAgICAgICAgICAgIFwixbVcIjogXCImd2NpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi4qmfXCI6IFwiJndlZGJhcjtcIixcblx0ICAgICAgICAgICAgXCLiiZlcIjogXCImd2VkZ2VxO1wiLFxuXHQgICAgICAgICAgICBcIuKEmFwiOiBcIiZ3cDtcIixcblx0ICAgICAgICAgICAgXCLwnZS0XCI6IFwiJndmcjtcIixcblx0ICAgICAgICAgICAgXCLwnZWoXCI6IFwiJndvcGY7XCIsXG5cdCAgICAgICAgICAgIFwi8J2TjFwiOiBcIiZ3c2NyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlLVcIjogXCImeGZyO1wiLFxuXHQgICAgICAgICAgICBcIs6+XCI6IFwiJnhpO1wiLFxuXHQgICAgICAgICAgICBcIuKLu1wiOiBcIiZ4bmlzO1wiLFxuXHQgICAgICAgICAgICBcIvCdlalcIjogXCImeG9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZONXCI6IFwiJnhzY3I7XCIsXG5cdCAgICAgICAgICAgIFwiw71cIjogXCImeWFjdXRlO1wiLFxuXHQgICAgICAgICAgICBcItGPXCI6IFwiJnlhY3k7XCIsXG5cdCAgICAgICAgICAgIFwixbdcIjogXCImeWNpcmM7XCIsXG5cdCAgICAgICAgICAgIFwi0YtcIjogXCImeWN5O1wiLFxuXHQgICAgICAgICAgICBcIsKlXCI6IFwiJnllbjtcIixcblx0ICAgICAgICAgICAgXCLwnZS2XCI6IFwiJnlmcjtcIixcblx0ICAgICAgICAgICAgXCLRl1wiOiBcIiZ5aWN5O1wiLFxuXHQgICAgICAgICAgICBcIvCdlapcIjogXCImeW9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZOOXCI6IFwiJnlzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi0Y5cIjogXCImeXVjeTtcIixcblx0ICAgICAgICAgICAgXCLDv1wiOiBcIiZ5dW1sO1wiLFxuXHQgICAgICAgICAgICBcIsW6XCI6IFwiJnphY3V0ZTtcIixcblx0ICAgICAgICAgICAgXCLFvlwiOiBcIiZ6Y2Fyb247XCIsXG5cdCAgICAgICAgICAgIFwi0LdcIjogXCImemN5O1wiLFxuXHQgICAgICAgICAgICBcIsW8XCI6IFwiJnpkb3Q7XCIsXG5cdCAgICAgICAgICAgIFwizrZcIjogXCImemV0YTtcIixcblx0ICAgICAgICAgICAgXCLwnZS3XCI6IFwiJnpmcjtcIixcblx0ICAgICAgICAgICAgXCLQtlwiOiBcIiZ6aGN5O1wiLFxuXHQgICAgICAgICAgICBcIuKHnVwiOiBcIiZ6aWdyYXJyO1wiLFxuXHQgICAgICAgICAgICBcIvCdlatcIjogXCImem9wZjtcIixcblx0ICAgICAgICAgICAgXCLwnZOPXCI6IFwiJnpzY3I7XCIsXG5cdCAgICAgICAgICAgIFwi4oCNXCI6IFwiJnp3ajtcIixcblx0ICAgICAgICAgICAgXCLigIxcIjogXCImenduajtcIlxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTsgXG5cdHJldHVybiBuYW1lZFJlZmVyZW5jZXM7XG59XG5cbnZhciBudW1lcmljVW5pY29kZU1hcCA9IHt9O1xuXG52YXIgaGFzUmVxdWlyZWROdW1lcmljVW5pY29kZU1hcDtcblxuZnVuY3Rpb24gcmVxdWlyZU51bWVyaWNVbmljb2RlTWFwICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkTnVtZXJpY1VuaWNvZGVNYXApIHJldHVybiBudW1lcmljVW5pY29kZU1hcDtcblx0aGFzUmVxdWlyZWROdW1lcmljVW5pY29kZU1hcCA9IDE7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShudW1lcmljVW5pY29kZU1hcCwgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRudW1lcmljVW5pY29kZU1hcC5udW1lcmljVW5pY29kZU1hcCA9IHtcblx0ICAgIDA6IDY1NTMzLFxuXHQgICAgMTI4OiA4MzY0LFxuXHQgICAgMTMwOiA4MjE4LFxuXHQgICAgMTMxOiA0MDIsXG5cdCAgICAxMzI6IDgyMjIsXG5cdCAgICAxMzM6IDgyMzAsXG5cdCAgICAxMzQ6IDgyMjQsXG5cdCAgICAxMzU6IDgyMjUsXG5cdCAgICAxMzY6IDcxMCxcblx0ICAgIDEzNzogODI0MCxcblx0ICAgIDEzODogMzUyLFxuXHQgICAgMTM5OiA4MjQ5LFxuXHQgICAgMTQwOiAzMzgsXG5cdCAgICAxNDI6IDM4MSxcblx0ICAgIDE0NTogODIxNixcblx0ICAgIDE0NjogODIxNyxcblx0ICAgIDE0NzogODIyMCxcblx0ICAgIDE0ODogODIyMSxcblx0ICAgIDE0OTogODIyNixcblx0ICAgIDE1MDogODIxMSxcblx0ICAgIDE1MTogODIxMixcblx0ICAgIDE1MjogNzMyLFxuXHQgICAgMTUzOiA4NDgyLFxuXHQgICAgMTU0OiAzNTMsXG5cdCAgICAxNTU6IDgyNTAsXG5cdCAgICAxNTY6IDMzOSxcblx0ICAgIDE1ODogMzgyLFxuXHQgICAgMTU5OiAzNzZcblx0fTsgXG5cdHJldHVybiBudW1lcmljVW5pY29kZU1hcDtcbn1cblxudmFyIHN1cnJvZ2F0ZVBhaXJzID0ge307XG5cbnZhciBoYXNSZXF1aXJlZFN1cnJvZ2F0ZVBhaXJzO1xuXG5mdW5jdGlvbiByZXF1aXJlU3Vycm9nYXRlUGFpcnMgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRTdXJyb2dhdGVQYWlycykgcmV0dXJuIHN1cnJvZ2F0ZVBhaXJzO1xuXHRoYXNSZXF1aXJlZFN1cnJvZ2F0ZVBhaXJzID0gMTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHN1cnJvZ2F0ZVBhaXJzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdHN1cnJvZ2F0ZVBhaXJzLmZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCB8fCBmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpIHtcblx0ICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludCAtIDY1NTM2KSAvIDEwMjQpICsgNTUyOTYsIChhc3RyYWxDb2RlUG9pbnQgLSA2NTUzNikgJSAxMDI0ICsgNTYzMjApO1xuXHR9O1xuXHRzdXJyb2dhdGVQYWlycy5nZXRDb2RlUG9pbnQgPSBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ID8gZnVuY3Rpb24oaW5wdXQsIHBvc2l0aW9uKSB7XG5cdCAgICByZXR1cm4gaW5wdXQuY29kZVBvaW50QXQocG9zaXRpb24pO1xuXHR9IDogZnVuY3Rpb24oaW5wdXQsIHBvc2l0aW9uKSB7XG5cdCAgICByZXR1cm4gKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pIC0gNTUyOTYpICogMTAyNCArIGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSAtIDU2MzIwICsgNjU1MzY7XG5cdH07XG5cdHN1cnJvZ2F0ZVBhaXJzLmhpZ2hTdXJyb2dhdGVGcm9tID0gNTUyOTY7XG5cdHN1cnJvZ2F0ZVBhaXJzLmhpZ2hTdXJyb2dhdGVUbyA9IDU2MzE5OyBcblx0cmV0dXJuIHN1cnJvZ2F0ZVBhaXJzO1xufVxuXG52YXIgaGFzUmVxdWlyZWRMaWI7XG5cbmZ1bmN0aW9uIHJlcXVpcmVMaWIgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRMaWIpIHJldHVybiBsaWI7XG5cdGhhc1JlcXVpcmVkTGliID0gMTtcblx0dmFyIF9fYXNzaWduID0gbGliICYmIGxpYi5fX2Fzc2lnbiB8fCBmdW5jdGlvbigpIHtcblx0ICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG5cdCAgICAgICAgZm9yKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspe1xuXHQgICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuXHQgICAgICAgICAgICBmb3IodmFyIHAgaW4gcylpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHQ7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdH07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsaWIsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0dmFyIG5hbWVkX3JlZmVyZW5jZXNfMSA9IHJlcXVpcmVOYW1lZFJlZmVyZW5jZXMoKTtcblx0dmFyIG51bWVyaWNfdW5pY29kZV9tYXBfMSA9IHJlcXVpcmVOdW1lcmljVW5pY29kZU1hcCgpO1xuXHR2YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlU3Vycm9nYXRlUGFpcnMoKTtcblx0dmFyIGFsbE5hbWVkUmVmZXJlbmNlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzKSwge1xuXHQgICAgYWxsOiBuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzLmh0bWw1XG5cdH0pO1xuXHRmdW5jdGlvbiByZXBsYWNlVXNpbmdSZWdFeHAobWFjcm9UZXh0LCBtYWNyb1JlZ0V4cCwgbWFjcm9SZXBsYWNlcikge1xuXHQgICAgbWFjcm9SZWdFeHAubGFzdEluZGV4ID0gMDtcblx0ICAgIHZhciByZXBsYWNlTWF0Y2ggPSBtYWNyb1JlZ0V4cC5leGVjKG1hY3JvVGV4dCk7XG5cdCAgICB2YXIgcmVwbGFjZVJlc3VsdDtcblx0ICAgIGlmIChyZXBsYWNlTWF0Y2gpIHtcblx0ICAgICAgICByZXBsYWNlUmVzdWx0ID0gXCJcIjtcblx0ICAgICAgICB2YXIgcmVwbGFjZUxhc3RJbmRleCA9IDA7XG5cdCAgICAgICAgZG8ge1xuXHQgICAgICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleCAhPT0gcmVwbGFjZU1hdGNoLmluZGV4KSB7XG5cdCAgICAgICAgICAgICAgICByZXBsYWNlUmVzdWx0ICs9IG1hY3JvVGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleCwgcmVwbGFjZU1hdGNoLmluZGV4KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgcmVwbGFjZUlucHV0ID0gcmVwbGFjZU1hdGNoWzBdO1xuXHQgICAgICAgICAgICByZXBsYWNlUmVzdWx0ICs9IG1hY3JvUmVwbGFjZXIocmVwbGFjZUlucHV0KTtcblx0ICAgICAgICAgICAgcmVwbGFjZUxhc3RJbmRleCA9IHJlcGxhY2VNYXRjaC5pbmRleCArIHJlcGxhY2VJbnB1dC5sZW5ndGg7XG5cdCAgICAgICAgfXdoaWxlIChyZXBsYWNlTWF0Y2ggPSBtYWNyb1JlZ0V4cC5leGVjKG1hY3JvVGV4dCkpXG5cdCAgICAgICAgaWYgKHJlcGxhY2VMYXN0SW5kZXggIT09IG1hY3JvVGV4dC5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgcmVwbGFjZVJlc3VsdCArPSBtYWNyb1RleHQuc3Vic3RyaW5nKHJlcGxhY2VMYXN0SW5kZXgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmVwbGFjZVJlc3VsdCA9IG1hY3JvVGV4dDtcblx0ICAgIH1cblx0ICAgIHJldHVybiByZXBsYWNlUmVzdWx0O1xuXHR9XG5cdHZhciBlbmNvZGVSZWdFeHBzID0ge1xuXHQgICAgc3BlY2lhbENoYXJzOiAvWzw+J1wiJl0vZyxcblx0ICAgIG5vbkFzY2lpOiAvWzw+J1wiJlxcdTAwODAtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS9nLFxuXHQgICAgbm9uQXNjaWlQcmludGFibGU6IC9bPD4nXCImXFx4MDEtXFx4MDhcXHgxMS1cXHgxNVxceDE3LVxceDFGXFx4N2YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS9nLFxuXHQgICAgbm9uQXNjaWlQcmludGFibGVPbmx5OiAvW1xceDAxLVxceDA4XFx4MTEtXFx4MTVcXHgxNy1cXHgxRlxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vZyxcblx0ICAgIGV4dGVuc2l2ZTogL1tcXHgwMS1cXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4MmNcXHgyZS1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3ZFxceDdmLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vZ1xuXHR9O1xuXHR2YXIgZGVmYXVsdEVuY29kZU9wdGlvbnMgPSB7XG5cdCAgICBtb2RlOiBcInNwZWNpYWxDaGFyc1wiLFxuXHQgICAgbGV2ZWw6IFwiYWxsXCIsXG5cdCAgICBudW1lcmljOiBcImRlY2ltYWxcIlxuXHR9O1xuXHRmdW5jdGlvbiBlbmNvZGUodGV4dCwgX2EpIHtcblx0ICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RW5jb2RlT3B0aW9ucyA6IF9hLCBfYyA9IF9iLm1vZGUsIG1vZGUgPSBfYyA9PT0gdm9pZCAwID8gXCJzcGVjaWFsQ2hhcnNcIiA6IF9jLCBfZCA9IF9iLm51bWVyaWMsIG51bWVyaWMgPSBfZCA9PT0gdm9pZCAwID8gXCJkZWNpbWFsXCIgOiBfZCwgX2UgPSBfYi5sZXZlbCwgbGV2ZWwgPSBfZSA9PT0gdm9pZCAwID8gXCJhbGxcIiA6IF9lO1xuXHQgICAgaWYgKCF0ZXh0KSB7XG5cdCAgICAgICAgcmV0dXJuIFwiXCI7XG5cdCAgICB9XG5cdCAgICB2YXIgZW5jb2RlUmVnRXhwID0gZW5jb2RlUmVnRXhwc1ttb2RlXTtcblx0ICAgIHZhciByZWZlcmVuY2VzID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5jaGFyYWN0ZXJzO1xuXHQgICAgdmFyIGlzSGV4ID0gbnVtZXJpYyA9PT0gXCJoZXhhZGVjaW1hbFwiO1xuXHQgICAgcmV0dXJuIHJlcGxhY2VVc2luZ1JlZ0V4cCh0ZXh0LCBlbmNvZGVSZWdFeHAsIGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHJlZmVyZW5jZXNbaW5wdXRdO1xuXHQgICAgICAgIGlmICghcmVzdWx0KSB7XG5cdCAgICAgICAgICAgIHZhciBjb2RlID0gaW5wdXQubGVuZ3RoID4gMSA/IHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChpbnB1dCwgMCkgOiBpbnB1dC5jaGFyQ29kZUF0KDApO1xuXHQgICAgICAgICAgICByZXN1bHQgPSAoaXNIZXggPyBcIiYjeFwiICsgY29kZS50b1N0cmluZygxNikgOiBcIiYjXCIgKyBjb2RlKSArIFwiO1wiO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfSk7XG5cdH1cblx0bGliLmVuY29kZSA9IGVuY29kZTtcblx0dmFyIGRlZmF1bHREZWNvZGVPcHRpb25zID0ge1xuXHQgICAgc2NvcGU6IFwiYm9keVwiLFxuXHQgICAgbGV2ZWw6IFwiYWxsXCJcblx0fTtcblx0dmFyIHN0cmljdCA9IC8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTsvZztcblx0dmFyIGF0dHJpYnV0ZSA9IC8mKD86I1xcZCt8I1t4WF1bXFxkYS1mQS1GXSt8WzAtOWEtekEtWl0rKVs7PV0/L2c7XG5cdHZhciBiYXNlRGVjb2RlUmVnRXhwcyA9IHtcblx0ICAgIHhtbDoge1xuXHQgICAgICAgIHN0cmljdDogc3RyaWN0LFxuXHQgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuXHQgICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy54bWxcblx0ICAgIH0sXG5cdCAgICBodG1sNDoge1xuXHQgICAgICAgIHN0cmljdDogc3RyaWN0LFxuXHQgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxuXHQgICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNFxuXHQgICAgfSxcblx0ICAgIGh0bWw1OiB7XG5cdCAgICAgICAgc3RyaWN0OiBzdHJpY3QsXG5cdCAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsXG5cdCAgICAgICAgYm9keTogbmFtZWRfcmVmZXJlbmNlc18xLmJvZHlSZWdFeHBzLmh0bWw1XG5cdCAgICB9XG5cdH07XG5cdHZhciBkZWNvZGVSZWdFeHBzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VEZWNvZGVSZWdFeHBzKSwge1xuXHQgICAgYWxsOiBiYXNlRGVjb2RlUmVnRXhwcy5odG1sNVxuXHR9KTtcblx0dmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdHZhciBvdXRPZkJvdW5kc0NoYXIgPSBmcm9tQ2hhckNvZGUoNjU1MzMpO1xuXHR2YXIgZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgPSB7XG5cdCAgICBsZXZlbDogXCJhbGxcIlxuXHR9O1xuXHRmdW5jdGlvbiBnZXREZWNvZGVkRW50aXR5KGVudGl0eSwgcmVmZXJlbmNlcywgaXNBdHRyaWJ1dGUsIGlzU3RyaWN0KSB7XG5cdCAgICB2YXIgZGVjb2RlUmVzdWx0ID0gZW50aXR5O1xuXHQgICAgdmFyIGRlY29kZUVudGl0eUxhc3RDaGFyID0gZW50aXR5W2VudGl0eS5sZW5ndGggLSAxXTtcblx0ICAgIGlmIChpc0F0dHJpYnV0ZSAmJiBkZWNvZGVFbnRpdHlMYXN0Q2hhciA9PT0gXCI9XCIpIHtcblx0ICAgICAgICBkZWNvZGVSZXN1bHQgPSBlbnRpdHk7XG5cdCAgICB9IGVsc2UgaWYgKGlzU3RyaWN0ICYmIGRlY29kZUVudGl0eUxhc3RDaGFyICE9PSBcIjtcIikge1xuXHQgICAgICAgIGRlY29kZVJlc3VsdCA9IGVudGl0eTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlID0gcmVmZXJlbmNlc1tlbnRpdHldO1xuXHQgICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZSkge1xuXHQgICAgICAgICAgICBkZWNvZGVSZXN1bHQgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGVudGl0eVswXSA9PT0gXCImXCIgJiYgZW50aXR5WzFdID09PSBcIiNcIikge1xuXHQgICAgICAgICAgICB2YXIgZGVjb2RlU2Vjb25kQ2hhciA9IGVudGl0eVsyXTtcblx0ICAgICAgICAgICAgdmFyIGRlY29kZUNvZGUgPSBkZWNvZGVTZWNvbmRDaGFyID09IFwieFwiIHx8IGRlY29kZVNlY29uZENoYXIgPT0gXCJYXCIgPyBwYXJzZUludChlbnRpdHkuc3Vic3RyKDMpLCAxNikgOiBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpKTtcblx0ICAgICAgICAgICAgZGVjb2RlUmVzdWx0ID0gZGVjb2RlQ29kZSA+PSAxMTE0MTExID8gb3V0T2ZCb3VuZHNDaGFyIDogZGVjb2RlQ29kZSA+IDY1NTM1ID8gc3Vycm9nYXRlX3BhaXJzXzEuZnJvbUNvZGVQb2ludChkZWNvZGVDb2RlKSA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV0gfHwgZGVjb2RlQ29kZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGRlY29kZVJlc3VsdDtcblx0fVxuXHRmdW5jdGlvbiBkZWNvZGVFbnRpdHkoZW50aXR5LCBfYSkge1xuXHQgICAgdmFyIF9iID0gKF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlRW50aXR5T3B0aW9ucyA6IF9hKS5sZXZlbCwgbGV2ZWwgPSBfYiA9PT0gdm9pZCAwID8gXCJhbGxcIiA6IF9iO1xuXHQgICAgaWYgKCFlbnRpdHkpIHtcblx0ICAgICAgICByZXR1cm4gXCJcIjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBnZXREZWNvZGVkRW50aXR5KGVudGl0eSwgYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllcywgZmFsc2UsIGZhbHNlKTtcblx0fVxuXHRsaWIuZGVjb2RlRW50aXR5ID0gZGVjb2RlRW50aXR5O1xuXHRmdW5jdGlvbiBkZWNvZGUodGV4dCwgX2EpIHtcblx0ICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlT3B0aW9ucyA6IF9hLCBfYyA9IF9iLmxldmVsLCBsZXZlbCA9IF9jID09PSB2b2lkIDAgPyBcImFsbFwiIDogX2MsIF9kID0gX2Iuc2NvcGUsIHNjb3BlID0gX2QgPT09IHZvaWQgMCA/IGxldmVsID09PSBcInhtbFwiID8gXCJzdHJpY3RcIiA6IFwiYm9keVwiIDogX2Q7XG5cdCAgICBpZiAoIXRleHQpIHtcblx0ICAgICAgICByZXR1cm4gXCJcIjtcblx0ICAgIH1cblx0ICAgIHZhciBkZWNvZGVSZWdFeHAgPSBkZWNvZGVSZWdFeHBzW2xldmVsXVtzY29wZV07XG5cdCAgICB2YXIgcmVmZXJlbmNlcyA9IGFsbE5hbWVkUmVmZXJlbmNlc1tsZXZlbF0uZW50aXRpZXM7XG5cdCAgICB2YXIgaXNBdHRyaWJ1dGUgPSBzY29wZSA9PT0gXCJhdHRyaWJ1dGVcIjtcblx0ICAgIHZhciBpc1N0cmljdCA9IHNjb3BlID09PSBcInN0cmljdFwiO1xuXHQgICAgcmV0dXJuIHJlcGxhY2VVc2luZ1JlZ0V4cCh0ZXh0LCBkZWNvZGVSZWdFeHAsIGZ1bmN0aW9uKGVudGl0eSkge1xuXHQgICAgICAgIHJldHVybiBnZXREZWNvZGVkRW50aXR5KGVudGl0eSwgcmVmZXJlbmNlcywgaXNBdHRyaWJ1dGUsIGlzU3RyaWN0KTtcblx0ICAgIH0pO1xuXHR9XG5cdGxpYi5kZWNvZGUgPSBkZWNvZGU7IFxuXHRyZXR1cm4gbGliO1xufVxuXG52YXIgbGliRXhwb3J0cyA9IC8qQF9fUFVSRV9fKi8gcmVxdWlyZUxpYigpO1xuXG52YXIgZCQxID0ge1xuICAgIHN0cmljdGx5VHdvRWxlbWVudHNJblJhbmdlQXJyYXlzOiBmYWxzZSxcbiAgICBwcm9ncmVzc0ZuOiBudWxsXG59O1xuZnVuY3Rpb24gZyh0LCB1KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHQpIHx8ICF0Lmxlbmd0aCkgcmV0dXJuIHQ7XG4gICAgbGV0IG4gPSB7XG4gICAgICAgIC4uLmQkMSxcbiAgICAgICAgLi4udVxuICAgIH0sIHMsIG87XG4gICAgaWYgKG4uc3RyaWN0bHlUd29FbGVtZW50c0luUmFuZ2VBcnJheXMgJiYgIXQuZXZlcnkoKGUsIHIpPT4hQXJyYXkuaXNBcnJheShlKSB8fCBlLmxlbmd0aCAhPT0gMiA/IChzID0gciwgbyA9IGUubGVuZ3RoLCBmYWxzZSkgOiB0cnVlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgcmFuZ2VzLXNvcnQ6IFtUSFJPV19JRF8wM10gVGhlIGZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSBhbmQgbXVzdCBjb25zaXN0IG9mIGFycmF5cyB3aGljaCBhcmUgbmF0dXJhbCBudW1iZXIgaW5kZXhlcyByZXByZXNlbnRpbmcgVFdPIHN0cmluZyBpbmRleCByYW5nZXMuIEhvd2V2ZXIsICR7c310aCByYW5nZSAoJHtKU09OLnN0cmluZ2lmeSh0W3NdLCBudWxsLCA0KX0pIGhhcyBub3QgdHdvIGJ1dCAke299IGVsZW1lbnRzIWApO1xuICAgIGlmICghdC5ldmVyeSgoZSwgcik9PiFBcnJheS5pc0FycmF5KGUpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGVbMF0pIHx8IGVbMF0gPCAwIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGVbMV0pIHx8IGVbMV0gPCAwID8gKHMgPSByLCBmYWxzZSkgOiB0cnVlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgcmFuZ2VzLXNvcnQ6IFtUSFJPV19JRF8wNF0gVGhlIGZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSBhbmQgbXVzdCBjb25zaXN0IG9mIGFycmF5cyB3aGljaCBhcmUgbmF0dXJhbCBudW1iZXIgaW5kZXhlcyByZXByZXNlbnRpbmcgc3RyaW5nIGluZGV4IHJhbmdlcy4gSG93ZXZlciwgJHtzfXRoIHJhbmdlICgke0pTT04uc3RyaW5naWZ5KHRbc10sIG51bGwsIDQpfSkgZG9lcyBub3QgY29uc2lzdCBvZiBvbmx5IG5hdHVyYWwgbnVtYmVycyFgKTtcbiAgICBsZXQgcCA9IHQubGVuZ3RoICoqIDIsIGkgPSAwO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHQpLnNvcnQoKGUsIHIpPT4obi5wcm9ncmVzc0ZuICYmIChpICs9IDEsIG4ucHJvZ3Jlc3NGbihNYXRoLmZsb29yKGkgKiAxMDAgLyBwKSkpLCBlWzBdID09PSByWzBdID8gZVsxXSA8IHJbMV0gPyAtMSA6IGVbMV0gPiByWzFdID8gMSA6IDAgOiBlWzBdIDwgclswXSA/IC0xIDogMSkpO1xufVxuXG52YXIgZCA9IHtcbiAgICBtZXJnZVR5cGU6IDEsXG4gICAgcHJvZ3Jlc3NGbjogbnVsbCxcbiAgICBqb2luUmFuZ2VzVGhhdFRvdWNoRWRnZXM6IHRydWVcbn07XG5mdW5jdGlvbiBiKGksIHIpIHtcbiAgICBmdW5jdGlvbiBsKGUpIHtcbiAgICAgICAgcmV0dXJuICEhZSAmJiB0eXBlb2YgZSA9PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGUpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaSkgfHwgIWkubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgbjtcbiAgICBpZiAocikgaWYgKGwocikpIHtcbiAgICAgICAgaWYgKG4gPSB7XG4gICAgICAgICAgICAuLi5kLFxuICAgICAgICAgICAgLi4uclxuICAgICAgICB9LCBuLnByb2dyZXNzRm4gJiYgbChuLnByb2dyZXNzRm4pICYmICFPYmplY3Qua2V5cyhuLnByb2dyZXNzRm4pLmxlbmd0aCkgbi5wcm9ncmVzc0ZuID0gbnVsbDtcbiAgICAgICAgZWxzZSBpZiAobi5wcm9ncmVzc0ZuICYmIHR5cGVvZiBuLnByb2dyZXNzRm4gIT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoYHJhbmdlcy1tZXJnZTogW1RIUk9XX0lEXzAxXSBvcHRzLnByb2dyZXNzRm4gbXVzdCBiZSBhIGZ1bmN0aW9uISBJdCB3YXMgZ2l2ZW4gb2YgYSB0eXBlOiBcIiR7dHlwZW9mIG4ucHJvZ3Jlc3NGbn1cIiwgZXF1YWwgdG8gJHtKU09OLnN0cmluZ2lmeShuLnByb2dyZXNzRm4sIG51bGwsIDQpfWApO1xuICAgICAgICBpZiAoIVtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgXCIxXCIsXG4gICAgICAgICAgICBcIjJcIlxuICAgICAgICBdLmluY2x1ZGVzKG4ubWVyZ2VUeXBlKSkgdGhyb3cgbmV3IEVycm9yKGByYW5nZXMtbWVyZ2U6IFtUSFJPV19JRF8wMl0gb3B0cy5tZXJnZVR5cGUgd2FzIGN1c3RvbWlzZWQgdG8gYSB3cm9uZyB0aGluZyEgSXQgd2FzIGdpdmVuIG9mIGEgdHlwZTogXCIke3R5cGVvZiBuLm1lcmdlVHlwZX1cIiwgZXF1YWwgdG8gJHtKU09OLnN0cmluZ2lmeShuLm1lcmdlVHlwZSwgbnVsbCwgNCl9YCk7XG4gICAgICAgIGlmICh0eXBlb2Ygbi5qb2luUmFuZ2VzVGhhdFRvdWNoRWRnZXMgIT0gXCJib29sZWFuXCIpIHRocm93IG5ldyBFcnJvcihgcmFuZ2VzLW1lcmdlOiBbVEhST1dfSURfMDRdIG9wdHMuam9pblJhbmdlc1RoYXRUb3VjaEVkZ2VzIHdhcyBjdXN0b21pc2VkIHRvIGEgd3JvbmcgdGhpbmchIEl0IHdhcyBnaXZlbiBvZiBhIHR5cGU6IFwiJHt0eXBlb2Ygbi5qb2luUmFuZ2VzVGhhdFRvdWNoRWRnZXN9XCIsIGVxdWFsIHRvICR7SlNPTi5zdHJpbmdpZnkobi5qb2luUmFuZ2VzVGhhdFRvdWNoRWRnZXMsIG51bGwsIDQpfWApO1xuICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoYGVtbGludDogW1RIUk9XX0lEXzAzXSB0aGUgc2Vjb25kIGlucHV0IGFyZ3VtZW50IG11c3QgYmUgYSBwbGFpbiBvYmplY3QuIEl0IHdhcyBnaXZlbiBhczpcbiR7SlNPTi5zdHJpbmdpZnkociwgbnVsbCwgNCl9ICh0eXBlICR7dHlwZW9mIHJ9KWApO1xuICAgIGVsc2UgbiA9IHtcbiAgICAgICAgLi4uZFxuICAgIH07XG4gICAgbGV0IGckMSA9IGkuZmlsdGVyKChlKT0+QXJyYXkuaXNBcnJheShlKSkubWFwKChlKT0+W1xuICAgICAgICAgICAgLi4uZVxuICAgICAgICBdKS5maWx0ZXIoKGUpPT5lWzJdICE9PSB2b2lkIDAgfHwgZVswXSAhPT0gZVsxXSksIHMsIG8sIHQ7XG4gICAgbi5wcm9ncmVzc0ZuID8gcyA9IGcoZyQxLCB7XG4gICAgICAgIHByb2dyZXNzRm46IChlKT0+e1xuICAgICAgICAgICAgdCA9IE1hdGguZmxvb3IoZSAvIDUpLCB0ICE9PSBvICYmIChvID0gdCwgbi5wcm9ncmVzc0ZuKHQpKTtcbiAgICAgICAgfVxuICAgIH0pIDogcyA9IGcoZyQxKTtcbiAgICBsZXQgYSA9IHMubGVuZ3RoIC0gMTtcbiAgICBmb3IobGV0IGUgPSBhOyBlID4gMDsgZS0tKW4ucHJvZ3Jlc3NGbiAmJiAodCA9IE1hdGguZmxvb3IoKDEgLSBlIC8gYSkgKiA3OCkgKyAyMSwgdCAhPT0gbyAmJiB0ID4gbyAmJiAobyA9IHQsIG4ucHJvZ3Jlc3NGbih0KSkpLCAoc1tlXVswXSA8PSBzW2UgLSAxXVswXSB8fCAhbi5qb2luUmFuZ2VzVGhhdFRvdWNoRWRnZXMgJiYgc1tlXVswXSA8IHNbZSAtIDFdWzFdIHx8IG4uam9pblJhbmdlc1RoYXRUb3VjaEVkZ2VzICYmIHNbZV1bMF0gPD0gc1tlIC0gMV1bMV0pICYmIChzW2UgLSAxXVswXSA9IE1hdGgubWluKHNbZV1bMF0sIHNbZSAtIDFdWzBdKSwgc1tlIC0gMV1bMV0gPSBNYXRoLm1heChzW2VdWzFdLCBzW2UgLSAxXVsxXSksIHNbZV1bMl0gIT09IHZvaWQgMCAmJiAoc1tlIC0gMV1bMF0gPj0gc1tlXVswXSB8fCBzW2UgLSAxXVsxXSA8PSBzW2VdWzFdKSAmJiBzW2UgLSAxXVsyXSAhPT0gbnVsbCAmJiAoc1tlXVsyXSA9PT0gbnVsbCAmJiBzW2UgLSAxXVsyXSAhPT0gbnVsbCA/IHNbZSAtIDFdWzJdID0gbnVsbCA6IHNbZSAtIDFdWzJdICE9IG51bGwgPyArbi5tZXJnZVR5cGUgPT0gMiAmJiBzW2UgLSAxXVswXSA9PT0gc1tlXVswXSA/IHNbZSAtIDFdWzJdID0gc1tlXVsyXSA6IHNbZSAtIDFdWzJdICs9IHNbZV1bMl0gOiBzW2UgLSAxXVsyXSA9IHNbZV1bMl0pLCBzLnNwbGljZShlLCAxKSwgZSA9IHMubGVuZ3RoKTtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzIDogbnVsbDtcbn1cblxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBwcmVmaXg7XG4gICAgdGhyb3cgbmV3IEVycm9yKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gXyhzLCBuLCByKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHRocm93IG5ldyBFcnJvcihcInJhbmdlcy1hcHBseTogW1RIUk9XX0lEXzAxXSBpbnB1dHMgbWlzc2luZyFcIik7XG4gICAgaWYgKHR5cGVvZiBzICE9IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoYHJhbmdlcy1hcHBseTogW1RIUk9XX0lEXzAyXSBmaXJzdCBpbnB1dCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nISBDdXJyZW50bHkgaXQnczogJHt0eXBlb2Ygc30sIGVxdWFsIHRvOiAke0pTT04uc3RyaW5naWZ5KHMsIG51bGwsIDQpfWApO1xuICAgIGlmIChuICYmICFBcnJheS5pc0FycmF5KG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKGByYW5nZXMtYXBwbHk6IFtUSFJPV19JRF8wM10gc2Vjb25kIGlucHV0IGFyZ3VtZW50IG11c3QgYmUgYW4gYXJyYXkgKG9yIG51bGwpISBDdXJyZW50bHkgaXQnczogJHt0eXBlb2Ygbn0sIGVxdWFsIHRvOiAke0pTT04uc3RyaW5naWZ5KG4sIG51bGwsIDQpfWApO1xuICAgIGlmICghbj8uZmlsdGVyKChlKT0+ZSkubGVuZ3RoKSByZXR1cm4gcztcbiAgICBsZXQgaTtcbiAgICBBcnJheS5pc0FycmF5KG4pICYmIE51bWJlci5pc0ludGVnZXIoblswXSkgJiYgTnVtYmVyLmlzSW50ZWdlcihuWzFdKSA/IGkgPSBbXG4gICAgICAgIEFycmF5LmZyb20obilcbiAgICBdIDogaSA9IEFycmF5LmZyb20obik7XG4gICAgaS5sZW5ndGg7XG4gICAgaS5maWx0ZXIoKGUpPT5lKS5mb3JFYWNoKChlLCBhKT0+e1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoYHJhbmdlcy1hcHBseTogW1RIUk9XX0lEXzA1XSByYW5nZXMgYXJyYXksIHNlY29uZCBpbnB1dCBhcmcuLCBoYXMgJHthfXRoIGVsZW1lbnQgbm90IGFuIGFycmF5OiAke0pTT04uc3RyaW5naWZ5KGUsIG51bGwsIDQpfSwgd2hpY2ggaXMgJHt0eXBlb2YgZX1gKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGVbMF0pKSB7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoK2VbMF0pIHx8ICtlWzBdIDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcihgcmFuZ2VzLWFwcGx5OiBbVEhST1dfSURfMDZdIHJhbmdlcyBhcnJheSwgc2Vjb25kIGlucHV0IGFyZy4gaGFzICR7YX10aCBlbGVtZW50LCBhcnJheSAke0pTT04uc3RyaW5naWZ5KGUsIG51bGwsIDApfS4gSXRzIGZpcnN0IGVsZW1lbnQgaXMgbm90IGFuIGludGVnZXIsIHN0cmluZyBpbmRleCwgYnV0ICR7dHlwZW9mIGVbMF19LCBlcXVhbCB0bzogJHtKU09OLnN0cmluZ2lmeShlWzBdLCBudWxsLCA0KX0uYCk7XG4gICAgICAgICAgICBpW2FdWzBdID0gK2lbYV1bMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGVbMV0pKSB7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoK2VbMV0pIHx8ICtlWzFdIDwgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcihgcmFuZ2VzLWFwcGx5OiBbVEhST1dfSURfMDddIHJhbmdlcyBhcnJheSwgc2Vjb25kIGlucHV0IGFyZy4gaGFzICR7YX10aCBlbGVtZW50LCBhcnJheSAke0pTT04uc3RyaW5naWZ5KGUsIG51bGwsIDApfS4gSXRzIHNlY29uZCBlbGVtZW50IGlzIG5vdCBhbiBpbnRlZ2VyLCBzdHJpbmcgaW5kZXgsIGJ1dCAke3R5cGVvZiBlWzFdfSwgZXF1YWwgdG86ICR7SlNPTi5zdHJpbmdpZnkoZVsxXSwgbnVsbCwgNCl9LmApO1xuICAgICAgICAgICAgaVthXVsxXSA9ICtpW2FdWzFdO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IG8gPSBiKGksIHtcbiAgICAgICAgcHJvZ3Jlc3NGbjogKGUpPT57XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpbnZhcmlhbnQobyk7XG4gICAgbGV0IHUgPSBvLmxlbmd0aDtcbiAgICBpZiAodSA+IDApIHtcbiAgICAgICAgbGV0IGUgPSBzLnNsaWNlKG9bdSAtIDFdWzFdKTtcbiAgICAgICAgcyA9IG8ucmVkdWNlKChhLCAkLCBsLCB5KT0+e1xuICAgICAgICAgICAgbGV0IGcgPSBsID09PSAwID8gMCA6IHlbbCAtIDFdWzFdLCBkID0geVtsXVswXTtcbiAgICAgICAgICAgIHJldHVybiBgJHthfSR7cy5zbGljZShnLCBkKX0ke3lbbF1bMl0gfHwgXCJcIn1gO1xuICAgICAgICB9LCBcIlwiKSwgcyArPSBlO1xuICAgIH1cbiAgICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gRCQxKG4sIHUgPSAxKSB7XG4gICAgbGV0ICQgPSBcIlxceEEwXCI7XG4gICAgZnVuY3Rpb24gZyhlKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGUpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwKGUsIHMsIHIpIHtcbiAgICAgICAgbGV0IHQgPSByID8gYFxuYCA6IFwiXFxyXCIsIGkgPSByID8gXCJcXHJcIiA6IGBcbmA7XG4gICAgICAgIGlmICghZSkgcmV0dXJuIGU7XG4gICAgICAgIGxldCBjID0gMCwgbyA9IFwiXCI7XG4gICAgICAgIGZvcihsZXQgbCA9IDAsIGYgPSBlLmxlbmd0aDsgbCA8IGY7IGwrKykoZVtsXSA9PT0gdCB8fCBlW2xdID09PSBpICYmIGVbbCAtIDFdICE9PSB0KSAmJiBjKyssIGBcXHJcbmAuaW5jbHVkZXMoZVtsXSkgfHwgZVtsXSA9PT0gJCA/IChlW2xdID09PSAkID8gbyArPSBlW2xdIDogZVtsXSA9PT0gdCA/IGMgPD0gcyAmJiAobyArPSBlW2xdLCBlW2wgKyAxXSA9PT0gaSAmJiAobyArPSBlW2wgKyAxXSwgbCsrKSkgOiBlW2xdID09PSBpICYmIGU/LltsIC0gMV0gIT09IHQgJiYgYyA8PSBzICYmIChvICs9IGVbbF0pKSA6ICghZVtsICsgMV0gJiYgIWMgJiYgKG8gKz0gXCIgXCIpKTtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbiA9PSBcInN0cmluZ1wiICYmIG4ubGVuZ3RoKSB7XG4gICAgICAgIGxldCBlID0gMTtcbiAgICAgICAgdHlwZW9mICt1ID09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzSW50ZWdlcigrdSkgJiYgK3UgPj0gMCAmJiAoZSA9ICt1KTtcbiAgICAgICAgbGV0IHMgPSBcIlwiLCByID0gXCJcIjtcbiAgICAgICAgaWYgKCFuLnRyaW0oKSkgcyA9IG47XG4gICAgICAgIGVsc2UgaWYgKCFuWzBdLnRyaW0oKSkge1xuICAgICAgICAgICAgZm9yKGxldCB0ID0gMCwgaSA9IG4ubGVuZ3RoOyB0IDwgaTsgdCsrKWlmIChuW3RdLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgIHMgPSBuLnNsaWNlKDAsIHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuLnRyaW0oKSAmJiAobi5zbGljZSgtMSkudHJpbSgpID09PSBcIlwiIHx8IG4uc2xpY2UoLTEpID09PSAkKSkge1xuICAgICAgICAgICAgZm9yKGxldCB0ID0gbi5sZW5ndGg7IHQtLTspaWYgKG5bdF0udHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgciA9IG4uc2xpY2UodCArIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtwKHMsIGUsIGZhbHNlKX0ke24udHJpbSgpfSR7ZyhwKGcociksIGUsIHRydWUpKX1gO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cblxudmFyIGYgPSB7XG4gICAgbWVyZ2VUeXBlOiAxLFxuICAgIHByb2dyZXNzRm46IG51bGwsXG4gICAgam9pblJhbmdlc1RoYXRUb3VjaEVkZ2VzOiB0cnVlXG59O1xuZnVuY3Rpb24gJChwLCB0KSB7XG4gICAgZnVuY3Rpb24gcihlKSB7XG4gICAgICAgIHJldHVybiAhIWUgJiYgdHlwZW9mIGUgPT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShlKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHApIHx8ICFwLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgbGV0IHM7XG4gICAgaWYgKHQpIGlmIChyKHQpKSB7XG4gICAgICAgIGlmIChzID0ge1xuICAgICAgICAgICAgLi4uZixcbiAgICAgICAgICAgIC4uLnRcbiAgICAgICAgfSwgcy5wcm9ncmVzc0ZuICYmIHIocy5wcm9ncmVzc0ZuKSAmJiAhT2JqZWN0LmtleXMocy5wcm9ncmVzc0ZuKS5sZW5ndGgpIHMucHJvZ3Jlc3NGbiA9IG51bGw7XG4gICAgICAgIGVsc2UgaWYgKHMucHJvZ3Jlc3NGbiAmJiB0eXBlb2Ygcy5wcm9ncmVzc0ZuICE9IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKGByYW5nZXMtbWVyZ2U6IFtUSFJPV19JRF8wMV0gcmVzb2x2ZWRPcHRzLnByb2dyZXNzRm4gbXVzdCBiZSBhIGZ1bmN0aW9uISBJdCB3YXMgZ2l2ZW4gb2YgYSB0eXBlOiBcIiR7dHlwZW9mIHMucHJvZ3Jlc3NGbn1cIiwgZXF1YWwgdG8gJHtKU09OLnN0cmluZ2lmeShzLnByb2dyZXNzRm4sIG51bGwsIDQpfWApO1xuICAgICAgICBpZiAoIVtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgXCIxXCIsXG4gICAgICAgICAgICBcIjJcIlxuICAgICAgICBdLmluY2x1ZGVzKHMubWVyZ2VUeXBlKSkgdGhyb3cgbmV3IEVycm9yKGByYW5nZXMtbWVyZ2U6IFtUSFJPV19JRF8wMl0gcmVzb2x2ZWRPcHRzLm1lcmdlVHlwZSB3YXMgY3VzdG9taXNlZCB0byBhIHdyb25nIHRoaW5nISBJdCB3YXMgZ2l2ZW4gb2YgYSB0eXBlOiBcIiR7dHlwZW9mIHMubWVyZ2VUeXBlfVwiLCBlcXVhbCB0byAke0pTT04uc3RyaW5naWZ5KHMubWVyZ2VUeXBlLCBudWxsLCA0KX1gKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzLmpvaW5SYW5nZXNUaGF0VG91Y2hFZGdlcyAhPSBcImJvb2xlYW5cIikgdGhyb3cgbmV3IEVycm9yKGByYW5nZXMtbWVyZ2U6IFtUSFJPV19JRF8wNF0gcmVzb2x2ZWRPcHRzLmpvaW5SYW5nZXNUaGF0VG91Y2hFZGdlcyB3YXMgY3VzdG9taXNlZCB0byBhIHdyb25nIHRoaW5nISBJdCB3YXMgZ2l2ZW4gb2YgYSB0eXBlOiBcIiR7dHlwZW9mIHMuam9pblJhbmdlc1RoYXRUb3VjaEVkZ2VzfVwiLCBlcXVhbCB0byAke0pTT04uc3RyaW5naWZ5KHMuam9pblJhbmdlc1RoYXRUb3VjaEVkZ2VzLCBudWxsLCA0KX1gKTtcbiAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBlbWxpbnQ6IFtUSFJPV19JRF8wM10gdGhlIHNlY29uZCBpbnB1dCBhcmd1bWVudCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LiBJdCB3YXMgZ2l2ZW4gYXM6XG4ke0pTT04uc3RyaW5naWZ5KHQsIG51bGwsIDQpfSAodHlwZSAke3R5cGVvZiB0fSlgKTtcbiAgICBlbHNlIHMgPSB7XG4gICAgICAgIC4uLmZcbiAgICB9O1xuICAgIGxldCBpID0gcC5maWx0ZXIoKGUpPT5BcnJheS5pc0FycmF5KGUpKS5tYXAoKGUpPT5bXG4gICAgICAgICAgICAuLi5lXG4gICAgICAgIF0pLmZpbHRlcigoZSk9PmVbMl0gIT09IHZvaWQgMCB8fCBlWzBdICE9PSBlWzFdKSwgbiwgbywgbDtcbiAgICBzLnByb2dyZXNzRm4gPyBuID0gZyhpLCB7XG4gICAgICAgIHByb2dyZXNzRm46IChlKT0+e1xuICAgICAgICAgICAgbCA9IE1hdGguZmxvb3IoZSAvIDUpLCBsICE9PSBvICYmIChvID0gbCwgcy5wcm9ncmVzc0ZuKGwpKTtcbiAgICAgICAgfVxuICAgIH0pIDogbiA9IGcoaSk7XG4gICAgbGV0IGggPSBuLmxlbmd0aCAtIDE7XG4gICAgZm9yKGxldCBlID0gaDsgZSA+IDA7IGUtLSlzLnByb2dyZXNzRm4gJiYgKGwgPSBNYXRoLmZsb29yKCgxIC0gZSAvIGgpICogNzgpICsgMjEsIGwgIT09IG8gJiYgbCA+IG8gJiYgKG8gPSBsLCBzLnByb2dyZXNzRm4obCkpKSwgKG5bZV1bMF0gPD0gbltlIC0gMV1bMF0gfHwgIXMuam9pblJhbmdlc1RoYXRUb3VjaEVkZ2VzICYmIG5bZV1bMF0gPCBuW2UgLSAxXVsxXSB8fCBzLmpvaW5SYW5nZXNUaGF0VG91Y2hFZGdlcyAmJiBuW2VdWzBdIDw9IG5bZSAtIDFdWzFdKSAmJiAobltlIC0gMV1bMF0gPSBNYXRoLm1pbihuW2VdWzBdLCBuW2UgLSAxXVswXSksIG5bZSAtIDFdWzFdID0gTWF0aC5tYXgobltlXVsxXSwgbltlIC0gMV1bMV0pLCBuW2VdWzJdICE9PSB2b2lkIDAgJiYgKG5bZSAtIDFdWzBdID49IG5bZV1bMF0gfHwgbltlIC0gMV1bMV0gPD0gbltlXVsxXSkgJiYgbltlIC0gMV1bMl0gIT09IG51bGwgJiYgKG5bZV1bMl0gPT09IG51bGwgJiYgbltlIC0gMV1bMl0gIT09IG51bGwgPyBuW2UgLSAxXVsyXSA9IG51bGwgOiBuW2UgLSAxXVsyXSAhPSBudWxsID8gK3MubWVyZ2VUeXBlID09IDIgJiYgbltlIC0gMV1bMF0gPT09IG5bZV1bMF0gPyBuW2UgLSAxXVsyXSA9IG5bZV1bMl0gOiBuW2UgLSAxXVsyXSArPSBuW2VdWzJdIDogbltlIC0gMV1bMl0gPSBuW2VdWzJdKSwgbi5zcGxpY2UoZSwgMSksIGUgPSBuLmxlbmd0aCk7XG4gICAgcmV0dXJuIG4ubGVuZ3RoID8gbiA6IG51bGw7XG59XG52YXIgUiA9IHtcbiAgICBsaW1pdFRvQmVBZGRlZFdoaXRlc3BhY2U6IGZhbHNlLFxuICAgIGxpbWl0TGluZWJyZWFrc0NvdW50OiAxLFxuICAgIG1lcmdlVHlwZTogMVxufSwgeSA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih0KXtcbiAgICAgICAgbGV0IHIkMSA9IHtcbiAgICAgICAgICAgIC4uLlIsXG4gICAgICAgICAgICAuLi50XG4gICAgICAgIH07XG4gICAgICAgIGlmIChyJDEubWVyZ2VUeXBlICYmIHIkMS5tZXJnZVR5cGUgIT09IDEgJiYgciQxLm1lcmdlVHlwZSAhPT0gMikgaWYgKHIociQxLm1lcmdlVHlwZSkgJiYgciQxLm1lcmdlVHlwZS50cmltKCkgPT09IFwiMVwiKSByJDEubWVyZ2VUeXBlID0gMTtcbiAgICAgICAgZWxzZSBpZiAocihyJDEubWVyZ2VUeXBlKSAmJiByJDEubWVyZ2VUeXBlLnRyaW0oKSA9PT0gXCIyXCIpIHIkMS5tZXJnZVR5cGUgPSAyO1xuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgcmFuZ2VzLXB1c2g6IFtUSFJPV19JRF8wMl0gb3B0cy5tZXJnZVR5cGUgd2FzIGN1c3RvbWlzZWQgdG8gYSB3cm9uZyB0aGluZyEgSXQgd2FzIGdpdmVuIG9mIGEgdHlwZTogXCIke3R5cGVvZiByJDEubWVyZ2VUeXBlfVwiLCBlcXVhbCB0byAke0pTT04uc3RyaW5naWZ5KHIkMS5tZXJnZVR5cGUsIG51bGwsIDQpfWApO1xuICAgICAgICB0aGlzLm9wdHMgPSByJDEsIHRoaXMucmFuZ2VzID0gW107XG4gICAgfVxuICAgIGFkZCh0LCByJDEsIHMpIHtcbiAgICAgICAgaWYgKHQgPT0gbnVsbCAmJiByJDEgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpZiAoRyQxKHQpICYmICFHJDEociQxKSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuc29tZSgobyk9PkFycmF5LmlzQXJyYXkobykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmZvckVhY2goKG8pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShvKSAmJiB0aGlzLmFkZCguLi5vKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHQubGVuZ3RoICYmIHEkMSgrdFswXSkgJiYgcSQxKCt0WzFdKSAmJiB0aGlzLmFkZCguLi50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgcmFuZ2VzLXB1c2gvUmFuZ2VzL2FkZCgpOiBbVEhST1dfSURfMTJdIHRoZSBmaXJzdCBpbnB1dCBhcmd1bWVudCwgXCJmcm9tXCIgaXMgc2V0ICgke0pTT04uc3RyaW5naWZ5KHQsIG51bGwsIDApfSkgYnV0IHNlY29uZC1vbmUsIFwidG9cIiBpcyBub3QgKCR7SlNPTi5zdHJpbmdpZnkociQxLCBudWxsLCAwKX0pYCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIUckMSh0KSAmJiBHJDEociQxKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgcmFuZ2VzLXB1c2gvUmFuZ2VzL2FkZCgpOiBbVEhST1dfSURfMTNdIHRoZSBzZWNvbmQgaW5wdXQgYXJndW1lbnQsIFwidG9cIiBpcyBzZXQgKCR7SlNPTi5zdHJpbmdpZnkociQxLCBudWxsLCAwKX0pIGJ1dCBmaXJzdC1vbmUsIFwiZnJvbVwiIGlzIG5vdCAoJHtKU09OLnN0cmluZ2lmeSh0LCBudWxsLCAwKX0pYCk7XG4gICAgICAgIGxldCBpID0gK3QsIG4gPSArciQxO1xuICAgICAgICBpZiAocSQxKHMpICYmIChzID0gU3RyaW5nKHMpKSwgcSQxKGkpICYmIHEkMShuKSkge1xuICAgICAgICAgICAgaWYgKEckMShzKSAmJiAhcihzKSAmJiAhcSQxKHMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKGByYW5nZXMtcHVzaC9SYW5nZXMvYWRkKCk6IFtUSFJPV19JRF8wOF0gVGhlIHRoaXJkIGFyZ3VtZW50LCB0aGUgdmFsdWUgdG8gYWRkLCB3YXMgZ2l2ZW4gbm90IGFzIHN0cmluZyBidXQgJHt0eXBlb2Ygc30sIGVxdWFsIHRvOlxuJHtKU09OLnN0cmluZ2lmeShzLCBudWxsLCA0KX1gKTtcbiAgICAgICAgICAgIGlmIChHJDEodGhpcy5yYW5nZXMpICYmIEFycmF5LmlzQXJyYXkodGhpcy5sYXN0KCkpICYmIGkgPT09IHRoaXMubGFzdCgpWzFdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGFzdCgpWzFdID0gbiwgdGhpcy5sYXN0KClbMl0sIHRoaXMubGFzdCgpWzJdICE9PSBudWxsICYmIEckMShzKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IHRoaXMubGFzdCgpWzJdICYmIHRoaXMubGFzdCgpWzJdLmxlbmd0aCAmJiAoIXRoaXMub3B0cz8ubWVyZ2VUeXBlIHx8IHRoaXMub3B0cy5tZXJnZVR5cGUgPT09IDEpID8gYCR7dGhpcy5sYXN0KClbMl19JHtzfWAgOiBzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdHMubGltaXRUb0JlQWRkZWRXaGl0ZXNwYWNlICYmIChvID0gRCQxKG8sIHRoaXMub3B0cy5saW1pdExpbmVicmVha3NDb3VudCkpLCByKG8pICYmICFvLmxlbmd0aCB8fCAodGhpcy5sYXN0KClbMl0gPSBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VzIHx8ICh0aGlzLnJhbmdlcyA9IFtdKTtcbiAgICAgICAgICAgICAgICBsZXQgbyA9IHMgIT09IHZvaWQgMCAmJiAhKHIocykgJiYgIXMubGVuZ3RoKSA/IFtcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAgICAgcyAmJiB0aGlzLm9wdHMubGltaXRUb0JlQWRkZWRXaGl0ZXNwYWNlID8gRCQxKHMsIHRoaXMub3B0cy5saW1pdExpbmVicmVha3NDb3VudCkgOiBzXG4gICAgICAgICAgICAgICAgXSA6IFtcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgblxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZXMucHVzaChvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHRocm93IHEkMShpKSAmJiBpID49IDAgPyBuZXcgVHlwZUVycm9yKGByYW5nZXMtcHVzaC9SYW5nZXMvYWRkKCk6IFtUSFJPV19JRF8xMF0gXCJ0b1wiIHZhbHVlLCB0aGUgc2Vjb25kIGlucHV0IGFyZ3VtZW50LCBtdXN0IGJlIGEgbmF0dXJhbCBudW1iZXIgb3IgemVybyEgQ3VycmVudGx5IGl0J3Mgb2YgYSB0eXBlIFwiJHt0eXBlb2Ygbn1cIiBlcXVhbCB0bzogJHtKU09OLnN0cmluZ2lmeShuLCBudWxsLCA0KX1gKSA6IG5ldyBUeXBlRXJyb3IoYHJhbmdlcy1wdXNoL1Jhbmdlcy9hZGQoKTogW1RIUk9XX0lEXzA5XSBcImZyb21cIiB2YWx1ZSwgdGhlIGZpcnN0IGlucHV0IGFyZ3VtZW50LCBtdXN0IGJlIGEgbmF0dXJhbCBudW1iZXIgb3IgemVybyEgQ3VycmVudGx5IGl0J3Mgb2YgYSB0eXBlIFwiJHt0eXBlb2YgaX1cIiBlcXVhbCB0bzogJHtKU09OLnN0cmluZ2lmeShpLCBudWxsLCA0KX1gKTtcbiAgICB9XG4gICAgcHVzaCh0LCByLCBzKSB7XG4gICAgICAgIHRoaXMuYWRkKHQsIHIsIHMpO1xuICAgIH1cbiAgICBjdXJyZW50KCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLnJhbmdlcykgJiYgdGhpcy5yYW5nZXMubGVuZ3RoID8gKHRoaXMucmFuZ2VzID0gJCh0aGlzLnJhbmdlcywge1xuICAgICAgICAgICAgbWVyZ2VUeXBlOiB0aGlzLm9wdHMubWVyZ2VUeXBlXG4gICAgICAgIH0pLCB0aGlzLnJhbmdlcyAmJiB0aGlzLm9wdHMubGltaXRUb0JlQWRkZWRXaGl0ZXNwYWNlID8gdGhpcy5yYW5nZXMubWFwKCh0KT0+RyQxKHRbMl0pID8gW1xuICAgICAgICAgICAgICAgIHRbMF0sXG4gICAgICAgICAgICAgICAgdFsxXSxcbiAgICAgICAgICAgICAgICBEJDEodFsyXSwgdGhpcy5vcHRzLmxpbWl0TGluZWJyZWFrc0NvdW50KVxuICAgICAgICAgICAgXSA6IHQpIDogdGhpcy5yYW5nZXMpIDogbnVsbDtcbiAgICB9XG4gICAgd2lwZSgpIHtcbiAgICAgICAgdGhpcy5yYW5nZXMgPSBbXTtcbiAgICB9XG4gICAgcmVwbGFjZSh0KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHQpICYmIHQubGVuZ3RoKSBpZiAoQXJyYXkuaXNBcnJheSh0WzBdKSAmJiBxJDEodFswXVswXSkpIHRoaXMucmFuZ2VzID0gQXJyYXkuZnJvbSh0KTtcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoYHJhbmdlcy1wdXNoL1Jhbmdlcy9yZXBsYWNlKCk6IFtUSFJPV19JRF8xMV0gU2luZ2xlIHJhbmdlIHdhcyBnaXZlbiBidXQgd2UgZXhwZWN0ZWQgYXJyYXkgb2YgYXJyYXlzISBUaGUgZmlyc3QgZWxlbWVudCwgJHtKU09OLnN0cmluZ2lmeSh0WzBdLCBudWxsLCA0KX0gc2hvdWxkIGJlIGFuIGFycmF5IGFuZCBpdHMgZmlyc3QgZWxlbWVudCBzaG91bGQgYmUgYW4gaW50ZWdlciwgYSBzdHJpbmcgaW5kZXguYCk7XG4gICAgICAgIGVsc2UgdGhpcy5yYW5nZXMgPSBbXTtcbiAgICB9XG4gICAgbGFzdCgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5yYW5nZXMpICYmIHRoaXMucmFuZ2VzLmxlbmd0aCA/IHRoaXMucmFuZ2VzW3RoaXMucmFuZ2VzLmxlbmd0aCAtIDFdIDogbnVsbDtcbiAgICB9XG59O1xuXG5JKCk7IHZhciBjID0gXCJcXHhBMFwiO1xuZnVuY3Rpb24gRCh7IHN0cjogbiwgaWR4OiBlID0gMCwgc3RvcEF0TmV3bGluZXM6IGwgPSBmYWxzZSwgc3RvcEF0UmF3TmJzcDogbyA9IGZhbHNlIH0pIHtcbiAgICBpZiAodHlwZW9mIG4gIT0gXCJzdHJpbmdcIiB8fCAhbi5sZW5ndGggfHwgKCghZSB8fCB0eXBlb2YgZSAhPSBcIm51bWJlclwiKSAmJiAoZSA9IDApLCAhbltlICsgMV0pKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobltlICsgMV0gJiYgKG5bZSArIDFdLnRyaW0oKSB8fCBsICYmIGBcblxccmAuaW5jbHVkZXMobltlICsgMV0pIHx8IG8gJiYgbltlICsgMV0gPT09IGMpKSByZXR1cm4gZSArIDE7XG4gICAgaWYgKG5bZSArIDJdICYmIChuW2UgKyAyXS50cmltKCkgfHwgbCAmJiBgXG5cXHJgLmluY2x1ZGVzKG5bZSArIDJdKSB8fCBvICYmIG5bZSArIDJdID09PSBjKSkgcmV0dXJuIGUgKyAyO1xuICAgIGZvcihsZXQgdCA9IGUgKyAxLCBtID0gbi5sZW5ndGg7IHQgPCBtOyB0KyspaWYgKG5bdF0udHJpbSgpIHx8IGwgJiYgYFxuXFxyYC5pbmNsdWRlcyhuW3RdKSB8fCBvICYmIG5bdF0gPT09IGMpIHJldHVybiB0O1xuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gRShuLCBlID0gMCkge1xuICAgIHJldHVybiBEKHtcbiAgICAgICAgc3RyOiBuLFxuICAgICAgICBpZHg6IGUsXG4gICAgICAgIHN0b3BBdE5ld2xpbmVzOiBmYWxzZSxcbiAgICAgICAgc3RvcEF0UmF3TmJzcDogZmFsc2VcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZWUodCkge1xuICAgIHJldHVybiAvWy1fQS1aYS16MC05XS8udGVzdCh0KTtcbn1cbmZ1bmN0aW9uIEcodCwgbSkge1xuICAgIGlmICghdCkgcmV0dXJuIFtdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHQpKSByZXR1cm4gdC5maWx0ZXIoKHkpPT50eXBlb2YgeSA9PSBcInN0cmluZ1wiICYmIHkudHJpbSgpKTtcbiAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikgcmV0dXJuIHQudHJpbSgpID8gW1xuICAgICAgICB0XG4gICAgXSA6IFtdO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHN0cmluZy1zdHJpcC1odG1sL3N0cmlwSHRtbCgpOiBbVEhST1dfSURfMDVdICR7bX0gbXVzdCBiZSBhcnJheSBjb250YWluaW5nIHplcm8gb3IgbW9yZSBzdHJpbmdzIG9yIHNvbWV0aGluZyBmYWxzZXkuIEN1cnJlbnRseSBpdCdzIGVxdWFsIHRvOiAke3R9LCB0aGF0IGEgdHlwZSBvZiAke3R5cGVvZiB0fS5gKTtcbn1cbmZ1bmN0aW9uIGoodCwgbSwgeSwgYykge1xuICAgIGZvcihsZXQgZiA9IG0sIGIgPSB0Lmxlbmd0aDsgZiA8IGI7IGYrKyl7XG4gICAgICAgIGlmICh0LnN0YXJ0c1dpdGgoeSwgZikpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAodC5zdGFydHNXaXRoKGMsIGYpKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIFkodCwgbSwgeSkge1xuICAgICF0Py5xdW90ZXM7ICEhdD8ucXVvdGVzPy52YWx1ZSAmJiAhaihtLCB5ICsgMSwgdC5xdW90ZXMudmFsdWUsIFwiPlwiKTsgdD8ucXVvdGVzPy5uZXh0ICE9PSAtMTsgIWoobSwgdD8ucXVvdGVzPy5uZXh0IC0gMSwgdD8ucXVvdGVzPy52YWx1ZSwgXCI+XCIpO1xuICAgIHJldHVybiAhdD8ucXVvdGVzIHx8ICFqKG0sIHkgKyAxLCB0LnF1b3Rlcy52YWx1ZSwgXCI+XCIpICYmIHQ/LnF1b3Rlcz8ubmV4dCAhPT0gLTEgJiYgaihtLCB0Py5xdW90ZXM/Lm5leHQgLSAxLCB0Py5xdW90ZXM/LnZhbHVlLCBcIj5cIik7XG59XG5mdW5jdGlvbiBuZSh0LCBtKSB7XG4gICAgcmV0dXJuIChtLm1hdGNoKG5ldyBSZWdFeHAodCwgXCJnXCIpKSB8fCBbXSkubGVuZ3RoO1xufVxudmFyIFAgPSBuZXcgU2V0KFtcbiAgICBcIiFkb2N0eXBlXCIsXG4gICAgXCJhYmJyXCIsXG4gICAgXCJhZGRyZXNzXCIsXG4gICAgXCJhcmVhXCIsXG4gICAgXCJhcnRpY2xlXCIsXG4gICAgXCJhc2lkZVwiLFxuICAgIFwiYXVkaW9cIixcbiAgICBcImJhc2VcIixcbiAgICBcImJkaVwiLFxuICAgIFwiYmRvXCIsXG4gICAgXCJibG9ja3F1b3RlXCIsXG4gICAgXCJib2R5XCIsXG4gICAgXCJiclwiLFxuICAgIFwiYnV0dG9uXCIsXG4gICAgXCJjYW52YXNcIixcbiAgICBcImNhcHRpb25cIixcbiAgICBcImNpdGVcIixcbiAgICBcImNvZGVcIixcbiAgICBcImNvbFwiLFxuICAgIFwiY29sZ3JvdXBcIixcbiAgICBcImRhdGFcIixcbiAgICBcImRhdGFsaXN0XCIsXG4gICAgXCJkZFwiLFxuICAgIFwiZGVsXCIsXG4gICAgXCJkZXRhaWxzXCIsXG4gICAgXCJkZm5cIixcbiAgICBcImRpYWxvZ1wiLFxuICAgIFwiZGl2XCIsXG4gICAgXCJkbFwiLFxuICAgIFwiZG9jdHlwZVwiLFxuICAgIFwiZHRcIixcbiAgICBcImVtXCIsXG4gICAgXCJlbWJlZFwiLFxuICAgIFwiZmllbGRzZXRcIixcbiAgICBcImZpZ2NhcHRpb25cIixcbiAgICBcImZpZ3VyZVwiLFxuICAgIFwiZm9vdGVyXCIsXG4gICAgXCJmb3JtXCIsXG4gICAgXCJoMVwiLFxuICAgIFwiaDJcIixcbiAgICBcImgzXCIsXG4gICAgXCJoNFwiLFxuICAgIFwiaDVcIixcbiAgICBcImg2XCIsXG4gICAgXCJoZWFkXCIsXG4gICAgXCJoZWFkZXJcIixcbiAgICBcImhncm91cFwiLFxuICAgIFwiaHJcIixcbiAgICBcImh0bWxcIixcbiAgICBcImlmcmFtZVwiLFxuICAgIFwiaW1nXCIsXG4gICAgXCJpbnB1dFwiLFxuICAgIFwiaW5zXCIsXG4gICAgXCJrYmRcIixcbiAgICBcImtleWdlblwiLFxuICAgIFwibGFiZWxcIixcbiAgICBcImxlZ2VuZFwiLFxuICAgIFwibGlcIixcbiAgICBcImxpbmtcIixcbiAgICBcIm1haW5cIixcbiAgICBcIm1hcFwiLFxuICAgIFwibWFya1wiLFxuICAgIFwibWF0aFwiLFxuICAgIFwibWVudVwiLFxuICAgIFwibWVudWl0ZW1cIixcbiAgICBcIm1ldGFcIixcbiAgICBcIm1ldGVyXCIsXG4gICAgXCJuYXZcIixcbiAgICBcIm5vc2NyaXB0XCIsXG4gICAgXCJvYmplY3RcIixcbiAgICBcIm9sXCIsXG4gICAgXCJvcHRncm91cFwiLFxuICAgIFwib3B0aW9uXCIsXG4gICAgXCJvdXRwdXRcIixcbiAgICBcInBhcmFtXCIsXG4gICAgXCJwaWN0dXJlXCIsXG4gICAgXCJwcmVcIixcbiAgICBcInByb2dyZXNzXCIsXG4gICAgXCJyYlwiLFxuICAgIFwicnBcIixcbiAgICBcInJ0XCIsXG4gICAgXCJydGNcIixcbiAgICBcInJ1YnlcIixcbiAgICBcInNhbXBcIixcbiAgICBcInNjcmlwdFwiLFxuICAgIFwic2VjdGlvblwiLFxuICAgIFwic2VsZWN0XCIsXG4gICAgXCJzbG90XCIsXG4gICAgXCJzbWFsbFwiLFxuICAgIFwic291cmNlXCIsXG4gICAgXCJzcGFuXCIsXG4gICAgXCJzdHJvbmdcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJzdWJcIixcbiAgICBcInN1bW1hcnlcIixcbiAgICBcInN1cFwiLFxuICAgIFwic3ZnXCIsXG4gICAgXCJ0YWJsZVwiLFxuICAgIFwidGJvZHlcIixcbiAgICBcInRkXCIsXG4gICAgXCJ0ZW1wbGF0ZVwiLFxuICAgIFwidGV4dGFyZWFcIixcbiAgICBcInRmb290XCIsXG4gICAgXCJ0aFwiLFxuICAgIFwidGhlYWRcIixcbiAgICBcInRpbWVcIixcbiAgICBcInRpdGxlXCIsXG4gICAgXCJ0clwiLFxuICAgIFwidHJhY2tcIixcbiAgICBcInVsXCIsXG4gICAgXCJ2YXJcIixcbiAgICBcInZpZGVvXCIsXG4gICAgXCJ3YnJcIixcbiAgICBcInhtbFwiXG5dKSwgeCA9IG5ldyBTZXQoW1xuICAgIFwiYVwiLFxuICAgIFwiYlwiLFxuICAgIFwiaVwiLFxuICAgIFwicFwiLFxuICAgIFwicVwiLFxuICAgIFwic1wiLFxuICAgIFwidVwiXG5dKSwgcSA9IG5ldyBTZXQoW1xuICAgIFwiLlwiLFxuICAgIFwiLFwiLFxuICAgIFwiO1wiLFxuICAgIFwiIVwiLFxuICAgIFwiP1wiXG5dKSwgUSA9IG5ldyBTZXQoW1xuICAgIFwiLlwiLFxuICAgIFwiLFwiLFxuICAgIFwiP1wiLFxuICAgIFwiO1wiLFxuICAgIFwiKVwiLFxuICAgIFwiXFx1MjAyNlwiLFxuICAgICdcIicsXG4gICAgXCJcXHhCQlwiXG5dKSwgdGUgPSBuZXcgU2V0KFtcbiAgICBcImFcIixcbiAgICBcImFiYnJcIixcbiAgICBcImFjcm9ueW1cIixcbiAgICBcImF1ZGlvXCIsXG4gICAgXCJiXCIsXG4gICAgXCJiZGlcIixcbiAgICBcImJkb1wiLFxuICAgIFwiYmlnXCIsXG4gICAgXCJidXR0b25cIixcbiAgICBcImNhbnZhc1wiLFxuICAgIFwiY2l0ZVwiLFxuICAgIFwiY29kZVwiLFxuICAgIFwiZGF0YVwiLFxuICAgIFwiZGF0YWxpc3RcIixcbiAgICBcImRlbFwiLFxuICAgIFwiZGZuXCIsXG4gICAgXCJlbVwiLFxuICAgIFwiZW1iZWRcIixcbiAgICBcImlcIixcbiAgICBcImlmcmFtZVwiLFxuICAgIFwiaW5wdXRcIixcbiAgICBcImluc1wiLFxuICAgIFwia2JkXCIsXG4gICAgXCJsYWJlbFwiLFxuICAgIFwibWFwXCIsXG4gICAgXCJtYXJrXCIsXG4gICAgXCJtZXRlclwiLFxuICAgIFwibm9zY3JpcHRcIixcbiAgICBcIm9iamVjdFwiLFxuICAgIFwib3V0cHV0XCIsXG4gICAgXCJwaWN0dXJlXCIsXG4gICAgXCJwcm9ncmVzc1wiLFxuICAgIFwicVwiLFxuICAgIFwicnVieVwiLFxuICAgIFwic1wiLFxuICAgIFwic2FtcFwiLFxuICAgIFwic2VsZWN0XCIsXG4gICAgXCJzbG90XCIsXG4gICAgXCJzbWFsbFwiLFxuICAgIFwic3BhblwiLFxuICAgIFwic3Ryb25nXCIsXG4gICAgXCJzdWJcIixcbiAgICBcInN1cFwiLFxuICAgIFwic3ZnXCIsXG4gICAgXCJ0ZW1wbGF0ZVwiLFxuICAgIFwidGV4dGFyZWFcIixcbiAgICBcInRpbWVcIixcbiAgICBcInVcIixcbiAgICBcInR0XCIsXG4gICAgXCJ2YXJcIixcbiAgICBcInZpZGVvXCIsXG4gICAgXCJ3YnJcIlxuXSk7XG52YXIgYWUgPSB7XG4gICAgaWdub3JlVGFnczogW10sXG4gICAgaWdub3JlVGFnc1dpdGhUaGVpckNvbnRlbnRzOiBbXSxcbiAgICBvbmx5U3RyaXBUYWdzOiBbXSxcbiAgICBzdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHM6IFtcbiAgICAgICAgXCJzY3JpcHRcIixcbiAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICBcInhtbFwiXG4gICAgXSxcbiAgICBza2lwSHRtbERlY29kaW5nOiBmYWxzZSxcbiAgICB0cmltT25seVNwYWNlczogZmFsc2UsXG4gICAgc3RyaXBSZWNvZ25pc2VkSFRNTE9ubHk6IGZhbHNlLFxuICAgIGR1bXBMaW5rSHJlZnNOZWFyYnk6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHB1dE9uTmV3TGluZTogZmFsc2UsXG4gICAgICAgIHdyYXBIZWFkczogXCJcIixcbiAgICAgICAgd3JhcFRhaWxzOiBcIlwiXG4gICAgfSxcbiAgICBpZ25vcmVJbmRlbnRhdGlvbnM6IGZhbHNlLFxuICAgIGNiOiBudWxsLFxuICAgIHJlcG9ydFByb2dyZXNzRnVuYzogbnVsbCxcbiAgICByZXBvcnRQcm9ncmVzc0Z1bmNGcm9tOiAwLFxuICAgIHJlcG9ydFByb2dyZXNzRnVuY1RvOiAxMDBcbn07XG5mdW5jdGlvbiBmZSh0LCBtKSB7XG4gICAgbGV0IHkkMSA9IERhdGUubm93KCksIGMgPSBbXSwgZiA9IFtdLCBiID0gW10sICQgPSBbXSwgbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHJlKCkge1xuICAgICAgICBuID0ge1xuICAgICAgICAgICAgYXR0cmlidXRlczogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmUoKTtcbiAgICBsZXQgViA9IG51bGwsIHcgPSBudWxsLCBOID0gbnVsbCwgSiA9IGZhbHNlLCBvID0ge30sIGQgPSB7XG4gICAgICAgIHRhZ05hbWU6IFwiXCIsXG4gICAgICAgIGhyZWZWYWx1ZTogXCJcIixcbiAgICAgICAgb3BlbmluZ1RhZ0VuZHM6IHZvaWQgMFxuICAgIH0sIEUkMSA9IFwiXCIsIEMgPSBmYWxzZSwgQiA9IG51bGwsIEYgPSB0cnVlO1xuICAgIGZ1bmN0aW9uIHYkMShlLCBzLCBhKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHMuc3RyaXBUb2dldGhlcldpdGhUaGVpckNvbnRlbnRzKSAmJiAocy5zdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHMuaW5jbHVkZXMobi5uYW1lKSB8fCBzLnN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50cy5pbmNsdWRlcyhcIipcIikpKSBpZiAobi5zbGFzaFByZXNlbnQgJiYgQXJyYXkuaXNBcnJheShjKSAmJiBjLnNvbWUoKGkpPT5pLm5hbWUgPT09IG4ubmFtZSkpIHtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IGMubGVuZ3RoOyBpLS07KWlmIChjW2ldLm5hbWUgPT09IG4ubmFtZSkge1xuICAgICAgICAgICAgICAgICQgPSAkLmZpbHRlcigoW3UsIHBdKT0+KHUgPCBjW2ldLmxhc3RPcGVuaW5nQnJhY2tldEF0IHx8IHUgPj0gZSArIDEpICYmIChwIDw9IGNbaV0ubGFzdE9wZW5pbmdCcmFja2V0QXQgfHwgcCA+IGUgKyAxKSk7XG4gICAgICAgICAgICAgICAgbGV0IGcgPSBlICsgMTtcbiAgICAgICAgICAgICAgICBuLmxhc3RDbG9zaW5nQnJhY2tldEF0ICYmIChnID0gbi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCArIDEpLCAkLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICBjW2ldLmxhc3RPcGVuaW5nQnJhY2tldEF0LFxuICAgICAgICAgICAgICAgICAgICBnXG4gICAgICAgICAgICAgICAgXSksIFEuaGFzKHRbZV0pICYmIHMuY2IgPyBzLmNiKHtcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBuLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGcm9tOiBjW2ldLmxhc3RPcGVuaW5nQnJhY2tldEF0LFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVUbzogZSArIDEsXG4gICAgICAgICAgICAgICAgICAgIGluc2VydDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzQXJyOiBhLFxuICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFJldHVybjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgY1tpXS5sYXN0T3BlbmluZ0JyYWNrZXRBdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSA6IHMuY2IgJiYgcy5jYih7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogbixcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlRnJvbTogY1tpXS5sYXN0T3BlbmluZ0JyYWNrZXRBdCxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlVG86IGUsXG4gICAgICAgICAgICAgICAgICAgIGluc2VydDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzQXJyOiBhLFxuICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFJldHVybjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgY1tpXS5sYXN0T3BlbmluZ0JyYWNrZXRBdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSwgYy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBuLnNsYXNoUHJlc2VudCB8fCBjLnB1c2gobik7XG4gICAgICAgIGVsc2UgQXJyYXkuaXNBcnJheShzLmlnbm9yZVRhZ3NXaXRoVGhlaXJDb250ZW50cykgJiYgTShlLCBzLCBuKSAmJiAoRiA9IGZhbHNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gTChlLCBzLCBhLCBpLCBnLCB1KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHIuY3VycmVudCgpKSAmJiB0eXBlb2YgYSA9PSBcIm51bWJlclwiICYmIHIuY3VycmVudCgpWzBdWzBdID09PSAwICYmIHIuY3VycmVudCgpWzBdWzFdID49IGEpIHJldHVybiBcIlwiO1xuICAgICAgICBpZiAodC5sZW5ndGggPT09IGkgJiYgdSAmJiAhbD8uZHVtcExpbmtIcmVmc05lYXJieT8uZW5hYmxlZCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBwID0gXCJcIjtcbiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoYSkgJiYgYSA8IGcgJiYgKHAgKz0gZS5zbGljZShhLCBnKSksIE51bWJlci5pc0ludGVnZXIoaSkgJiYgaSA+IHUgKyAxKSB7XG4gICAgICAgICAgICBsZXQgRCA9IGUuc2xpY2UodSArIDEsIGkpO1xuICAgICAgICAgICAgaSAmJiAhRSh0LCBpIC0gMSkgJiYgKEQgPSBELnRyaW1FbmQoKSksIEQuaW5jbHVkZXMoYFxuYCkgJiYgUyhpLCBlKSA/IHAgKz0gXCIgXCIgOiBwICs9IEQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IFcgPSAhUS5oYXMoZVtzXSksIFogPSBlW2kgLSAxXSAhPT0gXCI+XCIgfHwgIWVbYV0udHJpbSgpLCBYID0gIVtcbiAgICAgICAgICAgICdcIicsXG4gICAgICAgICAgICBcIihcIlxuICAgICAgICBdLmluY2x1ZGVzKGVbZyAtIDFdKSwgZ2UgPSAhW1xuICAgICAgICAgICAgXCI7XCIsXG4gICAgICAgICAgICBcIi5cIixcbiAgICAgICAgICAgIFwiOlwiLFxuICAgICAgICAgICAgXCIhXCJcbiAgICAgICAgXS5pbmNsdWRlcyhlW3NdKTtcbiAgICAgICAgaWYgKChXIHx8IFogJiYgWCAmJiBnZSkgJiYgKFogfHwgWCkgJiYgZVtzXSAhPT0gXCIhXCIgJiYgKCF0ZS5oYXMobi5uYW1lKSB8fCB0eXBlb2YgYSA9PSBcIm51bWJlclwiICYmIGEgPCBnIHx8IHR5cGVvZiBpID09IFwibnVtYmVyXCIgJiYgaSA+IHUgKyAxKSkge1xuICAgICAgICAgICAgbGV0IEQgPSBwLm1hdGNoKC9cXG4vZyk7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShEKSAmJiBELmxlbmd0aCA/IEQubGVuZ3RoID09PSAxID8gYFxuYCA6IEQubGVuZ3RoID09PSAyID8gYFxuXG5gIDogYFxuXG5cbmAgOiBcIiBcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gVShlLCBzKSB7XG4gICAgICAgIGlmIChlLmR1bXBMaW5rSHJlZnNOZWFyYnk/LmVuYWJsZWQgJiYgZC50YWdOYW1lICYmIGQudGFnTmFtZSA9PT0gbi5uYW1lICYmIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgJiYgKGQub3BlbmluZ1RhZ0VuZHMgJiYgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCA+IGQub3BlbmluZ1RhZ0VuZHMgfHwgIWQub3BlbmluZ1RhZ0VuZHMpICYmIChDID0gdHJ1ZSksIEMpIHtcbiAgICAgICAgICAgIGxldCBhID0gZS5kdW1wTGlua0hyZWZzTmVhcmJ5Py5wdXRPbk5ld0xpbmUgPyBgXG5cbmAgOiBcIlwiO1xuICAgICAgICAgICAgRSQxID0gYCR7YX0ke2QuaHJlZlZhbHVlfWAsICh0eXBlb2YgcyAhPSBcIm51bWJlclwiIHx8IEUodCwgcyAtIDEpKSAmJiAoRSQxICs9IGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIFMoZSwgcykge1xuICAgICAgICByZXR1cm4gcyA/IHNbZV0gPT09IFwiPFwiICYmIHNbZSArIDFdICE9PSBcIiVcIiA6IHRbZV0gPT09IFwiPFwiICYmIHRbZSArIDFdICE9PSBcIiVcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gQShlKSB7XG4gICAgICAgIHJldHVybiB0W2VdID09PSBcIj5cIiAmJiB0W2UgLSAxXSAhPT0gXCIlXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIE0oZSwgcywgYSkge1xuICAgICAgICBpZiAocy5pZ25vcmVUYWdzV2l0aFRoZWlyQ29udGVudHMuaW5jbHVkZXMoXCIqXCIpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgbGV0IGkgPSB0LmluZGV4T2YoYDwke2EubmFtZX1gLCBlKSwgZyA9IHQuaW5kZXhPZihgPC8ke2EubmFtZX1gLCBlKTtcbiAgICAgICAgcmV0dXJuICFhLnNsYXNoUHJlc2VudCAmJiBnID09PSAtMSB8fCBhLnNsYXNoUHJlc2VudCAmJiAhZi5zb21lKCh1KT0+dS5uYW1lID09PSBhLm5hbWUpIHx8IGcgPiAtMSAmJiBpID4gLTEgJiYgaSA8IGcgPyBmYWxzZSA6IHMuaWdub3JlVGFnc1dpdGhUaGVpckNvbnRlbnRzLmluY2x1ZGVzKGEubmFtZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdCAhPSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBzdHJpbmctc3RyaXAtaHRtbC9zdHJpcEh0bWwoKTogW1RIUk9XX0lEXzAxXSBJbnB1dCBtdXN0IGJlIHN0cmluZyEgQ3VycmVudGx5IGl0J3M6ICR7KHR5cGVvZiB0KS50b0xvd2VyQ2FzZSgpfSwgZXF1YWwgdG86XG4ke0pTT04uc3RyaW5naWZ5KHQsIG51bGwsIDQpfWApO1xuICAgIGlmIChtKSBpZiAodShtKSkge1xuICAgICAgICBpZiAobS5yZXBvcnRQcm9ncmVzc0Z1bmMgJiYgdHlwZW9mIG0ucmVwb3J0UHJvZ3Jlc3NGdW5jICE9IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKGBzdHJpbmctc3RyaXAtaHRtbC9zdHJpcEh0bWwoKTogW1RIUk9XX0lEXzAzXSBUaGUgT3B0aW9uYWwgT3B0aW9ucyBPYmplY3QncyBrZXkgcmVwb3J0UHJvZ3Jlc3NGdW5jLCBjYWxsYmFjayBmdW5jdGlvbiwgc2hvdWxkIGJlIGEgZnVuY3Rpb24gYnV0IGl0IHdhcyBnaXZlbiBhcyB0eXBlICR7dHlwZW9mIG0ucmVwb3J0UHJvZ3Jlc3NGdW5jfSwgZXF1YWwgdG8gJHtKU09OLnN0cmluZ2lmeShtLnJlcG9ydFByb2dyZXNzRnVuYywgbnVsbCwgNCl9YCk7XG4gICAgICAgIGlmICh0eXBlb2YgbS5kdW1wTGlua0hyZWZzTmVhcmJ5ID09IFwiYm9vbGVhblwiICYmIG0uZHVtcExpbmtIcmVmc05lYXJieSAhPSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoYHN0cmluZy1zdHJpcC1odG1sL3N0cmlwSHRtbCgpOiBbVEhST1dfSURfMDRdIFRoZSBPcHRpb25hbCBPcHRpb25zIE9iamVjdCdzIGtleSBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QgYnV0IGl0IHdhcyBnaXZlbiBhcyB0eXBlICR7dHlwZW9mIG0uZHVtcExpbmtIcmVmc05lYXJieX0sIGVxdWFsIHRvICR7SlNPTi5zdHJpbmdpZnkobS5kdW1wTGlua0hyZWZzTmVhcmJ5LCBudWxsLCA0KX1gKTtcbiAgICB9IGVsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcihgc3RyaW5nLXN0cmlwLWh0bWwvc3RyaXBIdG1sKCk6IFtUSFJPV19JRF8wMl0gT3B0aW9uYWwgT3B0aW9ucyBPYmplY3QgbXVzdCBiZSBhIHBsYWluIG9iamVjdCEgQ3VycmVudGx5IGl0J3M6ICR7KHR5cGVvZiBtKS50b0xvd2VyQ2FzZSgpfSwgZXF1YWwgdG86XG4ke0pTT04uc3RyaW5naWZ5KG0sIG51bGwsIDQpfWApO1xuICAgIGZ1bmN0aW9uIF8kMSgpIHtcbiAgICAgICAgQyAmJiAoZCA9IHtcbiAgICAgICAgICAgIHRhZ05hbWU6IFwiXCIsXG4gICAgICAgICAgICBocmVmVmFsdWU6IFwiXCIsXG4gICAgICAgICAgICBvcGVuaW5nVGFnRW5kczogdm9pZCAwXG4gICAgICAgIH0sIEMgPSBmYWxzZSk7XG4gICAgfVxuICAgIGxldCBsID0ge1xuICAgICAgICAuLi5hZSxcbiAgICAgICAgLi4ubSxcbiAgICAgICAgZHVtcExpbmtIcmVmc05lYXJieTogT2JqZWN0LmFzc2lnbih7fSwgYWUuZHVtcExpbmtIcmVmc05lYXJieSwgbT8uZHVtcExpbmtIcmVmc05lYXJieSlcbiAgICB9O1xuICAgIGlmICh2KGwsIFwicmV0dXJuUmFuZ2VzT25seVwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcInN0cmluZy1zdHJpcC1odG1sL3N0cmlwSHRtbCgpOiBbVEhST1dfSURfMDVdIFRoZSBPcHRpb25hbCBPcHRpb25zIE9iamVjdCdzIGtleSByZXR1cm5SYW5nZXNPbmx5IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQVBJIHNpbmNlIHYuNSByZWxlYXNlLlwiKTtcbiAgICBpZiAobC5yZXBvcnRQcm9ncmVzc0Z1bmMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsLnJlcG9ydFByb2dyZXNzRnVuY0Zyb20gIT0gXCJudW1iZXJcIikgdGhyb3cgbmV3IEVycm9yKGBzdHJpbmctc3RyaXAtaHRtbC9zdHJpcEh0bWwoKTogW1RIUk9XX0lEXzA2XSBUaGUgT3B0aW9uYWwgT3B0aW9ucyBPYmplY3QncyBrZXkgcmVwb3J0UHJvZ3Jlc3NGdW5jRnJvbSwgY2FsbGJhY2sgZnVuY3Rpb24ncyBcImZyb21cIiByYW5nZSwgc2hvdWxkIGJlIGEgbnVtYmVyIGJ1dCBpdCB3YXMgZ2l2ZW4gYXMgdHlwZSAke3R5cGVvZiBsLnJlcG9ydFByb2dyZXNzRnVuY0Zyb219LCBlcXVhbCB0byAke0pTT04uc3RyaW5naWZ5KGwucmVwb3J0UHJvZ3Jlc3NGdW5jRnJvbSwgbnVsbCwgNCl9YCk7XG4gICAgICAgIGlmICh0eXBlb2YgbC5yZXBvcnRQcm9ncmVzc0Z1bmNUbyAhPSBcIm51bWJlclwiKSB0aHJvdyBuZXcgRXJyb3IoYHN0cmluZy1zdHJpcC1odG1sL3N0cmlwSHRtbCgpOiBbVEhST1dfSURfMDddIFRoZSBPcHRpb25hbCBPcHRpb25zIE9iamVjdCdzIGtleSByZXBvcnRQcm9ncmVzc0Z1bmNUbywgY2FsbGJhY2sgZnVuY3Rpb24ncyBcInRvXCIgcmFuZ2UsIHNob3VsZCBiZSBhIG51bWJlciBidXQgaXQgd2FzIGdpdmVuIGFzIHR5cGUgJHt0eXBlb2YgbC5yZXBvcnRQcm9ncmVzc0Z1bmNUb30sIGVxdWFsIHRvICR7SlNPTi5zdHJpbmdpZnkobC5yZXBvcnRQcm9ncmVzc0Z1bmNUbywgbnVsbCwgNCl9YCk7XG4gICAgfVxuICAgIGwuaWdub3JlVGFncyA9IEcobC5pZ25vcmVUYWdzLCBcInJlc29sdmVkT3B0cy5pZ25vcmVUYWdzXCIpLCBsLm9ubHlTdHJpcFRhZ3MgPSBHKGwub25seVN0cmlwVGFncywgXCJyZXNvbHZlZE9wdHMub25seVN0cmlwVGFnc1wiKTtcbiAgICBsZXQgeiA9ICEhbC5vbmx5U3RyaXBUYWdzLmxlbmd0aDtcbiAgICBsLm9ubHlTdHJpcFRhZ3MubGVuZ3RoICYmIGwuaWdub3JlVGFncy5sZW5ndGggJiYgKGwub25seVN0cmlwVGFncyA9IHdpdGhvdXQobC5vbmx5U3RyaXBUYWdzLCAuLi5sLmlnbm9yZVRhZ3MpKSwgbC5zdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHMgPyB0eXBlb2YgbC5zdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHMgPT0gXCJzdHJpbmdcIiAmJiBsLnN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50cy5sZW5ndGggJiYgKGwuc3RyaXBUb2dldGhlcldpdGhUaGVpckNvbnRlbnRzID0gW1xuICAgICAgICBsLnN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50c1xuICAgIF0pIDogbC5zdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHMgPSBbXTtcbiAgICBsZXQgSSA9IHt9O1xuICAgIGlmIChsLnN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50cyAmJiBBcnJheS5pc0FycmF5KGwuc3RyaXBUb2dldGhlcldpdGhUaGVpckNvbnRlbnRzKSAmJiBsLnN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50cy5sZW5ndGggJiYgIWwuc3RyaXBUb2dldGhlcldpdGhUaGVpckNvbnRlbnRzLmV2ZXJ5KChlLCBzKT0+dHlwZW9mIGUgIT0gXCJzdHJpbmdcIiA/IChJLmVsID0gZSwgSS5pID0gcywgZmFsc2UpIDogdHJ1ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoYHN0cmluZy1zdHJpcC1odG1sL3N0cmlwSHRtbCgpOiBbVEhST1dfSURfMDhdIE9wdGlvbmFsIE9wdGlvbnMgT2JqZWN0J3Mga2V5IHN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50cyB3YXMgc2V0IHRvIGNvbnRhaW4gbm90IGp1c3Qgc3RyaW5nIGVsZW1lbnRzISBGb3IgZXhhbXBsZSwgZWxlbWVudCBhdCBpbmRleCAke0kuaX0gaGFzIGEgdmFsdWUgJHtJLmVsfSB3aGljaCBpcyBub3Qgc3RyaW5nIGJ1dCAkeyh0eXBlb2YgSS5lbCkudG9Mb3dlckNhc2UoKX0uYCk7XG4gICAgbC5jYiB8fCAobC5jYiA9ICh7IHJhbmdlc0FycjogZSwgcHJvcG9zZWRSZXR1cm46IHMgfSk9PntcbiAgICAgICAgcyAmJiBlLnB1c2goLi4ucyk7XG4gICAgfSk7XG4gICAgbGV0IHIgPSBuZXcgeSh7XG4gICAgICAgIGxpbWl0VG9CZUFkZGVkV2hpdGVzcGFjZTogdHJ1ZSxcbiAgICAgICAgbGltaXRMaW5lYnJlYWtzQ291bnQ6IDJcbiAgICB9KTtcbiAgICBpZiAoIWwuc2tpcEh0bWxEZWNvZGluZykgZm9yKDsgdCAhPT0gbGliRXhwb3J0cy5kZWNvZGUodCwge1xuICAgICAgICBzY29wZTogXCJzdHJpY3RcIlxuICAgIH0pOyl0ID0gbGliRXhwb3J0cy5kZWNvZGUodCwge1xuICAgICAgICBzY29wZTogXCJzdHJpY3RcIlxuICAgIH0pO1xuICAgIGxldCBSID0gZmFsc2UsIGsgPSBmYWxzZSwgSCA9IDAsIEsgPSAwLCBoID0gdC5sZW5ndGgsIHVlID0gTWF0aC5mbG9vcihoIC8gMik7XG4gICAgZm9yKGxldCBlID0gMDsgZSA8IGg7IGUrKyl7XG4gICAgICAgIGlmIChsLnJlcG9ydFByb2dyZXNzRnVuYyAmJiAoaCA+IDFlMyAmJiBoIDwgMmUzID8gZSA9PT0gdWUgJiYgbC5yZXBvcnRQcm9ncmVzc0Z1bmMoTWF0aC5mbG9vcigobC5yZXBvcnRQcm9ncmVzc0Z1bmNUbyAtIGwucmVwb3J0UHJvZ3Jlc3NGdW5jRnJvbSkgLyAyKSkgOiBoID49IDJlMyAmJiAoSCA9IGwucmVwb3J0UHJvZ3Jlc3NGdW5jRnJvbSArIE1hdGguZmxvb3IoZSAvIGggKiAobC5yZXBvcnRQcm9ncmVzc0Z1bmNUbyAtIGwucmVwb3J0UHJvZ3Jlc3NGdW5jRnJvbSkpLCBIICE9PSBLICYmIChLID0gSCwgbC5yZXBvcnRQcm9ncmVzc0Z1bmMoSCkpKSksIE9iamVjdC5rZXlzKG4pLmxlbmd0aCA+IDEgJiYgbi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCAmJiBuLmxhc3RDbG9zaW5nQnJhY2tldEF0IDwgZSAmJiB0W2VdICE9PSBcIiBcIiAmJiBCID09PSBudWxsICYmIChCID0gZSksICFSICYmIHRbZV0gPT09IFwiJVwiICYmIHRbZSAtIDFdID09PSBcIntcIiAmJiB0LmluY2x1ZGVzKFwiJX1cIiwgZSArIDEpKSB7XG4gICAgICAgICAgICBOID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBzID0gdC5pbmRleE9mKFwiJX1cIiwgZSkgLSAxO1xuICAgICAgICAgICAgaWYgKHMgPiBlKSB7XG4gICAgICAgICAgICAgICAgZSA9IHM7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFSICYmIEEoZSkgJiYgKCFuIHx8IE9iamVjdC5rZXlzKG4pLmxlbmd0aCA8IDIpICYmIGUgPiAxKSB7XG4gICAgICAgICAgICBmb3IobGV0IHMgPSBlOyBzLS07KWlmICh0W3MgLSAxXSA9PT0gdm9pZCAwIHx8IEEocykpIHtcbiAgICAgICAgICAgICAgICBsZXQgYSA9IHRbcyAtIDFdID09PSB2b2lkIDAgPyBzIDogcyArIDEsIGkgPSB0LnNsaWNlKGEsIGUgKyAxKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICgoaS5pbmNsdWRlcyhcIi8+XCIpIHx8IGkuaW5jbHVkZXMoXCIvID5cIikgfHwgaS5pbmNsdWRlcygnPVwiJykgfHwgaS5pbmNsdWRlcyhcIj0nXCIpKSAmJiB0ICE9PSBgPCR7dHJpbShpLnRyaW0oKSwgXCIvPlwiKX0+YCAmJiBbXG4gICAgICAgICAgICAgICAgICAgIC4uLlBcbiAgICAgICAgICAgICAgICBdLnNvbWUoKGcpPT50cmltKGkudHJpbSgpLnNwbGl0KC9cXHMrLykuZmlsdGVyKCh1KT0+dS50cmltKCkpLmZpbHRlcigodSwgcCk9PnAgPT09IDApLCBcIi8+XCIpLnRvTG93ZXJDYXNlKCkgPT09IGcpICYmIGZlKGA8JHtpLnRyaW0oKX0+YCwgbCkucmVzdWx0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICghYi5sZW5ndGggfHwgYltiLmxlbmd0aCAtIDFdWzBdICE9PSBuLmxhc3RPcGVuaW5nQnJhY2tldEF0KSAmJiBiLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgKyAxXG4gICAgICAgICAgICAgICAgICAgIF0pLCAoISQubGVuZ3RoIHx8ICRbJC5sZW5ndGggLSAxXVswXSAhPT0gbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCkgJiYgJC5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBlICsgMVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSBMKHQsIGUsIGEsIGUgKyAxLCBhLCBlICsgMSksIHUgPSBlICsgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbdV0gJiYgIXRbdV0udHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHAgPSB1OyBwIDwgaDsgcCsrKWlmICh0W3BdLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGwuY2Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRnJvbTogYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVRvOiB1LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiBnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VzQXJyOiByLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRSZXR1cm46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ1xuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFrICYmIHRbZV0gPT09IFwiL1wiICYmICFuLnF1b3Rlcz8udmFsdWUgJiYgTnVtYmVyLmlzSW50ZWdlcihuLmxhc3RPcGVuaW5nQnJhY2tldEF0KSAmJiAhTnVtYmVyLmlzSW50ZWdlcihuLmxhc3RDbG9zaW5nQnJhY2tldEF0KSAmJiAobi5zbGFzaFByZXNlbnQgPSBlKSwgdFtlXSA9PT0gJ1wiJyB8fCB0W2VdID09PSBcIidcIikgaWYgKCFrICYmIG4ubmFtZVN0YXJ0cyAmJiBuPy5xdW90ZXM/LnZhbHVlID09PSB0W2VdKSBpZiAoby52YWx1ZVN0YXJ0cyA9PT0gdm9pZCAwKSBvID0ge30sIGRlbGV0ZSBuLnF1b3RlcztcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvLnZhbHVlRW5kcyA9IGUsIG8udmFsdWUgPSB0LnNsaWNlKG8udmFsdWVTdGFydHMsIGUpLCBuLmF0dHJpYnV0ZXMucHVzaChvKSwgbyA9IHt9LCBkZWxldGUgbi5xdW90ZXM7XG4gICAgICAgICAgICBsZXQgcztcbiAgICAgICAgICAgIGwuZHVtcExpbmtIcmVmc05lYXJieT8uZW5hYmxlZCAmJiAhYy5sZW5ndGggJiYgbi5hdHRyaWJ1dGVzLnNvbWUoKGEpPT57XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhLm5hbWUgPT0gXCJzdHJpbmdcIiAmJiBhLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJocmVmXCIpIHJldHVybiBzID0gYCR7bC5kdW1wTGlua0hyZWZzTmVhcmJ5Py53cmFwSGVhZHMgfHwgXCJcIn0ke2EudmFsdWV9JHtsLmR1bXBMaW5rSHJlZnNOZWFyYnk/LndyYXBUYWlscyB8fCBcIlwifWAsIHRydWU7XG4gICAgICAgICAgICB9KSAmJiAoZCA9IHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiBuLm5hbWUsXG4gICAgICAgICAgICAgICAgaHJlZlZhbHVlOiBzLFxuICAgICAgICAgICAgICAgIG9wZW5pbmdUYWdFbmRzOiB2b2lkIDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgIWsgJiYgIW4ucXVvdGVzICYmIG4ubmFtZVN0YXJ0cyAmJiAobi5xdW90ZXMgPSB7fSwgbi5xdW90ZXMudmFsdWUgPSB0W2VdLCBuLnF1b3Rlcy5zdGFydCA9IGUsIG4ucXVvdGVzLm5leHQgPSB0LmluZGV4T2YodFtlXSwgZSArIDEpLCBvLm5hbWVTdGFydHMgJiYgby5uYW1lRW5kcyAmJiBvLm5hbWVFbmRzIDwgZSAmJiBvLm5hbWVTdGFydHMgPCBlICYmICFvLnZhbHVlU3RhcnRzICYmIChvLm5hbWUgPSB0LnNsaWNlKG8ubmFtZVN0YXJ0cywgby5uYW1lRW5kcykpKTtcbiAgICAgICAgaWYgKG4ubmFtZVN0YXJ0cyAhPT0gdm9pZCAwICYmIG4ubmFtZUVuZHMgPT09IHZvaWQgMCAmJiAoIXRbZV0udHJpbSgpIHx8ICFlZSh0W2VdKSkpIHtcbiAgICAgICAgICAgIGlmIChuLm5hbWVFbmRzID0gZSwgbi5uYW1lID0gdC5zbGljZShuLm5hbWVTdGFydHMsIG4ubmFtZUVuZHMgKyAoIUEoZSkgJiYgdFtlXSAhPT0gXCIvXCIgJiYgdFtlICsgMV0gPT09IHZvaWQgMCA/IDEgOiAwKSksIHRbbi5uYW1lU3RhcnRzIC0gMV0gIT09IFwiIVwiICYmICFuLm5hbWUucmVwbGFjZSgvLS9nLCBcIlwiKS5sZW5ndGggfHwgL15cXGQrJC8udGVzdChuLm5hbWVbMF0pKSB7XG4gICAgICAgICAgICAgICAgbiA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuLm5hbWUgPT0gXCJzdHJpbmdcIiAmJiBuLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJkb2N0eXBlXCIgJiYgKGsgPSB0cnVlKSwgUyhlKSkge1xuICAgICAgICAgICAgICAgIFUobCk7XG4gICAgICAgICAgICAgICAgbGV0IHMgPSBMKHQsIGUsIG4ubGVmdE91dGVyV2hpdGVzcGFjZSwgZSwgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCwgZSk7XG4gICAgICAgICAgICAgICAgKGwuc3RyaXBUb2dldGhlcldpdGhUaGVpckNvbnRlbnRzLmluY2x1ZGVzKG4ubmFtZSkgfHwgbC5zdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHMuaW5jbHVkZXMoXCIqXCIpKSAmJiAoJCA9ICQuZmlsdGVyKChbYSwgaV0pPT4hKGEgPT09IG4ubGVmdE91dGVyV2hpdGVzcGFjZSAmJiBpID09PSBlKSkpLCBsLmNiKHtcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBuLFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGcm9tOiBuLmxlZnRPdXRlcldoaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVRvOiBlLFxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IGAke3N9JHtFJDF9JHtzfWAsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlc0FycjogcixcbiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRSZXR1cm46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubGVmdE91dGVyV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtzfSR7RSQxfSR7c31gXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KSwgXyQxKCksIHYkMShlLCBsLCByKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobi5xdW90ZXM/LnN0YXJ0ICYmIG4ucXVvdGVzLnN0YXJ0IDwgZSAmJiAhbi5xdW90ZXMuZW5kICYmIG8ubmFtZUVuZHMgJiYgby5lcXVhbHNBdCAmJiAhby52YWx1ZVN0YXJ0cyAmJiAoby52YWx1ZVN0YXJ0cyA9IGUpLCAhbi5xdW90ZXMgJiYgby5uYW1lRW5kcyAmJiB0W2VdID09PSBcIj1cIiAmJiAhby52YWx1ZVN0YXJ0cyAmJiAhby5lcXVhbHNBdCAmJiAoby5lcXVhbHNBdCA9IGUpLCAhbi5xdW90ZXMgJiYgby5uYW1lU3RhcnRzICYmIG8ubmFtZUVuZHMgJiYgIW8udmFsdWVTdGFydHMgJiYgdFtlXS50cmltKCkgJiYgdFtlXSAhPT0gXCI9XCIgJiYgKG4uYXR0cmlidXRlcy5wdXNoKG8pLCBvID0ge30pLCAhbi5xdW90ZXMgJiYgby5uYW1lU3RhcnRzICYmICFvLm5hbWVFbmRzICYmIChrICYmIGAnXCJgLmluY2x1ZGVzKHRbby5uYW1lU3RhcnRzXSkgPyBvLm5hbWVTdGFydHMgPCBlICYmIHRbZV0gPT09IHRbby5uYW1lU3RhcnRzXSAmJiAoby5uYW1lRW5kcyA9IGUgKyAxLCBvLm5hbWUgPSB0LnNsaWNlKG8ubmFtZVN0YXJ0cywgby5uYW1lRW5kcykpIDogdFtlXS50cmltKCkgPyB0W2VdID09PSBcIj1cIiA/IG8uZXF1YWxzQXQgfHwgKG8ubmFtZUVuZHMgPSBlLCBvLmVxdWFsc0F0ID0gZSwgby5uYW1lID0gdC5zbGljZShvLm5hbWVTdGFydHMsIG8ubmFtZUVuZHMpKSA6IHRbZV0gPT09IFwiL1wiIHx8IEEoZSkgPyAoby5uYW1lRW5kcyA9IGUsIG8ubmFtZSA9IHQuc2xpY2Uoby5uYW1lU3RhcnRzLCBvLm5hbWVFbmRzKSwgbi5hdHRyaWJ1dGVzLnB1c2gobyksIG8gPSB7fSkgOiBTKGUpICYmIChvLm5hbWVFbmRzID0gZSwgby5uYW1lID0gdC5zbGljZShvLm5hbWVTdGFydHMsIG8ubmFtZUVuZHMpLCBuLmF0dHJpYnV0ZXMucHVzaChvKSwgbyA9IHt9KSA6IChvLm5hbWVFbmRzID0gZSwgby5uYW1lID0gdC5zbGljZShvLm5hbWVTdGFydHMsIG8ubmFtZUVuZHMpKSksICFuLnF1b3RlcyAmJiBuLm5hbWVFbmRzIDwgZSAmJiAhdFtlIC0gMV0udHJpbSgpICYmIHRbZV0udHJpbSgpICYmICFcIjw+LyFcIi5pbmNsdWRlcyh0W2VdKSAmJiAhby5uYW1lU3RhcnRzICYmICFuLmxhc3RDbG9zaW5nQnJhY2tldEF0ICYmIChvLm5hbWVTdGFydHMgPSBlKSwgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCAhPT0gbnVsbCAmJiBuLmxhc3RPcGVuaW5nQnJhY2tldEF0IDwgZSAmJiB0W2VdID09PSBcIi9cIiAmJiBuLm9ubHlQbGF1c2libGUgJiYgKG4ub25seVBsYXVzaWJsZSA9IGZhbHNlKSwgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCAhPT0gbnVsbCAmJiBuLmxhc3RPcGVuaW5nQnJhY2tldEF0IDwgZSAmJiB0W2VdICE9PSBcIi9cIiAmJiAobi5vbmx5UGxhdXNpYmxlID09PSB2b2lkIDAgJiYgKCghdFtlXS50cmltKCkgfHwgUyhlKSkgJiYgIW4uc2xhc2hQcmVzZW50ID8gbi5vbmx5UGxhdXNpYmxlID0gdHJ1ZSA6IG4ub25seVBsYXVzaWJsZSA9IGZhbHNlKSwgdFtlXS50cmltKCkgJiYgbi5uYW1lU3RhcnRzID09PSB2b2lkIDAgJiYgIVMoZSkgJiYgdFtlXSAhPT0gXCIvXCIgJiYgIUEoZSkgJiYgdFtlXSAhPT0gXCIhXCIgJiYgKG4ubmFtZVN0YXJ0cyA9IGUsIG4ubmFtZUNvbnRhaW5zTGV0dGVycyA9IGZhbHNlKSksIG4ubmFtZVN0YXJ0cyAmJiAhbi5xdW90ZXMgJiYgdHlwZW9mIHRbZV0gPT0gXCJzdHJpbmdcIiAmJiB0W2VdLnRvTG93ZXJDYXNlKCkgIT09IHRbZV0udG9VcHBlckNhc2UoKSAmJiAobi5uYW1lQ29udGFpbnNMZXR0ZXJzID0gdHJ1ZSksIEEoZSkgJiYgKFkobiwgdCwgZSkgfHwgbi5xdW90ZXMudmFsdWUgJiYgdHlwZW9mIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgPT0gXCJudW1iZXJcIiAmJiBuZShuLnF1b3Rlcy52YWx1ZSwgdC5zbGljZShuLmxhc3RPcGVuaW5nQnJhY2tldEF0LCBlKSkgJSAyID09PSAxICYmICF0LnNsaWNlKG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgKyAxLCBlKS5pbmNsdWRlcyhcIjxcIikgJiYgIXQuc2xpY2Uobi5sYXN0T3BlbmluZ0JyYWNrZXRBdCArIDEsIGUpLmluY2x1ZGVzKFwiPlwiKSkgJiYgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCAhPT0gdm9pZCAwICYmIChuLmxhc3RDbG9zaW5nQnJhY2tldEF0ID0gZSwgQiA9IG51bGwsIE9iamVjdC5rZXlzKG8pLmxlbmd0aCAmJiAobi5hdHRyaWJ1dGVzLnB1c2gobyksIG8gPSB7fSksIGwuZHVtcExpbmtIcmVmc05lYXJieT8uZW5hYmxlZCAmJiBkLnRhZ05hbWUgJiYgIWQub3BlbmluZ1RhZ0VuZHMgJiYgKGQub3BlbmluZ1RhZ0VuZHMgPSBlKSksICghayB8fCB0W2VdID09PSBcIj5cIikgJiYgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBpZiAobi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgPCBlICYmICFTKGUpICYmICh0W2UgKyAxXSA9PT0gdm9pZCAwIHx8IFMoZSArIDEpICYmICFuPy5xdW90ZXM/LnZhbHVlKSAmJiBuLm5hbWVDb250YWluc0xldHRlcnMgJiYgdHlwZW9mIG4ubmFtZVN0YXJ0cyA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuLm5hbWUgPSB0LnNsaWNlKG4ubmFtZVN0YXJ0cywgbi5uYW1lRW5kcyB8fCBlICsgMSkudG9Mb3dlckNhc2UoKSwgKCFiLmxlbmd0aCB8fCBiW2IubGVuZ3RoIC0gMV1bMF0gIT09IG4ubGFzdE9wZW5pbmdCcmFja2V0QXQpICYmIGIucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmxhc3RPcGVuaW5nQnJhY2tldEF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZSArIDFcbiAgICAgICAgICAgICAgICAgICAgXSksIGwuaWdub3JlVGFncy5pbmNsdWRlcyhuLm5hbWUpIHx8IE0oZSwgbCwgbikgfHwgIVAuaGFzKG4ubmFtZSkgJiYgKG4ub25seVBsYXVzaWJsZSB8fCBsLnN0cmlwUmVjb2duaXNlZEhUTUxPbmx5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHt9LCBvID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKFAuaGFzKG4ubmFtZSkgfHwgeC5oYXMobi5uYW1lKSkgJiYgKG4ub25seVBsYXVzaWJsZSA9PT0gZmFsc2UgfHwgbi5vbmx5UGxhdXNpYmxlID09PSB0cnVlICYmIG4uYXR0cmlidXRlcy5sZW5ndGgpIHx8IHRbZSArIDFdID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFUobCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IEwodCwgZSwgbi5sZWZ0T3V0ZXJXaGl0ZXNwYWNlLCBlICsgMSwgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCwgbi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBSICYmIG4ubmFtZSA9PT0gXCJzY3JpcHRcIiAmJiBuLnNsYXNoUHJlc2VudCAmJiAoUiA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9PT0gbnVsbCB8fCBFJDEgPT09IG51bGwgPyBhID0gbnVsbCA6IGEgPSBgJHtzfSR7RSQxfSR7c31gLCBsLmNiKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRnJvbTogbi5sZWZ0T3V0ZXJXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVRvOiBlICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VzQXJyOiByLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkUmV0dXJuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubGVmdE91dGVyV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgXyQxKCksIHYkMShlLCBsLCByKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoISQubGVuZ3RoIHx8ICRbJC5sZW5ndGggLSAxXVswXSAhPT0gbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCAmJiAkWyQubGVuZ3RoIC0gMV1bMV0gIT09IGUgKyAxKSBpZiAobC5zdHJpcFRvZ2V0aGVyV2l0aFRoZWlyQ29udGVudHMuaW5jbHVkZXMobi5uYW1lKSB8fCBsLnN0cmlwVG9nZXRoZXJXaXRoVGhlaXJDb250ZW50cy5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBhID0gYy5sZW5ndGg7IGEtLTspY1thXS5uYW1lID09PSBuLm5hbWUgJiYgKHMgPSBjW2FdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPyAoJCA9ICQuZmlsdGVyKChbYV0pPT5hICE9PSBzLmxhc3RPcGVuaW5nQnJhY2tldEF0KSwgJC5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmxhc3RPcGVuaW5nQnJhY2tldEF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgKyAxXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSkgOiAkLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJC5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlICsgMVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUgPiBuLmxhc3RDbG9zaW5nQnJhY2tldEF0ICYmIHRbZV0udHJpbSgpIHx8IHRbZSArIDFdID09PSB2b2lkIDAgfHwgbC5pZ25vcmVJbmRlbnRhdGlvbnMgJiYgYFxcclxuYC5pbmNsdWRlcyh0W2VdKSkge1xuICAgICAgICAgICAgICAgIGxldCBzID0gbi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCA9PT0gZSA/IGUgKyAxIDogZTtcbiAgICAgICAgICAgICAgICBsLnRyaW1Pbmx5U3BhY2VzICYmIHMgPT09IGggLSAxICYmIEIgIT09IG51bGwgJiYgQiA8IGUgJiYgKHMgPSBCKSwgKCFiLmxlbmd0aCB8fCBiW2IubGVuZ3RoIC0gMV1bMF0gIT09IG4ubGFzdE9wZW5pbmdCcmFja2V0QXQpICYmIGIucHVzaChbXG4gICAgICAgICAgICAgICAgICAgIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsXG4gICAgICAgICAgICAgICAgICAgIG4ubGFzdENsb3NpbmdCcmFja2V0QXQgKyAxXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSBsLmlnbm9yZVRhZ3MuaW5jbHVkZXMobi5uYW1lKSwgaSA9IE0oZSwgbCwgbik7XG4gICAgICAgICAgICAgICAgaWYgKCFGIHx8IGwuc3RyaXBSZWNvZ25pc2VkSFRNTE9ubHkgJiYgdHlwZW9mIG4ubmFtZSA9PSBcInN0cmluZ1wiICYmICFQLmhhcyhuLm5hbWUudG9Mb3dlckNhc2UoKSkgJiYgIXguaGFzKG4ubmFtZS50b0xvd2VyQ2FzZSgpKSB8fCAheiAmJiAoYSB8fCBpKSB8fCB6ICYmICFsLm9ubHlTdHJpcFRhZ3MuaW5jbHVkZXMobi5uYW1lKSB8fCBsLmlnbm9yZVRhZ3NXaXRoVGhlaXJDb250ZW50cy5pbmNsdWRlcyhuLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpKSBpZiAobi5zbGFzaFByZXNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgZyA9IGYubGVuZ3RoOyBnLS07KWlmIChmW2ddLm5hbWUgPT09IG4ubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuc3BsaWNlKGcsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZi5sZW5ndGggfHwgKEYgPSB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIEYgJiYgKEYgPSBmYWxzZSksIGYucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgbC5jYih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVGcm9tOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlVG86IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZXNBcnI6IHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFJldHVybjogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9KSwgbiA9IHt9LCBvID0ge307XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbi5vbmx5UGxhdXNpYmxlIHx8IG4uYXR0cmlidXRlcy5sZW5ndGggPT09IDAgJiYgbi5uYW1lICYmIChQLmhhcyhuLm5hbWUudG9Mb3dlckNhc2UoKSkgfHwgeC5oYXMobi5uYW1lLnRvTG93ZXJDYXNlKCkpKSB8fCBuLmF0dHJpYnV0ZXM/LnNvbWUoKGcpPT5nLmVxdWFsc0F0KSkge1xuICAgICAgICAgICAgICAgICAgICAoISQubGVuZ3RoIHx8ICRbJC5sZW5ndGggLSAxXVswXSAhPT0gbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCkgJiYgJC5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmxhc3RDbG9zaW5nQnJhY2tldEF0ICsgMVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSBMKHQsIGUsIG4ubGVmdE91dGVyV2hpdGVzcGFjZSwgcywgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCwgbi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCk7XG4gICAgICAgICAgICAgICAgICAgIEUkMSA9IFwiXCIsIEMgPSBmYWxzZSwgVShsLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHU7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBFJDEgPT0gXCJzdHJpbmdcIiAmJiBFJDEubGVuZ3RoID8gKHUgPSBgJHtnfSR7RSQxfSR7ZyA9PT0gYFxuXG5gID8gYFxuYCA6IGd9YCwgcyA9PT0gbi5sYXN0Q2xvc2luZ0JyYWNrZXRBdCArIDEgJiYgKCF0W3NdIHx8ICFxLmhhcyh0W3NdKSkgJiYgKHUgKz0gXCIgXCIpLCBuLmxlZnRPdXRlcldoaXRlc3BhY2UgPT09IG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgJiYgci5sYXN0KCkgJiYgci5sYXN0KClbMV0gPCBuLmxhc3RPcGVuaW5nQnJhY2tldEF0ICYmICghbD8uZHVtcExpbmtIcmVmc05lYXJieT8ucHV0T25OZXdMaW5lIHx8ICFxLmhhcyh0W3NdKSkgJiYgKHUgPSBcIiBcIiArIHUpKSA6IHUgPSBnLCB1ICE9PSBudWxsICYmIChuLmxlZnRPdXRlcldoaXRlc3BhY2UgPT09IDAgfHwgIUUodCwgcyAtIDEpKSAmJiAoIWwuZHVtcExpbmtIcmVmc05lYXJieT8uZW5hYmxlZCB8fCBuLm5hbWUgIT09IFwiYVwiKSAmJiAodSA9IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEMgJiYgcS5oYXModFtzXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuZHVtcExpbmtIcmVmc05lYXJieT8ucHV0T25OZXdMaW5lICYmICh1ID0gYCR7dFtzXX0ke3UgfHwgXCJcIn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBXID0gRSh0LCBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFcgJiYgdT8uZW5kc1dpdGgoYFxuYCkgPyBwICs9IFcgLSBlIDogKCFXIHx8IFcgPiBlKSAmJiBwKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbC5jYih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVGcm9tOiBuLmxlZnRPdXRlcldoaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVUbzogcyArIHAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHUsXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZXNBcnI6IHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFJldHVybjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubGVmdE91dGVyV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzICsgcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLCBfJDEoKSwgdiQxKGUsIGwsIHIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBuID0ge307XG4gICAgICAgICAgICAgICAgQShlKSB8fCAobiA9IHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsgJiYgKGsgPSBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghUiB8fCB0W2VdID09PSBcIjxcIiAmJiBFKHQsIEUodCwgZSkpICYmIHRbRSh0LCBlKV0gPT09IFwiL1wiICYmIHQuc3RhcnRzV2l0aChcInNjcmlwdFwiLCBFKHQsIEUodCwgZSkpKSkgJiYgUyhlKSAmJiAhUyhlIC0gMSkgJiYgIWAnXCJgLmluY2x1ZGVzKHRbZSArIDFdKSAmJiAoIWAnXCJgLmluY2x1ZGVzKHRbZSArIDJdKSB8fCAvXFx3Ly50ZXN0KHRbZSArIDFdKSkgJiYgISh0W2UgKyAxXSA9PT0gXCJjXCIgJiYgdFtlICsgMl0gPT09IFwiOlwiKSAmJiAhKHRbZSArIDFdID09PSBcImZcIiAmJiB0W2UgKyAyXSA9PT0gXCJtXCIgJiYgdFtlICsgM10gPT09IFwidFwiICYmIHRbZSArIDRdID09PSBcIjpcIikgJiYgISh0W2UgKyAxXSA9PT0gXCJzXCIgJiYgdFtlICsgMl0gPT09IFwicVwiICYmIHRbZSArIDNdID09PSBcImxcIiAmJiB0W2UgKyA0XSA9PT0gXCI6XCIpICYmICEodFtlICsgMV0gPT09IFwieFwiICYmIHRbZSArIDJdID09PSBcIjpcIikgJiYgISh0W2UgKyAxXSA9PT0gXCJmXCIgJiYgdFtlICsgMl0gPT09IFwiblwiICYmIHRbZSArIDNdID09PSBcIjpcIikgJiYgWShuLCB0LCBlKSkge1xuICAgICAgICAgICAgaWYgKEEoRSh0LCBlKSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKG4ubmFtZUVuZHMgJiYgbi5uYW1lRW5kcyA8IGUgJiYgIW4ubGFzdENsb3NpbmdCcmFja2V0QXQgJiYgKG4ub25seVBsYXVzaWJsZSA9PT0gdHJ1ZSAmJiBuLmF0dHJpYnV0ZXM/Lmxlbmd0aCB8fCBuLm9ubHlQbGF1c2libGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGxldCBzID0gTCh0LCBlLCBuLmxlZnRPdXRlcldoaXRlc3BhY2UsIGUsIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsIGUpO1xuICAgICAgICAgICAgICAgIGwuY2Ioe1xuICAgICAgICAgICAgICAgICAgICB0YWc6IG4sXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUZyb206IG4ubGVmdE91dGVyV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlVG86IGUsXG4gICAgICAgICAgICAgICAgICAgIGluc2VydDogcyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzQXJyOiByLFxuICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFJldHVybjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbi5sZWZ0T3V0ZXJXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pLCB2JDEoZSwgbCwgciksIG4gPSB7fSwgbyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgIT09IHZvaWQgMCAmJiBuLm9ubHlQbGF1c2libGUgJiYgbi5uYW1lICYmICFuLnF1b3RlcyAmJiAobi5sYXN0T3BlbmluZ0JyYWNrZXRBdCA9IHZvaWQgMCwgbi5uYW1lID0gdm9pZCAwLCBuLm9ubHlQbGF1c2libGUgPSBmYWxzZSksIChuLmxhc3RPcGVuaW5nQnJhY2tldEF0ID09PSB2b2lkIDAgfHwgIW4ub25seVBsYXVzaWJsZSkgJiYgIW4ucXVvdGVzICYmIChuLmxhc3RPcGVuaW5nQnJhY2tldEF0ID0gZSwgbi5zbGFzaFByZXNlbnQgPSBmYWxzZSwgbi5hdHRyaWJ1dGVzID0gW10sIFYgPT09IG51bGwgPyBuLmxlZnRPdXRlcldoaXRlc3BhY2UgPSBlIDogbC50cmltT25seVNwYWNlcyAmJiBWID09PSAwID8gbi5sZWZ0T3V0ZXJXaGl0ZXNwYWNlID0gdyB8fCBlIDogbi5sZWZ0T3V0ZXJXaGl0ZXNwYWNlID0gViwgYCR7dFtlICsgMV19JHt0W2UgKyAyXX0ke3RbZSArIDNdfWAgPT0gXCIhLS1cIiB8fCBgJHt0W2UgKyAxXX0ke3RbZSArIDJdfSR7dFtlICsgM119JHt0W2UgKyA0XX0ke3RbZSArIDVdfSR7dFtlICsgNl19JHt0W2UgKyA3XX0ke3RbZSArIDhdfWAgPT0gXCIhW0NEQVRBW1wiKSkge1xuICAgICAgICAgICAgICAgIGxldCBzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0W2UgKyAyXSA9PT0gXCItXCIgJiYgKHMgPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbGV0IGE7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gZTsgaSA8IGg7IGkrKylpZiAoKCFhICYmIHMgJiYgYCR7dFtpIC0gMl19JHt0W2kgLSAxXX0ke3RbaV19YCA9PSBcIl1dPlwiIHx8ICFzICYmIGAke3RbaSAtIDJdfSR7dFtpIC0gMV19JHt0W2ldfWAgPT0gXCItLT5cIikgJiYgKGEgPSBpKSwgYSAmJiAoYSA8IGkgJiYgdFtpXS50cmltKCkgfHwgdFtpICsgMV0gPT09IHZvaWQgMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSBpO1xuICAgICAgICAgICAgICAgICAgICAodFtpICsgMV0gPT09IHZvaWQgMCAmJiAhdFtpXS50cmltKCkgfHwgdFtpXSA9PT0gXCI+XCIpICYmIChnICs9IDEpLCAoIWIubGVuZ3RoIHx8IGJbYi5sZW5ndGggLSAxXVswXSAhPT0gbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCkgJiYgYi5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhICsgMVxuICAgICAgICAgICAgICAgICAgICBdKSwgKCEkLmxlbmd0aCB8fCAkWyQubGVuZ3RoIC0gMV1bMF0gIT09IG4ubGFzdE9wZW5pbmdCcmFja2V0QXQpICYmICQucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmxhc3RPcGVuaW5nQnJhY2tldEF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYSArIDFcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gTCh0LCBpLCBuLmxlZnRPdXRlcldoaXRlc3BhY2UsIGcsIG4ubGFzdE9wZW5pbmdCcmFja2V0QXQsIGEpO1xuICAgICAgICAgICAgICAgICAgICBsLmNiKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUZyb206IG4ubGVmdE91dGVyV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVRvOiBnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiB1LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VzQXJyOiByLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRSZXR1cm46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmxlZnRPdXRlcldoaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH0pLCBlID0gaSAtIDEsIHRbaV0gPT09IFwiPlwiICYmIChlID0gaSksIG4gPSB7fSwgbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgIXRbZV0udHJpbSgpIHx8IHRbZV0uY2hhckNvZGVBdCgwKSA9PT0gODQ3ID8gKFYgPT09IG51bGwgJiYgKFYgPSBlLCBuLmxhc3RPcGVuaW5nQnJhY2tldEF0ICE9PSB2b2lkIDAgJiYgbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCA8IGUgJiYgbi5uYW1lU3RhcnRzICYmIG4ubmFtZVN0YXJ0cyA8IG4ubGFzdE9wZW5pbmdCcmFja2V0QXQgJiYgZSA9PT0gbi5sYXN0T3BlbmluZ0JyYWNrZXRBdCArIDEgJiYgIWMuc29tZSgocyk9PnMubmFtZSA9PT0gbi5uYW1lKSAmJiAobi5vbmx5UGxhdXNpYmxlID0gdHJ1ZSwgbi5uYW1lID0gdm9pZCAwLCBuLm5hbWVTdGFydHMgPSB2b2lkIDApKSwgKHRbZV0gPT09IGBcbmAgfHwgdFtlXSA9PT0gXCJcXHJcIikgJiYgKE4gPSBlLCBKICYmIChKID0gZmFsc2UpKSkgOiAoViAhPT0gbnVsbCAmJiAoIW4ucXVvdGVzICYmIG8uZXF1YWxzQXQgPiBWIC0gMSAmJiBvLm5hbWVFbmRzICYmIG8uZXF1YWxzQXQgPiBvLm5hbWVFbmRzICYmIHRbZV0gIT09ICdcIicgJiYgdFtlXSAhPT0gXCInXCIgJiYgKHUobykgJiYgbi5hdHRyaWJ1dGVzLnB1c2gobyksIG8gPSB7fSwgbi5lcXVhbHNTcG90dGVkQXQgPSB2b2lkIDApLCBWID0gbnVsbCksIEogfHwgKEogPSB0cnVlLCBGICYmICFSICYmIHR5cGVvZiBOID09IFwibnVtYmVyXCIgJiYgZSAmJiBOIDwgZSAtIDEgJiYgKHQuc2xpY2UoTiArIDEsIGUpLnRyaW0oKSA/IE4gPSBudWxsIDogbC5pZ25vcmVJbmRlbnRhdGlvbnMgfHwgci5wdXNoKFtcbiAgICAgICAgICAgIE4gKyAxLFxuICAgICAgICAgICAgZVxuICAgICAgICBdKSkpKSwgdFtlXSA9PT0gXCIgXCIgPyB3ID09PSBudWxsICYmICh3ID0gZSkgOiB3ICE9PSBudWxsICYmICh3ID0gbnVsbCksIG4ubmFtZSA9PT0gXCJzY3JpcHRcIiAmJiAoUiA9ICFuLnNsYXNoUHJlc2VudCk7XG4gICAgfVxuICAgIGlmICh0ICYmICFsLmlnbm9yZUluZGVudGF0aW9ucyAmJiAobC50cmltT25seVNwYWNlcyAmJiB0WzBdID09PSBcIiBcIiB8fCAhbC50cmltT25seVNwYWNlcyAmJiAhdFswXS50cmltKCkpKSBmb3IobGV0IGUgPSAwOyBlIDwgaDsgZSsrKWlmIChsLnRyaW1Pbmx5U3BhY2VzICYmIHRbZV0gIT09IFwiIFwiIHx8ICFsLnRyaW1Pbmx5U3BhY2VzICYmIHRbZV0udHJpbSgpKSB7XG4gICAgICAgIHIucHVzaChbXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgZVxuICAgICAgICBdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHRbZSArIDFdIHx8IHIucHVzaChbXG4gICAgICAgIDAsXG4gICAgICAgIGUgKyAxXG4gICAgXSk7XG4gICAgaWYgKHQgJiYgKGwudHJpbU9ubHlTcGFjZXMgJiYgdFt+LXQubGVuZ3RoXSA9PT0gXCIgXCIgfHwgIWwudHJpbU9ubHlTcGFjZXMgJiYgIXRbfi10Lmxlbmd0aF0udHJpbSgpKSkge1xuICAgICAgICBmb3IobGV0IGUgPSB0Lmxlbmd0aDsgZS0tOylpZiAobC50cmltT25seVNwYWNlcyAmJiB0W2VdICE9PSBcIiBcIiB8fCAhbC50cmltT25seVNwYWNlcyAmJiB0W2VdLnRyaW0oKSkge1xuICAgICAgICAgICAgci5wdXNoKFtcbiAgICAgICAgICAgICAgICBlICsgMSxcbiAgICAgICAgICAgICAgICBoXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBPID0gci5jdXJyZW50KCk7XG4gICAgaWYgKCFtPy5jYiAmJiBPKSB7XG4gICAgICAgIGlmIChPWzBdICYmICFPWzBdWzBdKSB7XG4gICAgICAgICAgICBPWzBdWzFdO1xuICAgICAgICAgICAgci5yYW5nZXNbMF0gPSBbXG4gICAgICAgICAgICAgICAgci5yYW5nZXNbMF1bMF0sXG4gICAgICAgICAgICAgICAgci5yYW5nZXNbMF1bMV1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9bTy5sZW5ndGggLSAxXSAmJiBPW08ubGVuZ3RoIC0gMV1bMV0gPT09IHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBPW08ubGVuZ3RoIC0gMV1bMF07XG4gICAgICAgICAgICBpZiAoci5yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcyA9IHIucmFuZ2VzW3IucmFuZ2VzLmxlbmd0aCAtIDFdWzBdO1xuICAgICAgICAgICAgICAgIHRbcyAtIDFdICYmIChsLnRyaW1Pbmx5U3BhY2VzICYmIHRbcyAtIDFdID09PSBcIiBcIiB8fCAhbC50cmltT25seVNwYWNlcyAmJiAhdFtzIC0gMV0udHJpbSgpKSAmJiAocyAtPSAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYSA9IHIucmFuZ2VzW3IucmFuZ2VzLmxlbmd0aCAtIDFdWzJdO1xuICAgICAgICAgICAgICAgIHIucmFuZ2VzW3IucmFuZ2VzLmxlbmd0aCAtIDFdID0gW1xuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICByLnJhbmdlc1tyLnJhbmdlcy5sZW5ndGggLSAxXVsxXVxuICAgICAgICAgICAgICAgIF0sIGE/LnRyaW0oKSAmJiByLnJhbmdlc1tyLnJhbmdlcy5sZW5ndGggLSAxXS5wdXNoKGEudHJpbUVuZCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsb2c6IHtcbiAgICAgICAgICAgIHRpbWVUYWtlbkluTWlsbGlzZWNvbmRzOiBEYXRlLm5vdygpIC0geSQxXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VsdDogXyh0LCByLmN1cnJlbnQoKSksXG4gICAgICAgIHJhbmdlczogci5jdXJyZW50KCksXG4gICAgICAgIGFsbFRhZ0xvY2F0aW9uczogYixcbiAgICAgICAgZmlsdGVyZWRUYWdMb2NhdGlvbnM6ICRcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhZSBhcyBkZWZhdWx0cywgZmUgYXMgc3RyaXBIdG1sIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/html/dist/string-strip-html.esm-CS-9Wk6W.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/image/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/image/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageReader: () => (/* binding */ ImageReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n/**\n * Reads the content of an image file into a Document object (which stores the image file as a Blob).\n */ class ImageReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    /**\n   * Public method for this reader.\n   * Required by BaseReader interface.\n   * @param fileContent - The content of the file.\n   * @returns `Promise<Document[]>` A Promise object, eventually yielding zero or one ImageDocument of the specified file.\n   */ async loadDataAsContent(fileContent) {\n        const blob = new Blob([\n            fileContent\n        ]);\n        return [\n            new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.ImageDocument({\n                image: blob\n            })\n        ];\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9pbWFnZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9FOztBQUVwRTtBQUNBO0FBQ0EsOEJBQThCLCtEQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtFQUFhO0FBQzdCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFdUIiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9pbWFnZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbGVSZWFkZXIsIEltYWdlRG9jdW1lbnQgfSBmcm9tICdAbGxhbWFpbmRleC9jb3JlL3NjaGVtYSc7XG5cbi8qKlxuICogUmVhZHMgdGhlIGNvbnRlbnQgb2YgYW4gaW1hZ2UgZmlsZSBpbnRvIGEgRG9jdW1lbnQgb2JqZWN0ICh3aGljaCBzdG9yZXMgdGhlIGltYWdlIGZpbGUgYXMgYSBCbG9iKS5cbiAqLyBjbGFzcyBJbWFnZVJlYWRlciBleHRlbmRzIEZpbGVSZWFkZXIge1xuICAgIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIGZvciB0aGlzIHJlYWRlci5cbiAgICogUmVxdWlyZWQgYnkgQmFzZVJlYWRlciBpbnRlcmZhY2UuXG4gICAqIEBwYXJhbSBmaWxlQ29udGVudCAtIFRoZSBjb250ZW50IG9mIHRoZSBmaWxlLlxuICAgKiBAcmV0dXJucyBgUHJvbWlzZTxEb2N1bWVudFtdPmAgQSBQcm9taXNlIG9iamVjdCwgZXZlbnR1YWxseSB5aWVsZGluZyB6ZXJvIG9yIG9uZSBJbWFnZURvY3VtZW50IG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICovIGFzeW5jIGxvYWREYXRhQXNDb250ZW50KGZpbGVDb250ZW50KSB7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbXG4gICAgICAgICAgICBmaWxlQ29udGVudFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBJbWFnZURvY3VtZW50KHtcbiAgICAgICAgICAgICAgICBpbWFnZTogYmxvYlxuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEltYWdlUmVhZGVyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/image/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/markdown/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/markdown/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MarkdownReader: () => (/* binding */ MarkdownReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n/**\n * Extract text from markdown files.\n * Returns dictionary with keys as headers and values as the text between headers.\n */ class MarkdownReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    /**\n   * @param {boolean} [removeHyperlinks=true] - Indicates whether hyperlinks should be removed.\n   * @param {boolean} [removeImages=true] - Indicates whether images should be removed.\n   */ constructor(removeHyperlinks = true, removeImages = true){\n        super();\n        this._removeHyperlinks = removeHyperlinks;\n        this._removeImages = removeImages;\n    }\n    /**\n   * Convert a markdown file to a dictionary.\n   * The keys are the headers and the values are the text under each header.\n   * @param {string} markdownText - The markdown text to convert.\n   * @returns {Array<MarkdownTuple>} - An array of tuples, where each tuple contains a header (or null) and its corresponding text.\n   */ markdownToTups(markdownText) {\n        const markdownTups = [];\n        const lines = markdownText.split(\"\\n\");\n        let currentHeader = null;\n        let currentText = \"\";\n        for (const line of lines){\n            const headerMatch = line.match(/^#+\\s/);\n            if (headerMatch) {\n                if (currentHeader) {\n                    if (!currentText) {\n                        currentHeader += line + \"\\n\";\n                        continue;\n                    }\n                    markdownTups.push([\n                        currentHeader,\n                        currentText\n                    ]);\n                } else if (currentText) {\n                    markdownTups.push([\n                        null,\n                        currentText\n                    ]);\n                }\n                currentHeader = line;\n                currentText = \"\";\n            } else {\n                currentText += line + \"\\n\";\n            }\n        }\n        markdownTups.push([\n            currentHeader,\n            currentText\n        ]);\n        if (currentHeader) {\n            // pass linting, assert keys are defined\n            markdownTups.map((tuple)=>[\n                    tuple[0]?.replace(/#/g, \"\").trim() || null,\n                    tuple[1].replace(/<.*?>/g, \"\")\n                ]);\n        } else {\n            markdownTups.map((tuple)=>[\n                    tuple[0],\n                    tuple[1].replace(/<.*?>/g, \"\")\n                ]);\n        }\n        return markdownTups;\n    }\n    removeImages(content) {\n        const pattern = /!{1}\\[\\[(.*)\\]\\]/g;\n        return content.replace(pattern, \"\");\n    }\n    removeHyperlinks(content) {\n        const pattern = /\\[(.*?)\\]\\((.*?)\\)/g;\n        return content.replace(pattern, \"$1\");\n    }\n    parseTups(content) {\n        let modifiedContent = content;\n        if (this._removeHyperlinks) {\n            modifiedContent = this.removeHyperlinks(modifiedContent);\n        }\n        if (this._removeImages) {\n            modifiedContent = this.removeImages(modifiedContent);\n        }\n        return this.markdownToTups(modifiedContent);\n    }\n    async loadDataAsContent(fileContent) {\n        const decoder = new TextDecoder(\"utf-8\");\n        const content = decoder.decode(fileContent);\n        const tups = this.parseTups(content);\n        const results = [];\n        for (const [header, value] of tups){\n            if (header) {\n                const text = `\\n\\n${header}\\n${value}`;\n                results.push(new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    text\n                }));\n            } else {\n                results.push(new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    text: value\n                }));\n            }\n        }\n        return results;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9tYXJrZG93bi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStEOztBQUUvRDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsK0RBQVU7QUFDM0M7QUFDQSxhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxzQkFBc0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEVBQUU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxPQUFPLElBQUksTUFBTTtBQUNyRCxpQ0FBaUMsNkRBQVE7QUFDekM7QUFDQSxpQkFBaUI7QUFDakIsY0FBYztBQUNkLGlDQUFpQyw2REFBUTtBQUN6QztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQiIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9yZWFkZXJzL21hcmtkb3duL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVJlYWRlciwgRG9jdW1lbnQgfSBmcm9tICdAbGxhbWFpbmRleC9jb3JlL3NjaGVtYSc7XG5cbi8qKlxuICogRXh0cmFjdCB0ZXh0IGZyb20gbWFya2Rvd24gZmlsZXMuXG4gKiBSZXR1cm5zIGRpY3Rpb25hcnkgd2l0aCBrZXlzIGFzIGhlYWRlcnMgYW5kIHZhbHVlcyBhcyB0aGUgdGV4dCBiZXR3ZWVuIGhlYWRlcnMuXG4gKi8gY2xhc3MgTWFya2Rvd25SZWFkZXIgZXh0ZW5kcyBGaWxlUmVhZGVyIHtcbiAgICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVtb3ZlSHlwZXJsaW5rcz10cnVlXSAtIEluZGljYXRlcyB3aGV0aGVyIGh5cGVybGlua3Mgc2hvdWxkIGJlIHJlbW92ZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlbW92ZUltYWdlcz10cnVlXSAtIEluZGljYXRlcyB3aGV0aGVyIGltYWdlcyBzaG91bGQgYmUgcmVtb3ZlZC5cbiAgICovIGNvbnN0cnVjdG9yKHJlbW92ZUh5cGVybGlua3MgPSB0cnVlLCByZW1vdmVJbWFnZXMgPSB0cnVlKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlSHlwZXJsaW5rcyA9IHJlbW92ZUh5cGVybGlua3M7XG4gICAgICAgIHRoaXMuX3JlbW92ZUltYWdlcyA9IHJlbW92ZUltYWdlcztcbiAgICB9XG4gICAgLyoqXG4gICAqIENvbnZlcnQgYSBtYXJrZG93biBmaWxlIHRvIGEgZGljdGlvbmFyeS5cbiAgICogVGhlIGtleXMgYXJlIHRoZSBoZWFkZXJzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgdGV4dCB1bmRlciBlYWNoIGhlYWRlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmtkb3duVGV4dCAtIFRoZSBtYXJrZG93biB0ZXh0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheTxNYXJrZG93blR1cGxlPn0gLSBBbiBhcnJheSBvZiB0dXBsZXMsIHdoZXJlIGVhY2ggdHVwbGUgY29udGFpbnMgYSBoZWFkZXIgKG9yIG51bGwpIGFuZCBpdHMgY29ycmVzcG9uZGluZyB0ZXh0LlxuICAgKi8gbWFya2Rvd25Ub1R1cHMobWFya2Rvd25UZXh0KSB7XG4gICAgICAgIGNvbnN0IG1hcmtkb3duVHVwcyA9IFtdO1xuICAgICAgICBjb25zdCBsaW5lcyA9IG1hcmtkb3duVGV4dC5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgbGV0IGN1cnJlbnRIZWFkZXIgPSBudWxsO1xuICAgICAgICBsZXQgY3VycmVudFRleHQgPSBcIlwiO1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpe1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyTWF0Y2ggPSBsaW5lLm1hdGNoKC9eIytcXHMvKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJNYXRjaCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudFRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIZWFkZXIgKz0gbGluZSArIFwiXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXJrZG93blR1cHMucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRleHRcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZG93blR1cHMucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRleHRcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRIZWFkZXIgPSBsaW5lO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRleHQgKz0gbGluZSArIFwiXFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFya2Rvd25UdXBzLnB1c2goW1xuICAgICAgICAgICAgY3VycmVudEhlYWRlcixcbiAgICAgICAgICAgIGN1cnJlbnRUZXh0XG4gICAgICAgIF0pO1xuICAgICAgICBpZiAoY3VycmVudEhlYWRlcikge1xuICAgICAgICAgICAgLy8gcGFzcyBsaW50aW5nLCBhc3NlcnQga2V5cyBhcmUgZGVmaW5lZFxuICAgICAgICAgICAgbWFya2Rvd25UdXBzLm1hcCgodHVwbGUpPT5bXG4gICAgICAgICAgICAgICAgICAgIHR1cGxlWzBdPy5yZXBsYWNlKC8jL2csIFwiXCIpLnRyaW0oKSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0dXBsZVsxXS5yZXBsYWNlKC88Lio/Pi9nLCBcIlwiKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFya2Rvd25UdXBzLm1hcCgodHVwbGUpPT5bXG4gICAgICAgICAgICAgICAgICAgIHR1cGxlWzBdLFxuICAgICAgICAgICAgICAgICAgICB0dXBsZVsxXS5yZXBsYWNlKC88Lio/Pi9nLCBcIlwiKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrZG93blR1cHM7XG4gICAgfVxuICAgIHJlbW92ZUltYWdlcyhjb250ZW50KSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSAvIXsxfVxcW1xcWyguKilcXF1cXF0vZztcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShwYXR0ZXJuLCBcIlwiKTtcbiAgICB9XG4gICAgcmVtb3ZlSHlwZXJsaW5rcyhjb250ZW50KSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSAvXFxbKC4qPylcXF1cXCgoLio/KVxcKS9nO1xuICAgICAgICByZXR1cm4gY29udGVudC5yZXBsYWNlKHBhdHRlcm4sIFwiJDFcIik7XG4gICAgfVxuICAgIHBhcnNlVHVwcyhjb250ZW50KSB7XG4gICAgICAgIGxldCBtb2RpZmllZENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICBpZiAodGhpcy5fcmVtb3ZlSHlwZXJsaW5rcykge1xuICAgICAgICAgICAgbW9kaWZpZWRDb250ZW50ID0gdGhpcy5yZW1vdmVIeXBlcmxpbmtzKG1vZGlmaWVkQ29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92ZUltYWdlcykge1xuICAgICAgICAgICAgbW9kaWZpZWRDb250ZW50ID0gdGhpcy5yZW1vdmVJbWFnZXMobW9kaWZpZWRDb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZG93blRvVHVwcyhtb2RpZmllZENvbnRlbnQpO1xuICAgIH1cbiAgICBhc3luYyBsb2FkRGF0YUFzQ29udGVudChmaWxlQ29udGVudCkge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIik7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkZWNvZGVyLmRlY29kZShmaWxlQ29udGVudCk7XG4gICAgICAgIGNvbnN0IHR1cHMgPSB0aGlzLnBhcnNlVHVwcyhjb250ZW50KTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtoZWFkZXIsIHZhbHVlXSBvZiB0dXBzKXtcbiAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gYFxcblxcbiR7aGVhZGVyfVxcbiR7dmFsdWV9YDtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobmV3IERvY3VtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG5ldyBEb2N1bWVudCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTWFya2Rvd25SZWFkZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/markdown/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/pdf/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/pdf/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFReader: () => (/* binding */ PDFReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n/**\n * Read the text of a PDF\n */ class PDFReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    async loadDataAsContent(content) {\n        // XXX: create a new Uint8Array to prevent \"Please provide binary data as `Uint8Array`, rather than `Buffer`.\" error if a Buffer passed\n        if (content instanceof Buffer) {\n            content = new Uint8Array(content);\n        }\n        const { totalPages, text } = await readPDF(content);\n        return text.map((text, page)=>{\n            const metadata = {\n                page_number: page + 1,\n                total_pages: totalPages\n            };\n            return new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                text,\n                metadata\n            });\n        });\n    }\n}\nasync function readPDF(data) {\n    const { extractText } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! unpdf */ \"unpdf\", 19));\n    return await extractText(data);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy9wZGYvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDs7QUFFL0Q7QUFDQTtBQUNBLDRCQUE0QiwrREFBVTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZEQUFRO0FBQy9CO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYyxRQUFRLGdIQUFlO0FBQ2pEO0FBQ0E7O0FBRXFCIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L3JlYWRlcnMvcGRmL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZVJlYWRlciwgRG9jdW1lbnQgfSBmcm9tICdAbGxhbWFpbmRleC9jb3JlL3NjaGVtYSc7XG5cbi8qKlxuICogUmVhZCB0aGUgdGV4dCBvZiBhIFBERlxuICovIGNsYXNzIFBERlJlYWRlciBleHRlbmRzIEZpbGVSZWFkZXIge1xuICAgIGFzeW5jIGxvYWREYXRhQXNDb250ZW50KGNvbnRlbnQpIHtcbiAgICAgICAgLy8gWFhYOiBjcmVhdGUgYSBuZXcgVWludDhBcnJheSB0byBwcmV2ZW50IFwiUGxlYXNlIHByb3ZpZGUgYmluYXJ5IGRhdGEgYXMgYFVpbnQ4QXJyYXlgLCByYXRoZXIgdGhhbiBgQnVmZmVyYC5cIiBlcnJvciBpZiBhIEJ1ZmZlciBwYXNzZWRcbiAgICAgICAgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBuZXcgVWludDhBcnJheShjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHRvdGFsUGFnZXMsIHRleHQgfSA9IGF3YWl0IHJlYWRQREYoY29udGVudCk7XG4gICAgICAgIHJldHVybiB0ZXh0Lm1hcCgodGV4dCwgcGFnZSk9PntcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgIHBhZ2VfbnVtYmVyOiBwYWdlICsgMSxcbiAgICAgICAgICAgICAgICB0b3RhbF9wYWdlczogdG90YWxQYWdlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiByZWFkUERGKGRhdGEpIHtcbiAgICBjb25zdCB7IGV4dHJhY3RUZXh0IH0gPSBhd2FpdCBpbXBvcnQoJ3VucGRmJyk7XG4gICAgcmV0dXJuIGF3YWl0IGV4dHJhY3RUZXh0KGRhdGEpO1xufVxuXG5leHBvcnQgeyBQREZSZWFkZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/pdf/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@llamaindex/readers/text/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@llamaindex/readers/text/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextFileReader: () => (/* binding */ TextFileReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n/**\n * Read a .txt file\n */ class TextFileReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    async loadDataAsContent(fileContent) {\n        const decoder = new TextDecoder(\"utf-8\");\n        const dataBuffer = decoder.decode(fileContent);\n        return [\n            new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                text: dataBuffer\n            })\n        ];\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcmVhZGVycy90ZXh0L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0Q7O0FBRS9EO0FBQ0E7QUFDQSxpQ0FBaUMsK0RBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNkRBQVE7QUFDeEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUUwQiIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9yZWFkZXJzL3RleHQvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWxlUmVhZGVyLCBEb2N1bWVudCB9IGZyb20gJ0BsbGFtYWluZGV4L2NvcmUvc2NoZW1hJztcblxuLyoqXG4gKiBSZWFkIGEgLnR4dCBmaWxlXG4gKi8gY2xhc3MgVGV4dEZpbGVSZWFkZXIgZXh0ZW5kcyBGaWxlUmVhZGVyIHtcbiAgICBhc3luYyBsb2FkRGF0YUFzQ29udGVudChmaWxlQ29udGVudCkge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIik7XG4gICAgICAgIGNvbnN0IGRhdGFCdWZmZXIgPSBkZWNvZGVyLmRlY29kZShmaWxlQ29udGVudCk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgICAgIHRleHQ6IGRhdGFCdWZmZXJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgeyBUZXh0RmlsZVJlYWRlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@llamaindex/readers/text/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/chat-ui/dist/chat/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@llamaindex/chat-ui/dist/chat/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatInput: () => (/* binding */ chat_input_default),\n/* harmony export */   ChatMessage: () => (/* binding */ chat_message_default),\n/* harmony export */   ChatMessages: () => (/* binding */ chat_messages_default),\n/* harmony export */   ChatSection: () => (/* binding */ ChatSection),\n/* harmony export */   ContentPosition: () => (/* binding */ ContentPosition),\n/* harmony export */   DOCUMENT_FILE_TYPES: () => (/* binding */ DOCUMENT_FILE_TYPES),\n/* harmony export */   MessageAnnotationType: () => (/* binding */ MessageAnnotationType),\n/* harmony export */   getAnnotationData: () => (/* binding */ getAnnotationData),\n/* harmony export */   getSourceAnnotationData: () => (/* binding */ getSourceAnnotationData),\n/* harmony export */   useChatInput: () => (/* binding */ useChatInput),\n/* harmony export */   useChatMessage: () => (/* binding */ useChatMessage),\n/* harmony export */   useChatMessages: () => (/* binding */ useChatMessages),\n/* harmony export */   useChatUI: () => (/* binding */ useChatUI),\n/* harmony export */   useFile: () => (/* binding */ useFile)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tailwind-merge */ \"(ssr)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! class-variance-authority */ \"(ssr)/./node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _widgets_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../widgets/index.js */ \"(ssr)/./node_modules/@llamaindex/chat-ui/dist/widgets/index.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/loader-circle.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/circle-pause.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/refresh-cw.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/user-round.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/bot.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/message-circle.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/check.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/copy.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/chat/annotation.ts\nvar MessageAnnotationType = /* @__PURE__ */ ((MessageAnnotationType2) => {\n  MessageAnnotationType2[\"IMAGE\"] = \"image\";\n  MessageAnnotationType2[\"DOCUMENT_FILE\"] = \"document_file\";\n  MessageAnnotationType2[\"SOURCES\"] = \"sources\";\n  MessageAnnotationType2[\"EVENTS\"] = \"events\";\n  MessageAnnotationType2[\"SUGGESTED_QUESTIONS\"] = \"suggested_questions\";\n  MessageAnnotationType2[\"AGENT_EVENTS\"] = \"agent\";\n  return MessageAnnotationType2;\n})(MessageAnnotationType || {});\nvar DOCUMENT_FILE_TYPES = [\n  \"csv\",\n  \"pdf\",\n  \"txt\",\n  \"docx\"\n];\nvar NODE_SCORE_THRESHOLD = 0.25;\nfunction getAnnotationData(annotations, type) {\n  if (!(annotations == null ? void 0 : annotations.length)) return [];\n  return annotations.filter((a) => a.type.toString() === type).map((a) => a.data);\n}\nfunction getSourceAnnotationData(annotations) {\n  const data = getAnnotationData(\n    annotations,\n    \"sources\" /* SOURCES */\n  );\n  if (data.length > 0) {\n    return [\n      __spreadProps(__spreadValues({}, data[0]), {\n        nodes: data[0].nodes ? preprocessSourceNodes(data[0].nodes) : []\n      })\n    ];\n  }\n  return data;\n}\nfunction preprocessSourceNodes(nodes) {\n  const processedNodes = nodes.filter((node) => {\n    var _a;\n    return ((_a = node.score) != null ? _a : 1) > NODE_SCORE_THRESHOLD;\n  }).filter((node) => node.url && node.url.trim() !== \"\").sort((a, b) => {\n    var _a, _b;\n    return ((_a = b.score) != null ? _a : 1) - ((_b = a.score) != null ? _b : 1);\n  }).map((node) => {\n    node.url = node.url.replace(/\\/$/, \"\");\n    return node;\n  });\n  return processedNodes;\n}\n\n// src/chat/chat-section.tsx\n\n\n// src/lib/utils.ts\n\n\nfunction cn(...inputs) {\n  return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_2__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(inputs));\n}\n\n// src/chat/chat-input.tsx\n\n\n// src/ui/button.tsx\n\n\n\n\nvar buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_3__.cva)(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n);\nvar Button = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  (_a, ref) => {\n    var _b = _a, { className, variant, size, asChild = false } = _b, props = __objRest(_b, [\"className\", \"variant\", \"size\", \"asChild\"]);\n    const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"button\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n      Comp,\n      __spreadValues({\n        className: cn(buttonVariants({ variant, size, className })),\n        ref\n      }, props)\n    );\n  }\n);\nButton.displayName = \"Button\";\n\n// src/ui/input.tsx\n\n\nvar Input = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  (_a, ref) => {\n    var _b = _a, { className, type } = _b, props = __objRest(_b, [\"className\", \"type\"]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n      \"input\",\n      __spreadValues({\n        type,\n        className: cn(\n          \"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        ),\n        ref\n      }, props)\n    );\n  }\n);\nInput.displayName = \"Input\";\n\n// src/ui/textarea.tsx\n\n\nvar Textarea = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  (_a, ref) => {\n    var _b = _a, { className } = _b, props = __objRest(_b, [\"className\"]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n      \"textarea\",\n      __spreadValues({\n        className: cn(\n          \"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[80px] w-full rounded-md border px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        ),\n        ref\n      }, props)\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\n// src/chat/chat-input.tsx\n\n\n// src/chat/chat.context.ts\n\nvar chatContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar ChatProvider = chatContext.Provider;\nvar useChatUI = () => {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(chatContext);\n  if (!context) {\n    throw new Error(\"useChatUI must be used within a ChatProvider\");\n  }\n  return context;\n};\n\n// src/chat/chat-input.tsx\n\nvar ALLOWED_EXTENSIONS = [\"png\", \"jpg\", \"jpeg\", \"csv\", \"pdf\", \"txt\", \"docx\"];\nvar chatInputContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar ChatInputProvider = chatInputContext.Provider;\nvar useChatInput = () => {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(chatInputContext);\n  if (!context) {\n    throw new Error(\"useChatInput must be used within a ChatInputProvider\");\n  }\n  return context;\n};\nfunction ChatInput(props) {\n  var _a;\n  const { input, setInput, append, isLoading, requestData } = useChatUI();\n  const isDisabled = isLoading || !input.trim();\n  const submit = () => __async(this, null, function* () {\n    var _a2;\n    const newMessage = {\n      role: \"user\",\n      content: input,\n      annotations: props.annotations\n    };\n    setInput(\"\");\n    (_a2 = props.resetUploadedFiles) == null ? void 0 : _a2.call(props);\n    yield append(newMessage, { data: requestData });\n  });\n  const handleSubmit = (e) => __async(this, null, function* () {\n    e.preventDefault();\n    yield submit();\n  });\n  const handleKeyDown = (e) => __async(this, null, function* () {\n    if (isDisabled) return;\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      yield submit();\n    }\n  });\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatInputForm, {});\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatInputProvider, { value: { isDisabled, handleKeyDown, handleSubmit }, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    \"div\",\n    {\n      className: cn(\n        \"bg-background flex shrink-0 flex-col gap-4 p-4\",\n        props.className\n      ),\n      children\n    }\n  ) });\n}\nfunction ChatInputForm(props) {\n  var _a;\n  const { handleSubmit } = useChatInput();\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatInputField, {}),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatInputSubmit, {})\n  ] });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"form\", { onSubmit: handleSubmit, className: cn(props.className, \"flex gap-2\"), children });\n}\nfunction ChatInputField(props) {\n  var _a, _b, _c;\n  const { input, setInput } = useChatUI();\n  const { handleKeyDown } = useChatInput();\n  const type = (_a = props.type) != null ? _a : \"textarea\";\n  if (type === \"input\") {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n      Input,\n      {\n        name: \"input\",\n        placeholder: (_b = props.placeholder) != null ? _b : \"Type a message\",\n        className: cn(props.className, \"min-h-0\"),\n        value: input,\n        onChange: (e) => setInput(e.target.value)\n      }\n    );\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    Textarea,\n    {\n      name: \"input\",\n      placeholder: (_c = props.placeholder) != null ? _c : \"Type a message\",\n      className: cn(props.className, \"h-[40px] min-h-0 flex-1\"),\n      value: input,\n      onChange: (e) => setInput(e.target.value),\n      onKeyDown: handleKeyDown\n    }\n  );\n}\nfunction ChatInputUpload(props) {\n  var _a, _b;\n  const { requestData, setRequestData, isLoading } = useChatUI();\n  const onFileUpload = (file) => __async(this, null, function* () {\n    if (props.onUpload) {\n      yield props.onUpload(file);\n    } else {\n      setRequestData(__spreadProps(__spreadValues({}, requestData || {}), { file }));\n    }\n  });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    _widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.FileUploader,\n    {\n      onFileUpload,\n      config: {\n        disabled: isLoading,\n        allowedExtensions: (_a = props.allowedExtensions) != null ? _a : ALLOWED_EXTENSIONS,\n        multiple: (_b = props.multiple) != null ? _b : true\n      }\n    }\n  );\n}\nfunction ChatInputSubmit(props) {\n  var _a, _b;\n  const { isDisabled } = useChatInput();\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    Button,\n    {\n      type: \"submit\",\n      disabled: (_a = props.disabled) != null ? _a : isDisabled,\n      className: cn(props.className),\n      children: (_b = props.children) != null ? _b : \"Send message\"\n    }\n  );\n}\nChatInput.Form = ChatInputForm;\nChatInput.Field = ChatInputField;\nChatInput.Upload = ChatInputUpload;\nChatInput.Submit = ChatInputSubmit;\nvar chat_input_default = ChatInput;\n\n// src/chat/chat-messages.tsx\n\n\n\n// src/chat/chat-message.tsx\n\n\n\n// src/hook/use-copy-to-clipboard.tsx\n\nfunction useCopyToClipboard({\n  timeout = 2e3\n}) {\n  const [isCopied, setIsCopied] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  const copyToClipboard = (value) => {\n    var _a;\n    if (typeof window === \"undefined\" || !((_a = navigator.clipboard) == null ? void 0 : _a.writeText)) {\n      return;\n    }\n    if (!value) {\n      return;\n    }\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n      setTimeout(() => {\n        setIsCopied(false);\n      }, timeout);\n    });\n  };\n  return { isCopied, copyToClipboard };\n}\n\n// src/chat/chat-message.tsx\n\n\n// src/chat/chat-annotations.tsx\n\n\nfunction EventAnnotations({\n  message,\n  showLoading\n}) {\n  const annotations = message.annotations;\n  const eventData = annotations && annotations.length > 0 ? getAnnotationData(annotations, \"events\" /* EVENTS */) : null;\n  if (!(eventData == null ? void 0 : eventData.length)) return null;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.ChatEvents, { data: eventData, showLoading });\n}\nfunction AgentEventAnnotations({ message }) {\n  const annotations = message.annotations;\n  const agentEventData = annotations && annotations.length > 0 ? getAnnotationData(\n    annotations,\n    \"agent\" /* AGENT_EVENTS */\n  ) : null;\n  if (!(agentEventData == null ? void 0 : agentEventData.length)) return null;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    _widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.ChatAgentEvents,\n    {\n      data: agentEventData,\n      isFinished: Boolean(message.content)\n    }\n  );\n}\nfunction ImageAnnotations({ message }) {\n  const annotations = message.annotations;\n  const imageData = annotations && annotations.length > 0 ? getAnnotationData(annotations, \"image\") : null;\n  if (!imageData) return null;\n  return imageData[0] ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.ChatImage, { data: imageData[0] }) : null;\n}\nfunction DocumentFileAnnotations({ message }) {\n  const annotations = message.annotations;\n  const contentFileData = annotations && annotations.length > 0 ? getAnnotationData(\n    annotations,\n    \"document_file\" /* DOCUMENT_FILE */\n  ) : null;\n  if (!contentFileData) return null;\n  return contentFileData[0] ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.ChatFiles, { data: contentFileData[0] }) : null;\n}\nfunction SourceAnnotations({ message }) {\n  const annotations = message.annotations;\n  const sourceData = annotations && annotations.length > 0 ? getSourceAnnotationData(annotations) : null;\n  if (!sourceData) return null;\n  return sourceData[0] ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.ChatSources, { data: sourceData[0] }) : null;\n}\nfunction SuggestedQuestionsAnnotations({\n  message,\n  append\n}) {\n  const annotations = message.annotations;\n  const suggestedQuestionsData = annotations && annotations.length > 0 ? getAnnotationData(\n    annotations,\n    \"suggested_questions\" /* SUGGESTED_QUESTIONS */\n  ) : null;\n  if (!(suggestedQuestionsData == null ? void 0 : suggestedQuestionsData[0])) return null;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.SuggestedQuestions, { questions: suggestedQuestionsData[0], append });\n}\n\n// src/chat/chat-message.tsx\n\nvar ContentPosition = /* @__PURE__ */ ((ContentPosition2) => {\n  ContentPosition2[ContentPosition2[\"TOP\"] = -9999] = \"TOP\";\n  ContentPosition2[ContentPosition2[\"CHAT_EVENTS\"] = 0] = \"CHAT_EVENTS\";\n  ContentPosition2[ContentPosition2[\"AFTER_EVENTS\"] = 1] = \"AFTER_EVENTS\";\n  ContentPosition2[ContentPosition2[\"CHAT_AGENT_EVENTS\"] = 2] = \"CHAT_AGENT_EVENTS\";\n  ContentPosition2[ContentPosition2[\"AFTER_AGENT_EVENTS\"] = 3] = \"AFTER_AGENT_EVENTS\";\n  ContentPosition2[ContentPosition2[\"CHAT_IMAGE\"] = 4] = \"CHAT_IMAGE\";\n  ContentPosition2[ContentPosition2[\"AFTER_IMAGE\"] = 5] = \"AFTER_IMAGE\";\n  ContentPosition2[ContentPosition2[\"BEFORE_MARKDOWN\"] = 6] = \"BEFORE_MARKDOWN\";\n  ContentPosition2[ContentPosition2[\"MARKDOWN\"] = 7] = \"MARKDOWN\";\n  ContentPosition2[ContentPosition2[\"AFTER_MARKDOWN\"] = 8] = \"AFTER_MARKDOWN\";\n  ContentPosition2[ContentPosition2[\"CHAT_DOCUMENT_FILES\"] = 9] = \"CHAT_DOCUMENT_FILES\";\n  ContentPosition2[ContentPosition2[\"AFTER_DOCUMENT_FILES\"] = 10] = \"AFTER_DOCUMENT_FILES\";\n  ContentPosition2[ContentPosition2[\"CHAT_SOURCES\"] = 11] = \"CHAT_SOURCES\";\n  ContentPosition2[ContentPosition2[\"AFTER_SOURCES\"] = 12] = \"AFTER_SOURCES\";\n  ContentPosition2[ContentPosition2[\"SUGGESTED_QUESTIONS\"] = 13] = \"SUGGESTED_QUESTIONS\";\n  ContentPosition2[ContentPosition2[\"AFTER_SUGGESTED_QUESTIONS\"] = 14] = \"AFTER_SUGGESTED_QUESTIONS\";\n  ContentPosition2[ContentPosition2[\"BOTTOM\"] = 9999] = \"BOTTOM\";\n  return ContentPosition2;\n})(ContentPosition || {});\nvar chatMessageContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar ChatMessageProvider = chatMessageContext.Provider;\nvar useChatMessage = () => {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(chatMessageContext);\n  if (!context)\n    throw new Error(\"useChatMessage must be used within a ChatMessageProvider\");\n  return context;\n};\nfunction ChatMessage(props) {\n  var _a;\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatMessageAvatar, {}),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatMessageContent, { isLoading: props.isLoading, append: props.append }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatMessageActions, {})\n  ] });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    ChatMessageProvider,\n    {\n      value: { message: props.message, isLast: props.isLast },\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", { className: cn(\"group flex gap-4 p-3\", props.className), children })\n    }\n  );\n}\nfunction ChatMessageAvatar(props) {\n  var _a, _b;\n  const { message } = useChatMessage();\n  const roleIconMap = {\n    user: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], { className: \"h-4 w-4\" }),\n    assistant: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"], { className: \"h-4 w-4\" })\n  };\n  const children = (_b = (_a = props.children) != null ? _a : roleIconMap[message.role]) != null ? _b : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], { className: \"h-4 w-4\" });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", { className: \"bg-background flex h-8 w-8 shrink-0 select-none items-center justify-center border\", children });\n}\nfunction ChatMessageContent(props) {\n  var _a, _b;\n  const { message: defaultMessage, isLast } = useChatMessage();\n  const message = (_a = props.message) != null ? _a : defaultMessage;\n  const annotations = message.annotations;\n  const contents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    var _a2, _b2;\n    const displayMap = __spreadValues({\n      [0 /* CHAT_EVENTS */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n        EventAnnotations,\n        {\n          message,\n          showLoading: (_a2 = isLast && props.isLoading) != null ? _a2 : false\n        }\n      ),\n      [2 /* CHAT_AGENT_EVENTS */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AgentEventAnnotations, { message }),\n      [4 /* CHAT_IMAGE */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ImageAnnotations, { message }),\n      [7 /* MARKDOWN */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n        _widgets_index_js__WEBPACK_IMPORTED_MODULE_6__.Markdown,\n        {\n          content: message.content,\n          sources: annotations ? getSourceAnnotationData(annotations)[0] : void 0\n        }\n      ),\n      [9 /* CHAT_DOCUMENT_FILES */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DocumentFileAnnotations, { message }),\n      [11 /* CHAT_SOURCES */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SourceAnnotations, { message })\n    }, isLast && props.append && {\n      // show suggested questions only on the last message\n      [13 /* SUGGESTED_QUESTIONS */]: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n        SuggestedQuestionsAnnotations,\n        {\n          message,\n          append: props.append\n        }\n      )\n    });\n    (_b2 = props.content) == null ? void 0 : _b2.forEach((content) => {\n      displayMap[content.position] = content.component;\n    });\n    return Object.entries(displayMap).map(([position, component]) => ({\n      position: parseInt(position),\n      component\n    }));\n  }, [\n    annotations,\n    isLast,\n    message,\n    props.append,\n    props.content,\n    props.isLoading\n  ]);\n  const children = (_b = props.children) != null ? _b : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: contents.sort((a, b) => a.position - b.position).map((content, index) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: content.component }, index)) });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", { className: cn(\"flex min-w-0 flex-1 flex-col gap-4\", props.className), children });\n}\nfunction ChatMessageActions(props) {\n  var _a;\n  const { isCopied, copyToClipboard } = useCopyToClipboard({ timeout: 2e3 });\n  const { message } = useChatMessage();\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    Button,\n    {\n      onClick: () => copyToClipboard(message.content),\n      size: \"icon\",\n      variant: \"ghost\",\n      className: \"h-8 w-8\",\n      children: isCopied ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], { className: \"h-4 w-4\" }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_11__[\"default\"], { className: \"h-4 w-4\" })\n    }\n  );\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    \"div\",\n    {\n      className: cn(\n        \"flex shrink-0 flex-col gap-2 opacity-0 group-hover:opacity-100\",\n        props.className\n      ),\n      children\n    }\n  );\n}\nvar PrimiviteChatMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(ChatMessage, (prevProps, nextProps) => {\n  return !nextProps.isLast && prevProps.isLast === nextProps.isLast && prevProps.message === nextProps.message;\n});\nPrimiviteChatMessage.Avatar = ChatMessageAvatar;\nPrimiviteChatMessage.Content = ChatMessageContent;\nPrimiviteChatMessage.Actions = ChatMessageActions;\nvar chat_message_default = PrimiviteChatMessage;\n\n// src/chat/chat-messages.tsx\n\nvar chatMessagesContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar ChatMessagesProvider = chatMessagesContext.Provider;\nvar useChatMessages = () => {\n  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(chatMessagesContext);\n  if (!context) {\n    throw new Error(\n      \"useChatMessages must be used within a ChatMessagesProvider\"\n    );\n  }\n  return context;\n};\nfunction ChatMessages(props) {\n  var _a;\n  const { messages, reload, stop, isLoading } = useChatUI();\n  const messageLength = messages.length;\n  const lastMessage = messages[messageLength - 1];\n  const isLastMessageFromAssistant = messageLength > 0 && (lastMessage == null ? void 0 : lastMessage.role) !== \"user\";\n  const showReload = reload && !isLoading && isLastMessageFromAssistant;\n  const showStop = stop && isLoading;\n  const isPending = isLoading && !isLastMessageFromAssistant;\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatMessagesList, {}),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatActions, {})\n  ] });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    ChatMessagesProvider,\n    {\n      value: { isPending, showReload, showStop, lastMessage, messageLength },\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n        \"div\",\n        {\n          className: cn(\n            \"bg-background relative flex min-h-0 flex-1 flex-col space-y-6 p-4\",\n            props.className\n          ),\n          children\n        }\n      )\n    }\n  );\n}\nfunction ChatMessagesList(props) {\n  var _a;\n  const scrollableChatContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const { messages, isLoading, append } = useChatUI();\n  const { lastMessage, messageLength } = useChatMessages();\n  const scrollToBottom = () => {\n    if (scrollableChatContainerRef.current) {\n      scrollableChatContainerRef.current.scrollTop = scrollableChatContainerRef.current.scrollHeight;\n    }\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    scrollToBottom();\n  }, [messageLength, lastMessage]);\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: [\n    messages.map((message, index) => {\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n        chat_message_default,\n        {\n          message,\n          isLast: index === messageLength - 1,\n          isLoading,\n          append\n        },\n        index\n      );\n    }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatMessagesLoading, {})\n  ] });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    \"div\",\n    {\n      className: cn(\n        \"flex min-h-0 flex-1 flex-col gap-5 overflow-auto\",\n        props.className\n      ),\n      ref: scrollableChatContainerRef,\n      children\n    }\n  );\n}\nfunction ChatMessagesLoading(props) {\n  var _a;\n  const { isPending } = useChatMessages();\n  if (!isPending) return null;\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], { className: \"h-4 w-4 animate-spin\" });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\n    \"div\",\n    {\n      className: cn(\"flex items-center justify-center pt-4\", props.className),\n      children\n    }\n  );\n}\nfunction ChatActions(props) {\n  var _a;\n  const { reload, stop, requestData } = useChatUI();\n  const { showReload, showStop } = useChatMessages();\n  if (!showStop && !showReload) return null;\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: [\n    showStop && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Button, { variant: \"outline\", size: \"sm\", onClick: stop, children: [\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_13__[\"default\"], { className: \"mr-2 h-4 w-4\" }),\n      \"Stop generating\"\n    ] }),\n    showReload && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\n      Button,\n      {\n        variant: \"outline\",\n        size: \"sm\",\n        onClick: () => reload == null ? void 0 : reload({ data: requestData }),\n        children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lucide_react__WEBPACK_IMPORTED_MODULE_14__[\"default\"], { className: \"mr-2 h-4 w-4\" }),\n          \"Regenerate\"\n        ]\n      }\n    )\n  ] });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", { className: cn(\"flex justify-end gap-4\", props.className), children });\n}\nChatMessages.List = ChatMessagesList;\nChatMessages.Loading = ChatMessagesLoading;\nChatMessages.Actions = ChatActions;\nvar chat_messages_default = ChatMessages;\n\n// src/chat/chat-section.tsx\n\nfunction ChatSection(props) {\n  var _a;\n  const { handler, className } = props;\n  const [requestData, setRequestData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const children = (_a = props.children) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(chat_messages_default, {}),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(chat_input_default, {})\n  ] });\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ChatProvider, { value: __spreadProps(__spreadValues({}, handler), { requestData, setRequestData }), children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", { className: cn(\"flex flex-col gap-4\", className), children }) });\n}\n\n// src/hook/use-file.tsx\n\nvar docMineTypeMap = {\n  \"text/csv\": \"csv\",\n  \"application/pdf\": \"pdf\",\n  \"text/plain\": \"txt\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\"\n};\nfunction useFile({ uploadAPI }) {\n  const [imageUrl, setImageUrl] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const [files, setFiles] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  const addDoc = (file) => {\n    const existedFile = files.find((f) => f.id === file.id);\n    if (!existedFile) {\n      setFiles((prev) => [...prev, file]);\n      return true;\n    }\n    return false;\n  };\n  const removeDoc = (file) => {\n    setFiles((prev) => prev.filter((f) => f.id !== file.id));\n  };\n  const reset = () => {\n    imageUrl && setImageUrl(null);\n    files.length && setFiles([]);\n  };\n  const uploadContent = (_0, ..._1) => __async(this, [_0, ..._1], function* (file, requestParams = {}) {\n    const base64 = yield readContent({ file, asUrl: true });\n    const response = yield fetch(uploadAPI, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(__spreadProps(__spreadValues({}, requestParams), {\n        base64,\n        name: file.name\n      }))\n    });\n    if (!response.ok) throw new Error(\"Failed to upload document.\");\n    return yield response.json();\n  });\n  const getAnnotations = () => {\n    const annotations = [];\n    if (imageUrl) {\n      annotations.push({\n        type: \"image\",\n        data: { url: imageUrl }\n      });\n    }\n    if (files.length > 0) {\n      annotations.push({\n        type: \"document_file\",\n        data: { files }\n      });\n    }\n    return annotations;\n  };\n  const readContent = (input) => __async(this, null, function* () {\n    const { file, asUrl } = input;\n    const content = yield new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      if (asUrl) {\n        reader.readAsDataURL(file);\n      } else {\n        reader.readAsText(file);\n      }\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = (error) => reject(error);\n    });\n    return content;\n  });\n  const uploadFile = (_0, ..._1) => __async(this, [_0, ..._1], function* (file, requestParams = {}) {\n    if (file.type.startsWith(\"image/\")) {\n      const base64 = yield readContent({ file, asUrl: true });\n      return setImageUrl(base64);\n    }\n    const filetype = docMineTypeMap[file.type];\n    if (!filetype) throw new Error(\"Unsupported document type.\");\n    const newDoc = yield uploadContent(file, requestParams);\n    return addDoc(newDoc);\n  });\n  return {\n    imageUrl,\n    setImageUrl,\n    files,\n    removeDoc,\n    reset,\n    getAnnotations,\n    uploadFile\n  };\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/chat-ui/dist/chat/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/chat-ui/dist/styles/markdown.css":
/*!*******************************************************************!*\
  !*** ./node_modules/@llamaindex/chat-ui/dist/styles/markdown.css ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"01f2e6832ffc\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY2hhdC11aS9kaXN0L3N0eWxlcy9tYXJrZG93bi5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY2hhdC11aS9kaXN0L3N0eWxlcy9tYXJrZG93bi5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIwMWYyZTY4MzJmZmNcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/chat-ui/dist/styles/markdown.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/chat-ui/dist/styles/pdf.css":
/*!**************************************************************!*\
  !*** ./node_modules/@llamaindex/chat-ui/dist/styles/pdf.css ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"7116a1e39b99\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY2hhdC11aS9kaXN0L3N0eWxlcy9wZGYuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NoYXQtdWkvZGlzdC9zdHlsZXMvcGRmLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjcxMTZhMWUzOWI5OVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/chat-ui/dist/styles/pdf.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/chat-ui/dist/widgets/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@llamaindex/chat-ui/dist/widgets/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatAgentEvents: () => (/* binding */ ChatAgentEvents),\n/* harmony export */   ChatEvents: () => (/* binding */ ChatEvents),\n/* harmony export */   ChatFiles: () => (/* binding */ ChatFiles),\n/* harmony export */   ChatImage: () => (/* binding */ ChatImage),\n/* harmony export */   ChatSources: () => (/* binding */ ChatSources),\n/* harmony export */   CodeBlock: () => (/* binding */ CodeBlock),\n/* harmony export */   DocumentInfo: () => (/* binding */ DocumentInfo),\n/* harmony export */   FileUploader: () => (/* binding */ FileUploader),\n/* harmony export */   ImagePreview: () => (/* binding */ ImagePreview),\n/* harmony export */   Markdown: () => (/* binding */ Markdown),\n/* harmony export */   PdfDialog: () => (/* binding */ PdfDialog),\n/* harmony export */   StarterQuestions: () => (/* binding */ StarterQuestions),\n/* harmony export */   SuggestedQuestions: () => (/* binding */ SuggestedQuestions)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=icons!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/bot.js\");\n/* harmony import */ var _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=icons!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/scan-search.js\");\n/* harmony import */ var _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=icons!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/pen-line.js\");\n/* harmony import */ var _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=icons!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/message-circle.js\");\n/* harmony import */ var _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=icons!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/book-check.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! class-variance-authority */ \"(ssr)/./node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tailwind-merge */ \"(ssr)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var vaul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vaul */ \"(ssr)/./node_modules/@llamaindex/chat-ui/node_modules/vaul/dist/index.mjs\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/lib/react-markdown.js\");\n/* harmony import */ var rehype_katex__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rehype-katex */ \"(ssr)/./node_modules/rehype-katex/lib/index.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var remark_math__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! remark-math */ \"(ssr)/./node_modules/remark-math/index.js\");\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! highlight.js */ \"(ssr)/./node_modules/highlight.js/es/index.js\");\n/* harmony import */ var _barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=Check,Copy,Download!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/download.js\");\n/* harmony import */ var _barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Check,Copy,FileIcon,XCircleIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/check.js\");\n/* harmony import */ var _barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=Check,Copy,FileIcon,XCircleIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/copy.js\");\n/* harmony import */ var _radix_ui_react_hover_card__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @radix-ui/react-hover-card */ \"(ssr)/./node_modules/@radix-ui/react-hover-card/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_Check_Copy_FileIcon_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Check,Copy,FileIcon,XCircleIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/file.js\");\n/* harmony import */ var _barrel_optimize_names_Check_Copy_FileIcon_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=XCircleIcon!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/circle-x.js\");\n/* harmony import */ var _radix_ui_react_progress__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @radix-ui/react-progress */ \"(ssr)/./node_modules/@radix-ui/react-progress/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronDown,ChevronRight,Loader2!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/chevron-down.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=ChevronDown,ChevronRight,Loader2!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/chevron-right.js\");\n/* harmony import */ var _barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2,Paperclip!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/loader-circle.js\");\n/* harmony import */ var _radix_ui_react_collapsible__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @radix-ui/react-collapsible */ \"(ssr)/./node_modules/@radix-ui/react-collapsible/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_Loader2_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2,Paperclip!=!lucide-react */ \"(ssr)/./node_modules/lucide-react/dist/esm/icons/paperclip.js\");\n/* __next_internal_client_entry_do_not_use__ ChatAgentEvents,ChatEvents,ChatFiles,ChatImage,ChatSources,CodeBlock,DocumentInfo,FileUploader,ImagePreview,Markdown,PdfDialog,StarterQuestions,SuggestedQuestions auto */ var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/widgets/chat-agent-events.tsx\n\n\n// src/ui/button.tsx\n\n\n\n// src/lib/utils.ts\n\n\nfunction cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_3__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)(inputs));\n}\n// src/ui/button.tsx\n\nvar buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_1__.cva)(\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\"\n        },\n        size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nvar Button = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((_a, ref)=>{\n    var _b = _a, { className, variant, size, asChild = false } = _b, props = __objRest(_b, [\n        \"className\",\n        \"variant\",\n        \"size\",\n        \"asChild\"\n    ]);\n    const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"button\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Comp, __spreadValues({\n        className: cn(buttonVariants({\n            variant,\n            size,\n            className\n        })),\n        ref\n    }, props));\n});\nButton.displayName = \"Button\";\n// src/ui/drawer.tsx\n\n\n\nvar Drawer = (_a)=>{\n    var _b = _a, { shouldScaleBackground = true } = _b, props = __objRest(_b, [\n        \"shouldScaleBackground\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Root, __spreadValues({\n        shouldScaleBackground\n    }, props));\n};\nDrawer.displayName = \"Drawer\";\nvar DrawerTrigger = vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Trigger;\nvar DrawerPortal = vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Portal;\nvar DrawerClose = vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Close;\nvar DrawerOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((_a, ref)=>{\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Overlay, __spreadValues({\n        ref,\n        className: cn(\"fixed inset-0 z-50 bg-black/80\", className)\n    }, props));\n});\nDrawerOverlay.displayName = vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Overlay.displayName;\nvar DrawerContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((_a, ref)=>{\n    var _b = _a, { className, children } = _b, props = __objRest(_b, [\n        \"className\",\n        \"children\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DrawerPortal, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerOverlay, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Content, __spreadProps(__spreadValues({\n                ref,\n                className: cn(\"bg-background fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border\", className)\n            }, props), {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"bg-muted mx-auto mt-4 h-2 w-[100px] rounded-full\"\n                    }),\n                    children\n                ]\n            }))\n        ]\n    });\n});\nDrawerContent.displayName = \"DrawerContent\";\nvar DrawerHeader = (_a)=>{\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", __spreadValues({\n        className: cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)\n    }, props));\n};\nDrawerHeader.displayName = \"DrawerHeader\";\nvar DrawerFooter = (_a)=>{\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", __spreadValues({\n        className: cn(\"mt-auto flex flex-col gap-2 p-4\", className)\n    }, props));\n};\nDrawerFooter.displayName = \"DrawerFooter\";\nvar DrawerTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((_a, ref)=>{\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Title, __spreadValues({\n        ref,\n        className: cn(\"text-lg font-semibold leading-none tracking-tight\", className)\n    }, props));\n});\nDrawerTitle.displayName = vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Title.displayName;\nvar DrawerDescription = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((_a, ref)=>{\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Description, __spreadValues({\n        ref,\n        className: cn(\"text-muted-foreground text-sm\", className)\n    }, props));\n});\nDrawerDescription.displayName = vaul__WEBPACK_IMPORTED_MODULE_6__.Drawer.Description.displayName;\n// src/widgets/markdown.tsx\n\n\n\n\n\n// src/widgets/codeblock.tsx\n\n\n\n// src/hook/use-copy-to-clipboard.tsx\n\nfunction useCopyToClipboard({ timeout = 2e3 }) {\n    const [isCopied, setIsCopied] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const copyToClipboard = (value)=>{\n        var _a;\n        if (true) {\n            return;\n        }\n        if (!value) {\n            return;\n        }\n        navigator.clipboard.writeText(value).then(()=>{\n            setIsCopied(true);\n            setTimeout(()=>{\n                setIsCopied(false);\n            }, timeout);\n        });\n    };\n    return {\n        isCopied,\n        copyToClipboard\n    };\n}\n// src/widgets/codeblock.tsx\n\nvar programmingLanguages = {\n    javascript: \".js\",\n    python: \".py\",\n    java: \".java\",\n    c: \".c\",\n    cpp: \".cpp\",\n    \"c++\": \".cpp\",\n    \"c#\": \".cs\",\n    ruby: \".rb\",\n    php: \".php\",\n    swift: \".swift\",\n    \"objective-c\": \".m\",\n    kotlin: \".kt\",\n    typescript: \".ts\",\n    go: \".go\",\n    perl: \".pl\",\n    rust: \".rs\",\n    scala: \".scala\",\n    haskell: \".hs\",\n    lua: \".lua\",\n    shell: \".sh\",\n    sql: \".sql\",\n    html: \".html\",\n    css: \".css\"\n};\nvar generateRandomString = (length, lowercase = false)=>{\n    const chars = \"ABCDEFGHJKLMNPQRSTUVWXY3456789\";\n    let result = \"\";\n    for(let i = 0; i < length; i++){\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return lowercase ? result.toLowerCase() : result;\n};\nvar CodeBlock = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({ language, value, className })=>{\n    const { isCopied, copyToClipboard } = useCopyToClipboard({\n        timeout: 2e3\n    });\n    const codeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"CodeBlock.useEffect\": ()=>{\n            if (codeRef.current && codeRef.current.dataset.highlighted !== \"yes\") {\n                highlight_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].highlightElement(codeRef.current);\n            }\n        }\n    }[\"CodeBlock.useEffect\"], [\n        language,\n        value\n    ]);\n    const downloadAsFile = ()=>{\n        if (true) {\n            return;\n        }\n        const fileExtension = programmingLanguages[language] || \".file\";\n        const suggestedFileName = `file-${generateRandomString(3, true)}${fileExtension}`;\n        const fileName = window.prompt(\"Enter file name\", suggestedFileName);\n        if (!fileName) {\n            return;\n        }\n        const blob = new Blob([\n            value\n        ], {\n            type: \"text/plain\"\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.download = fileName;\n        link.href = url;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n    };\n    const onCopy = ()=>{\n        if (isCopied) return;\n        copyToClipboard(value);\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: `codeblock relative w-full bg-zinc-950 font-sans ${className}`,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"flex w-full items-center justify-between bg-zinc-800 px-6 py-2 pr-4 text-zinc-100\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"text-xs lowercase\",\n                        children: language\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"flex items-center space-x-1\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Button, {\n                                variant: \"ghost\",\n                                onClick: downloadAsFile,\n                                size: \"icon\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"sr-only\",\n                                        children: \"Download\"\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Button, {\n                                variant: \"ghost\",\n                                size: \"icon\",\n                                onClick: onCopy,\n                                children: [\n                                    isCopied ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                        className: \"h-4 w-4\"\n                                    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                                        className: \"h-4 w-4\"\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"sr-only\",\n                                        children: \"Copy code\"\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"pre\", {\n                className: \"border border-zinc-700 text-white\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", {\n                    ref: codeRef,\n                    className: `language-${language} font-mono`,\n                    children: value\n                })\n            })\n        ]\n    });\n});\nCodeBlock.displayName = \"CodeBlock\";\n// src/chat/annotation.ts\nvar DOCUMENT_FILE_TYPES = [\n    \"csv\",\n    \"pdf\",\n    \"txt\",\n    \"docx\"\n];\n// src/widgets/document-info.tsx\n\n\n// src/widgets/pdf-dialog.tsx\n\n\nvar PDFViewer = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(()=>Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@llamaindex\"), __webpack_require__.e(\"vendor-chunks/react-pdf\"), __webpack_require__.e(\"vendor-chunks/@babel\"), __webpack_require__.e(\"vendor-chunks/tiny-invariant\"), __webpack_require__.e(\"vendor-chunks/pdfjs-dist\"), __webpack_require__.e(\"vendor-chunks/merge-refs\"), __webpack_require__.e(\"vendor-chunks/make-event-props\"), __webpack_require__.e(\"vendor-chunks/make-cancellable-promise\"), __webpack_require__.e(\"vendor-chunks/warning\"), __webpack_require__.e(\"vendor-chunks/memoize-one\"), __webpack_require__.e(\"vendor-chunks/lodash.debounce\"), __webpack_require__.e(\"vendor-chunks/fuse.js\")]).then(__webpack_require__.bind(__webpack_require__, /*! @llamaindex/pdf-viewer */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/index.js\")).then((m)=>({\n            default: m.PDFViewer\n        })));\nvar PdfFocusProvider = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.lazy)(()=>Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@llamaindex\"), __webpack_require__.e(\"vendor-chunks/react-pdf\"), __webpack_require__.e(\"vendor-chunks/@babel\"), __webpack_require__.e(\"vendor-chunks/tiny-invariant\"), __webpack_require__.e(\"vendor-chunks/pdfjs-dist\"), __webpack_require__.e(\"vendor-chunks/merge-refs\"), __webpack_require__.e(\"vendor-chunks/make-event-props\"), __webpack_require__.e(\"vendor-chunks/make-cancellable-promise\"), __webpack_require__.e(\"vendor-chunks/warning\"), __webpack_require__.e(\"vendor-chunks/memoize-one\"), __webpack_require__.e(\"vendor-chunks/lodash.debounce\"), __webpack_require__.e(\"vendor-chunks/fuse.js\")]).then(__webpack_require__.bind(__webpack_require__, /*! @llamaindex/pdf-viewer */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/index.js\")).then((m)=>({\n            default: m.PdfFocusProvider\n        })));\nfunction PdfDialog(props) {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Drawer, {\n        direction: \"left\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerTrigger, {\n                asChild: true,\n                children: props.trigger\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DrawerContent, {\n                className: \"mt-24 h-full max-h-[96%] w-3/5 \",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DrawerHeader, {\n                        className: \"flex justify-between\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"space-y-2\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerTitle, {\n                                        children: \"PDF Content\"\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DrawerDescription, {\n                                        children: [\n                                            \"File URL:\",\n                                            \" \",\n                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n                                                className: \"hover:text-blue-900\",\n                                                href: props.url,\n                                                target: \"_blank\",\n                                                rel: \"noopener\",\n                                                children: props.url\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerClose, {\n                                asChild: true,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                                    variant: \"outline\",\n                                    children: \"Close\"\n                                })\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"m-4\",\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PdfFocusProvider, {\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PDFViewer, {\n                                file: {\n                                    id: props.documentId,\n                                    url: props.url\n                                }\n                            })\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n}\n// src/widgets/source-number-button.tsx\n\nfunction SourceNumberButton({ index, className }) {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n        className: cn(\"inline-flex h-5 w-5 items-center justify-center rounded-full bg-gray-100 text-xs\", className),\n        children: index + 1\n    });\n}\n// src/ui/icons/docx.tsx\n\nvar DocxIcon = ({ width = 40, height = 40, className })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        width,\n        height,\n        viewBox: \"-4 0 64 64\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                fillRule: \"evenodd\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"m5.11 0a5.07 5.07 0 0 0 -5.11 5v53.88a5.07 5.07 0 0 0 5.11 5.12h45.78a5.07 5.07 0 0 0 5.11-5.12v-38.6l-18.94-20.28z\",\n                        fill: \"#107cad\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"m56 20.35v1h-12.82s-6.31-1.26-6.13-6.71c0 0 .21 5.71 6 5.71z\",\n                        fill: \"#084968\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"m37.07 0v14.56a5.78 5.78 0 0 0 6.11 5.79h12.82z\",\n                        fill: \"#90d0fe\",\n                        opacity: \".5\"\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                d: \"m14.24 53.86h-3a1.08 1.08 0 0 1 -1.08-1.08v-9.85a1.08 1.08 0 0 1 1.08-1.08h3a6 6 0 1 1 0 12zm0-10.67h-2.61v9.34h2.61a4.41 4.41 0 0 0 4.61-4.66 4.38 4.38 0 0 0 -4.61-4.68zm14.42 10.89a5.86 5.86 0 0 1 -6-6.21 6 6 0 1 1 11.92 0 5.87 5.87 0 0 1 -5.92 6.21zm0-11.09c-2.7 0-4.41 2.07-4.41 4.88s1.71 4.88 4.41 4.88 4.41-2.09 4.41-4.88-1.72-4.87-4.41-4.87zm18.45.38a.75.75 0 0 1 .2.52.71.71 0 0 1 -.7.72.64.64 0 0 1 -.51-.24 4.06 4.06 0 0 0 -3-1.38 4.61 4.61 0 0 0 -4.63 4.88 4.63 4.63 0 0 0 4.63 4.88 4 4 0 0 0 3-1.37.7.7 0 0 1 .51-.24.72.72 0 0 1 .7.74.78.78 0 0 1 -.2.51 5.33 5.33 0 0 1 -4 1.69 6.22 6.22 0 0 1 0-12.43 5.26 5.26 0 0 1 4 1.72z\",\n                fill: \"#ffffff\"\n            })\n        ]\n    });\n};\n// src/ui/icons/pdf.tsx\n\nvar PDFIcon = ({ className, width = 40, height = 40 })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"svg\", {\n        width,\n        height,\n        version: \"1.1\",\n        id: \"Layer_1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n        viewBox: \"0 0 309.267 309.267\",\n        className,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                    style: {\n                        fill: \"#E2574C\"\n                    },\n                    d: \"M38.658,0h164.23l87.049,86.711v203.227c0,10.679-8.659,19.329-19.329,19.329H38.658\\n            c-10.67,0-19.329-8.65-19.329-19.329V19.329C19.329,8.65,27.989,0,38.658,0z\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                    style: {\n                        fill: \"#B53629\"\n                    },\n                    d: \"M289.658,86.981h-67.372c-10.67,0-19.329-8.659-19.329-19.329V0.193L289.658,86.981z\"\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                    style: {\n                        fill: \"#FFFFFF\"\n                    },\n                    d: \"M217.434,146.544c3.238,0,4.823-2.822,4.823-5.557c0-2.832-1.653-5.567-4.823-5.567h-18.44\\n            c-3.605,0-5.615,2.986-5.615,6.282v45.317c0,4.04,2.3,6.282,5.412,6.282c3.093,0,5.403-2.242,5.403-6.282v-12.438h11.153\\n            c3.46,0,5.19-2.832,5.19-5.644c0-2.754-1.73-5.49-5.19-5.49h-11.153v-16.903C204.194,146.544,217.434,146.544,217.434,146.544z\\n            M155.107,135.42h-13.492c-3.663,0-6.263,2.513-6.263,6.243v45.395c0,4.629,3.74,6.079,6.417,6.079h14.159\\n            c16.758,0,27.824-11.027,27.824-28.047C183.743,147.095,173.325,135.42,155.107,135.42z M155.755,181.946h-8.225v-35.334h7.413\\n            c11.221,0,16.101,7.529,16.101,17.918C171.044,174.253,166.25,181.946,155.755,181.946z M106.33,135.42H92.964\\n            c-3.779,0-5.886,2.493-5.886,6.282v45.317c0,4.04,2.416,6.282,5.663,6.282s5.663-2.242,5.663-6.282v-13.231h8.379\\n            c10.341,0,18.875-7.326,18.875-19.107C125.659,143.152,117.425,135.42,106.33,135.42z M106.108,163.158h-7.703v-17.097h7.703\\n            c4.755,0,7.78,3.711,7.78,8.553C113.878,159.447,110.863,163.158,106.108,163.158z\"\n                })\n            ]\n        })\n    });\n};\n// src/ui/icons/sheet.tsx\n\nvar SheetIcon = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        width: \"49px\",\n        height: \"67px\",\n        viewBox: \"0 0 49 67\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"title\", {\n                children: \"Sheets-icon\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"desc\", {\n                children: \"Created with Sketch.\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"defs\", {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        d: \"M29.5833333,0 L4.4375,0 C1.996875,0 0,1.996875 0,4.4375 L0,60.6458333 C0,63.0864583 1.996875,65.0833333 4.4375,65.0833333 L42.8958333,65.0833333 C45.3364583,65.0833333 47.3333333,63.0864583 47.3333333,60.6458333 L47.3333333,17.75 L29.5833333,0 Z\",\n                        id: \"path-1\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"linearGradient\", {\n                        x1: \"50.0053945%\",\n                        y1: \"8.58610612%\",\n                        x2: \"50.0053945%\",\n                        y2: \"100.013939%\",\n                        id: \"linearGradient-7\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"stop\", {\n                                stopColor: \"#263238\",\n                                stopOpacity: \"0.2\",\n                                offset: \"0%\"\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"stop\", {\n                                stopColor: \"#263238\",\n                                stopOpacity: \"0.02\",\n                                offset: \"100%\"\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"radialGradient\", {\n                        cx: \"3.16804688%\",\n                        cy: \"2.71744318%\",\n                        fx: \"3.16804688%\",\n                        fy: \"2.71744318%\",\n                        r: \"161.248516%\",\n                        gradientTransform: \"translate(0.031680,0.027174),scale(1.000000,0.727273),translate(-0.031680,-0.027174)\",\n                        id: \"radialGradient-16\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"stop\", {\n                                stopColor: \"#FFFFFF\",\n                                stopOpacity: \"0.1\",\n                                offset: \"0%\"\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"stop\", {\n                                stopColor: \"#FFFFFF\",\n                                stopOpacity: \"0\",\n                                offset: \"100%\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                id: \"Page-1\",\n                stroke: \"none\",\n                strokeWidth: \"1\",\n                fill: \"none\",\n                fillRule: \"evenodd\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                    id: \"Consumer-Apps-Sheets-Large-VD-R8-\",\n                    transform: \"translate(-451.000000, -451.000000)\",\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                        id: \"Hero\",\n                        transform: \"translate(0.000000, 63.000000)\",\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                            id: \"Personal\",\n                            transform: \"translate(277.000000, 299.000000)\",\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                                id: \"Sheets-icon\",\n                                transform: \"translate(174.833333, 89.958333)\",\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                    id: \"Group\",\n                                    children: [\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                            id: \"Clipped\",\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"mask\", {\n                                                    id: \"mask-2\",\n                                                    fill: \"white\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                                                        xlinkHref: \"#path-1\"\n                                                    })\n                                                }),\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                    d: \"M29.5833333,0 L4.4375,0 C1.996875,0 0,1.996875 0,4.4375 L0,60.6458333 C0,63.0864583 1.996875,65.0833333 4.4375,65.0833333 L42.8958333,65.0833333 C45.3364583,65.0833333 47.3333333,63.0864583 47.3333333,60.6458333 L47.3333333,17.75 L36.9791667,10.3541667 L29.5833333,0 Z\",\n                                                    id: \"Path\",\n                                                    fill: \"#0F9D58\",\n                                                    fillRule: \"nonzero\",\n                                                    mask: \"url(#mask-2)\"\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                            id: \"Clipped\",\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"mask\", {\n                                                    id: \"mask-4\",\n                                                    fill: \"white\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                                                        xlinkHref: \"#path-1\"\n                                                    })\n                                                }),\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                    d: \"M11.8333333,31.8020833 L11.8333333,53.25 L35.5,53.25 L35.5,31.8020833 L11.8333333,31.8020833 Z M22.1875,50.2916667 L14.7916667,50.2916667 L14.7916667,46.59375 L22.1875,46.59375 L22.1875,50.2916667 Z M22.1875,44.375 L14.7916667,44.375 L14.7916667,40.6770833 L22.1875,40.6770833 L22.1875,44.375 Z M22.1875,38.4583333 L14.7916667,38.4583333 L14.7916667,34.7604167 L22.1875,34.7604167 L22.1875,38.4583333 Z M32.5416667,50.2916667 L25.1458333,50.2916667 L25.1458333,46.59375 L32.5416667,46.59375 L32.5416667,50.2916667 Z M32.5416667,44.375 L25.1458333,44.375 L25.1458333,40.6770833 L32.5416667,40.6770833 L32.5416667,44.375 Z M32.5416667,38.4583333 L25.1458333,38.4583333 L25.1458333,34.7604167 L32.5416667,34.7604167 L32.5416667,38.4583333 Z\",\n                                                    id: \"Shape\",\n                                                    fill: \"#F1F1F1\",\n                                                    fillRule: \"nonzero\",\n                                                    mask: \"url(#mask-4)\"\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                            id: \"Clipped\",\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"mask\", {\n                                                    id: \"mask-6\",\n                                                    fill: \"white\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                                                        xlinkHref: \"#path-1\"\n                                                    })\n                                                }),\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"polygon\", {\n                                                    id: \"Path\",\n                                                    fill: \"url(#linearGradient-7)\",\n                                                    fillRule: \"nonzero\",\n                                                    mask: \"url(#mask-6)\",\n                                                    points: \"30.8813021 16.4520313 47.3333333 32.9003646 47.3333333 17.75\"\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                            id: \"Clipped\",\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"mask\", {\n                                                    id: \"mask-9\",\n                                                    fill: \"white\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                                                        xlinkHref: \"#path-1\"\n                                                    })\n                                                }),\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                                                    id: \"Group\",\n                                                    mask: \"url(#mask-9)\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"g\", {\n                                                        transform: \"translate(26.625000, -2.958333)\",\n                                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                            d: \"M2.95833333,2.95833333 L2.95833333,16.2708333 C2.95833333,18.7225521 4.94411458,20.7083333 7.39583333,20.7083333 L20.7083333,20.7083333 L2.95833333,2.95833333 Z\",\n                                                            id: \"Path\",\n                                                            fill: \"#87CEAC\",\n                                                            fillRule: \"nonzero\"\n                                                        })\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                            id: \"Clipped\",\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"mask\", {\n                                                    id: \"mask-11\",\n                                                    fill: \"white\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                                                        xlinkHref: \"#path-1\"\n                                                    })\n                                                }),\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                    d: \"M4.4375,0 C1.996875,0 0,1.996875 0,4.4375 L0,4.80729167 C0,2.36666667 1.996875,0.369791667 4.4375,0.369791667 L29.5833333,0.369791667 L29.5833333,0 L4.4375,0 Z\",\n                                                    id: \"Path\",\n                                                    fillOpacity: \"0.2\",\n                                                    fill: \"#FFFFFF\",\n                                                    fillRule: \"nonzero\",\n                                                    mask: \"url(#mask-11)\"\n                                                })\n                                            ]\n                                        }),\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                                            id: \"Clipped\",\n                                            children: [\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"mask\", {\n                                                    id: \"mask-13\",\n                                                    fill: \"white\",\n                                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"use\", {\n                                                        xlinkHref: \"#path-1\"\n                                                    })\n                                                }),\n                                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                                                    d: \"M42.8958333,64.7135417 L4.4375,64.7135417 C1.996875,64.7135417 0,62.7166667 0,60.2760417 L0,60.6458333 C0,63.0864583 1.996875,65.0833333 4.4375,65.0833333 L42.8958333,65.0833333 C45.3364583,65.0833333 47.3333333,63.0864583 47.3333333,60.6458333 L47.3333333,25.1666667 L42.8958333,21.0208333 L42.8958333,64.7135417 Z\",\n                                                    id: \"Path\",\n                                                    fill: \"url(#radialGradient-16)\",\n                                                    fillRule: \"nonzero\",\n                                                    mask: \"url(#mask-13)\"\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        ]\n    });\n// src/ui/icons/txt.tsx\n\nvar TxtIcon = ({ className, width = 40, height = 40 })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"svg\", {\n        width,\n        height,\n        version: \"1.1\",\n        id: \"Layer_1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n        viewBox: \"0 0 512 512\",\n        className,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                style: {\n                    fill: \"#E2E5E7\"\n                },\n                d: \"M128,0c-17.6,0-32,14.4-32,32v448c0,17.6,14.4,32,32,32h320c17.6,0,32-14.4,32-32V128L352,0H128z\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                style: {\n                    fill: \"#B0B7BD\"\n                },\n                d: \"M384,128h96L352,0v96C352,113.6,366.4,128,384,128z\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"polygon\", {\n                style: {\n                    fill: \"#CAD1D8\"\n                },\n                points: \"480,224 384,128 480,128 \"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                style: {\n                    fill: \"#576D7E\"\n                },\n                d: \"M416,416c0,8.8-7.2,16-16,16H48c-8.8,0-16-7.2-16-16V256c0-8.8,7.2-16,16-16h352c8.8,0,16,7.2,16,16V416z\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"g\", {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        style: {\n                            fill: \"#FFFFFF\"\n                        },\n                        d: \"M132.784,311.472H110.4c-11.136,0-11.136-16.368,0-16.368h60.512c11.392,0,11.392,16.368,0,16.368h-21.248v64.592c0,11.12-16.896,11.392-16.896,0v-64.592H132.784z\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        style: {\n                            fill: \"#FFFFFF\"\n                        },\n                        d: \"M224.416,326.176l22.272-27.888c6.656-8.688,19.568,2.432,12.288,10.752c-7.68,9.088-15.728,18.944-23.424,29.024l26.112,32.496c7.024,9.6-7.04,18.816-13.952,9.344l-23.536-30.192l-23.152,30.832c-6.528,9.328-20.992-1.152-13.68-9.856l25.696-32.624c-8.048-10.096-15.856-19.936-23.664-29.024c-8.064-9.6,6.912-19.44,12.784-10.48L224.416,326.176z\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                        style: {\n                            fill: \"#FFFFFF\"\n                        },\n                        d: \"M298.288,311.472H275.92c-11.136,0-11.136-16.368,0-16.368h60.496c11.392,0,11.392,16.368,0,16.368h-21.232v64.592c0,11.12-16.896,11.392-16.896,0V311.472z\"\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"path\", {\n                style: {\n                    fill: \"#CAD1D8\"\n                },\n                d: \"M400,432H96v16h304c8.8,0,16-7.2,16-16v-16C416,424.8,408.8,432,400,432z\"\n            })\n        ]\n    });\n};\n// src/widgets/document-info.tsx\n\nfunction DocumentInfo({ document: document2, className, onRemove, startIndex = 0 }) {\n    const { url, sources } = document2;\n    const urlParts = url.split(\"/\");\n    const fileName = urlParts.length > 0 ? urlParts[urlParts.length - 1] : url;\n    const fileExt = fileName == null ? void 0 : fileName.split(\".\").pop();\n    const previewFile = {\n        name: fileName,\n        type: fileExt\n    };\n    const DocumentDetail = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: `relative ${className}`,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DocumentPreviewCard, {\n                className: \"cursor-pointer\",\n                file: previewFile,\n                onRemove\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"absolute bottom-2 right-2 flex space-x-2\",\n                children: sources.map((node, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SourceInfo, {\n                            node,\n                            index: startIndex + index\n                        })\n                    }, node.id))\n            })\n        ]\n    });\n    if (url.endsWith(\".pdf\")) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PdfDialog, {\n            documentId: url,\n            url,\n            trigger: DocumentDetail\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        onClick: ()=>window.open(url, \"_blank\"),\n        children: DocumentDetail\n    });\n}\nfunction SourceInfo({ node, index }) {\n    if (!node) return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SourceNumberButton, {\n        index\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_radix_ui_react_hover_card__WEBPACK_IMPORTED_MODULE_11__.HoverCard, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_radix_ui_react_hover_card__WEBPACK_IMPORTED_MODULE_11__.HoverCardTrigger, {\n                className: \"cursor-default\",\n                onClick: (e)=>{\n                    e.preventDefault();\n                    e.stopPropagation();\n                },\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SourceNumberButton, {\n                    index,\n                    className: \"hover:bg-primary hover:text-white\"\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_radix_ui_react_hover_card__WEBPACK_IMPORTED_MODULE_11__.HoverCardContent, {\n                className: \"w-[400px] bg-white p-4\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(NodeInfo, {\n                    nodeInfo: node\n                })\n            })\n        ]\n    });\n}\nfunction NodeInfo({ nodeInfo }) {\n    var _a, _b, _c, _d;\n    const { isCopied, copyToClipboard } = useCopyToClipboard({\n        timeout: 1e3\n    });\n    const pageNumber = // XXX: page_label is used in Python, but page_number is used by Typescript\n    (_d = (_c = (_a = nodeInfo.metadata) == null ? void 0 : _a.page_number) != null ? _c : (_b = nodeInfo.metadata) == null ? void 0 : _b.page_label) != null ? _d : null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"space-y-4\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"flex items-center justify-between\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"font-semibold\",\n                        children: pageNumber ? `On page ${pageNumber}:` : \"Node content:\"\n                    }),\n                    nodeInfo.text && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                        onClick: (e)=>{\n                            e.stopPropagation();\n                            copyToClipboard(nodeInfo.text);\n                        },\n                        size: \"icon\",\n                        variant: \"ghost\",\n                        className: \"h-12 w-12 shrink-0\",\n                        children: isCopied ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                            className: \"h-4 w-4\"\n                        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_Download_lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                            className: \"h-4 w-4\"\n                        })\n                    })\n                ]\n            }),\n            nodeInfo.text && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"pre\", {\n                className: \"max-h-[200px] overflow-auto whitespace-pre-line\",\n                children: [\n                    \"\\u201C\",\n                    nodeInfo.text,\n                    \"\\u201D\"\n                ]\n            })\n        ]\n    });\n}\nvar FileIconMap = {\n    csv: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SheetIcon, {}),\n    pdf: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PDFIcon, {}),\n    docx: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DocxIcon, {}),\n    txt: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TxtIcon, {})\n};\nfunction DocumentPreviewCard(props) {\n    var _a;\n    const { onRemove, file, className } = props;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"bg-secondary relative w-60 max-w-60 rounded-lg p-2 text-sm\", className),\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"flex flex-row items-center gap-2\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"relative flex h-8 w-8 shrink-0 items-center justify-center overflow-hidden rounded-md\",\n                        children: (_a = FileIconMap[file.type]) != null ? _a : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_FileIcon_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {})\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"overflow-hidden\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"truncate font-semibold\",\n                                children: [\n                                    file.name,\n                                    \" \",\n                                    file.size ? `(${inKB(file.size)} KB)` : \"\"\n                                ]\n                            }),\n                            file.type && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"text-token-text-tertiary flex items-center gap-2 truncate\",\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                    children: [\n                                        file.type.toUpperCase(),\n                                        \" File\"\n                                    ]\n                                })\n                            })\n                        ]\n                    })\n                ]\n            }),\n            onRemove && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn(\"absolute -right-2 -top-2 z-10 h-6 w-6 rounded-full bg-gray-500 text-white\"),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_FileIcon_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                    className: \"h-6 w-6 rounded-full bg-gray-500 text-white\",\n                    onClick: (e)=>{\n                        e.stopPropagation();\n                        onRemove();\n                    }\n                })\n            })\n        ]\n    });\n}\nfunction inKB(size) {\n    return Math.round(size / 1024 * 10) / 10;\n}\n// src/widgets/markdown.tsx\n\nvar MemoizedReactMarkdown = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(react_markdown__WEBPACK_IMPORTED_MODULE_14__.ReactMarkdown, (prevProps, nextProps)=>prevProps.children === nextProps.children && prevProps.className === nextProps.className);\nvar preprocessLaTeX = (content)=>{\n    const blockProcessedContent = content.replace(/\\\\\\[([\\s\\S]*?)\\\\\\]/g, (_, equation)=>`$$${equation}$$`);\n    const inlineProcessedContent = blockProcessedContent.replace(/\\\\\\[([\\s\\S]*?)\\\\\\]/g, (_, equation)=>`$${equation}$`);\n    return inlineProcessedContent;\n};\nvar preprocessCitations = (input, sources)=>{\n    let content = input;\n    if (sources) {\n        const citationRegex = /\\[citation:(.+?)\\]\\(\\)/g;\n        let match;\n        while((match = citationRegex.exec(content)) !== null){\n            const citationId = match[1];\n            const sourceNode = sources.nodes.find((node)=>node.id === citationId);\n            if (sourceNode !== void 0) {\n                content = content.replace(match[0], `[citation:${sources.nodes.indexOf(sourceNode)}]()`);\n            } else {\n                content = content.replace(match[0], \"\");\n            }\n        }\n    }\n    return content;\n};\nvar preprocessContent = (content, sources)=>{\n    return preprocessCitations(preprocessLaTeX(content), sources);\n};\nfunction Markdown({ content, sources, backend }) {\n    const processedContent = preprocessContent(content, sources);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(MemoizedReactMarkdown, {\n            className: \"prose dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 custom-markdown break-words\",\n            remarkPlugins: [\n                remark_gfm__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n                remark_math__WEBPACK_IMPORTED_MODULE_16__[\"default\"]\n            ],\n            rehypePlugins: [\n                rehype_katex__WEBPACK_IMPORTED_MODULE_17__[\"default\"]\n            ],\n            components: {\n                p ({ children }) {\n                    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"mb-2 last:mb-0\",\n                        children\n                    });\n                },\n                code (_a) {\n                    var _b = _a, { inline, className, children } = _b, props = __objRest(_b, [\n                        \"inline\",\n                        \"className\",\n                        \"children\"\n                    ]);\n                    if (children.length) {\n                        if (children[0] === \"\\u258D\") {\n                            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"mt-1 animate-pulse cursor-default\",\n                                children: \"\\u258D\"\n                            });\n                        }\n                        children[0] = children[0].replace(\"`\\u258D`\", \"\\u258D\");\n                    }\n                    const match = /language-(\\w+)/.exec(className || \"\");\n                    if (inline) {\n                        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"code\", __spreadProps(__spreadValues({\n                            className\n                        }, props), {\n                            children\n                        }));\n                    }\n                    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CodeBlock, __spreadValues({\n                        language: match && match[1] || \"\",\n                        value: String(children).replace(/\\n$/, \"\"),\n                        className: \"mb-2\"\n                    }, props), Math.random());\n                },\n                a ({ href, children }) {\n                    var _a;\n                    if (href == null ? void 0 : href.startsWith(`${backend}/api/files`)) {\n                        const fileExtension = (_a = href.split(\".\").pop()) == null ? void 0 : _a.toLowerCase();\n                        if (fileExtension && DOCUMENT_FILE_TYPES.includes(fileExtension)) {\n                            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DocumentInfo, {\n                                document: {\n                                    url: backend ? new URL(decodeURIComponent(href)).href : href,\n                                    sources: []\n                                },\n                                className: \"mb-2 mt-2\"\n                            });\n                        }\n                    }\n                    if (Array.isArray(children) && typeof children[0] === \"string\" && children[0].startsWith(\"citation:\")) {\n                        const index = Number(children[0].replace(\"citation:\", \"\"));\n                        if (!isNaN(index)) {\n                            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SourceNumberButton, {\n                                index\n                            });\n                        }\n                        return null;\n                    }\n                    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"a\", {\n                        href,\n                        target: \"_blank\",\n                        rel: \"noopener\",\n                        children\n                    });\n                }\n            },\n            children: processedContent\n        })\n    });\n}\n// src/ui/progress.tsx\n\n\n\nvar Progress = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((_a, ref)=>{\n    var _b = _a, { className, value } = _b, props = __objRest(_b, [\n        \"className\",\n        \"value\"\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_radix_ui_react_progress__WEBPACK_IMPORTED_MODULE_18__.Root, __spreadProps(__spreadValues({\n        ref,\n        className: cn(\"bg-secondary relative h-4 w-full overflow-hidden rounded-full\", className)\n    }, props), {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_radix_ui_react_progress__WEBPACK_IMPORTED_MODULE_18__.Indicator, {\n            className: \"bg-primary h-full w-full flex-1 transition-all\",\n            style: {\n                transform: `translateX(-${100 - (value || 0)}%)`\n            }\n        })\n    }));\n});\nProgress.displayName = _radix_ui_react_progress__WEBPACK_IMPORTED_MODULE_18__.Root.displayName;\n// src/widgets/chat-agent-events.tsx\n\nvar AgentIcons = {\n    bot: _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n    researcher: _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_20__[\"default\"],\n    writer: _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_21__[\"default\"],\n    reviewer: _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_22__[\"default\"],\n    publisher: _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_23__[\"default\"]\n};\nfunction ChatAgentEvents({ data, isFinished }) {\n    const events = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ChatAgentEvents.useMemo[events]\": ()=>mergeAdjacentEvents(data)\n    }[\"ChatAgentEvents.useMemo[events]\"], [\n        data\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"pl-2\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: \"space-y-4 text-sm\",\n            children: events.map((eventItem, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AgentEventContent, {\n                    event: eventItem,\n                    isLast: index === events.length - 1,\n                    isFinished\n                }, index))\n        })\n    });\n}\nvar MAX_TEXT_LENGTH = 150;\nfunction TextContent({ agent, step }) {\n    const { displayText, showMore } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"TextContent.useMemo\": ()=>({\n                displayText: step.text.slice(0, MAX_TEXT_LENGTH),\n                showMore: step.text.length > MAX_TEXT_LENGTH\n            })\n    }[\"TextContent.useMemo\"], [\n        step.text\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"whitespace-break-spaces\",\n        children: [\n            !showMore && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                children: step.text\n            }),\n            showMore && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                        children: [\n                            displayText,\n                            \"...\"\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AgentEventDialog, {\n                        content: step.text,\n                        title: `Agent \"${agent}\"`,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"ml-2 cursor-pointer font-semibold underline\",\n                            children: \"Show more\"\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n}\nfunction ProgressContent({ step }) {\n    const progressValue = step.progress.total !== 0 ? Math.round((step.progress.current + 1) / step.progress.total * 100) : 0;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"mt-2 space-y-2\",\n        children: [\n            step.text && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                className: \"text-muted-foreground text-sm\",\n                children: step.text\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Progress, {\n                value: progressValue,\n                className: \"h-2 w-full\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                className: \"text-muted-foreground text-sm\",\n                children: [\n                    \"Processing \",\n                    step.progress.current + 1,\n                    \" of \",\n                    step.progress.total,\n                    \" steps...\"\n                ]\n            })\n        ]\n    });\n}\nfunction AgentEventContent({ event, isLast, isFinished }) {\n    const { agent, steps } = event;\n    const AgentIcon = event.icon;\n    const textSteps = steps.filter((step)=>!(\"progress\" in step));\n    const progressSteps = steps.filter((step)=>\"progress\" in step);\n    const lastProgressStep = progressSteps.length > 0 ? progressSteps[progressSteps.length - 1] : void 0;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"fadein-agent flex items-center gap-4 border-b pb-4\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"flex w-[100px] flex-col items-center gap-2\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"relative\",\n                        children: [\n                            isLast && !isFinished && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"absolute -right-4 -top-0\",\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                                    className: \"relative flex h-3 w-3\",\n                                    children: [\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: \"absolute inline-flex h-full w-full animate-ping rounded-full bg-sky-400 opacity-75\"\n                                        }),\n                                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                            className: \"relative inline-flex h-3 w-3 rounded-full bg-sky-500\"\n                                        })\n                                    ]\n                                })\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AgentIcon, {})\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"font-bold\",\n                        children: agent\n                    })\n                ]\n            }),\n            textSteps.length > 0 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"flex-1\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"ul\", {\n                        className: \"list-decimal space-y-2\",\n                        children: textSteps.map((step, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"li\", {\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TextContent, {\n                                    agent,\n                                    step\n                                })\n                            }, index))\n                    }),\n                    lastProgressStep && !isFinished && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ProgressContent, {\n                        step: lastProgressStep\n                    })\n                ]\n            })\n        ]\n    });\n}\nfunction AgentEventDialog(props) {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Drawer, {\n        direction: \"left\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerTrigger, {\n                asChild: true,\n                children: props.children\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DrawerContent, {\n                className: \"mt-24 h-full max-h-[96%] w-3/5 \",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DrawerHeader, {\n                        className: \"flex justify-between\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"space-y-2\",\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerTitle, {\n                                    children: props.title\n                                })\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DrawerClose, {\n                                asChild: true,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                                    variant: \"outline\",\n                                    children: \"Close\"\n                                })\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"m-4 overflow-auto\",\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Markdown, {\n                            content: props.content\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n}\nfunction mergeAdjacentEvents(events) {\n    var _a;\n    const mergedEvents = [];\n    for (const event of events){\n        const lastMergedEvent = mergedEvents[mergedEvents.length - 1];\n        const eventStep = event.data ? {\n            text: event.text,\n            progress: event.data\n        } : {\n            text: event.text\n        };\n        if (lastMergedEvent && lastMergedEvent.agent === event.agent) {\n            lastMergedEvent.steps.push(eventStep);\n        } else {\n            mergedEvents.push({\n                agent: event.agent,\n                steps: [\n                    eventStep\n                ],\n                icon: (_a = AgentIcons[event.agent.toLowerCase()]) != null ? _a : _barrel_optimize_names_icons_lucide_react__WEBPACK_IMPORTED_MODULE_19__[\"default\"]\n            });\n        }\n    }\n    return mergedEvents;\n}\n// src/widgets/chat-events.tsx\n\n\n// src/ui/collapsible.tsx\n\nvar Collapsible = _radix_ui_react_collapsible__WEBPACK_IMPORTED_MODULE_24__.Root;\nvar CollapsibleTrigger2 = _radix_ui_react_collapsible__WEBPACK_IMPORTED_MODULE_24__.CollapsibleTrigger;\nvar CollapsibleContent2 = _radix_ui_react_collapsible__WEBPACK_IMPORTED_MODULE_24__.CollapsibleContent;\n// src/widgets/chat-events.tsx\n\nfunction ChatEvents({ data, showLoading }) {\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const buttonLabel = isOpen ? \"Hide events\" : \"Show events\";\n    const EventIcon = isOpen ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        className: \"h-4 w-4\"\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        className: \"h-4 w-4\"\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"border-l-2 border-indigo-400 pl-2\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Collapsible, {\n            open: isOpen,\n            onOpenChange: setIsOpen,\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CollapsibleTrigger2, {\n                    asChild: true,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Button, {\n                        variant: \"secondary\",\n                        className: \"space-x-2\",\n                        children: [\n                            showLoading ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n                                className: \"h-4 w-4 animate-spin\"\n                            }) : null,\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                children: buttonLabel\n                            }),\n                            EventIcon\n                        ]\n                    })\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(CollapsibleContent2, {\n                    asChild: true,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: \"mt-4 space-y-2 text-sm\",\n                        children: data.map((eventItem, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"whitespace-break-spaces\",\n                                children: eventItem.title\n                            }, index))\n                    })\n                })\n            ]\n        })\n    });\n}\n// src/widgets/chat-files.tsx\n\nfunction ChatFiles({ data }) {\n    if (!data.files.length) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"flex items-center gap-2\",\n        children: data.files.map((file)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DocumentInfo, {\n                document: {\n                    url: file.url,\n                    sources: []\n                },\n                className: \"mb-2 mt-2\"\n            }, file.id))\n    });\n}\n// src/widgets/chat-image.tsx\n\nfunction ChatImage({ data }) {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"max-w-[200px] rounded-md shadow-md\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"img\", {\n            src: data.url,\n            alt: \"chat_image\",\n            className: \"h-auto w-full\"\n        })\n    });\n}\n// src/widgets/chat-sources.tsx\n\n\nfunction ChatSources({ data }) {\n    const documents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ChatSources.useMemo2[documents]\": ()=>{\n            const nodesByUrl = {};\n            data.nodes.forEach({\n                \"ChatSources.useMemo2[documents]\": (node)=>{\n                    var _a;\n                    const key = node.url;\n                    (_a = nodesByUrl[key]) != null ? _a : nodesByUrl[key] = [];\n                    nodesByUrl[key].push(node);\n                }\n            }[\"ChatSources.useMemo2[documents]\"]);\n            return Object.entries(nodesByUrl).map({\n                \"ChatSources.useMemo2[documents]\": ([url, sources])=>({\n                        url,\n                        sources\n                    })\n            }[\"ChatSources.useMemo2[documents]\"]);\n        }\n    }[\"ChatSources.useMemo2[documents]\"], [\n        data.nodes\n    ]);\n    if (documents.length === 0) return null;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"space-y-2 text-sm\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"text-lg font-semibold\",\n                children: \"Sources:\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"flex flex-wrap gap-3\",\n                children: documents.map((document2, index)=>{\n                    const startIndex = documents.slice(0, index).reduce((acc, doc)=>acc + doc.sources.length, 0);\n                    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DocumentInfo, {\n                        document: document2,\n                        startIndex\n                    }, document2.url);\n                })\n            })\n        ]\n    });\n}\n// src/widgets/suggested-questions.tsx\n\nfunction SuggestedQuestions({ questions, append }) {\n    const showQuestions = questions.length > 0;\n    return showQuestions && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"flex flex-col space-y-2\",\n        children: questions.map((question, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"a\", {\n                onClick: ()=>{\n                    append({\n                        role: \"user\",\n                        content: question\n                    });\n                },\n                className: \"cursor-pointer text-sm italic hover:underline\",\n                children: [\n                    \"->\",\n                    \" \",\n                    question\n                ]\n            }, index))\n    });\n}\n// src/widgets/starter-questions.tsx\n\nfunction StarterQuestions(props) {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"absolute bottom-6 left-0 w-full\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: \"mx-20 grid grid-cols-2 gap-2\",\n            children: props.questions.map((question, i)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                    variant: \"outline\",\n                    onClick: ()=>props.append({\n                            role: \"user\",\n                            content: question\n                        }),\n                    children: question\n                }, i))\n        })\n    });\n}\n// src/widgets/image-preview.tsx\n\n\nfunction ImagePreview({ url, onRemove }) {\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"group relative h-20 w-20\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"img\", {\n                src: url,\n                alt: \"uploaded_image\",\n                className: \"h-full w-full rounded-xl object-cover hover:brightness-75\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: cn(\"absolute -right-2 -top-2 z-10 hidden h-6 w-6 rounded-full bg-gray-500 text-white group-hover:block\"),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Check_Copy_FileIcon_XCircleIcon_lucide_react__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                    className: \"h-6 w-6 rounded-full bg-gray-500 text-white\",\n                    onClick: onRemove\n                })\n            })\n        ]\n    });\n}\n// src/widgets/file-uploader.tsx\n\n\n\nvar DEFAULT_INPUT_ID = \"fileInput\";\nvar DEFAULT_FILE_SIZE_LIMIT = 1024 * 1024 * 50;\nfunction FileUploader({ config, onFileUpload, onFileError }) {\n    var _a;\n    const [uploading, setUploading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [remainingFiles, setRemainingFiles] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const inputId = (config == null ? void 0 : config.inputId) || DEFAULT_INPUT_ID;\n    const fileSizeLimit = (config == null ? void 0 : config.fileSizeLimit) || DEFAULT_FILE_SIZE_LIMIT;\n    const allowedExtensions = config == null ? void 0 : config.allowedExtensions;\n    const defaultCheckExtension = (extension)=>{\n        if (allowedExtensions && !allowedExtensions.includes(extension)) {\n            return `Invalid file type. Please select a file with one of these formats: ${allowedExtensions.join(\",\")}`;\n        }\n        return null;\n    };\n    const checkExtension = (_a = config == null ? void 0 : config.checkExtension) != null ? _a : defaultCheckExtension;\n    const isFileSizeExceeded = (file)=>{\n        return file.size > fileSizeLimit;\n    };\n    const resetInput = ()=>{\n        const fileInput = document.getElementById(inputId);\n        fileInput.value = \"\";\n    };\n    const onFileChange = (e)=>__async(this, null, function*() {\n            const files = Array.from(e.target.files || []);\n            if (!files.length) return;\n            setUploading(true);\n            yield handleUpload(files);\n            resetInput();\n            setUploading(false);\n        });\n    const handleUpload = (files)=>__async(this, null, function*() {\n            const onFileUploadError = onFileError || window.alert;\n            if (files.length > 1 && files.some((file)=>file.type.startsWith(\"image/\"))) {\n                onFileUploadError(\"Multiple files with image are not supported\");\n                return;\n            }\n            for (const file of files){\n                const fileExtension = file.name.split(\".\").pop() || \"\";\n                const extensionFileError = checkExtension(fileExtension);\n                if (extensionFileError) {\n                    onFileUploadError(extensionFileError);\n                    return;\n                }\n                if (isFileSizeExceeded(file)) {\n                    onFileUploadError(`File size exceeded. Limit is ${fileSizeLimit / 1024 / 1024} MB`);\n                    return;\n                }\n            }\n            setRemainingFiles(files.length);\n            for (const file of files){\n                yield onFileUpload(file);\n                setRemainingFiles((prev)=>prev - 1);\n            }\n            setRemainingFiles(0);\n        });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"self-stretch\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n                type: \"file\",\n                id: inputId,\n                style: {\n                    display: \"none\"\n                },\n                onChange: onFileChange,\n                accept: allowedExtensions == null ? void 0 : allowedExtensions.join(\",\"),\n                disabled: (config == null ? void 0 : config.disabled) || uploading,\n                multiple: config == null ? void 0 : config.multiple\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"label\", {\n                htmlFor: inputId,\n                className: cn(buttonVariants({\n                    variant: \"secondary\",\n                    size: \"icon\"\n                }), \"relative cursor-pointer\", uploading && \"opacity-50\"),\n                children: uploading ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"relative flex h-full w-full items-center justify-center\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_ChevronDown_ChevronRight_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n                            className: \"absolute h-6 w-6 animate-spin\"\n                        }),\n                        remainingFiles > 0 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"absolute inset-0 flex items-center justify-center text-xs\",\n                            children: remainingFiles\n                        })\n                    ]\n                }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_barrel_optimize_names_Loader2_Paperclip_lucide_react__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n                    className: \"h-4 w-4 -rotate-45\"\n                })\n            })\n        ]\n    });\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/chat-ui/dist/widgets/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/chat-ui/node_modules/vaul/dist/index.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@llamaindex/chat-ui/node_modules/vaul/dist/index.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Content: () => (/* binding */ Content),\n/* harmony export */   Drawer: () => (/* binding */ Drawer),\n/* harmony export */   Handle: () => (/* binding */ Handle),\n/* harmony export */   NestedRoot: () => (/* binding */ NestedRoot),\n/* harmony export */   Overlay: () => (/* binding */ Overlay),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Root: () => (/* binding */ Root)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-dialog */ \"(ssr)/./node_modules/@radix-ui/react-dialog/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Content,Drawer,Handle,NestedRoot,Overlay,Portal,Root auto */ function __insertCSS(code) {\n    if (!code || typeof document == 'undefined') return;\n    let head = document.head || document.getElementsByTagName('head')[0];\n    let style = document.createElement('style');\n    style.type = 'text/css';\n    head.appendChild(style);\n    style.styleSheet ? style.styleSheet.cssText = code : style.appendChild(document.createTextNode(code));\n}\n\n\n\nconst DrawerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    drawerRef: {\n        current: null\n    },\n    overlayRef: {\n        current: null\n    },\n    onPress: ()=>{},\n    onRelease: ()=>{},\n    onDrag: ()=>{},\n    onNestedDrag: ()=>{},\n    onNestedOpenChange: ()=>{},\n    onNestedRelease: ()=>{},\n    openProp: undefined,\n    dismissible: false,\n    isOpen: false,\n    isDragging: false,\n    keyboardIsOpen: {\n        current: false\n    },\n    snapPointsOffset: null,\n    snapPoints: null,\n    handleOnly: false,\n    modal: false,\n    shouldFade: false,\n    activeSnapPoint: null,\n    onOpenChange: ()=>{},\n    setActiveSnapPoint: ()=>{},\n    closeDrawer: ()=>{},\n    direction: 'bottom',\n    shouldScaleBackground: false,\n    setBackgroundColorOnScale: true,\n    noBodyStyles: false,\n    container: null,\n    autoFocus: false\n});\nconst useDrawerContext = ()=>{\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DrawerContext);\n    if (!context) {\n        throw new Error('useDrawerContext must be used within a Drawer.Root');\n    }\n    return context;\n};\n__insertCSS(\"[data-vaul-drawer]{touch-action:none;will-change:transform;transition:transform .5s cubic-bezier(.32, .72, 0, 1);animation-duration:.5s;animation-timing-function:cubic-bezier(0.32,0.72,0,1)}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=bottom][data-state=open]{animation-name:slideFromBottom}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=bottom][data-state=closed]{animation-name:slideToBottom}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=top][data-state=open]{animation-name:slideFromTop}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=top][data-state=closed]{animation-name:slideToTop}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=left][data-state=open]{animation-name:slideFromLeft}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=left][data-state=closed]{animation-name:slideToLeft}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=right][data-state=open]{animation-name:slideFromRight}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=right][data-state=closed]{animation-name:slideToRight}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=bottom]{transform:translate3d(0,100%,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=top]{transform:translate3d(0,-100%,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=left]{transform:translate3d(-100%,0,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=right]{transform:translate3d(100%,0,0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=top]{transform:translate3d(0,var(--snap-point-height,0),0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=bottom]{transform:translate3d(0,var(--snap-point-height,0),0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=left]{transform:translate3d(var(--snap-point-height,0),0,0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=right]{transform:translate3d(var(--snap-point-height,0),0,0)}[data-vaul-overlay][data-vaul-snap-points=false]{animation-duration:.5s;animation-timing-function:cubic-bezier(0.32,0.72,0,1)}[data-vaul-overlay][data-vaul-snap-points=false][data-state=open]{animation-name:fadeIn}[data-vaul-overlay][data-state=closed]{animation-name:fadeOut}[data-vaul-overlay][data-vaul-snap-points=true]{opacity:0;transition:opacity .5s cubic-bezier(.32, .72, 0, 1)}[data-vaul-overlay][data-vaul-snap-points=true]{opacity:1}[data-vaul-drawer]:not([data-vaul-custom-container=true])::after{content:'';position:absolute;background:inherit;background-color:inherit}[data-vaul-drawer][data-vaul-drawer-direction=top]::after{top:initial;bottom:100%;left:0;right:0;height:200%}[data-vaul-drawer][data-vaul-drawer-direction=bottom]::after{top:100%;bottom:initial;left:0;right:0;height:200%}[data-vaul-drawer][data-vaul-drawer-direction=left]::after{left:initial;right:100%;top:0;bottom:0;width:200%}[data-vaul-drawer][data-vaul-drawer-direction=right]::after{left:100%;right:initial;top:0;bottom:0;width:200%}[data-vaul-overlay][data-vaul-snap-points=true]:not([data-vaul-snap-points-overlay=true]):not(\\n[data-state=closed]\\n){opacity:0}[data-vaul-overlay][data-vaul-snap-points-overlay=true]{opacity:1}[data-vaul-handle]{display:block;position:relative;opacity:.7;background:#e2e2e4;margin-left:auto;margin-right:auto;height:5px;width:32px;border-radius:1rem;touch-action:pan-y}[data-vaul-handle]:active,[data-vaul-handle]:hover{opacity:1}[data-vaul-handle-hitarea]{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:max(100%,2.75rem);height:max(100%,2.75rem);touch-action:inherit}@media (hover:hover) and (pointer:fine){[data-vaul-drawer]{user-select:none}}@media (pointer:fine){[data-vaul-handle-hitarea]:{width:100%;height:100%}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeOut{to{opacity:0}}@keyframes slideFromBottom{from{transform:translate3d(0,100%,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToBottom{to{transform:translate3d(0,100%,0)}}@keyframes slideFromTop{from{transform:translate3d(0,-100%,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToTop{to{transform:translate3d(0,-100%,0)}}@keyframes slideFromLeft{from{transform:translate3d(-100%,0,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToLeft{to{transform:translate3d(-100%,0,0)}}@keyframes slideFromRight{from{transform:translate3d(100%,0,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToRight{to{transform:translate3d(100%,0,0)}}\");\n// This code comes from https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/overlays/src/usePreventScroll.ts\nconst KEYBOARD_BUFFER = 24;\nconst useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction chain$1(...callbacks) {\n    return (...args)=>{\n        for (let callback of callbacks){\n            if (typeof callback === 'function') {\n                callback(...args);\n            }\n        }\n    };\n}\nfunction isMac() {\n    return testPlatform(/^Mac/);\n}\nfunction isIPhone() {\n    return testPlatform(/^iPhone/);\n}\nfunction isSafari() {\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n}\nfunction isIPad() {\n    return testPlatform(/^iPad/) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    isMac() && navigator.maxTouchPoints > 1;\n}\nfunction isIOS() {\n    return isIPhone() || isIPad();\n}\nfunction testPlatform(re) {\n    return  false ? 0 : undefined;\n}\n// @ts-ignore\nconst visualViewport = typeof document !== 'undefined' && window.visualViewport;\nfunction isScrollable(node) {\n    let style = window.getComputedStyle(node);\n    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\nfunction getScrollParent(node) {\n    if (isScrollable(node)) {\n        node = node.parentElement;\n    }\n    while(node && !isScrollable(node)){\n        node = node.parentElement;\n    }\n    return node || document.scrollingElement || document.documentElement;\n}\n// HTML input types that do not cause the software keyboard to appear.\nconst nonTextInputTypes = new Set([\n    'checkbox',\n    'radio',\n    'range',\n    'color',\n    'file',\n    'image',\n    'button',\n    'submit',\n    'reset'\n]);\n// The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position\nlet preventScrollCount = 0;\nlet restore;\n/**\n * Prevents scrolling on the document body on mount, and\n * restores it on unmount. Also ensures that content does not\n * shift due to the scrollbars disappearing.\n */ function usePreventScroll(options = {}) {\n    let { isDisabled } = options;\n    useIsomorphicLayoutEffect({\n        \"usePreventScroll.useIsomorphicLayoutEffect\": ()=>{\n            if (isDisabled) {\n                return;\n            }\n            preventScrollCount++;\n            if (preventScrollCount === 1) {\n                if (isIOS()) {\n                    restore = preventScrollMobileSafari();\n                }\n            }\n            return ({\n                \"usePreventScroll.useIsomorphicLayoutEffect\": ()=>{\n                    preventScrollCount--;\n                    if (preventScrollCount === 0) {\n                        restore == null ? void 0 : restore();\n                    }\n                }\n            })[\"usePreventScroll.useIsomorphicLayoutEffect\"];\n        }\n    }[\"usePreventScroll.useIsomorphicLayoutEffect\"], [\n        isDisabled\n    ]);\n}\n// Mobile Safari is a whole different beast. Even with overflow: hidden,\n// it still scrolls the page in many situations:\n//\n// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.\n// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of\n//    it, so it becomes scrollable.\n// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.\n//    This may cause even fixed position elements to scroll off the screen.\n// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always\n//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.\n//\n// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:\n//\n// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling\n//    on the window.\n// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the\n//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.\n// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.\n// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top\n//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element\n//    into view ourselves, without scrolling the whole page.\n// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the\n//    same visually, but makes the actual scroll position always zero. This is required to make all of the\n//    above work or Safari will still try to scroll the page when focusing an input.\n// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting\n//    to navigate to an input with the next/previous buttons that's outside a modal.\nfunction preventScrollMobileSafari() {\n    let scrollable;\n    let lastY = 0;\n    let onTouchStart = (e)=>{\n        // Store the nearest scrollable parent element from the element that the user touched.\n        scrollable = getScrollParent(e.target);\n        if (scrollable === document.documentElement && scrollable === document.body) {\n            return;\n        }\n        lastY = e.changedTouches[0].pageY;\n    };\n    let onTouchMove = (e)=>{\n        // Prevent scrolling the window.\n        if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {\n            e.preventDefault();\n            return;\n        }\n        // Prevent scrolling up when at the top and scrolling down when at the bottom\n        // of a nested scrollable area, otherwise mobile Safari will start scrolling\n        // the window instead. Unfortunately, this disables bounce scrolling when at\n        // the top but it's the best we can do.\n        let y = e.changedTouches[0].pageY;\n        let scrollTop = scrollable.scrollTop;\n        let bottom = scrollable.scrollHeight - scrollable.clientHeight;\n        if (bottom === 0) {\n            return;\n        }\n        if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) {\n            e.preventDefault();\n        }\n        lastY = y;\n    };\n    let onTouchEnd = (e)=>{\n        let target = e.target;\n        // Apply this change if we're not already focused on the target element\n        if (isInput(target) && target !== document.activeElement) {\n            e.preventDefault();\n            // Apply a transform to trick Safari into thinking the input is at the top of the page\n            // so it doesn't try to scroll it into view. When tapping on an input, this needs to\n            // be done before the \"focus\" event, so we have to focus the element ourselves.\n            target.style.transform = 'translateY(-2000px)';\n            target.focus();\n            requestAnimationFrame(()=>{\n                target.style.transform = '';\n            });\n        }\n    };\n    let onFocus = (e)=>{\n        let target = e.target;\n        if (isInput(target)) {\n            // Transform also needs to be applied in the focus event in cases where focus moves\n            // other than tapping on an input directly, e.g. the next/previous buttons in the\n            // software keyboard. In these cases, it seems applying the transform in the focus event\n            // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️\n            target.style.transform = 'translateY(-2000px)';\n            requestAnimationFrame(()=>{\n                target.style.transform = '';\n                // This will have prevented the browser from scrolling the focused element into view,\n                // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.\n                if (visualViewport) {\n                    if (visualViewport.height < window.innerHeight) {\n                        // If the keyboard is already visible, do this after one additional frame\n                        // to wait for the transform to be removed.\n                        requestAnimationFrame(()=>{\n                            scrollIntoView(target);\n                        });\n                    } else {\n                        // Otherwise, wait for the visual viewport to resize before scrolling so we can\n                        // measure the correct position to scroll to.\n                        visualViewport.addEventListener('resize', ()=>scrollIntoView(target), {\n                            once: true\n                        });\n                    }\n                }\n            });\n        }\n    };\n    let onWindowScroll = ()=>{\n        // Last resort. If the window scrolled, scroll it back to the top.\n        // It should always be at the top because the body will have a negative margin (see below).\n        window.scrollTo(0, 0);\n    };\n    // Record the original scroll position so we can restore it.\n    // Then apply a negative margin to the body to offset it by the scroll position. This will\n    // enable us to scroll the window to the top, which is required for the rest of this to work.\n    let scrollX = window.pageXOffset;\n    let scrollY = window.pageYOffset;\n    let restoreStyles = chain$1(setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`));\n    // Scroll to the top. The negative margin on the body will make this appear the same.\n    window.scrollTo(0, 0);\n    let removeEvents = chain$1(addEvent(document, 'touchstart', onTouchStart, {\n        passive: false,\n        capture: true\n    }), addEvent(document, 'touchmove', onTouchMove, {\n        passive: false,\n        capture: true\n    }), addEvent(document, 'touchend', onTouchEnd, {\n        passive: false,\n        capture: true\n    }), addEvent(document, 'focus', onFocus, true), addEvent(window, 'scroll', onWindowScroll));\n    return ()=>{\n        // Restore styles and scroll the page back to where it was.\n        restoreStyles();\n        removeEvents();\n        window.scrollTo(scrollX, scrollY);\n    };\n}\n// Sets a CSS property on an element, and returns a function to revert it to the previous value.\nfunction setStyle(element, style, value) {\n    let cur = element.style[style];\n    element.style[style] = value;\n    return ()=>{\n        element.style[style] = cur;\n    };\n}\n// Adds an event listener to an element, and returns a function to remove it.\nfunction addEvent(target, event, handler, options) {\n    // @ts-ignore\n    target.addEventListener(event, handler, options);\n    return ()=>{\n        // @ts-ignore\n        target.removeEventListener(event, handler, options);\n    };\n}\nfunction scrollIntoView(target) {\n    let root = document.scrollingElement || document.documentElement;\n    while(target && target !== root){\n        // Find the parent scrollable element and adjust the scroll position if the target is not already in view.\n        let scrollable = getScrollParent(target);\n        if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {\n            let scrollableTop = scrollable.getBoundingClientRect().top;\n            let targetTop = target.getBoundingClientRect().top;\n            let targetBottom = target.getBoundingClientRect().bottom;\n            // Buffer is needed for some edge cases\n            const keyboardHeight = scrollable.getBoundingClientRect().bottom + KEYBOARD_BUFFER;\n            if (targetBottom > keyboardHeight) {\n                scrollable.scrollTop += targetTop - scrollableTop;\n            }\n        }\n        // @ts-ignore\n        target = scrollable.parentElement;\n    }\n}\nfunction isInput(target) {\n    return target instanceof HTMLInputElement && !nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;\n}\n// This code comes from https://github.com/radix-ui/primitives/tree/main/packages/react/compose-refs\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */ function setRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    } else if (ref !== null && ref !== undefined) {\n        ref.current = value;\n    }\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */ function composeRefs(...refs) {\n    return (node)=>refs.forEach((ref)=>setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */ function useComposedRefs(...refs) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(composeRefs(...refs), refs);\n}\nconst cache = new WeakMap();\nfunction set(el, styles, ignoreCache = false) {\n    if (!el || !(el instanceof HTMLElement)) return;\n    let originalStyles = {};\n    Object.entries(styles).forEach(([key, value])=>{\n        if (key.startsWith('--')) {\n            el.style.setProperty(key, value);\n            return;\n        }\n        originalStyles[key] = el.style[key];\n        el.style[key] = value;\n    });\n    if (ignoreCache) return;\n    cache.set(el, originalStyles);\n}\nfunction reset(el, prop) {\n    if (!el || !(el instanceof HTMLElement)) return;\n    let originalStyles = cache.get(el);\n    if (!originalStyles) {\n        return;\n    }\n    {\n        el.style[prop] = originalStyles[prop];\n    }\n}\nconst isVertical = (direction)=>{\n    switch(direction){\n        case 'top':\n        case 'bottom':\n            return true;\n        case 'left':\n        case 'right':\n            return false;\n        default:\n            return direction;\n    }\n};\nfunction getTranslate(element, direction) {\n    if (!element) {\n        return null;\n    }\n    const style = window.getComputedStyle(element);\n    const transform = style.transform || style.webkitTransform || style.mozTransform;\n    let mat = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (mat) {\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n        return parseFloat(mat[1].split(', ')[isVertical(direction) ? 13 : 12]);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n    mat = transform.match(/^matrix\\((.+)\\)$/);\n    return mat ? parseFloat(mat[1].split(', ')[isVertical(direction) ? 5 : 4]) : null;\n}\nfunction dampenValue(v) {\n    return 8 * (Math.log(v + 1) - 2);\n}\nfunction assignStyle(element, style) {\n    if (!element) return ()=>{};\n    const prevStyle = element.style.cssText;\n    Object.assign(element.style, style);\n    return ()=>{\n        element.style.cssText = prevStyle;\n    };\n}\n/**\n * Receives functions as arguments and returns a new function that calls all.\n */ function chain(...fns) {\n    return (...args)=>{\n        for (const fn of fns){\n            if (typeof fn === 'function') {\n                // @ts-ignore\n                fn(...args);\n            }\n        }\n    };\n}\nconst TRANSITIONS = {\n    DURATION: 0.5,\n    EASE: [\n        0.32,\n        0.72,\n        0,\n        1\n    ]\n};\nconst VELOCITY_THRESHOLD = 0.4;\nconst CLOSE_THRESHOLD = 0.25;\nconst SCROLL_LOCK_TIMEOUT = 100;\nconst BORDER_RADIUS = 8;\nconst NESTED_DISPLACEMENT = 16;\nconst WINDOW_TOP_OFFSET = 26;\nconst DRAG_CLASS = 'vaul-dragging';\n// This code comes from https://github.com/radix-ui/primitives/blob/main/packages/react/use-controllable-state/src/useControllableState.tsx\nfunction useCallbackRef(callback) {\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(callback);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useCallbackRef.useEffect\": ()=>{\n            callbackRef.current = callback;\n        }\n    }[\"useCallbackRef.useEffect\"]);\n    // https://github.com/facebook/react/issues/19240\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useCallbackRef.useMemo\": ()=>({\n                \"useCallbackRef.useMemo\": (...args)=>callbackRef.current == null ? void 0 : callbackRef.current.call(callbackRef, ...args)\n            })[\"useCallbackRef.useMemo\"]\n    }[\"useCallbackRef.useMemo\"], []);\n}\nfunction useUncontrolledState({ defaultProp, onChange }) {\n    const uncontrolledState = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultProp);\n    const [value] = uncontrolledState;\n    const prevValueRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(value);\n    const handleChange = useCallbackRef(onChange);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useUncontrolledState.useEffect\": ()=>{\n            if (prevValueRef.current !== value) {\n                handleChange(value);\n                prevValueRef.current = value;\n            }\n        }\n    }[\"useUncontrolledState.useEffect\"], [\n        value,\n        prevValueRef,\n        handleChange\n    ]);\n    return uncontrolledState;\n}\nfunction useControllableState({ prop, defaultProp, onChange = ()=>{} }) {\n    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n        defaultProp,\n        onChange\n    });\n    const isControlled = prop !== undefined;\n    const value = isControlled ? prop : uncontrolledProp;\n    const handleChange = useCallbackRef(onChange);\n    const setValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"useControllableState.useCallback[setValue]\": (nextValue)=>{\n            if (isControlled) {\n                const setter = nextValue;\n                const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n                if (value !== prop) handleChange(value);\n            } else {\n                setUncontrolledProp(nextValue);\n            }\n        }\n    }[\"useControllableState.useCallback[setValue]\"], [\n        isControlled,\n        prop,\n        setUncontrolledProp,\n        handleChange\n    ]);\n    return [\n        value,\n        setValue\n    ];\n}\nfunction useSnapPoints({ activeSnapPointProp, setActiveSnapPointProp, snapPoints, drawerRef, overlayRef, fadeFromIndex, onSnapPointChange, direction = 'bottom', container, snapToSequentialPoint }) {\n    const [activeSnapPoint, setActiveSnapPoint] = useControllableState({\n        prop: activeSnapPointProp,\n        defaultProp: snapPoints == null ? void 0 : snapPoints[0],\n        onChange: setActiveSnapPointProp\n    });\n    const [windowDimensions, setWindowDimensions] = react__WEBPACK_IMPORTED_MODULE_0__.useState( false ? 0 : undefined);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useSnapPoints.useEffect\": ()=>{\n            function onResize() {\n                setWindowDimensions({\n                    innerWidth: window.innerWidth,\n                    innerHeight: window.innerHeight\n                });\n            }\n            window.addEventListener('resize', onResize);\n            return ({\n                \"useSnapPoints.useEffect\": ()=>window.removeEventListener('resize', onResize)\n            })[\"useSnapPoints.useEffect\"];\n        }\n    }[\"useSnapPoints.useEffect\"], []);\n    const isLastSnapPoint = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useSnapPoints.useMemo[isLastSnapPoint]\": ()=>activeSnapPoint === (snapPoints == null ? void 0 : snapPoints[snapPoints.length - 1]) || null\n    }[\"useSnapPoints.useMemo[isLastSnapPoint]\"], [\n        snapPoints,\n        activeSnapPoint\n    ]);\n    const activeSnapPointIndex = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useSnapPoints.useMemo[activeSnapPointIndex]\": ()=>snapPoints == null ? void 0 : snapPoints.findIndex({\n                \"useSnapPoints.useMemo[activeSnapPointIndex]\": (snapPoint)=>snapPoint === activeSnapPoint\n            }[\"useSnapPoints.useMemo[activeSnapPointIndex]\"])\n    }[\"useSnapPoints.useMemo[activeSnapPointIndex]\"], [\n        snapPoints,\n        activeSnapPoint\n    ]);\n    const shouldFade = snapPoints && snapPoints.length > 0 && (fadeFromIndex || fadeFromIndex === 0) && !Number.isNaN(fadeFromIndex) && snapPoints[fadeFromIndex] === activeSnapPoint || !snapPoints;\n    const snapPointsOffset = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useSnapPoints.useMemo[snapPointsOffset]\": ()=>{\n            const containerSize = container ? {\n                width: container.getBoundingClientRect().width,\n                height: container.getBoundingClientRect().height\n            } :  false ? 0 : {\n                width: 0,\n                height: 0\n            };\n            var _snapPoints_map;\n            return (_snapPoints_map = snapPoints == null ? void 0 : snapPoints.map({\n                \"useSnapPoints.useMemo[snapPointsOffset]\": (snapPoint)=>{\n                    const isPx = typeof snapPoint === 'string';\n                    let snapPointAsNumber = 0;\n                    if (isPx) {\n                        snapPointAsNumber = parseInt(snapPoint, 10);\n                    }\n                    if (isVertical(direction)) {\n                        const height = isPx ? snapPointAsNumber : windowDimensions ? snapPoint * containerSize.height : 0;\n                        if (windowDimensions) {\n                            return direction === 'bottom' ? containerSize.height - height : -containerSize.height + height;\n                        }\n                        return height;\n                    }\n                    const width = isPx ? snapPointAsNumber : windowDimensions ? snapPoint * containerSize.width : 0;\n                    if (windowDimensions) {\n                        return direction === 'right' ? containerSize.width - width : -containerSize.width + width;\n                    }\n                    return width;\n                }\n            }[\"useSnapPoints.useMemo[snapPointsOffset]\"])) != null ? _snapPoints_map : [];\n        }\n    }[\"useSnapPoints.useMemo[snapPointsOffset]\"], [\n        snapPoints,\n        windowDimensions,\n        container\n    ]);\n    const activeSnapPointOffset = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useSnapPoints.useMemo[activeSnapPointOffset]\": ()=>activeSnapPointIndex !== null ? snapPointsOffset == null ? void 0 : snapPointsOffset[activeSnapPointIndex] : null\n    }[\"useSnapPoints.useMemo[activeSnapPointOffset]\"], [\n        snapPointsOffset,\n        activeSnapPointIndex\n    ]);\n    const snapToPoint = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"useSnapPoints.useCallback[snapToPoint]\": (dimension)=>{\n            var _snapPointsOffset_findIndex;\n            const newSnapPointIndex = (_snapPointsOffset_findIndex = snapPointsOffset == null ? void 0 : snapPointsOffset.findIndex({\n                \"useSnapPoints.useCallback[snapToPoint]\": (snapPointDim)=>snapPointDim === dimension\n            }[\"useSnapPoints.useCallback[snapToPoint]\"])) != null ? _snapPointsOffset_findIndex : null;\n            onSnapPointChange(newSnapPointIndex);\n            set(drawerRef.current, {\n                transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n                transform: isVertical(direction) ? `translate3d(0, ${dimension}px, 0)` : `translate3d(${dimension}px, 0, 0)`\n            });\n            if (snapPointsOffset && newSnapPointIndex !== snapPointsOffset.length - 1 && newSnapPointIndex !== fadeFromIndex && newSnapPointIndex < fadeFromIndex) {\n                set(overlayRef.current, {\n                    transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n                    opacity: '0'\n                });\n            } else {\n                set(overlayRef.current, {\n                    transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n                    opacity: '1'\n                });\n            }\n            setActiveSnapPoint(snapPoints == null ? void 0 : snapPoints[Math.max(newSnapPointIndex, 0)]);\n        }\n    }[\"useSnapPoints.useCallback[snapToPoint]\"], [\n        drawerRef.current,\n        snapPoints,\n        snapPointsOffset,\n        fadeFromIndex,\n        overlayRef,\n        setActiveSnapPoint\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useSnapPoints.useEffect\": ()=>{\n            if (activeSnapPoint || activeSnapPointProp) {\n                var _snapPoints_findIndex;\n                const newIndex = (_snapPoints_findIndex = snapPoints == null ? void 0 : snapPoints.findIndex({\n                    \"useSnapPoints.useEffect\": (snapPoint)=>snapPoint === activeSnapPointProp || snapPoint === activeSnapPoint\n                }[\"useSnapPoints.useEffect\"])) != null ? _snapPoints_findIndex : -1;\n                if (snapPointsOffset && newIndex !== -1 && typeof snapPointsOffset[newIndex] === 'number') {\n                    snapToPoint(snapPointsOffset[newIndex]);\n                }\n            }\n        }\n    }[\"useSnapPoints.useEffect\"], [\n        activeSnapPoint,\n        activeSnapPointProp,\n        snapPoints,\n        snapPointsOffset,\n        snapToPoint\n    ]);\n    function onRelease({ draggedDistance, closeDrawer, velocity, dismissible }) {\n        if (fadeFromIndex === undefined) return;\n        const currentPosition = direction === 'bottom' || direction === 'right' ? (activeSnapPointOffset != null ? activeSnapPointOffset : 0) - draggedDistance : (activeSnapPointOffset != null ? activeSnapPointOffset : 0) + draggedDistance;\n        const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n        const isFirst = activeSnapPointIndex === 0;\n        const hasDraggedUp = draggedDistance > 0;\n        if (isOverlaySnapPoint) {\n            set(overlayRef.current, {\n                transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`\n            });\n        }\n        if (!snapToSequentialPoint && velocity > 2 && !hasDraggedUp) {\n            if (dismissible) closeDrawer();\n            else snapToPoint(snapPointsOffset[0]); // snap to initial point\n            return;\n        }\n        if (!snapToSequentialPoint && velocity > 2 && hasDraggedUp && snapPointsOffset && snapPoints) {\n            snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n            return;\n        }\n        // Find the closest snap point to the current position\n        const closestSnapPoint = snapPointsOffset == null ? void 0 : snapPointsOffset.reduce((prev, curr)=>{\n            if (typeof prev !== 'number' || typeof curr !== 'number') return prev;\n            return Math.abs(curr - currentPosition) < Math.abs(prev - currentPosition) ? curr : prev;\n        });\n        const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        if (velocity > VELOCITY_THRESHOLD && Math.abs(draggedDistance) < dim * 0.4) {\n            const dragDirection = hasDraggedUp ? 1 : -1; // 1 = up, -1 = down\n            // Don't do anything if we swipe upwards while being on the last snap point\n            if (dragDirection > 0 && isLastSnapPoint) {\n                snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n                return;\n            }\n            if (isFirst && dragDirection < 0 && dismissible) {\n                closeDrawer();\n            }\n            if (activeSnapPointIndex === null) return;\n            snapToPoint(snapPointsOffset[activeSnapPointIndex + dragDirection]);\n            return;\n        }\n        snapToPoint(closestSnapPoint);\n    }\n    function onDrag({ draggedDistance }) {\n        if (activeSnapPointOffset === null) return;\n        const newValue = direction === 'bottom' || direction === 'right' ? activeSnapPointOffset - draggedDistance : activeSnapPointOffset + draggedDistance;\n        // Don't do anything if we exceed the last(biggest) snap point\n        if ((direction === 'bottom' || direction === 'right') && newValue < snapPointsOffset[snapPointsOffset.length - 1]) {\n            return;\n        }\n        if ((direction === 'top' || direction === 'left') && newValue > snapPointsOffset[snapPointsOffset.length - 1]) {\n            return;\n        }\n        set(drawerRef.current, {\n            transform: isVertical(direction) ? `translate3d(0, ${newValue}px, 0)` : `translate3d(${newValue}px, 0, 0)`\n        });\n    }\n    function getPercentageDragged(absDraggedDistance, isDraggingDown) {\n        if (!snapPoints || typeof activeSnapPointIndex !== 'number' || !snapPointsOffset || fadeFromIndex === undefined) return null;\n        // If this is true we are dragging to a snap point that is supposed to have an overlay\n        const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n        const isOverlaySnapPointOrHigher = activeSnapPointIndex >= fadeFromIndex;\n        if (isOverlaySnapPointOrHigher && isDraggingDown) {\n            return 0;\n        }\n        // Don't animate, but still use this one if we are dragging away from the overlaySnapPoint\n        if (isOverlaySnapPoint && !isDraggingDown) return 1;\n        if (!shouldFade && !isOverlaySnapPoint) return null;\n        // Either fadeFrom index or the one before\n        const targetSnapPointIndex = isOverlaySnapPoint ? activeSnapPointIndex + 1 : activeSnapPointIndex - 1;\n        // Get the distance from overlaySnapPoint to the one before or vice-versa to calculate the opacity percentage accordingly\n        const snapPointDistance = isOverlaySnapPoint ? snapPointsOffset[targetSnapPointIndex] - snapPointsOffset[targetSnapPointIndex - 1] : snapPointsOffset[targetSnapPointIndex + 1] - snapPointsOffset[targetSnapPointIndex];\n        const percentageDragged = absDraggedDistance / Math.abs(snapPointDistance);\n        if (isOverlaySnapPoint) {\n            return 1 - percentageDragged;\n        } else {\n            return percentageDragged;\n        }\n    }\n    return {\n        isLastSnapPoint,\n        activeSnapPoint,\n        shouldFade,\n        getPercentageDragged,\n        setActiveSnapPoint,\n        activeSnapPointIndex,\n        onRelease,\n        onDrag,\n        snapPointsOffset\n    };\n}\nconst noop = ()=>()=>{};\nfunction useScaleBackground() {\n    const { direction, isOpen, shouldScaleBackground, setBackgroundColorOnScale, noBodyStyles } = useDrawerContext();\n    const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const initialBackgroundColor = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useScaleBackground.useMemo[initialBackgroundColor]\": ()=>document.body.style.backgroundColor\n    }[\"useScaleBackground.useMemo[initialBackgroundColor]\"], []);\n    function getScale() {\n        return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useScaleBackground.useEffect\": ()=>{\n            if (isOpen && shouldScaleBackground) {\n                if (timeoutIdRef.current) clearTimeout(timeoutIdRef.current);\n                const wrapper = document.querySelector('[data-vaul-drawer-wrapper]') || document.querySelector('[vaul-drawer-wrapper]');\n                if (!wrapper) return;\n                chain(setBackgroundColorOnScale && !noBodyStyles ? assignStyle(document.body, {\n                    background: 'black'\n                }) : noop, assignStyle(wrapper, {\n                    transformOrigin: isVertical(direction) ? 'top' : 'left',\n                    transitionProperty: 'transform, border-radius',\n                    transitionDuration: `${TRANSITIONS.DURATION}s`,\n                    transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(',')})`\n                }));\n                const wrapperStylesCleanup = assignStyle(wrapper, {\n                    borderRadius: `${BORDER_RADIUS}px`,\n                    overflow: 'hidden',\n                    ...isVertical(direction) ? {\n                        transform: `scale(${getScale()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`\n                    } : {\n                        transform: `scale(${getScale()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`\n                    }\n                });\n                return ({\n                    \"useScaleBackground.useEffect\": ()=>{\n                        wrapperStylesCleanup();\n                        timeoutIdRef.current = window.setTimeout({\n                            \"useScaleBackground.useEffect\": ()=>{\n                                if (initialBackgroundColor) {\n                                    document.body.style.background = initialBackgroundColor;\n                                } else {\n                                    document.body.style.removeProperty('background');\n                                }\n                            }\n                        }[\"useScaleBackground.useEffect\"], TRANSITIONS.DURATION * 1000);\n                    }\n                })[\"useScaleBackground.useEffect\"];\n            }\n        }\n    }[\"useScaleBackground.useEffect\"], [\n        isOpen,\n        shouldScaleBackground,\n        initialBackgroundColor\n    ]);\n}\nlet previousBodyPosition = null;\n/**\n * This hook is necessary to prevent buggy behavior on iOS devices (need to test on Android).\n * I won't get into too much detail about what bugs it solves, but so far I've found that setting the body to `position: fixed` is the most reliable way to prevent those bugs.\n * Issues that this hook solves:\n * https://github.com/emilkowalski/vaul/issues/435\n * https://github.com/emilkowalski/vaul/issues/433\n * And more that I discovered, but were just not reported.\n */ function usePositionFixed({ isOpen, modal, nested, hasBeenOpened, preventScrollRestoration, noBodyStyles }) {\n    const [activeUrl, setActiveUrl] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        \"usePositionFixed.useState\": ()=> false ? 0 : ''\n    }[\"usePositionFixed.useState\"]);\n    const scrollPos = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const setPositionFixed = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"usePositionFixed.useCallback[setPositionFixed]\": ()=>{\n            // All browsers on iOS will return true here.\n            if (!isSafari()) return;\n            // If previousBodyPosition is already set, don't set it again.\n            if (previousBodyPosition === null && isOpen && !noBodyStyles) {\n                previousBodyPosition = {\n                    position: document.body.style.position,\n                    top: document.body.style.top,\n                    left: document.body.style.left,\n                    height: document.body.style.height,\n                    right: 'unset'\n                };\n                // Update the dom inside an animation frame\n                const { scrollX, innerHeight } = window;\n                document.body.style.setProperty('position', 'fixed', 'important');\n                Object.assign(document.body.style, {\n                    top: `${-scrollPos.current}px`,\n                    left: `${-scrollX}px`,\n                    right: '0px',\n                    height: 'auto'\n                });\n                window.setTimeout({\n                    \"usePositionFixed.useCallback[setPositionFixed]\": ()=>window.requestAnimationFrame({\n                            \"usePositionFixed.useCallback[setPositionFixed]\": ()=>{\n                                // Attempt to check if the bottom bar appeared due to the position change\n                                const bottomBarHeight = innerHeight - window.innerHeight;\n                                if (bottomBarHeight && scrollPos.current >= innerHeight) {\n                                    // Move the content further up so that the bottom bar doesn't hide it\n                                    document.body.style.top = `${-(scrollPos.current + bottomBarHeight)}px`;\n                                }\n                            }\n                        }[\"usePositionFixed.useCallback[setPositionFixed]\"])\n                }[\"usePositionFixed.useCallback[setPositionFixed]\"], 300);\n            }\n        }\n    }[\"usePositionFixed.useCallback[setPositionFixed]\"], [\n        isOpen\n    ]);\n    const restorePositionSetting = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"usePositionFixed.useCallback[restorePositionSetting]\": ()=>{\n            // All browsers on iOS will return true here.\n            if (!isSafari()) return;\n            if (previousBodyPosition !== null && !noBodyStyles) {\n                // Convert the position from \"px\" to Int\n                const y = -parseInt(document.body.style.top, 10);\n                const x = -parseInt(document.body.style.left, 10);\n                // Restore styles\n                Object.assign(document.body.style, previousBodyPosition);\n                window.requestAnimationFrame({\n                    \"usePositionFixed.useCallback[restorePositionSetting]\": ()=>{\n                        if (preventScrollRestoration && activeUrl !== window.location.href) {\n                            setActiveUrl(window.location.href);\n                            return;\n                        }\n                        window.scrollTo(x, y);\n                    }\n                }[\"usePositionFixed.useCallback[restorePositionSetting]\"]);\n                previousBodyPosition = null;\n            }\n        }\n    }[\"usePositionFixed.useCallback[restorePositionSetting]\"], [\n        activeUrl\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"usePositionFixed.useEffect\": ()=>{\n            function onScroll() {\n                scrollPos.current = window.scrollY;\n            }\n            onScroll();\n            window.addEventListener('scroll', onScroll);\n            return ({\n                \"usePositionFixed.useEffect\": ()=>{\n                    window.removeEventListener('scroll', onScroll);\n                }\n            })[\"usePositionFixed.useEffect\"];\n        }\n    }[\"usePositionFixed.useEffect\"], []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"usePositionFixed.useEffect\": ()=>{\n            if (nested || !hasBeenOpened) return;\n            // This is needed to force Safari toolbar to show **before** the drawer starts animating to prevent a gnarly shift from happening\n            if (isOpen) {\n                // avoid for standalone mode (PWA)\n                const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n                !isStandalone && setPositionFixed();\n                if (!modal) {\n                    window.setTimeout({\n                        \"usePositionFixed.useEffect\": ()=>{\n                            restorePositionSetting();\n                        }\n                    }[\"usePositionFixed.useEffect\"], 500);\n                }\n            } else {\n                restorePositionSetting();\n            }\n        }\n    }[\"usePositionFixed.useEffect\"], [\n        isOpen,\n        hasBeenOpened,\n        activeUrl,\n        modal,\n        nested,\n        setPositionFixed,\n        restorePositionSetting\n    ]);\n    return {\n        restorePositionSetting\n    };\n}\nfunction Root({ open: openProp, onOpenChange, children, onDrag: onDragProp, onRelease: onReleaseProp, snapPoints, shouldScaleBackground = false, setBackgroundColorOnScale = true, closeThreshold = CLOSE_THRESHOLD, scrollLockTimeout = SCROLL_LOCK_TIMEOUT, dismissible = true, handleOnly = false, fadeFromIndex = snapPoints && snapPoints.length - 1, activeSnapPoint: activeSnapPointProp, setActiveSnapPoint: setActiveSnapPointProp, fixed, modal = true, onClose, nested, noBodyStyles, direction = 'bottom', defaultOpen = false, disablePreventScroll = true, snapToSequentialPoint = false, preventScrollRestoration = false, repositionInputs = true, onAnimationEnd, container, autoFocus = false }) {\n    var _drawerRef_current, _drawerRef_current1;\n    const [isOpen = false, setIsOpen] = useControllableState({\n        defaultProp: defaultOpen,\n        prop: openProp,\n        onChange: {\n            \"Root.useControllableState\": (o)=>{\n                onOpenChange == null ? void 0 : onOpenChange(o);\n                if (!o && !nested) {\n                    restorePositionSetting();\n                }\n                setTimeout({\n                    \"Root.useControllableState\": ()=>{\n                        onAnimationEnd == null ? void 0 : onAnimationEnd(o);\n                    }\n                }[\"Root.useControllableState\"], TRANSITIONS.DURATION * 1000);\n                if (o && !modal) {\n                    if (false) {}\n                }\n                if (!o) {\n                    // This will be removed when the exit animation ends (`500ms`)\n                    document.body.style.pointerEvents = 'auto';\n                }\n            }\n        }[\"Root.useControllableState\"]\n    });\n    const [hasBeenOpened, setHasBeenOpened] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [isDragging, setIsDragging] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [justReleased, setJustReleased] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const overlayRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const openTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const dragStartTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const dragEndTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const lastTimeDragPrevented = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const isAllowedToDrag = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const nestedOpenChangeTimer = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const pointerStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const keyboardIsOpen = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const previousDiffFromInitial = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const drawerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const drawerHeightRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(((_drawerRef_current = drawerRef.current) == null ? void 0 : _drawerRef_current.getBoundingClientRect().height) || 0);\n    const drawerWidthRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(((_drawerRef_current1 = drawerRef.current) == null ? void 0 : _drawerRef_current1.getBoundingClientRect().width) || 0);\n    const initialDrawerHeight = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const onSnapPointChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback({\n        \"Root.useCallback[onSnapPointChange]\": (activeSnapPointIndex)=>{\n            // Change openTime ref when we reach the last snap point to prevent dragging for 500ms incase it's scrollable.\n            if (snapPoints && activeSnapPointIndex === snapPointsOffset.length - 1) openTime.current = new Date();\n        }\n    }[\"Root.useCallback[onSnapPointChange]\"], []);\n    const { activeSnapPoint, activeSnapPointIndex, setActiveSnapPoint, onRelease: onReleaseSnapPoints, snapPointsOffset, onDrag: onDragSnapPoints, shouldFade, getPercentageDragged: getSnapPointsPercentageDragged } = useSnapPoints({\n        snapPoints,\n        activeSnapPointProp,\n        setActiveSnapPointProp,\n        drawerRef,\n        fadeFromIndex,\n        overlayRef,\n        onSnapPointChange,\n        direction,\n        container,\n        snapToSequentialPoint\n    });\n    usePreventScroll({\n        isDisabled: !isOpen || isDragging || !modal || justReleased || !hasBeenOpened || !repositionInputs || !disablePreventScroll\n    });\n    const { restorePositionSetting } = usePositionFixed({\n        isOpen,\n        modal,\n        nested,\n        hasBeenOpened,\n        preventScrollRestoration,\n        noBodyStyles\n    });\n    function getScale() {\n        return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n    }\n    function onPress(event) {\n        var _drawerRef_current, _drawerRef_current1;\n        if (!dismissible && !snapPoints) return;\n        if (drawerRef.current && !drawerRef.current.contains(event.target)) return;\n        drawerHeightRef.current = ((_drawerRef_current = drawerRef.current) == null ? void 0 : _drawerRef_current.getBoundingClientRect().height) || 0;\n        drawerWidthRef.current = ((_drawerRef_current1 = drawerRef.current) == null ? void 0 : _drawerRef_current1.getBoundingClientRect().width) || 0;\n        setIsDragging(true);\n        dragStartTime.current = new Date();\n        // iOS doesn't trigger mouseUp after scrolling so we need to listen to touched in order to disallow dragging\n        if (isIOS()) {\n            window.addEventListener('touchend', ()=>isAllowedToDrag.current = false, {\n                once: true\n            });\n        }\n        // Ensure we maintain correct pointer capture even when going outside of the drawer\n        event.target.setPointerCapture(event.pointerId);\n        pointerStart.current = isVertical(direction) ? event.pageY : event.pageX;\n    }\n    function shouldDrag(el, isDraggingInDirection) {\n        var _window_getSelection, _lastTimeDragPrevented_current;\n        let element = el;\n        const highlightedText = (_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString();\n        const swipeAmount = drawerRef.current ? getTranslate(drawerRef.current, direction) : null;\n        const date = new Date();\n        if (element.hasAttribute('data-vaul-no-drag') || element.closest('[data-vaul-no-drag]')) {\n            return false;\n        }\n        if (direction === 'right' || direction === 'left') {\n            return true;\n        }\n        // Allow scrolling when animating\n        if (openTime.current && date.getTime() - openTime.current.getTime() < 500) {\n            return false;\n        }\n        if (swipeAmount !== null) {\n            if (direction === 'bottom' ? swipeAmount > 0 : swipeAmount < 0) {\n                return true;\n            }\n        }\n        // Don't drag if there's highlighted text\n        if (highlightedText && highlightedText.length > 0) {\n            return false;\n        }\n        // Disallow dragging if drawer was scrolled within `scrollLockTimeout`\n        if (date.getTime() - ((_lastTimeDragPrevented_current = lastTimeDragPrevented.current) == null ? void 0 : _lastTimeDragPrevented_current.getTime()) < scrollLockTimeout && swipeAmount === 0) {\n            lastTimeDragPrevented.current = date;\n            return false;\n        }\n        if (isDraggingInDirection) {\n            lastTimeDragPrevented.current = date;\n            // We are dragging down so we should allow scrolling\n            return false;\n        }\n        // Keep climbing up the DOM tree as long as there's a parent\n        while(element){\n            // Check if the element is scrollable\n            if (element.scrollHeight > element.clientHeight) {\n                if (element.scrollTop !== 0) {\n                    lastTimeDragPrevented.current = new Date();\n                    // The element is scrollable and not scrolled to the top, so don't drag\n                    return false;\n                }\n                if (element.getAttribute('role') === 'dialog') {\n                    return true;\n                }\n            }\n            // Move up to the parent element\n            element = element.parentNode;\n        }\n        // No scrollable parents not scrolled to the top found, so drag\n        return true;\n    }\n    function onDrag(event) {\n        if (!drawerRef.current) {\n            return;\n        }\n        // We need to know how much of the drawer has been dragged in percentages so that we can transform background accordingly\n        if (isDragging) {\n            const directionMultiplier = direction === 'bottom' || direction === 'right' ? 1 : -1;\n            const draggedDistance = (pointerStart.current - (isVertical(direction) ? event.pageY : event.pageX)) * directionMultiplier;\n            const isDraggingInDirection = draggedDistance > 0;\n            // Pre condition for disallowing dragging in the close direction.\n            const noCloseSnapPointsPreCondition = snapPoints && !dismissible && !isDraggingInDirection;\n            // Disallow dragging down to close when first snap point is the active one and dismissible prop is set to false.\n            if (noCloseSnapPointsPreCondition && activeSnapPointIndex === 0) return;\n            // We need to capture last time when drag with scroll was triggered and have a timeout between\n            const absDraggedDistance = Math.abs(draggedDistance);\n            const wrapper = document.querySelector('[data-vaul-drawer-wrapper]');\n            const drawerDimension = direction === 'bottom' || direction === 'top' ? drawerHeightRef.current : drawerWidthRef.current;\n            // Calculate the percentage dragged, where 1 is the closed position\n            let percentageDragged = absDraggedDistance / drawerDimension;\n            const snapPointPercentageDragged = getSnapPointsPercentageDragged(absDraggedDistance, isDraggingInDirection);\n            if (snapPointPercentageDragged !== null) {\n                percentageDragged = snapPointPercentageDragged;\n            }\n            // Disallow close dragging beyond the smallest snap point.\n            if (noCloseSnapPointsPreCondition && percentageDragged >= 1) {\n                return;\n            }\n            if (!isAllowedToDrag.current && !shouldDrag(event.target, isDraggingInDirection)) return;\n            drawerRef.current.classList.add(DRAG_CLASS);\n            // If shouldDrag gave true once after pressing down on the drawer, we set isAllowedToDrag to true and it will remain true until we let go, there's no reason to disable dragging mid way, ever, and that's the solution to it\n            isAllowedToDrag.current = true;\n            set(drawerRef.current, {\n                transition: 'none'\n            });\n            set(overlayRef.current, {\n                transition: 'none'\n            });\n            if (snapPoints) {\n                onDragSnapPoints({\n                    draggedDistance\n                });\n            }\n            // Run this only if snapPoints are not defined or if we are at the last snap point (highest one)\n            if (isDraggingInDirection && !snapPoints) {\n                const dampenedDraggedDistance = dampenValue(draggedDistance);\n                const translateValue = Math.min(dampenedDraggedDistance * -1, 0) * directionMultiplier;\n                set(drawerRef.current, {\n                    transform: isVertical(direction) ? `translate3d(0, ${translateValue}px, 0)` : `translate3d(${translateValue}px, 0, 0)`\n                });\n                return;\n            }\n            const opacityValue = 1 - percentageDragged;\n            if (shouldFade || fadeFromIndex && activeSnapPointIndex === fadeFromIndex - 1) {\n                onDragProp == null ? void 0 : onDragProp(event, percentageDragged);\n                set(overlayRef.current, {\n                    opacity: `${opacityValue}`,\n                    transition: 'none'\n                }, true);\n            }\n            if (wrapper && overlayRef.current && shouldScaleBackground) {\n                // Calculate percentageDragged as a fraction (0 to 1)\n                const scaleValue = Math.min(getScale() + percentageDragged * (1 - getScale()), 1);\n                const borderRadiusValue = 8 - percentageDragged * 8;\n                const translateValue = Math.max(0, 14 - percentageDragged * 14);\n                set(wrapper, {\n                    borderRadius: `${borderRadiusValue}px`,\n                    transform: isVertical(direction) ? `scale(${scaleValue}) translate3d(0, ${translateValue}px, 0)` : `scale(${scaleValue}) translate3d(${translateValue}px, 0, 0)`,\n                    transition: 'none'\n                }, true);\n            }\n            if (!snapPoints) {\n                const translateValue = absDraggedDistance * directionMultiplier;\n                set(drawerRef.current, {\n                    transform: isVertical(direction) ? `translate3d(0, ${translateValue}px, 0)` : `translate3d(${translateValue}px, 0, 0)`\n                });\n            }\n        }\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"Root.useEffect\": ()=>{\n            var _window_visualViewport;\n            function onVisualViewportChange() {\n                if (!drawerRef.current || !repositionInputs) return;\n                const focusedElement = document.activeElement;\n                if (isInput(focusedElement) || keyboardIsOpen.current) {\n                    var _window_visualViewport;\n                    const visualViewportHeight = ((_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.height) || 0;\n                    const totalHeight = window.innerHeight;\n                    // This is the height of the keyboard\n                    let diffFromInitial = totalHeight - visualViewportHeight;\n                    const drawerHeight = drawerRef.current.getBoundingClientRect().height || 0;\n                    // Adjust drawer height only if it's tall enough\n                    const isTallEnough = drawerHeight > totalHeight * 0.8;\n                    if (!initialDrawerHeight.current) {\n                        initialDrawerHeight.current = drawerHeight;\n                    }\n                    const offsetFromTop = drawerRef.current.getBoundingClientRect().top;\n                    // visualViewport height may change due to somq e subtle changes to the keyboard. Checking if the height changed by 60 or more will make sure that they keyboard really changed its open state.\n                    if (Math.abs(previousDiffFromInitial.current - diffFromInitial) > 60) {\n                        keyboardIsOpen.current = !keyboardIsOpen.current;\n                    }\n                    if (snapPoints && snapPoints.length > 0 && snapPointsOffset && activeSnapPointIndex) {\n                        const activeSnapPointHeight = snapPointsOffset[activeSnapPointIndex] || 0;\n                        diffFromInitial += activeSnapPointHeight;\n                    }\n                    previousDiffFromInitial.current = diffFromInitial;\n                    // We don't have to change the height if the input is in view, when we are here we are in the opened keyboard state so we can correctly check if the input is in view\n                    if (drawerHeight > visualViewportHeight || keyboardIsOpen.current) {\n                        const height = drawerRef.current.getBoundingClientRect().height;\n                        let newDrawerHeight = height;\n                        if (height > visualViewportHeight) {\n                            newDrawerHeight = visualViewportHeight - (isTallEnough ? offsetFromTop : WINDOW_TOP_OFFSET);\n                        }\n                        // When fixed, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open\n                        if (fixed) {\n                            drawerRef.current.style.height = `${height - Math.max(diffFromInitial, 0)}px`;\n                        } else {\n                            drawerRef.current.style.height = `${Math.max(newDrawerHeight, visualViewportHeight - offsetFromTop)}px`;\n                        }\n                    } else {\n                        drawerRef.current.style.height = `${initialDrawerHeight.current}px`;\n                    }\n                    if (snapPoints && snapPoints.length > 0 && !keyboardIsOpen.current) {\n                        drawerRef.current.style.bottom = `0px`;\n                    } else {\n                        // Negative bottom value would never make sense\n                        drawerRef.current.style.bottom = `${Math.max(diffFromInitial, 0)}px`;\n                    }\n                }\n            }\n            (_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.addEventListener('resize', onVisualViewportChange);\n            return ({\n                \"Root.useEffect\": ()=>{\n                    var _window_visualViewport;\n                    return (_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.removeEventListener('resize', onVisualViewportChange);\n                }\n            })[\"Root.useEffect\"];\n        }\n    }[\"Root.useEffect\"], [\n        activeSnapPointIndex,\n        snapPoints,\n        snapPointsOffset\n    ]);\n    function closeDrawer(fromWithin) {\n        cancelDrag();\n        onClose == null ? void 0 : onClose();\n        if (!fromWithin) {\n            setIsOpen(false);\n        }\n        setTimeout(()=>{\n            if (snapPoints) {\n                setActiveSnapPoint(snapPoints[0]);\n            }\n        }, TRANSITIONS.DURATION * 1000); // seconds to ms\n    }\n    function resetDrawer() {\n        if (!drawerRef.current) return;\n        const wrapper = document.querySelector('[data-vaul-drawer-wrapper]');\n        const currentSwipeAmount = getTranslate(drawerRef.current, direction);\n        set(drawerRef.current, {\n            transform: 'translate3d(0, 0, 0)',\n            transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`\n        });\n        set(overlayRef.current, {\n            transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n            opacity: '1'\n        });\n        // Don't reset background if swiped upwards\n        if (shouldScaleBackground && currentSwipeAmount && currentSwipeAmount > 0 && isOpen) {\n            set(wrapper, {\n                borderRadius: `${BORDER_RADIUS}px`,\n                overflow: 'hidden',\n                ...isVertical(direction) ? {\n                    transform: `scale(${getScale()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`,\n                    transformOrigin: 'top'\n                } : {\n                    transform: `scale(${getScale()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`,\n                    transformOrigin: 'left'\n                },\n                transitionProperty: 'transform, border-radius',\n                transitionDuration: `${TRANSITIONS.DURATION}s`,\n                transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(',')})`\n            }, true);\n        }\n    }\n    function cancelDrag() {\n        if (!isDragging || !drawerRef.current) return;\n        drawerRef.current.classList.remove(DRAG_CLASS);\n        isAllowedToDrag.current = false;\n        setIsDragging(false);\n        dragEndTime.current = new Date();\n    }\n    function onRelease(event) {\n        if (!isDragging || !drawerRef.current) return;\n        drawerRef.current.classList.remove(DRAG_CLASS);\n        isAllowedToDrag.current = false;\n        setIsDragging(false);\n        dragEndTime.current = new Date();\n        const swipeAmount = getTranslate(drawerRef.current, direction);\n        if (!shouldDrag(event.target, false) || !swipeAmount || Number.isNaN(swipeAmount)) return;\n        if (dragStartTime.current === null) return;\n        const timeTaken = dragEndTime.current.getTime() - dragStartTime.current.getTime();\n        const distMoved = pointerStart.current - (isVertical(direction) ? event.pageY : event.pageX);\n        const velocity = Math.abs(distMoved) / timeTaken;\n        if (velocity > 0.05) {\n            // `justReleased` is needed to prevent the drawer from focusing on an input when the drag ends, as it's not the intent most of the time.\n            setJustReleased(true);\n            setTimeout(()=>{\n                setJustReleased(false);\n            }, 200);\n        }\n        if (snapPoints) {\n            const directionMultiplier = direction === 'bottom' || direction === 'right' ? 1 : -1;\n            onReleaseSnapPoints({\n                draggedDistance: distMoved * directionMultiplier,\n                closeDrawer,\n                velocity,\n                dismissible\n            });\n            onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n            return;\n        }\n        // Moved upwards, don't do anything\n        if (direction === 'bottom' || direction === 'right' ? distMoved > 0 : distMoved < 0) {\n            resetDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n            return;\n        }\n        if (velocity > VELOCITY_THRESHOLD) {\n            closeDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, false);\n            return;\n        }\n        var _drawerRef_current_getBoundingClientRect_height;\n        const visibleDrawerHeight = Math.min((_drawerRef_current_getBoundingClientRect_height = drawerRef.current.getBoundingClientRect().height) != null ? _drawerRef_current_getBoundingClientRect_height : 0, window.innerHeight);\n        var _drawerRef_current_getBoundingClientRect_width;\n        const visibleDrawerWidth = Math.min((_drawerRef_current_getBoundingClientRect_width = drawerRef.current.getBoundingClientRect().width) != null ? _drawerRef_current_getBoundingClientRect_width : 0, window.innerWidth);\n        const isHorizontalSwipe = direction === 'left' || direction === 'right';\n        if (Math.abs(swipeAmount) >= (isHorizontalSwipe ? visibleDrawerWidth : visibleDrawerHeight) * closeThreshold) {\n            closeDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, false);\n            return;\n        }\n        onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n        resetDrawer();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"Root.useEffect\": ()=>{\n            // Trigger enter animation without using CSS animation\n            if (isOpen) {\n                set(document.documentElement, {\n                    scrollBehavior: 'auto'\n                });\n                openTime.current = new Date();\n            }\n            return ({\n                \"Root.useEffect\": ()=>{\n                    reset(document.documentElement, 'scrollBehavior');\n                }\n            })[\"Root.useEffect\"];\n        }\n    }[\"Root.useEffect\"], [\n        isOpen\n    ]);\n    function onNestedOpenChange(o) {\n        const scale = o ? (window.innerWidth - NESTED_DISPLACEMENT) / window.innerWidth : 1;\n        const y = o ? -NESTED_DISPLACEMENT : 0;\n        if (nestedOpenChangeTimer.current) {\n            window.clearTimeout(nestedOpenChangeTimer.current);\n        }\n        set(drawerRef.current, {\n            transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n            transform: `scale(${scale}) translate3d(0, ${y}px, 0)`\n        });\n        if (!o && drawerRef.current) {\n            nestedOpenChangeTimer.current = setTimeout(()=>{\n                const translateValue = getTranslate(drawerRef.current, direction);\n                set(drawerRef.current, {\n                    transition: 'none',\n                    transform: isVertical(direction) ? `translate3d(0, ${translateValue}px, 0)` : `translate3d(${translateValue}px, 0, 0)`\n                });\n            }, 500);\n        }\n    }\n    function onNestedDrag(_event, percentageDragged) {\n        if (percentageDragged < 0) return;\n        const initialScale = (window.innerWidth - NESTED_DISPLACEMENT) / window.innerWidth;\n        const newScale = initialScale + percentageDragged * (1 - initialScale);\n        const newTranslate = -NESTED_DISPLACEMENT + percentageDragged * NESTED_DISPLACEMENT;\n        set(drawerRef.current, {\n            transform: isVertical(direction) ? `scale(${newScale}) translate3d(0, ${newTranslate}px, 0)` : `scale(${newScale}) translate3d(${newTranslate}px, 0, 0)`,\n            transition: 'none'\n        });\n    }\n    function onNestedRelease(_event, o) {\n        const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        const scale = o ? (dim - NESTED_DISPLACEMENT) / dim : 1;\n        const translate = o ? -NESTED_DISPLACEMENT : 0;\n        if (o) {\n            set(drawerRef.current, {\n                transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(',')})`,\n                transform: isVertical(direction) ? `scale(${scale}) translate3d(0, ${translate}px, 0)` : `scale(${scale}) translate3d(${translate}px, 0, 0)`\n            });\n        }\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Root, {\n        defaultOpen: defaultOpen,\n        onOpenChange: (open)=>{\n            if (!dismissible && !open) return;\n            if (open) {\n                setHasBeenOpened(true);\n            } else {\n                closeDrawer(true);\n            }\n            setIsOpen(open);\n        },\n        open: isOpen\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DrawerContext.Provider, {\n        value: {\n            activeSnapPoint,\n            snapPoints,\n            setActiveSnapPoint,\n            drawerRef,\n            overlayRef,\n            onOpenChange,\n            onPress,\n            onRelease,\n            onDrag,\n            dismissible,\n            handleOnly,\n            isOpen,\n            isDragging,\n            shouldFade,\n            closeDrawer,\n            onNestedDrag,\n            onNestedOpenChange,\n            onNestedRelease,\n            keyboardIsOpen,\n            modal,\n            snapPointsOffset,\n            direction,\n            shouldScaleBackground,\n            setBackgroundColorOnScale,\n            noBodyStyles,\n            container,\n            autoFocus\n        }\n    }, children));\n}\nconst Overlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ ...rest }, ref) {\n    const { overlayRef, snapPoints, onRelease, shouldFade, isOpen, modal } = useDrawerContext();\n    const composedRef = useComposedRefs(ref, overlayRef);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n    // Overlay is the component that is locking scroll, removing it will unlock the scroll without having to dig into Radix's Dialog library\n    if (!modal) {\n        // Need to do this manually unfortunately\n        if (false) {}\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Overlay, {\n        onMouseUp: onRelease,\n        ref: composedRef,\n        \"data-vaul-overlay\": \"\",\n        \"data-vaul-snap-points\": isOpen && hasSnapPoints ? 'true' : 'false',\n        \"data-vaul-snap-points-overlay\": isOpen && shouldFade ? 'true' : 'false',\n        ...rest\n    });\n});\nOverlay.displayName = 'Drawer.Overlay';\nconst Content = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ onPointerDownOutside, style, onOpenAutoFocus, ...rest }, ref) {\n    const { drawerRef, onPress, onRelease, onDrag, keyboardIsOpen, snapPointsOffset, modal, isOpen, direction, snapPoints, container, handleOnly, autoFocus } = useDrawerContext();\n    // Needed to use transition instead of animations\n    const [delayedSnapPoints, setDelayedSnapPoints] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const composedRef = useComposedRefs(ref, drawerRef);\n    const pointerStartRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const lastKnownPointerEventRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const wasBeyondThePointRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n    useScaleBackground();\n    const isDeltaInDirection = (delta, direction, threshold = 0)=>{\n        if (wasBeyondThePointRef.current) return true;\n        const deltaY = Math.abs(delta.y);\n        const deltaX = Math.abs(delta.x);\n        const isDeltaX = deltaX > deltaY;\n        const dFactor = [\n            'bottom',\n            'right'\n        ].includes(direction) ? 1 : -1;\n        if (direction === 'left' || direction === 'right') {\n            const isReverseDirection = delta.x * dFactor < 0;\n            if (!isReverseDirection && deltaX >= 0 && deltaX <= threshold) {\n                return isDeltaX;\n            }\n        } else {\n            const isReverseDirection = delta.y * dFactor < 0;\n            if (!isReverseDirection && deltaY >= 0 && deltaY <= threshold) {\n                return !isDeltaX;\n            }\n        }\n        wasBeyondThePointRef.current = true;\n        return true;\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"Content.useEffect\": ()=>{\n            if (hasSnapPoints) {\n                window.requestAnimationFrame({\n                    \"Content.useEffect\": ()=>{\n                        setDelayedSnapPoints(true);\n                    }\n                }[\"Content.useEffect\"]);\n            }\n        }\n    }[\"Content.useEffect\"], []);\n    function handleOnPointerUp(event) {\n        pointerStartRef.current = null;\n        wasBeyondThePointRef.current = false;\n        onRelease(event);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Content, {\n        \"data-vaul-drawer-direction\": direction,\n        \"data-vaul-drawer\": \"\",\n        \"data-vaul-delayed-snap-points\": delayedSnapPoints ? 'true' : 'false',\n        \"data-vaul-snap-points\": isOpen && hasSnapPoints ? 'true' : 'false',\n        \"data-vaul-custom-container\": container ? 'true' : 'false',\n        ...rest,\n        ref: composedRef,\n        style: snapPointsOffset && snapPointsOffset.length > 0 ? {\n            '--snap-point-height': `${snapPointsOffset[0]}px`,\n            ...style\n        } : style,\n        onPointerDown: (event)=>{\n            if (handleOnly) return;\n            rest.onPointerDown == null ? void 0 : rest.onPointerDown.call(rest, event);\n            pointerStartRef.current = {\n                x: event.pageX,\n                y: event.pageY\n            };\n            onPress(event);\n        },\n        onOpenAutoFocus: (e)=>{\n            onOpenAutoFocus == null ? void 0 : onOpenAutoFocus(e);\n            if (!autoFocus) {\n                e.preventDefault();\n            }\n        },\n        onPointerDownOutside: (e)=>{\n            onPointerDownOutside == null ? void 0 : onPointerDownOutside(e);\n            if (!modal || e.defaultPrevented) {\n                e.preventDefault();\n                return;\n            }\n            if (keyboardIsOpen.current) {\n                keyboardIsOpen.current = false;\n            }\n        },\n        onFocusOutside: (e)=>{\n            if (!modal) {\n                e.preventDefault();\n                return;\n            }\n        },\n        onPointerMove: (event)=>{\n            lastKnownPointerEventRef.current = event;\n            if (handleOnly) return;\n            rest.onPointerMove == null ? void 0 : rest.onPointerMove.call(rest, event);\n            if (!pointerStartRef.current) return;\n            const yPosition = event.pageY - pointerStartRef.current.y;\n            const xPosition = event.pageX - pointerStartRef.current.x;\n            const swipeStartThreshold = event.pointerType === 'touch' ? 10 : 2;\n            const delta = {\n                x: xPosition,\n                y: yPosition\n            };\n            const isAllowedToSwipe = isDeltaInDirection(delta, direction, swipeStartThreshold);\n            if (isAllowedToSwipe) onDrag(event);\n            else if (Math.abs(xPosition) > swipeStartThreshold || Math.abs(yPosition) > swipeStartThreshold) {\n                pointerStartRef.current = null;\n            }\n        },\n        onPointerUp: (event)=>{\n            rest.onPointerUp == null ? void 0 : rest.onPointerUp.call(rest, event);\n            pointerStartRef.current = null;\n            wasBeyondThePointRef.current = false;\n            onRelease(event);\n        },\n        onPointerOut: (event)=>{\n            rest.onPointerOut == null ? void 0 : rest.onPointerOut.call(rest, event);\n            handleOnPointerUp(lastKnownPointerEventRef.current);\n        },\n        onContextMenu: (event)=>{\n            rest.onContextMenu == null ? void 0 : rest.onContextMenu.call(rest, event);\n            handleOnPointerUp(lastKnownPointerEventRef.current);\n        }\n    });\n});\nContent.displayName = 'Drawer.Content';\nconst LONG_HANDLE_PRESS_TIMEOUT = 250;\nconst DOUBLE_TAP_TIMEOUT = 120;\nconst Handle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ preventCycle = false, children, ...rest }, ref) {\n    const { closeDrawer, isDragging, snapPoints, activeSnapPoint, setActiveSnapPoint, dismissible, handleOnly, isOpen, onPress, onDrag } = useDrawerContext();\n    const closeTimeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const shouldCancelInteractionRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    function handleStartCycle() {\n        // Stop if this is the second click of a double click\n        if (shouldCancelInteractionRef.current) {\n            handleCancelInteraction();\n            return;\n        }\n        window.setTimeout(()=>{\n            handleCycleSnapPoints();\n        }, DOUBLE_TAP_TIMEOUT);\n    }\n    function handleCycleSnapPoints() {\n        // Prevent accidental taps while resizing drawer\n        if (isDragging || preventCycle || shouldCancelInteractionRef.current) {\n            handleCancelInteraction();\n            return;\n        }\n        // Make sure to clear the timeout id if the user releases the handle before the cancel timeout\n        handleCancelInteraction();\n        if ((!snapPoints || snapPoints.length === 0) && dismissible) {\n            closeDrawer();\n            return;\n        }\n        const isLastSnapPoint = activeSnapPoint === snapPoints[snapPoints.length - 1];\n        if (isLastSnapPoint && dismissible) {\n            closeDrawer();\n            return;\n        }\n        const currentSnapIndex = snapPoints.findIndex((point)=>point === activeSnapPoint);\n        if (currentSnapIndex === -1) return; // activeSnapPoint not found in snapPoints\n        const nextSnapPoint = snapPoints[currentSnapIndex + 1];\n        setActiveSnapPoint(nextSnapPoint);\n    }\n    function handleStartInteraction() {\n        closeTimeoutIdRef.current = window.setTimeout(()=>{\n            // Cancel click interaction on a long press\n            shouldCancelInteractionRef.current = true;\n        }, LONG_HANDLE_PRESS_TIMEOUT);\n    }\n    function handleCancelInteraction() {\n        window.clearTimeout(closeTimeoutIdRef.current);\n        shouldCancelInteractionRef.current = false;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        onClick: handleStartCycle,\n        onPointerCancel: handleCancelInteraction,\n        onPointerDown: (e)=>{\n            if (handleOnly) onPress(e);\n            handleStartInteraction();\n        },\n        onPointerMove: (e)=>{\n            if (handleOnly) onDrag(e);\n        },\n        // onPointerUp is already handled by the content component\n        ref: ref,\n        \"data-vaul-drawer-visible\": isOpen ? 'true' : 'false',\n        \"data-vaul-handle\": \"\",\n        \"aria-hidden\": \"true\",\n        ...rest\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        \"data-vaul-handle-hitarea\": \"\",\n        \"aria-hidden\": \"true\"\n    }, children));\n});\nHandle.displayName = 'Drawer.Handle';\nfunction NestedRoot({ onDrag, onOpenChange, ...rest }) {\n    const { onNestedDrag, onNestedOpenChange, onNestedRelease } = useDrawerContext();\n    if (!onNestedDrag) {\n        throw new Error('Drawer.NestedRoot must be placed in another drawer');\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root, {\n        nested: true,\n        onClose: ()=>{\n            onNestedOpenChange(false);\n        },\n        onDrag: (e, p)=>{\n            onNestedDrag(e, p);\n            onDrag == null ? void 0 : onDrag(e, p);\n        },\n        onOpenChange: (o)=>{\n            if (o) {\n                onNestedOpenChange(o);\n            }\n        },\n        onRelease: onNestedRelease,\n        ...rest\n    });\n}\nfunction Portal(props) {\n    const context = useDrawerContext();\n    const { container = context.container, ...portalProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Portal, {\n        container: container,\n        ...portalProps\n    });\n}\nconst Drawer = {\n    Root,\n    NestedRoot,\n    Content,\n    Overlay,\n    Trigger: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Trigger,\n    Portal,\n    Handle,\n    Close: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Close,\n    Title: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Title,\n    Description: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Description\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY2hhdC11aS9ub2RlX21vZHVsZXMvdmF1bC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7MEdBQ0EsU0FBU0EsWUFBWUMsSUFBSTtJQUN2QixJQUFJLENBQUNBLFFBQVEsT0FBT0MsWUFBWSxhQUFhO0lBQzdDLElBQUlDLE9BQU9ELFNBQVNDLElBQUksSUFBSUQsU0FBU0Usb0JBQW9CLENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDcEUsSUFBSUMsUUFBUUgsU0FBU0ksYUFBYSxDQUFDO0lBQ25DRCxNQUFNRSxJQUFJLEdBQUc7SUFDYkosS0FBS0ssV0FBVyxDQUFDSDtJQUNoQkEsTUFBTUksVUFBVSxHQUFJSixNQUFNSSxVQUFVLENBQUNDLE9BQU8sR0FBR1QsT0FBUUksTUFBTUcsV0FBVyxDQUFDTixTQUFTUyxjQUFjLENBQUNWO0FBQ3BHO0FBRTBEO0FBQzNCO0FBQzZDO0FBRTVFLE1BQU1pQiw4QkFBZ0JKLGdEQUE0QixDQUFDO0lBQy9DTSxXQUFXO1FBQ1BDLFNBQVM7SUFDYjtJQUNBQyxZQUFZO1FBQ1JELFNBQVM7SUFDYjtJQUNBRSxTQUFTLEtBQUs7SUFDZEMsV0FBVyxLQUFLO0lBQ2hCQyxRQUFRLEtBQUs7SUFDYkMsY0FBYyxLQUFLO0lBQ25CQyxvQkFBb0IsS0FBSztJQUN6QkMsaUJBQWlCLEtBQUs7SUFDdEJDLFVBQVVDO0lBQ1ZDLGFBQWE7SUFDYkMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLGdCQUFnQjtRQUNaYixTQUFTO0lBQ2I7SUFDQWMsa0JBQWtCO0lBQ2xCQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsT0FBTztJQUNQQyxZQUFZO0lBQ1pDLGlCQUFpQjtJQUNqQkMsY0FBYyxLQUFLO0lBQ25CQyxvQkFBb0IsS0FBSztJQUN6QkMsYUFBYSxLQUFLO0lBQ2xCQyxXQUFXO0lBQ1hDLHVCQUF1QjtJQUN2QkMsMkJBQTJCO0lBQzNCQyxjQUFjO0lBQ2RDLFdBQVc7SUFD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SUFDNUI2YyxhQUFhN2MsK0RBQTJCO0FBQzVDO0FBRXNFIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NoYXQtdWkvbm9kZV9tb2R1bGVzL3ZhdWwvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuZnVuY3Rpb24gX19pbnNlcnRDU1MoY29kZSkge1xuICBpZiAoIWNvZGUgfHwgdHlwZW9mIGRvY3VtZW50ID09ICd1bmRlZmluZWQnKSByZXR1cm5cbiAgbGV0IGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF1cbiAgbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKVxuICA7c3R5bGUuc3R5bGVTaGVldCA/IChzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjb2RlKSA6IHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvZGUpKVxufVxuXG5pbXBvcnQgKiBhcyBEaWFsb2dQcmltaXRpdmUgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LWRpYWxvZyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IERyYXdlckNvbnRleHQgPSBSZWFjdF9fZGVmYXVsdC5jcmVhdGVDb250ZXh0KHtcbiAgICBkcmF3ZXJSZWY6IHtcbiAgICAgICAgY3VycmVudDogbnVsbFxuICAgIH0sXG4gICAgb3ZlcmxheVJlZjoge1xuICAgICAgICBjdXJyZW50OiBudWxsXG4gICAgfSxcbiAgICBvblByZXNzOiAoKT0+e30sXG4gICAgb25SZWxlYXNlOiAoKT0+e30sXG4gICAgb25EcmFnOiAoKT0+e30sXG4gICAgb25OZXN0ZWREcmFnOiAoKT0+e30sXG4gICAgb25OZXN0ZWRPcGVuQ2hhbmdlOiAoKT0+e30sXG4gICAgb25OZXN0ZWRSZWxlYXNlOiAoKT0+e30sXG4gICAgb3BlblByb3A6IHVuZGVmaW5lZCxcbiAgICBkaXNtaXNzaWJsZTogZmFsc2UsXG4gICAgaXNPcGVuOiBmYWxzZSxcbiAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICBrZXlib2FyZElzT3Blbjoge1xuICAgICAgICBjdXJyZW50OiBmYWxzZVxuICAgIH0sXG4gICAgc25hcFBvaW50c09mZnNldDogbnVsbCxcbiAgICBzbmFwUG9pbnRzOiBudWxsLFxuICAgIGhhbmRsZU9ubHk6IGZhbHNlLFxuICAgIG1vZGFsOiBmYWxzZSxcbiAgICBzaG91bGRGYWRlOiBmYWxzZSxcbiAgICBhY3RpdmVTbmFwUG9pbnQ6IG51bGwsXG4gICAgb25PcGVuQ2hhbmdlOiAoKT0+e30sXG4gICAgc2V0QWN0aXZlU25hcFBvaW50OiAoKT0+e30sXG4gICAgY2xvc2VEcmF3ZXI6ICgpPT57fSxcbiAgICBkaXJlY3Rpb246ICdib3R0b20nLFxuICAgIHNob3VsZFNjYWxlQmFja2dyb3VuZDogZmFsc2UsXG4gICAgc2V0QmFja2dyb3VuZENvbG9yT25TY2FsZTogdHJ1ZSxcbiAgICBub0JvZHlTdHlsZXM6IGZhbHNlLFxuICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICBhdXRvRm9jdXM6IGZhbHNlXG59KTtcbmNvbnN0IHVzZURyYXdlckNvbnRleHQgPSAoKT0+e1xuICAgIGNvbnN0IGNvbnRleHQgPSBSZWFjdF9fZGVmYXVsdC51c2VDb250ZXh0KERyYXdlckNvbnRleHQpO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZURyYXdlckNvbnRleHQgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIERyYXdlci5Sb290Jyk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xufTtcblxuX19pbnNlcnRDU1MoXCJbZGF0YS12YXVsLWRyYXdlcl17dG91Y2gtYWN0aW9uOm5vbmU7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtO3RyYW5zaXRpb246dHJhbnNmb3JtIC41cyBjdWJpYy1iZXppZXIoLjMyLCAuNzIsIDAsIDEpO2FuaW1hdGlvbi1kdXJhdGlvbjouNXM7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4zMiwwLjcyLDAsMSl9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1zbmFwLXBvaW50cz1mYWxzZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249Ym90dG9tXVtkYXRhLXN0YXRlPW9wZW5de2FuaW1hdGlvbi1uYW1lOnNsaWRlRnJvbUJvdHRvbX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1ib3R0b21dW2RhdGEtc3RhdGU9Y2xvc2VkXXthbmltYXRpb24tbmFtZTpzbGlkZVRvQm90dG9tfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXRvcF1bZGF0YS1zdGF0ZT1vcGVuXXthbmltYXRpb24tbmFtZTpzbGlkZUZyb21Ub3B9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1zbmFwLXBvaW50cz1mYWxzZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249dG9wXVtkYXRhLXN0YXRlPWNsb3NlZF17YW5pbWF0aW9uLW5hbWU6c2xpZGVUb1RvcH1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1sZWZ0XVtkYXRhLXN0YXRlPW9wZW5de2FuaW1hdGlvbi1uYW1lOnNsaWRlRnJvbUxlZnR9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1zbmFwLXBvaW50cz1mYWxzZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249bGVmdF1bZGF0YS1zdGF0ZT1jbG9zZWRde2FuaW1hdGlvbi1uYW1lOnNsaWRlVG9MZWZ0fVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXJpZ2h0XVtkYXRhLXN0YXRlPW9wZW5de2FuaW1hdGlvbi1uYW1lOnNsaWRlRnJvbVJpZ2h0fVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXJpZ2h0XVtkYXRhLXN0YXRlPWNsb3NlZF17YW5pbWF0aW9uLW5hbWU6c2xpZGVUb1JpZ2h0fVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9dHJ1ZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249Ym90dG9tXXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMDAlLDApfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9dHJ1ZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249dG9wXXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTAwJSwwKX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTAwJSwwLDApfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9dHJ1ZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249cmlnaHRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDAlLDAsMCl9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1kZWxheWVkLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXRvcF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsdmFyKC0tc25hcC1wb2ludC1oZWlnaHQsMCksMCl9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1kZWxheWVkLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWJvdHRvbV17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsdmFyKC0tc25hcC1wb2ludC1oZWlnaHQsMCksMCl9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1kZWxheWVkLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCh2YXIoLS1zbmFwLXBvaW50LWhlaWdodCwwKSwwLDApfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZGVsYXllZC1zbmFwLXBvaW50cz10cnVlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKHZhcigtLXNuYXAtcG9pbnQtaGVpZ2h0LDApLDAsMCl9W2RhdGEtdmF1bC1vdmVybGF5XVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2Vde2FuaW1hdGlvbi1kdXJhdGlvbjouNXM7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoMC4zMiwwLjcyLDAsMSl9W2RhdGEtdmF1bC1vdmVybGF5XVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtc3RhdGU9b3Blbl17YW5pbWF0aW9uLW5hbWU6ZmFkZUlufVtkYXRhLXZhdWwtb3ZlcmxheV1bZGF0YS1zdGF0ZT1jbG9zZWRde2FuaW1hdGlvbi1uYW1lOmZhZGVPdXR9W2RhdGEtdmF1bC1vdmVybGF5XVtkYXRhLXZhdWwtc25hcC1wb2ludHM9dHJ1ZV17b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSAuNXMgY3ViaWMtYmV6aWVyKC4zMiwgLjcyLCAwLCAxKX1bZGF0YS12YXVsLW92ZXJsYXldW2RhdGEtdmF1bC1zbmFwLXBvaW50cz10cnVlXXtvcGFjaXR5OjF9W2RhdGEtdmF1bC1kcmF3ZXJdOm5vdChbZGF0YS12YXVsLWN1c3RvbS1jb250YWluZXI9dHJ1ZV0pOjphZnRlcntjb250ZW50OicnO3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6aW5oZXJpdDtiYWNrZ3JvdW5kLWNvbG9yOmluaGVyaXR9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXRvcF06OmFmdGVye3RvcDppbml0aWFsO2JvdHRvbToxMDAlO2xlZnQ6MDtyaWdodDowO2hlaWdodDoyMDAlfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1ib3R0b21dOjphZnRlcnt0b3A6MTAwJTtib3R0b206aW5pdGlhbDtsZWZ0OjA7cmlnaHQ6MDtoZWlnaHQ6MjAwJX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249bGVmdF06OmFmdGVye2xlZnQ6aW5pdGlhbDtyaWdodDoxMDAlO3RvcDowO2JvdHRvbTowO3dpZHRoOjIwMCV9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXJpZ2h0XTo6YWZ0ZXJ7bGVmdDoxMDAlO3JpZ2h0OmluaXRpYWw7dG9wOjA7Ym90dG9tOjA7d2lkdGg6MjAwJX1bZGF0YS12YXVsLW92ZXJsYXldW2RhdGEtdmF1bC1zbmFwLXBvaW50cz10cnVlXTpub3QoW2RhdGEtdmF1bC1zbmFwLXBvaW50cy1vdmVybGF5PXRydWVdKTpub3QoXFxuW2RhdGEtc3RhdGU9Y2xvc2VkXVxcbil7b3BhY2l0eTowfVtkYXRhLXZhdWwtb3ZlcmxheV1bZGF0YS12YXVsLXNuYXAtcG9pbnRzLW92ZXJsYXk9dHJ1ZV17b3BhY2l0eToxfVtkYXRhLXZhdWwtaGFuZGxlXXtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO29wYWNpdHk6Ljc7YmFja2dyb3VuZDojZTJlMmU0O21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87aGVpZ2h0OjVweDt3aWR0aDozMnB4O2JvcmRlci1yYWRpdXM6MXJlbTt0b3VjaC1hY3Rpb246cGFuLXl9W2RhdGEtdmF1bC1oYW5kbGVdOmFjdGl2ZSxbZGF0YS12YXVsLWhhbmRsZV06aG92ZXJ7b3BhY2l0eToxfVtkYXRhLXZhdWwtaGFuZGxlLWhpdGFyZWFde3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpO3dpZHRoOm1heCgxMDAlLDIuNzVyZW0pO2hlaWdodDptYXgoMTAwJSwyLjc1cmVtKTt0b3VjaC1hY3Rpb246aW5oZXJpdH1AbWVkaWEgKGhvdmVyOmhvdmVyKSBhbmQgKHBvaW50ZXI6ZmluZSl7W2RhdGEtdmF1bC1kcmF3ZXJde3VzZXItc2VsZWN0Om5vbmV9fUBtZWRpYSAocG9pbnRlcjpmaW5lKXtbZGF0YS12YXVsLWhhbmRsZS1oaXRhcmVhXTp7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX19QGtleWZyYW1lcyBmYWRlSW57ZnJvbXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGZhZGVPdXR7dG97b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHNsaWRlRnJvbUJvdHRvbXtmcm9te3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEwMCUsMCl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKX19QGtleWZyYW1lcyBzbGlkZVRvQm90dG9te3Rve3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEwMCUsMCl9fUBrZXlmcmFtZXMgc2xpZGVGcm9tVG9we2Zyb217dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTEwMCUsMCl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKX19QGtleWZyYW1lcyBzbGlkZVRvVG9we3Rve3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMDAlLDApfX1Aa2V5ZnJhbWVzIHNsaWRlRnJvbUxlZnR7ZnJvbXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMCUsMCwwKX10b3t0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApfX1Aa2V5ZnJhbWVzIHNsaWRlVG9MZWZ0e3Rve3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTAwJSwwLDApfX1Aa2V5ZnJhbWVzIHNsaWRlRnJvbVJpZ2h0e2Zyb217dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwMCUsMCwwKX10b3t0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApfX1Aa2V5ZnJhbWVzIHNsaWRlVG9SaWdodHt0b3t0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTAwJSwwLDApfX1cIik7XG5cbi8vIFRoaXMgY29kZSBjb21lcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL21haW4vcGFja2FnZXMvJTQwcmVhY3QtYXJpYS9vdmVybGF5cy9zcmMvdXNlUHJldmVudFNjcm9sbC50c1xuY29uc3QgS0VZQk9BUkRfQlVGRkVSID0gMjQ7XG5jb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5mdW5jdGlvbiBjaGFpbiQxKC4uLmNhbGxiYWNrcykge1xuICAgIHJldHVybiAoLi4uYXJncyk9PntcbiAgICAgICAgZm9yIChsZXQgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKXtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBpc01hYygpIHtcbiAgICByZXR1cm4gdGVzdFBsYXRmb3JtKC9eTWFjLyk7XG59XG5mdW5jdGlvbiBpc0lQaG9uZSgpIHtcbiAgICByZXR1cm4gdGVzdFBsYXRmb3JtKC9eaVBob25lLyk7XG59XG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICByZXR1cm4gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cbmZ1bmN0aW9uIGlzSVBhZCgpIHtcbiAgICByZXR1cm4gdGVzdFBsYXRmb3JtKC9eaVBhZC8pIHx8IC8vIGlQYWRPUyAxMyBsaWVzIGFuZCBzYXlzIGl0J3MgYSBNYWMsIGJ1dCB3ZSBjYW4gZGlzdGluZ3Vpc2ggYnkgZGV0ZWN0aW5nIHRvdWNoIHN1cHBvcnQuXG4gICAgaXNNYWMoKSAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxO1xufVxuZnVuY3Rpb24gaXNJT1MoKSB7XG4gICAgcmV0dXJuIGlzSVBob25lKCkgfHwgaXNJUGFkKCk7XG59XG5mdW5jdGlvbiB0ZXN0UGxhdGZvcm0ocmUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvciAhPSBudWxsID8gcmUudGVzdCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKSA6IHVuZGVmaW5lZDtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHZpc3VhbFZpZXdwb3J0ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlzdWFsVmlld3BvcnQ7XG5mdW5jdGlvbiBpc1Njcm9sbGFibGUobm9kZSkge1xuICAgIGxldCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHJldHVybiAvKGF1dG98c2Nyb2xsKS8udGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WCArIHN0eWxlLm92ZXJmbG93WSk7XG59XG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICAgIGlmIChpc1Njcm9sbGFibGUobm9kZSkpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgd2hpbGUobm9kZSAmJiAhaXNTY3JvbGxhYmxlKG5vZGUpKXtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUgfHwgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG4vLyBIVE1MIGlucHV0IHR5cGVzIHRoYXQgZG8gbm90IGNhdXNlIHRoZSBzb2Z0d2FyZSBrZXlib2FyZCB0byBhcHBlYXIuXG5jb25zdCBub25UZXh0SW5wdXRUeXBlcyA9IG5ldyBTZXQoW1xuICAgICdjaGVja2JveCcsXG4gICAgJ3JhZGlvJyxcbiAgICAncmFuZ2UnLFxuICAgICdjb2xvcicsXG4gICAgJ2ZpbGUnLFxuICAgICdpbWFnZScsXG4gICAgJ2J1dHRvbicsXG4gICAgJ3N1Ym1pdCcsXG4gICAgJ3Jlc2V0J1xuXSk7XG4vLyBUaGUgbnVtYmVyIG9mIGFjdGl2ZSB1c2VQcmV2ZW50U2Nyb2xsIGNhbGxzLiBVc2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCBwYWdlIHN0eWxlL3Njcm9sbCBwb3NpdGlvblxubGV0IHByZXZlbnRTY3JvbGxDb3VudCA9IDA7XG5sZXQgcmVzdG9yZTtcbi8qKlxuICogUHJldmVudHMgc2Nyb2xsaW5nIG9uIHRoZSBkb2N1bWVudCBib2R5IG9uIG1vdW50LCBhbmRcbiAqIHJlc3RvcmVzIGl0IG9uIHVubW91bnQuIEFsc28gZW5zdXJlcyB0aGF0IGNvbnRlbnQgZG9lcyBub3RcbiAqIHNoaWZ0IGR1ZSB0byB0aGUgc2Nyb2xsYmFycyBkaXNhcHBlYXJpbmcuXG4gKi8gZnVuY3Rpb24gdXNlUHJldmVudFNjcm9sbChvcHRpb25zID0ge30pIHtcbiAgICBsZXQgeyBpc0Rpc2FibGVkIH0gPSBvcHRpb25zO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCk9PntcbiAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ZW50U2Nyb2xsQ291bnQrKztcbiAgICAgICAgaWYgKHByZXZlbnRTY3JvbGxDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGlzSU9TKCkpIHtcbiAgICAgICAgICAgICAgICByZXN0b3JlID0gcHJldmVudFNjcm9sbE1vYmlsZVNhZmFyaSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgcHJldmVudFNjcm9sbENvdW50LS07XG4gICAgICAgICAgICBpZiAocHJldmVudFNjcm9sbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdG9yZSA9PSBudWxsID8gdm9pZCAwIDogcmVzdG9yZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgaXNEaXNhYmxlZFxuICAgIF0pO1xufVxuLy8gTW9iaWxlIFNhZmFyaSBpcyBhIHdob2xlIGRpZmZlcmVudCBiZWFzdC4gRXZlbiB3aXRoIG92ZXJmbG93OiBoaWRkZW4sXG4vLyBpdCBzdGlsbCBzY3JvbGxzIHRoZSBwYWdlIGluIG1hbnkgc2l0dWF0aW9uczpcbi8vXG4vLyAxLiBXaGVuIHRoZSBib3R0b20gdG9vbGJhciBhbmQgYWRkcmVzcyBiYXIgYXJlIGNvbGxhcHNlZCwgcGFnZSBzY3JvbGxpbmcgaXMgYWx3YXlzIGFsbG93ZWQuXG4vLyAyLiBXaGVuIHRoZSBrZXlib2FyZCBpcyB2aXNpYmxlLCB0aGUgdmlld3BvcnQgZG9lcyBub3QgcmVzaXplLiBJbnN0ZWFkLCB0aGUga2V5Ym9hcmQgY292ZXJzIHBhcnQgb2Zcbi8vICAgIGl0LCBzbyBpdCBiZWNvbWVzIHNjcm9sbGFibGUuXG4vLyAzLiBXaGVuIHRhcHBpbmcgb24gYW4gaW5wdXQsIHRoZSBwYWdlIGFsd2F5cyBzY3JvbGxzIHNvIHRoYXQgdGhlIGlucHV0IGlzIGNlbnRlcmVkIGluIHRoZSB2aXN1YWwgdmlld3BvcnQuXG4vLyAgICBUaGlzIG1heSBjYXVzZSBldmVuIGZpeGVkIHBvc2l0aW9uIGVsZW1lbnRzIHRvIHNjcm9sbCBvZmYgdGhlIHNjcmVlbi5cbi8vIDQuIFdoZW4gdXNpbmcgdGhlIG5leHQvcHJldmlvdXMgYnV0dG9ucyBpbiB0aGUga2V5Ym9hcmQgdG8gbmF2aWdhdGUgYmV0d2VlbiBpbnB1dHMsIHRoZSB3aG9sZSBwYWdlIGFsd2F5c1xuLy8gICAgc2Nyb2xscywgZXZlbiBpZiB0aGUgaW5wdXQgaXMgaW5zaWRlIGEgbmVzdGVkIHNjcm9sbGFibGUgZWxlbWVudCB0aGF0IGNvdWxkIGJlIHNjcm9sbGVkIGluc3RlYWQuXG4vL1xuLy8gSW4gb3JkZXIgdG8gd29yayBhcm91bmQgdGhlc2UgY2FzZXMsIGFuZCBwcmV2ZW50IHNjcm9sbGluZyB3aXRob3V0IGphbmtpbmVzcywgd2UgZG8gYSBmZXcgdGhpbmdzOlxuLy9cbi8vIDEuIFByZXZlbnQgZGVmYXVsdCBvbiBgdG91Y2htb3ZlYCBldmVudHMgdGhhdCBhcmUgbm90IGluIGEgc2Nyb2xsYWJsZSBlbGVtZW50LiBUaGlzIHByZXZlbnRzIHRvdWNoIHNjcm9sbGluZ1xuLy8gICAgb24gdGhlIHdpbmRvdy5cbi8vIDIuIFByZXZlbnQgZGVmYXVsdCBvbiBgdG91Y2htb3ZlYCBldmVudHMgaW5zaWRlIGEgc2Nyb2xsYWJsZSBlbGVtZW50IHdoZW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBpcyBhdCB0aGVcbi8vICAgIHRvcCBvciBib3R0b20uIFRoaXMgYXZvaWRzIHRoZSB3aG9sZSBwYWdlIHNjcm9sbGluZyBpbnN0ZWFkLCBidXQgZG9lcyBwcmV2ZW50IG92ZXJzY3JvbGxpbmcuXG4vLyAzLiBQcmV2ZW50IGRlZmF1bHQgb24gYHRvdWNoZW5kYCBldmVudHMgb24gaW5wdXQgZWxlbWVudHMgYW5kIGhhbmRsZSBmb2N1c2luZyB0aGUgZWxlbWVudCBvdXJzZWx2ZXMuXG4vLyA0LiBXaGVuIGZvY3VzaW5nIGFuIGlucHV0LCBhcHBseSBhIHRyYW5zZm9ybSB0byB0cmljayBTYWZhcmkgaW50byB0aGlua2luZyB0aGUgaW5wdXQgaXMgYXQgdGhlIHRvcFxuLy8gICAgb2YgdGhlIHBhZ2UsIHdoaWNoIHByZXZlbnRzIGl0IGZyb20gc2Nyb2xsaW5nIHRoZSBwYWdlLiBBZnRlciB0aGUgaW5wdXQgaXMgZm9jdXNlZCwgc2Nyb2xsIHRoZSBlbGVtZW50XG4vLyAgICBpbnRvIHZpZXcgb3Vyc2VsdmVzLCB3aXRob3V0IHNjcm9sbGluZyB0aGUgd2hvbGUgcGFnZS5cbi8vIDUuIE9mZnNldCB0aGUgYm9keSBieSB0aGUgc2Nyb2xsIHBvc2l0aW9uIHVzaW5nIGEgbmVnYXRpdmUgbWFyZ2luIGFuZCBzY3JvbGwgdG8gdGhlIHRvcC4gVGhpcyBzaG91bGQgYXBwZWFyIHRoZVxuLy8gICAgc2FtZSB2aXN1YWxseSwgYnV0IG1ha2VzIHRoZSBhY3R1YWwgc2Nyb2xsIHBvc2l0aW9uIGFsd2F5cyB6ZXJvLiBUaGlzIGlzIHJlcXVpcmVkIHRvIG1ha2UgYWxsIG9mIHRoZVxuLy8gICAgYWJvdmUgd29yayBvciBTYWZhcmkgd2lsbCBzdGlsbCB0cnkgdG8gc2Nyb2xsIHRoZSBwYWdlIHdoZW4gZm9jdXNpbmcgYW4gaW5wdXQuXG4vLyA2LiBBcyBhIGxhc3QgcmVzb3J0LCBoYW5kbGUgd2luZG93IHNjcm9sbCBldmVudHMsIGFuZCBzY3JvbGwgYmFjayB0byB0aGUgdG9wLiBUaGlzIGNhbiBoYXBwZW4gd2hlbiBhdHRlbXB0aW5nXG4vLyAgICB0byBuYXZpZ2F0ZSB0byBhbiBpbnB1dCB3aXRoIHRoZSBuZXh0L3ByZXZpb3VzIGJ1dHRvbnMgdGhhdCdzIG91dHNpZGUgYSBtb2RhbC5cbmZ1bmN0aW9uIHByZXZlbnRTY3JvbGxNb2JpbGVTYWZhcmkoKSB7XG4gICAgbGV0IHNjcm9sbGFibGU7XG4gICAgbGV0IGxhc3RZID0gMDtcbiAgICBsZXQgb25Ub3VjaFN0YXJ0ID0gKGUpPT57XG4gICAgICAgIC8vIFN0b3JlIHRoZSBuZWFyZXN0IHNjcm9sbGFibGUgcGFyZW50IGVsZW1lbnQgZnJvbSB0aGUgZWxlbWVudCB0aGF0IHRoZSB1c2VyIHRvdWNoZWQuXG4gICAgICAgIHNjcm9sbGFibGUgPSBnZXRTY3JvbGxQYXJlbnQoZS50YXJnZXQpO1xuICAgICAgICBpZiAoc2Nyb2xsYWJsZSA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIHNjcm9sbGFibGUgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsYXN0WSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgfTtcbiAgICBsZXQgb25Ub3VjaE1vdmUgPSAoZSk9PntcbiAgICAgICAgLy8gUHJldmVudCBzY3JvbGxpbmcgdGhlIHdpbmRvdy5cbiAgICAgICAgaWYgKCFzY3JvbGxhYmxlIHx8IHNjcm9sbGFibGUgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBzY3JvbGxhYmxlID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBzY3JvbGxpbmcgdXAgd2hlbiBhdCB0aGUgdG9wIGFuZCBzY3JvbGxpbmcgZG93biB3aGVuIGF0IHRoZSBib3R0b21cbiAgICAgICAgLy8gb2YgYSBuZXN0ZWQgc2Nyb2xsYWJsZSBhcmVhLCBvdGhlcndpc2UgbW9iaWxlIFNhZmFyaSB3aWxsIHN0YXJ0IHNjcm9sbGluZ1xuICAgICAgICAvLyB0aGUgd2luZG93IGluc3RlYWQuIFVuZm9ydHVuYXRlbHksIHRoaXMgZGlzYWJsZXMgYm91bmNlIHNjcm9sbGluZyB3aGVuIGF0XG4gICAgICAgIC8vIHRoZSB0b3AgYnV0IGl0J3MgdGhlIGJlc3Qgd2UgY2FuIGRvLlxuICAgICAgICBsZXQgeSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgIGxldCBzY3JvbGxUb3AgPSBzY3JvbGxhYmxlLnNjcm9sbFRvcDtcbiAgICAgICAgbGV0IGJvdHRvbSA9IHNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsYWJsZS5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGlmIChib3R0b20gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2Nyb2xsVG9wIDw9IDAgJiYgeSA+IGxhc3RZIHx8IHNjcm9sbFRvcCA+PSBib3R0b20gJiYgeSA8IGxhc3RZKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFkgPSB5O1xuICAgIH07XG4gICAgbGV0IG9uVG91Y2hFbmQgPSAoZSk9PntcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAvLyBBcHBseSB0aGlzIGNoYW5nZSBpZiB3ZSdyZSBub3QgYWxyZWFkeSBmb2N1c2VkIG9uIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgICAgICBpZiAoaXNJbnB1dCh0YXJnZXQpICYmIHRhcmdldCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gQXBwbHkgYSB0cmFuc2Zvcm0gdG8gdHJpY2sgU2FmYXJpIGludG8gdGhpbmtpbmcgdGhlIGlucHV0IGlzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAgICAgICAgICAgIC8vIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIHNjcm9sbCBpdCBpbnRvIHZpZXcuIFdoZW4gdGFwcGluZyBvbiBhbiBpbnB1dCwgdGhpcyBuZWVkcyB0b1xuICAgICAgICAgICAgLy8gYmUgZG9uZSBiZWZvcmUgdGhlIFwiZm9jdXNcIiBldmVudCwgc28gd2UgaGF2ZSB0byBmb2N1cyB0aGUgZWxlbWVudCBvdXJzZWx2ZXMuXG4gICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTIwMDBweCknO1xuICAgICAgICAgICAgdGFyZ2V0LmZvY3VzKCk7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0IG9uRm9jdXMgPSAoZSk9PntcbiAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBpZiAoaXNJbnB1dCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAvLyBUcmFuc2Zvcm0gYWxzbyBuZWVkcyB0byBiZSBhcHBsaWVkIGluIHRoZSBmb2N1cyBldmVudCBpbiBjYXNlcyB3aGVyZSBmb2N1cyBtb3Zlc1xuICAgICAgICAgICAgLy8gb3RoZXIgdGhhbiB0YXBwaW5nIG9uIGFuIGlucHV0IGRpcmVjdGx5LCBlLmcuIHRoZSBuZXh0L3ByZXZpb3VzIGJ1dHRvbnMgaW4gdGhlXG4gICAgICAgICAgICAvLyBzb2Z0d2FyZSBrZXlib2FyZC4gSW4gdGhlc2UgY2FzZXMsIGl0IHNlZW1zIGFwcGx5aW5nIHRoZSB0cmFuc2Zvcm0gaW4gdGhlIGZvY3VzIGV2ZW50XG4gICAgICAgICAgICAvLyBpcyBnb29kIGVub3VnaCwgd2hlcmVhcyB3aGVuIHRhcHBpbmcgYW4gaW5wdXQsIGl0IG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIGZvY3VzIGV2ZW50LiDwn6S34oCN4pmC77iPXG4gICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTIwMDBweCknO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBoYXZlIHByZXZlbnRlZCB0aGUgYnJvd3NlciBmcm9tIHNjcm9sbGluZyB0aGUgZm9jdXNlZCBlbGVtZW50IGludG8gdmlldyxcbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIGRvIHRoaXMgb3Vyc2VsdmVzIGluIGEgd2F5IHRoYXQgZG9lc24ndCBjYXVzZSB0aGUgd2hvbGUgcGFnZSB0byBzY3JvbGwuXG4gICAgICAgICAgICAgICAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2aXN1YWxWaWV3cG9ydC5oZWlnaHQgPCB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBrZXlib2FyZCBpcyBhbHJlYWR5IHZpc2libGUsIGRvIHRoaXMgYWZ0ZXIgb25lIGFkZGl0aW9uYWwgZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIHdhaXQgZm9yIHRoZSB0cmFuc2Zvcm0gdG8gYmUgcmVtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEludG9WaWV3KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2FpdCBmb3IgdGhlIHZpc3VhbCB2aWV3cG9ydCB0byByZXNpemUgYmVmb3JlIHNjcm9sbGluZyBzbyB3ZSBjYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lYXN1cmUgdGhlIGNvcnJlY3QgcG9zaXRpb24gdG8gc2Nyb2xsIHRvLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsVmlld3BvcnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCk9PnNjcm9sbEludG9WaWV3KHRhcmdldCksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBsZXQgb25XaW5kb3dTY3JvbGwgPSAoKT0+e1xuICAgICAgICAvLyBMYXN0IHJlc29ydC4gSWYgdGhlIHdpbmRvdyBzY3JvbGxlZCwgc2Nyb2xsIGl0IGJhY2sgdG8gdGhlIHRvcC5cbiAgICAgICAgLy8gSXQgc2hvdWxkIGFsd2F5cyBiZSBhdCB0aGUgdG9wIGJlY2F1c2UgdGhlIGJvZHkgd2lsbCBoYXZlIGEgbmVnYXRpdmUgbWFyZ2luIChzZWUgYmVsb3cpLlxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfTtcbiAgICAvLyBSZWNvcmQgdGhlIG9yaWdpbmFsIHNjcm9sbCBwb3NpdGlvbiBzbyB3ZSBjYW4gcmVzdG9yZSBpdC5cbiAgICAvLyBUaGVuIGFwcGx5IGEgbmVnYXRpdmUgbWFyZ2luIHRvIHRoZSBib2R5IHRvIG9mZnNldCBpdCBieSB0aGUgc2Nyb2xsIHBvc2l0aW9uLiBUaGlzIHdpbGxcbiAgICAvLyBlbmFibGUgdXMgdG8gc2Nyb2xsIHRoZSB3aW5kb3cgdG8gdGhlIHRvcCwgd2hpY2ggaXMgcmVxdWlyZWQgZm9yIHRoZSByZXN0IG9mIHRoaXMgdG8gd29yay5cbiAgICBsZXQgc2Nyb2xsWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICBsZXQgc2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICBsZXQgcmVzdG9yZVN0eWxlcyA9IGNoYWluJDEoc2V0U3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAncGFkZGluZ1JpZ2h0JywgYCR7d2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGh9cHhgKSk7XG4gICAgLy8gU2Nyb2xsIHRvIHRoZSB0b3AuIFRoZSBuZWdhdGl2ZSBtYXJnaW4gb24gdGhlIGJvZHkgd2lsbCBtYWtlIHRoaXMgYXBwZWFyIHRoZSBzYW1lLlxuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICBsZXQgcmVtb3ZlRXZlbnRzID0gY2hhaW4kMShhZGRFdmVudChkb2N1bWVudCwgJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KSwgYWRkRXZlbnQoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pLCBhZGRFdmVudChkb2N1bWVudCwgJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pLCBhZGRFdmVudChkb2N1bWVudCwgJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSksIGFkZEV2ZW50KHdpbmRvdywgJ3Njcm9sbCcsIG9uV2luZG93U2Nyb2xsKSk7XG4gICAgcmV0dXJuICgpPT57XG4gICAgICAgIC8vIFJlc3RvcmUgc3R5bGVzIGFuZCBzY3JvbGwgdGhlIHBhZ2UgYmFjayB0byB3aGVyZSBpdCB3YXMuXG4gICAgICAgIHJlc3RvcmVTdHlsZXMoKTtcbiAgICAgICAgcmVtb3ZlRXZlbnRzKCk7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxYLCBzY3JvbGxZKTtcbiAgICB9O1xufVxuLy8gU2V0cyBhIENTUyBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50LCBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHJldmVydCBpdCB0byB0aGUgcHJldmlvdXMgdmFsdWUuXG5mdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBzdHlsZSwgdmFsdWUpIHtcbiAgICBsZXQgY3VyID0gZWxlbWVudC5zdHlsZVtzdHlsZV07XG4gICAgZWxlbWVudC5zdHlsZVtzdHlsZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZV0gPSBjdXI7XG4gICAgfTtcbn1cbi8vIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYW4gZWxlbWVudCwgYW5kIHJldHVybnMgYSBmdW5jdGlvbiB0byByZW1vdmUgaXQuXG5mdW5jdGlvbiBhZGRFdmVudCh0YXJnZXQsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KHRhcmdldCkge1xuICAgIGxldCByb290ID0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgd2hpbGUodGFyZ2V0ICYmIHRhcmdldCAhPT0gcm9vdCl7XG4gICAgICAgIC8vIEZpbmQgdGhlIHBhcmVudCBzY3JvbGxhYmxlIGVsZW1lbnQgYW5kIGFkanVzdCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlmIHRoZSB0YXJnZXQgaXMgbm90IGFscmVhZHkgaW4gdmlldy5cbiAgICAgICAgbGV0IHNjcm9sbGFibGUgPSBnZXRTY3JvbGxQYXJlbnQodGFyZ2V0KTtcbiAgICAgICAgaWYgKHNjcm9sbGFibGUgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBzY3JvbGxhYmxlICE9PSBkb2N1bWVudC5ib2R5ICYmIHNjcm9sbGFibGUgIT09IHRhcmdldCkge1xuICAgICAgICAgICAgbGV0IHNjcm9sbGFibGVUb3AgPSBzY3JvbGxhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgIGxldCB0YXJnZXRUb3AgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICAgbGV0IHRhcmdldEJvdHRvbSA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgICAgICAvLyBCdWZmZXIgaXMgbmVlZGVkIGZvciBzb21lIGVkZ2UgY2FzZXNcbiAgICAgICAgICAgIGNvbnN0IGtleWJvYXJkSGVpZ2h0ID0gc2Nyb2xsYWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gKyBLRVlCT0FSRF9CVUZGRVI7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Qm90dG9tID4ga2V5Ym9hcmRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLnNjcm9sbFRvcCArPSB0YXJnZXRUb3AgLSBzY3JvbGxhYmxlVG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGFyZ2V0ID0gc2Nyb2xsYWJsZS5wYXJlbnRFbGVtZW50O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzSW5wdXQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgIW5vblRleHRJbnB1dFR5cGVzLmhhcyh0YXJnZXQudHlwZSkgfHwgdGFyZ2V0IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCB8fCB0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiB0YXJnZXQuaXNDb250ZW50RWRpdGFibGU7XG59XG5cbi8vIFRoaXMgY29kZSBjb21lcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWRpeC11aS9wcmltaXRpdmVzL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdC9jb21wb3NlLXJlZnNcbi8qKlxuICogU2V0IGEgZ2l2ZW4gcmVmIHRvIGEgZ2l2ZW4gdmFsdWVcbiAqIFRoaXMgdXRpbGl0eSB0YWtlcyBjYXJlIG9mIGRpZmZlcmVudCB0eXBlcyBvZiByZWZzOiBjYWxsYmFjayByZWZzIGFuZCBSZWZPYmplY3QocylcbiAqLyBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChyZWYgIT09IG51bGwgJiYgcmVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG59XG4vKipcbiAqIEEgdXRpbGl0eSB0byBjb21wb3NlIG11bHRpcGxlIHJlZnMgdG9nZXRoZXJcbiAqIEFjY2VwdHMgY2FsbGJhY2sgcmVmcyBhbmQgUmVmT2JqZWN0KHMpXG4gKi8gZnVuY3Rpb24gY29tcG9zZVJlZnMoLi4ucmVmcykge1xuICAgIHJldHVybiAobm9kZSk9PnJlZnMuZm9yRWFjaCgocmVmKT0+c2V0UmVmKHJlZiwgbm9kZSkpO1xufVxuLyoqXG4gKiBBIGN1c3RvbSBob29rIHRoYXQgY29tcG9zZXMgbXVsdGlwbGUgcmVmc1xuICogQWNjZXB0cyBjYWxsYmFjayByZWZzIGFuZCBSZWZPYmplY3QocylcbiAqLyBmdW5jdGlvbiB1c2VDb21wb3NlZFJlZnMoLi4ucmVmcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soY29tcG9zZVJlZnMoLi4ucmVmcyksIHJlZnMpO1xufVxuXG5jb25zdCBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBzZXQoZWwsIHN0eWxlcywgaWdub3JlQ2FjaGUgPSBmYWxzZSkge1xuICAgIGlmICghZWwgfHwgIShlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuO1xuICAgIGxldCBvcmlnaW5hbFN0eWxlcyA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKHN0eWxlcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKT0+e1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJy0tJykpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9yaWdpbmFsU3R5bGVzW2tleV0gPSBlbC5zdHlsZVtrZXldO1xuICAgICAgICBlbC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgfSk7XG4gICAgaWYgKGlnbm9yZUNhY2hlKSByZXR1cm47XG4gICAgY2FjaGUuc2V0KGVsLCBvcmlnaW5hbFN0eWxlcyk7XG59XG5mdW5jdGlvbiByZXNldChlbCwgcHJvcCkge1xuICAgIGlmICghZWwgfHwgIShlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuO1xuICAgIGxldCBvcmlnaW5hbFN0eWxlcyA9IGNhY2hlLmdldChlbCk7XG4gICAgaWYgKCFvcmlnaW5hbFN0eWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHtcbiAgICAgICAgZWwuc3R5bGVbcHJvcF0gPSBvcmlnaW5hbFN0eWxlc1twcm9wXTtcbiAgICB9XG59XG5jb25zdCBpc1ZlcnRpY2FsID0gKGRpcmVjdGlvbik9PntcbiAgICBzd2l0Y2goZGlyZWN0aW9uKXtcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICB9XG59O1xuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsZW1lbnQsIGRpcmVjdGlvbikge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSAvLyBAdHMtaWdub3JlXG4gICAgc3R5bGUudHJhbnNmb3JtIHx8IHN0eWxlLndlYmtpdFRyYW5zZm9ybSB8fCBzdHlsZS5tb3pUcmFuc2Zvcm07XG4gICAgbGV0IG1hdCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeDNkXFwoKC4rKVxcKSQvKTtcbiAgICBpZiAobWF0KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2Zvcm0tZnVuY3Rpb24vbWF0cml4M2RcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpW2lzVmVydGljYWwoZGlyZWN0aW9uKSA/IDEzIDogMTJdKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1mdW5jdGlvbi9tYXRyaXhcbiAgICBtYXQgPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXhcXCgoLispXFwpJC8pO1xuICAgIHJldHVybiBtYXQgPyBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVtpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyA1IDogNF0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGRhbXBlblZhbHVlKHYpIHtcbiAgICByZXR1cm4gOCAqIChNYXRoLmxvZyh2ICsgMSkgLSAyKTtcbn1cbmZ1bmN0aW9uIGFzc2lnblN0eWxlKGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm4gKCk9Pnt9O1xuICAgIGNvbnN0IHByZXZTdHlsZSA9IGVsZW1lbnQuc3R5bGUuY3NzVGV4dDtcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gcHJldlN0eWxlO1xuICAgIH07XG59XG4vKipcbiAqIFJlY2VpdmVzIGZ1bmN0aW9ucyBhcyBhcmd1bWVudHMgYW5kIHJldHVybnMgYSBuZXcgZnVuY3Rpb24gdGhhdCBjYWxscyBhbGwuXG4gKi8gZnVuY3Rpb24gY2hhaW4oLi4uZm5zKSB7XG4gICAgcmV0dXJuICguLi5hcmdzKT0+e1xuICAgICAgICBmb3IgKGNvbnN0IGZuIG9mIGZucyl7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cblxuY29uc3QgVFJBTlNJVElPTlMgPSB7XG4gICAgRFVSQVRJT046IDAuNSxcbiAgICBFQVNFOiBbXG4gICAgICAgIDAuMzIsXG4gICAgICAgIDAuNzIsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICBdXG59O1xuY29uc3QgVkVMT0NJVFlfVEhSRVNIT0xEID0gMC40O1xuY29uc3QgQ0xPU0VfVEhSRVNIT0xEID0gMC4yNTtcbmNvbnN0IFNDUk9MTF9MT0NLX1RJTUVPVVQgPSAxMDA7XG5jb25zdCBCT1JERVJfUkFESVVTID0gODtcbmNvbnN0IE5FU1RFRF9ESVNQTEFDRU1FTlQgPSAxNjtcbmNvbnN0IFdJTkRPV19UT1BfT0ZGU0VUID0gMjY7XG5jb25zdCBEUkFHX0NMQVNTID0gJ3ZhdWwtZHJhZ2dpbmcnO1xuXG4vLyBUaGlzIGNvZGUgY29tZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcmFkaXgtdWkvcHJpbWl0aXZlcy9ibG9iL21haW4vcGFja2FnZXMvcmVhY3QvdXNlLWNvbnRyb2xsYWJsZS1zdGF0ZS9zcmMvdXNlQ29udHJvbGxhYmxlU3RhdGUudHN4XG5mdW5jdGlvbiB1c2VDYWxsYmFja1JlZihjYWxsYmFjaykge1xuICAgIGNvbnN0IGNhbGxiYWNrUmVmID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKGNhbGxiYWNrKTtcbiAgICBSZWFjdF9fZGVmYXVsdC51c2VFZmZlY3QoKCk9PntcbiAgICAgICAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuICAgIH0pO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkyNDBcbiAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+KC4uLmFyZ3MpPT5jYWxsYmFja1JlZi5jdXJyZW50ID09IG51bGwgPyB2b2lkIDAgOiBjYWxsYmFja1JlZi5jdXJyZW50LmNhbGwoY2FsbGJhY2tSZWYsIC4uLmFyZ3MpLCBbXSk7XG59XG5mdW5jdGlvbiB1c2VVbmNvbnRyb2xsZWRTdGF0ZSh7IGRlZmF1bHRQcm9wLCBvbkNoYW5nZSB9KSB7XG4gICAgY29uc3QgdW5jb250cm9sbGVkU3RhdGUgPSBSZWFjdF9fZGVmYXVsdC51c2VTdGF0ZShkZWZhdWx0UHJvcCk7XG4gICAgY29uc3QgW3ZhbHVlXSA9IHVuY29udHJvbGxlZFN0YXRlO1xuICAgIGNvbnN0IHByZXZWYWx1ZVJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZih2YWx1ZSk7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2tSZWYob25DaGFuZ2UpO1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAocHJldlZhbHVlUmVmLmN1cnJlbnQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBoYW5kbGVDaGFuZ2UodmFsdWUpO1xuICAgICAgICAgICAgcHJldlZhbHVlUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHByZXZWYWx1ZVJlZixcbiAgICAgICAgaGFuZGxlQ2hhbmdlXG4gICAgXSk7XG4gICAgcmV0dXJuIHVuY29udHJvbGxlZFN0YXRlO1xufVxuZnVuY3Rpb24gdXNlQ29udHJvbGxhYmxlU3RhdGUoeyBwcm9wLCBkZWZhdWx0UHJvcCwgb25DaGFuZ2UgPSAoKT0+e30gfSkge1xuICAgIGNvbnN0IFt1bmNvbnRyb2xsZWRQcm9wLCBzZXRVbmNvbnRyb2xsZWRQcm9wXSA9IHVzZVVuY29udHJvbGxlZFN0YXRlKHtcbiAgICAgICAgZGVmYXVsdFByb3AsXG4gICAgICAgIG9uQ2hhbmdlXG4gICAgfSk7XG4gICAgY29uc3QgaXNDb250cm9sbGVkID0gcHJvcCAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHZhbHVlID0gaXNDb250cm9sbGVkID8gcHJvcCA6IHVuY29udHJvbGxlZFByb3A7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2tSZWYob25DaGFuZ2UpO1xuICAgIGNvbnN0IHNldFZhbHVlID0gUmVhY3RfX2RlZmF1bHQudXNlQ2FsbGJhY2soKG5leHRWYWx1ZSk9PntcbiAgICAgICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgICAgICAgY29uc3Qgc2V0dGVyID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgbmV4dFZhbHVlID09PSAnZnVuY3Rpb24nID8gc2V0dGVyKHByb3ApIDogbmV4dFZhbHVlO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBwcm9wKSBoYW5kbGVDaGFuZ2UodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VW5jb250cm9sbGVkUHJvcChuZXh0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBpc0NvbnRyb2xsZWQsXG4gICAgICAgIHByb3AsXG4gICAgICAgIHNldFVuY29udHJvbGxlZFByb3AsXG4gICAgICAgIGhhbmRsZUNoYW5nZVxuICAgIF0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzZXRWYWx1ZVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHVzZVNuYXBQb2ludHMoeyBhY3RpdmVTbmFwUG9pbnRQcm9wLCBzZXRBY3RpdmVTbmFwUG9pbnRQcm9wLCBzbmFwUG9pbnRzLCBkcmF3ZXJSZWYsIG92ZXJsYXlSZWYsIGZhZGVGcm9tSW5kZXgsIG9uU25hcFBvaW50Q2hhbmdlLCBkaXJlY3Rpb24gPSAnYm90dG9tJywgY29udGFpbmVyLCBzbmFwVG9TZXF1ZW50aWFsUG9pbnQgfSkge1xuICAgIGNvbnN0IFthY3RpdmVTbmFwUG9pbnQsIHNldEFjdGl2ZVNuYXBQb2ludF0gPSB1c2VDb250cm9sbGFibGVTdGF0ZSh7XG4gICAgICAgIHByb3A6IGFjdGl2ZVNuYXBQb2ludFByb3AsXG4gICAgICAgIGRlZmF1bHRQcm9wOiBzbmFwUG9pbnRzID09IG51bGwgPyB2b2lkIDAgOiBzbmFwUG9pbnRzWzBdLFxuICAgICAgICBvbkNoYW5nZTogc2V0QWN0aXZlU25hcFBvaW50UHJvcFxuICAgIH0pO1xuICAgIGNvbnN0IFt3aW5kb3dEaW1lbnNpb25zLCBzZXRXaW5kb3dEaW1lbnNpb25zXSA9IFJlYWN0X19kZWZhdWx0LnVzZVN0YXRlKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8ge1xuICAgICAgICBpbm5lcldpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgaW5uZXJIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodFxuICAgIH0gOiB1bmRlZmluZWQpO1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAgICAgICAgIHNldFdpbmRvd0RpbWVuc2lvbnMoe1xuICAgICAgICAgICAgICAgIGlubmVyV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGlubmVySGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG4gICAgICAgIHJldHVybiAoKT0+d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgaXNMYXN0U25hcFBvaW50ID0gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+YWN0aXZlU25hcFBvaW50ID09PSAoc25hcFBvaW50cyA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50c1tzbmFwUG9pbnRzLmxlbmd0aCAtIDFdKSB8fCBudWxsLCBbXG4gICAgICAgIHNuYXBQb2ludHMsXG4gICAgICAgIGFjdGl2ZVNuYXBQb2ludFxuICAgIF0pO1xuICAgIGNvbnN0IGFjdGl2ZVNuYXBQb2ludEluZGV4ID0gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+c25hcFBvaW50cyA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50cy5maW5kSW5kZXgoKHNuYXBQb2ludCk9PnNuYXBQb2ludCA9PT0gYWN0aXZlU25hcFBvaW50KSwgW1xuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnRcbiAgICBdKTtcbiAgICBjb25zdCBzaG91bGRGYWRlID0gc25hcFBvaW50cyAmJiBzbmFwUG9pbnRzLmxlbmd0aCA+IDAgJiYgKGZhZGVGcm9tSW5kZXggfHwgZmFkZUZyb21JbmRleCA9PT0gMCkgJiYgIU51bWJlci5pc05hTihmYWRlRnJvbUluZGV4KSAmJiBzbmFwUG9pbnRzW2ZhZGVGcm9tSW5kZXhdID09PSBhY3RpdmVTbmFwUG9pbnQgfHwgIXNuYXBQb2ludHM7XG4gICAgY29uc3Qgc25hcFBvaW50c09mZnNldCA9IFJlYWN0X19kZWZhdWx0LnVzZU1lbW8oKCk9PntcbiAgICAgICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGNvbnRhaW5lciA/IHtcbiAgICAgICAgICAgIHdpZHRoOiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAgICAgfSA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8ge1xuICAgICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgIH07XG4gICAgICAgIHZhciBfc25hcFBvaW50c19tYXA7XG4gICAgICAgIHJldHVybiAoX3NuYXBQb2ludHNfbWFwID0gc25hcFBvaW50cyA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50cy5tYXAoKHNuYXBQb2ludCk9PntcbiAgICAgICAgICAgIGNvbnN0IGlzUHggPSB0eXBlb2Ygc25hcFBvaW50ID09PSAnc3RyaW5nJztcbiAgICAgICAgICAgIGxldCBzbmFwUG9pbnRBc051bWJlciA9IDA7XG4gICAgICAgICAgICBpZiAoaXNQeCkge1xuICAgICAgICAgICAgICAgIHNuYXBQb2ludEFzTnVtYmVyID0gcGFyc2VJbnQoc25hcFBvaW50LCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbChkaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gaXNQeCA/IHNuYXBQb2ludEFzTnVtYmVyIDogd2luZG93RGltZW5zaW9ucyA/IHNuYXBQb2ludCAqIGNvbnRhaW5lclNpemUuaGVpZ2h0IDogMDtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93RGltZW5zaW9ucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSAnYm90dG9tJyA/IGNvbnRhaW5lclNpemUuaGVpZ2h0IC0gaGVpZ2h0IDogLWNvbnRhaW5lclNpemUuaGVpZ2h0ICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpc1B4ID8gc25hcFBvaW50QXNOdW1iZXIgOiB3aW5kb3dEaW1lbnNpb25zID8gc25hcFBvaW50ICogY29udGFpbmVyU2l6ZS53aWR0aCA6IDA7XG4gICAgICAgICAgICBpZiAod2luZG93RGltZW5zaW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyBjb250YWluZXJTaXplLndpZHRoIC0gd2lkdGggOiAtY29udGFpbmVyU2l6ZS53aWR0aCArIHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgICAgICB9KSkgIT0gbnVsbCA/IF9zbmFwUG9pbnRzX21hcCA6IFtdO1xuICAgIH0sIFtcbiAgICAgICAgc25hcFBvaW50cyxcbiAgICAgICAgd2luZG93RGltZW5zaW9ucyxcbiAgICAgICAgY29udGFpbmVyXG4gICAgXSk7XG4gICAgY29uc3QgYWN0aXZlU25hcFBvaW50T2Zmc2V0ID0gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+YWN0aXZlU25hcFBvaW50SW5kZXggIT09IG51bGwgPyBzbmFwUG9pbnRzT2Zmc2V0ID09IG51bGwgPyB2b2lkIDAgOiBzbmFwUG9pbnRzT2Zmc2V0W2FjdGl2ZVNuYXBQb2ludEluZGV4XSA6IG51bGwsIFtcbiAgICAgICAgc25hcFBvaW50c09mZnNldCxcbiAgICAgICAgYWN0aXZlU25hcFBvaW50SW5kZXhcbiAgICBdKTtcbiAgICBjb25zdCBzbmFwVG9Qb2ludCA9IFJlYWN0X19kZWZhdWx0LnVzZUNhbGxiYWNrKChkaW1lbnNpb24pPT57XG4gICAgICAgIHZhciBfc25hcFBvaW50c09mZnNldF9maW5kSW5kZXg7XG4gICAgICAgIGNvbnN0IG5ld1NuYXBQb2ludEluZGV4ID0gKF9zbmFwUG9pbnRzT2Zmc2V0X2ZpbmRJbmRleCA9IHNuYXBQb2ludHNPZmZzZXQgPT0gbnVsbCA/IHZvaWQgMCA6IHNuYXBQb2ludHNPZmZzZXQuZmluZEluZGV4KChzbmFwUG9pbnREaW0pPT5zbmFwUG9pbnREaW0gPT09IGRpbWVuc2lvbikpICE9IG51bGwgPyBfc25hcFBvaW50c09mZnNldF9maW5kSW5kZXggOiBudWxsO1xuICAgICAgICBvblNuYXBQb2ludENoYW5nZShuZXdTbmFwUG9pbnRJbmRleCk7XG4gICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke1RSQU5TSVRJT05TLkRVUkFUSU9OfXMgY3ViaWMtYmV6aWVyKCR7VFJBTlNJVElPTlMuRUFTRS5qb2luKCcsJyl9KWAsXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGB0cmFuc2xhdGUzZCgwLCAke2RpbWVuc2lvbn1weCwgMClgIDogYHRyYW5zbGF0ZTNkKCR7ZGltZW5zaW9ufXB4LCAwLCAwKWBcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzbmFwUG9pbnRzT2Zmc2V0ICYmIG5ld1NuYXBQb2ludEluZGV4ICE9PSBzbmFwUG9pbnRzT2Zmc2V0Lmxlbmd0aCAtIDEgJiYgbmV3U25hcFBvaW50SW5kZXggIT09IGZhZGVGcm9tSW5kZXggJiYgbmV3U25hcFBvaW50SW5kZXggPCBmYWRlRnJvbUluZGV4KSB7XG4gICAgICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcwJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcxJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50KHNuYXBQb2ludHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNuYXBQb2ludHNbTWF0aC5tYXgobmV3U25hcFBvaW50SW5kZXgsIDApXSk7XG4gICAgfSwgW1xuICAgICAgICBkcmF3ZXJSZWYuY3VycmVudCxcbiAgICAgICAgc25hcFBvaW50cyxcbiAgICAgICAgc25hcFBvaW50c09mZnNldCxcbiAgICAgICAgZmFkZUZyb21JbmRleCxcbiAgICAgICAgb3ZlcmxheVJlZixcbiAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50XG4gICAgXSk7XG4gICAgUmVhY3RfX2RlZmF1bHQudXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmIChhY3RpdmVTbmFwUG9pbnQgfHwgYWN0aXZlU25hcFBvaW50UHJvcCkge1xuICAgICAgICAgICAgdmFyIF9zbmFwUG9pbnRzX2ZpbmRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gKF9zbmFwUG9pbnRzX2ZpbmRJbmRleCA9IHNuYXBQb2ludHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNuYXBQb2ludHMuZmluZEluZGV4KChzbmFwUG9pbnQpPT5zbmFwUG9pbnQgPT09IGFjdGl2ZVNuYXBQb2ludFByb3AgfHwgc25hcFBvaW50ID09PSBhY3RpdmVTbmFwUG9pbnQpKSAhPSBudWxsID8gX3NuYXBQb2ludHNfZmluZEluZGV4IDogLTE7XG4gICAgICAgICAgICBpZiAoc25hcFBvaW50c09mZnNldCAmJiBuZXdJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHNuYXBQb2ludHNPZmZzZXRbbmV3SW5kZXhdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHNuYXBUb1BvaW50KHNuYXBQb2ludHNPZmZzZXRbbmV3SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgYWN0aXZlU25hcFBvaW50LFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnRQcm9wLFxuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBzbmFwUG9pbnRzT2Zmc2V0LFxuICAgICAgICBzbmFwVG9Qb2ludFxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIG9uUmVsZWFzZSh7IGRyYWdnZWREaXN0YW5jZSwgY2xvc2VEcmF3ZXIsIHZlbG9jaXR5LCBkaXNtaXNzaWJsZSB9KSB7XG4gICAgICAgIGlmIChmYWRlRnJvbUluZGV4ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVudFBvc2l0aW9uID0gZGlyZWN0aW9uID09PSAnYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyAoYWN0aXZlU25hcFBvaW50T2Zmc2V0ICE9IG51bGwgPyBhY3RpdmVTbmFwUG9pbnRPZmZzZXQgOiAwKSAtIGRyYWdnZWREaXN0YW5jZSA6IChhY3RpdmVTbmFwUG9pbnRPZmZzZXQgIT0gbnVsbCA/IGFjdGl2ZVNuYXBQb2ludE9mZnNldCA6IDApICsgZHJhZ2dlZERpc3RhbmNlO1xuICAgICAgICBjb25zdCBpc092ZXJsYXlTbmFwUG9pbnQgPSBhY3RpdmVTbmFwUG9pbnRJbmRleCA9PT0gZmFkZUZyb21JbmRleCAtIDE7XG4gICAgICAgIGNvbnN0IGlzRmlyc3QgPSBhY3RpdmVTbmFwUG9pbnRJbmRleCA9PT0gMDtcbiAgICAgICAgY29uc3QgaGFzRHJhZ2dlZFVwID0gZHJhZ2dlZERpc3RhbmNlID4gMDtcbiAgICAgICAgaWYgKGlzT3ZlcmxheVNuYXBQb2ludCkge1xuICAgICAgICAgICAgc2V0KG92ZXJsYXlSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7VFJBTlNJVElPTlMuRFVSQVRJT059cyBjdWJpYy1iZXppZXIoJHtUUkFOU0lUSU9OUy5FQVNFLmpvaW4oJywnKX0pYFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzbmFwVG9TZXF1ZW50aWFsUG9pbnQgJiYgdmVsb2NpdHkgPiAyICYmICFoYXNEcmFnZ2VkVXApIHtcbiAgICAgICAgICAgIGlmIChkaXNtaXNzaWJsZSkgY2xvc2VEcmF3ZXIoKTtcbiAgICAgICAgICAgIGVsc2Ugc25hcFRvUG9pbnQoc25hcFBvaW50c09mZnNldFswXSk7IC8vIHNuYXAgdG8gaW5pdGlhbCBwb2ludFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc25hcFRvU2VxdWVudGlhbFBvaW50ICYmIHZlbG9jaXR5ID4gMiAmJiBoYXNEcmFnZ2VkVXAgJiYgc25hcFBvaW50c09mZnNldCAmJiBzbmFwUG9pbnRzKSB7XG4gICAgICAgICAgICBzbmFwVG9Qb2ludChzbmFwUG9pbnRzT2Zmc2V0W3NuYXBQb2ludHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgc25hcCBwb2ludCB0byB0aGUgY3VycmVudCBwb3NpdGlvblxuICAgICAgICBjb25zdCBjbG9zZXN0U25hcFBvaW50ID0gc25hcFBvaW50c09mZnNldCA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50c09mZnNldC5yZWR1Y2UoKHByZXYsIGN1cnIpPT57XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByZXYgIT09ICdudW1iZXInIHx8IHR5cGVvZiBjdXJyICE9PSAnbnVtYmVyJykgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoY3VyciAtIGN1cnJlbnRQb3NpdGlvbikgPCBNYXRoLmFicyhwcmV2IC0gY3VycmVudFBvc2l0aW9uKSA/IGN1cnIgOiBwcmV2O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZGltID0gaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gd2luZG93LmlubmVySGVpZ2h0IDogd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGlmICh2ZWxvY2l0eSA+IFZFTE9DSVRZX1RIUkVTSE9MRCAmJiBNYXRoLmFicyhkcmFnZ2VkRGlzdGFuY2UpIDwgZGltICogMC40KSB7XG4gICAgICAgICAgICBjb25zdCBkcmFnRGlyZWN0aW9uID0gaGFzRHJhZ2dlZFVwID8gMSA6IC0xOyAvLyAxID0gdXAsIC0xID0gZG93blxuICAgICAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgd2Ugc3dpcGUgdXB3YXJkcyB3aGlsZSBiZWluZyBvbiB0aGUgbGFzdCBzbmFwIHBvaW50XG4gICAgICAgICAgICBpZiAoZHJhZ0RpcmVjdGlvbiA+IDAgJiYgaXNMYXN0U25hcFBvaW50KSB7XG4gICAgICAgICAgICAgICAgc25hcFRvUG9pbnQoc25hcFBvaW50c09mZnNldFtzbmFwUG9pbnRzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGaXJzdCAmJiBkcmFnRGlyZWN0aW9uIDwgMCAmJiBkaXNtaXNzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNsb3NlRHJhd2VyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aXZlU25hcFBvaW50SW5kZXggPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgICAgIHNuYXBUb1BvaW50KHNuYXBQb2ludHNPZmZzZXRbYWN0aXZlU25hcFBvaW50SW5kZXggKyBkcmFnRGlyZWN0aW9uXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc25hcFRvUG9pbnQoY2xvc2VzdFNuYXBQb2ludCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZyh7IGRyYWdnZWREaXN0YW5jZSB9KSB7XG4gICAgICAgIGlmIChhY3RpdmVTbmFwUG9pbnRPZmZzZXQgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBkaXJlY3Rpb24gPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/IGFjdGl2ZVNuYXBQb2ludE9mZnNldCAtIGRyYWdnZWREaXN0YW5jZSA6IGFjdGl2ZVNuYXBQb2ludE9mZnNldCArIGRyYWdnZWREaXN0YW5jZTtcbiAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgd2UgZXhjZWVkIHRoZSBsYXN0KGJpZ2dlc3QpIHNuYXAgcG9pbnRcbiAgICAgICAgaWYgKChkaXJlY3Rpb24gPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgJiYgbmV3VmFsdWUgPCBzbmFwUG9pbnRzT2Zmc2V0W3NuYXBQb2ludHNPZmZzZXQubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGRpcmVjdGlvbiA9PT0gJ3RvcCcgfHwgZGlyZWN0aW9uID09PSAnbGVmdCcpICYmIG5ld1ZhbHVlID4gc25hcFBvaW50c09mZnNldFtzbmFwUG9pbnRzT2Zmc2V0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGB0cmFuc2xhdGUzZCgwLCAke25ld1ZhbHVlfXB4LCAwKWAgOiBgdHJhbnNsYXRlM2QoJHtuZXdWYWx1ZX1weCwgMCwgMClgXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQZXJjZW50YWdlRHJhZ2dlZChhYnNEcmFnZ2VkRGlzdGFuY2UsIGlzRHJhZ2dpbmdEb3duKSB7XG4gICAgICAgIGlmICghc25hcFBvaW50cyB8fCB0eXBlb2YgYWN0aXZlU25hcFBvaW50SW5kZXggIT09ICdudW1iZXInIHx8ICFzbmFwUG9pbnRzT2Zmc2V0IHx8IGZhZGVGcm9tSW5kZXggPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdHJ1ZSB3ZSBhcmUgZHJhZ2dpbmcgdG8gYSBzbmFwIHBvaW50IHRoYXQgaXMgc3VwcG9zZWQgdG8gaGF2ZSBhbiBvdmVybGF5XG4gICAgICAgIGNvbnN0IGlzT3ZlcmxheVNuYXBQb2ludCA9IGFjdGl2ZVNuYXBQb2ludEluZGV4ID09PSBmYWRlRnJvbUluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgaXNPdmVybGF5U25hcFBvaW50T3JIaWdoZXIgPSBhY3RpdmVTbmFwUG9pbnRJbmRleCA+PSBmYWRlRnJvbUluZGV4O1xuICAgICAgICBpZiAoaXNPdmVybGF5U25hcFBvaW50T3JIaWdoZXIgJiYgaXNEcmFnZ2luZ0Rvd24pIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvbid0IGFuaW1hdGUsIGJ1dCBzdGlsbCB1c2UgdGhpcyBvbmUgaWYgd2UgYXJlIGRyYWdnaW5nIGF3YXkgZnJvbSB0aGUgb3ZlcmxheVNuYXBQb2ludFxuICAgICAgICBpZiAoaXNPdmVybGF5U25hcFBvaW50ICYmICFpc0RyYWdnaW5nRG93bikgcmV0dXJuIDE7XG4gICAgICAgIGlmICghc2hvdWxkRmFkZSAmJiAhaXNPdmVybGF5U25hcFBvaW50KSByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gRWl0aGVyIGZhZGVGcm9tIGluZGV4IG9yIHRoZSBvbmUgYmVmb3JlXG4gICAgICAgIGNvbnN0IHRhcmdldFNuYXBQb2ludEluZGV4ID0gaXNPdmVybGF5U25hcFBvaW50ID8gYWN0aXZlU25hcFBvaW50SW5kZXggKyAxIDogYWN0aXZlU25hcFBvaW50SW5kZXggLSAxO1xuICAgICAgICAvLyBHZXQgdGhlIGRpc3RhbmNlIGZyb20gb3ZlcmxheVNuYXBQb2ludCB0byB0aGUgb25lIGJlZm9yZSBvciB2aWNlLXZlcnNhIHRvIGNhbGN1bGF0ZSB0aGUgb3BhY2l0eSBwZXJjZW50YWdlIGFjY29yZGluZ2x5XG4gICAgICAgIGNvbnN0IHNuYXBQb2ludERpc3RhbmNlID0gaXNPdmVybGF5U25hcFBvaW50ID8gc25hcFBvaW50c09mZnNldFt0YXJnZXRTbmFwUG9pbnRJbmRleF0gLSBzbmFwUG9pbnRzT2Zmc2V0W3RhcmdldFNuYXBQb2ludEluZGV4IC0gMV0gOiBzbmFwUG9pbnRzT2Zmc2V0W3RhcmdldFNuYXBQb2ludEluZGV4ICsgMV0gLSBzbmFwUG9pbnRzT2Zmc2V0W3RhcmdldFNuYXBQb2ludEluZGV4XTtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZURyYWdnZWQgPSBhYnNEcmFnZ2VkRGlzdGFuY2UgLyBNYXRoLmFicyhzbmFwUG9pbnREaXN0YW5jZSk7XG4gICAgICAgIGlmIChpc092ZXJsYXlTbmFwUG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC0gcGVyY2VudGFnZURyYWdnZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyY2VudGFnZURyYWdnZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNMYXN0U25hcFBvaW50LFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnQsXG4gICAgICAgIHNob3VsZEZhZGUsXG4gICAgICAgIGdldFBlcmNlbnRhZ2VEcmFnZ2VkLFxuICAgICAgICBzZXRBY3RpdmVTbmFwUG9pbnQsXG4gICAgICAgIGFjdGl2ZVNuYXBQb2ludEluZGV4LFxuICAgICAgICBvblJlbGVhc2UsXG4gICAgICAgIG9uRHJhZyxcbiAgICAgICAgc25hcFBvaW50c09mZnNldFxuICAgIH07XG59XG5cbmNvbnN0IG5vb3AgPSAoKT0+KCk9Pnt9O1xuZnVuY3Rpb24gdXNlU2NhbGVCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHsgZGlyZWN0aW9uLCBpc09wZW4sIHNob3VsZFNjYWxlQmFja2dyb3VuZCwgc2V0QmFja2dyb3VuZENvbG9yT25TY2FsZSwgbm9Cb2R5U3R5bGVzIH0gPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgY29uc3QgdGltZW91dElkUmVmID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IGluaXRpYWxCYWNrZ3JvdW5kQ29sb3IgPSB1c2VNZW1vKCgpPT5kb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciwgW10pO1xuICAgIGZ1bmN0aW9uIGdldFNjYWxlKCkge1xuICAgICAgICByZXR1cm4gKHdpbmRvdy5pbm5lcldpZHRoIC0gV0lORE9XX1RPUF9PRkZTRVQpIC8gd2luZG93LmlubmVyV2lkdGg7XG4gICAgfVxuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoaXNPcGVuICYmIHNob3VsZFNjYWxlQmFja2dyb3VuZCkge1xuICAgICAgICAgICAgaWYgKHRpbWVvdXRJZFJlZi5jdXJyZW50KSBjbGVhclRpbWVvdXQodGltZW91dElkUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXZhdWwtZHJhd2VyLXdyYXBwZXJdJykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3ZhdWwtZHJhd2VyLXdyYXBwZXJdJyk7XG4gICAgICAgICAgICBpZiAoIXdyYXBwZXIpIHJldHVybjtcbiAgICAgICAgICAgIGNoYWluKHNldEJhY2tncm91bmRDb2xvck9uU2NhbGUgJiYgIW5vQm9keVN0eWxlcyA/IGFzc2lnblN0eWxlKGRvY3VtZW50LmJvZHksIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnYmxhY2snXG4gICAgICAgICAgICB9KSA6IG5vb3AsIGFzc2lnblN0eWxlKHdyYXBwZXIsIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogJ3RyYW5zZm9ybSwgYm9yZGVyLXJhZGl1cycsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IGBjdWJpYy1iZXppZXIoJHtUUkFOU0lUSU9OUy5FQVNFLmpvaW4oJywnKX0pYFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlclN0eWxlc0NsZWFudXAgPSBhc3NpZ25TdHlsZSh3cmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBgJHtCT1JERVJfUkFESVVTfXB4YCxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgLi4uaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8ge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2dldFNjYWxlKCl9KSB0cmFuc2xhdGUzZCgwLCBjYWxjKGVudihzYWZlLWFyZWEtaW5zZXQtdG9wKSArIDE0cHgpLCAwKWBcbiAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2dldFNjYWxlKCl9KSB0cmFuc2xhdGUzZChjYWxjKGVudihzYWZlLWFyZWEtaW5zZXQtdG9wKSArIDE0cHgpLCAwLCAwKWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIHdyYXBwZXJTdHlsZXNDbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgdGltZW91dElkUmVmLmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbEJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gaW5pdGlhbEJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2JhY2tncm91bmQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIFRSQU5TSVRJT05TLkRVUkFUSU9OICogMTAwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBpc09wZW4sXG4gICAgICAgIHNob3VsZFNjYWxlQmFja2dyb3VuZCxcbiAgICAgICAgaW5pdGlhbEJhY2tncm91bmRDb2xvclxuICAgIF0pO1xufVxuXG5sZXQgcHJldmlvdXNCb2R5UG9zaXRpb24gPSBudWxsO1xuLyoqXG4gKiBUaGlzIGhvb2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgYnVnZ3kgYmVoYXZpb3Igb24gaU9TIGRldmljZXMgKG5lZWQgdG8gdGVzdCBvbiBBbmRyb2lkKS5cbiAqIEkgd29uJ3QgZ2V0IGludG8gdG9vIG11Y2ggZGV0YWlsIGFib3V0IHdoYXQgYnVncyBpdCBzb2x2ZXMsIGJ1dCBzbyBmYXIgSSd2ZSBmb3VuZCB0aGF0IHNldHRpbmcgdGhlIGJvZHkgdG8gYHBvc2l0aW9uOiBmaXhlZGAgaXMgdGhlIG1vc3QgcmVsaWFibGUgd2F5IHRvIHByZXZlbnQgdGhvc2UgYnVncy5cbiAqIElzc3VlcyB0aGF0IHRoaXMgaG9vayBzb2x2ZXM6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZW1pbGtvd2Fsc2tpL3ZhdWwvaXNzdWVzLzQzNVxuICogaHR0cHM6Ly9naXRodWIuY29tL2VtaWxrb3dhbHNraS92YXVsL2lzc3Vlcy80MzNcbiAqIEFuZCBtb3JlIHRoYXQgSSBkaXNjb3ZlcmVkLCBidXQgd2VyZSBqdXN0IG5vdCByZXBvcnRlZC5cbiAqLyBmdW5jdGlvbiB1c2VQb3NpdGlvbkZpeGVkKHsgaXNPcGVuLCBtb2RhbCwgbmVzdGVkLCBoYXNCZWVuT3BlbmVkLCBwcmV2ZW50U2Nyb2xsUmVzdG9yYXRpb24sIG5vQm9keVN0eWxlcyB9KSB7XG4gICAgY29uc3QgW2FjdGl2ZVVybCwgc2V0QWN0aXZlVXJsXSA9IFJlYWN0X19kZWZhdWx0LnVzZVN0YXRlKCgpPT50eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5sb2NhdGlvbi5ocmVmIDogJycpO1xuICAgIGNvbnN0IHNjcm9sbFBvcyA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZigwKTtcbiAgICBjb25zdCBzZXRQb3NpdGlvbkZpeGVkID0gUmVhY3RfX2RlZmF1bHQudXNlQ2FsbGJhY2soKCk9PntcbiAgICAgICAgLy8gQWxsIGJyb3dzZXJzIG9uIGlPUyB3aWxsIHJldHVybiB0cnVlIGhlcmUuXG4gICAgICAgIGlmICghaXNTYWZhcmkoKSkgcmV0dXJuO1xuICAgICAgICAvLyBJZiBwcmV2aW91c0JvZHlQb3NpdGlvbiBpcyBhbHJlYWR5IHNldCwgZG9uJ3Qgc2V0IGl0IGFnYWluLlxuICAgICAgICBpZiAocHJldmlvdXNCb2R5UG9zaXRpb24gPT09IG51bGwgJiYgaXNPcGVuICYmICFub0JvZHlTdHlsZXMpIHtcbiAgICAgICAgICAgIHByZXZpb3VzQm9keVBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBkb2N1bWVudC5ib2R5LnN0eWxlLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHRvcDogZG9jdW1lbnQuYm9keS5zdHlsZS50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogZG9jdW1lbnQuYm9keS5zdHlsZS5sZWZ0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6ICd1bnNldCdcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGRvbSBpbnNpZGUgYW4gYW5pbWF0aW9uIGZyYW1lXG4gICAgICAgICAgICBjb25zdCB7IHNjcm9sbFgsIGlubmVySGVpZ2h0IH0gPSB3aW5kb3c7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCdwb3NpdGlvbicsICdmaXhlZCcsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuYm9keS5zdHlsZSwge1xuICAgICAgICAgICAgICAgIHRvcDogYCR7LXNjcm9sbFBvcy5jdXJyZW50fXB4YCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBgJHstc2Nyb2xsWH1weGAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6ICcwcHgnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpPT53aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57XG4gICAgICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gY2hlY2sgaWYgdGhlIGJvdHRvbSBiYXIgYXBwZWFyZWQgZHVlIHRvIHRoZSBwb3NpdGlvbiBjaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm90dG9tQmFySGVpZ2h0ID0gaW5uZXJIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib3R0b21CYXJIZWlnaHQgJiYgc2Nyb2xsUG9zLmN1cnJlbnQgPj0gaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhlIGNvbnRlbnQgZnVydGhlciB1cCBzbyB0aGF0IHRoZSBib3R0b20gYmFyIGRvZXNuJ3QgaGlkZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS50b3AgPSBgJHstKHNjcm9sbFBvcy5jdXJyZW50ICsgYm90dG9tQmFySGVpZ2h0KX1weGA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgMzAwKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgaXNPcGVuXG4gICAgXSk7XG4gICAgY29uc3QgcmVzdG9yZVBvc2l0aW9uU2V0dGluZyA9IFJlYWN0X19kZWZhdWx0LnVzZUNhbGxiYWNrKCgpPT57XG4gICAgICAgIC8vIEFsbCBicm93c2VycyBvbiBpT1Mgd2lsbCByZXR1cm4gdHJ1ZSBoZXJlLlxuICAgICAgICBpZiAoIWlzU2FmYXJpKCkpIHJldHVybjtcbiAgICAgICAgaWYgKHByZXZpb3VzQm9keVBvc2l0aW9uICE9PSBudWxsICYmICFub0JvZHlTdHlsZXMpIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHBvc2l0aW9uIGZyb20gXCJweFwiIHRvIEludFxuICAgICAgICAgICAgY29uc3QgeSA9IC1wYXJzZUludChkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCwgMTApO1xuICAgICAgICAgICAgY29uc3QgeCA9IC1wYXJzZUludChkb2N1bWVudC5ib2R5LnN0eWxlLmxlZnQsIDEwKTtcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgc3R5bGVzXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGRvY3VtZW50LmJvZHkuc3R5bGUsIHByZXZpb3VzQm9keVBvc2l0aW9uKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntcbiAgICAgICAgICAgICAgICBpZiAocHJldmVudFNjcm9sbFJlc3RvcmF0aW9uICYmIGFjdGl2ZVVybCAhPT0gd2luZG93LmxvY2F0aW9uLmhyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlVXJsKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oeCwgeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByZXZpb3VzQm9keVBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgYWN0aXZlVXJsXG4gICAgXSk7XG4gICAgUmVhY3RfX2RlZmF1bHQudXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgICAgICAgICAgc2Nyb2xsUG9zLmN1cnJlbnQgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgfVxuICAgICAgICBvblNjcm9sbCgpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAobmVzdGVkIHx8ICFoYXNCZWVuT3BlbmVkKSByZXR1cm47XG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIHRvIGZvcmNlIFNhZmFyaSB0b29sYmFyIHRvIHNob3cgKipiZWZvcmUqKiB0aGUgZHJhd2VyIHN0YXJ0cyBhbmltYXRpbmcgdG8gcHJldmVudCBhIGduYXJseSBzaGlmdCBmcm9tIGhhcHBlbmluZ1xuICAgICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgICAgICAvLyBhdm9pZCBmb3Igc3RhbmRhbG9uZSBtb2RlIChQV0EpXG4gICAgICAgICAgICBjb25zdCBpc1N0YW5kYWxvbmUgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKGRpc3BsYXktbW9kZTogc3RhbmRhbG9uZSknKS5tYXRjaGVzO1xuICAgICAgICAgICAgIWlzU3RhbmRhbG9uZSAmJiBzZXRQb3NpdGlvbkZpeGVkKCk7XG4gICAgICAgICAgICBpZiAoIW1vZGFsKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZVBvc2l0aW9uU2V0dGluZygpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN0b3JlUG9zaXRpb25TZXR0aW5nKCk7XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIGlzT3BlbixcbiAgICAgICAgaGFzQmVlbk9wZW5lZCxcbiAgICAgICAgYWN0aXZlVXJsLFxuICAgICAgICBtb2RhbCxcbiAgICAgICAgbmVzdGVkLFxuICAgICAgICBzZXRQb3NpdGlvbkZpeGVkLFxuICAgICAgICByZXN0b3JlUG9zaXRpb25TZXR0aW5nXG4gICAgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdG9yZVBvc2l0aW9uU2V0dGluZ1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIFJvb3QoeyBvcGVuOiBvcGVuUHJvcCwgb25PcGVuQ2hhbmdlLCBjaGlsZHJlbiwgb25EcmFnOiBvbkRyYWdQcm9wLCBvblJlbGVhc2U6IG9uUmVsZWFzZVByb3AsIHNuYXBQb2ludHMsIHNob3VsZFNjYWxlQmFja2dyb3VuZCA9IGZhbHNlLCBzZXRCYWNrZ3JvdW5kQ29sb3JPblNjYWxlID0gdHJ1ZSwgY2xvc2VUaHJlc2hvbGQgPSBDTE9TRV9USFJFU0hPTEQsIHNjcm9sbExvY2tUaW1lb3V0ID0gU0NST0xMX0xPQ0tfVElNRU9VVCwgZGlzbWlzc2libGUgPSB0cnVlLCBoYW5kbGVPbmx5ID0gZmFsc2UsIGZhZGVGcm9tSW5kZXggPSBzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoIC0gMSwgYWN0aXZlU25hcFBvaW50OiBhY3RpdmVTbmFwUG9pbnRQcm9wLCBzZXRBY3RpdmVTbmFwUG9pbnQ6IHNldEFjdGl2ZVNuYXBQb2ludFByb3AsIGZpeGVkLCBtb2RhbCA9IHRydWUsIG9uQ2xvc2UsIG5lc3RlZCwgbm9Cb2R5U3R5bGVzLCBkaXJlY3Rpb24gPSAnYm90dG9tJywgZGVmYXVsdE9wZW4gPSBmYWxzZSwgZGlzYWJsZVByZXZlbnRTY3JvbGwgPSB0cnVlLCBzbmFwVG9TZXF1ZW50aWFsUG9pbnQgPSBmYWxzZSwgcHJldmVudFNjcm9sbFJlc3RvcmF0aW9uID0gZmFsc2UsIHJlcG9zaXRpb25JbnB1dHMgPSB0cnVlLCBvbkFuaW1hdGlvbkVuZCwgY29udGFpbmVyLCBhdXRvRm9jdXMgPSBmYWxzZSB9KSB7XG4gICAgdmFyIF9kcmF3ZXJSZWZfY3VycmVudCwgX2RyYXdlclJlZl9jdXJyZW50MTtcbiAgICBjb25zdCBbaXNPcGVuID0gZmFsc2UsIHNldElzT3Blbl0gPSB1c2VDb250cm9sbGFibGVTdGF0ZSh7XG4gICAgICAgIGRlZmF1bHRQcm9wOiBkZWZhdWx0T3BlbixcbiAgICAgICAgcHJvcDogb3BlblByb3AsXG4gICAgICAgIG9uQ2hhbmdlOiAobyk9PntcbiAgICAgICAgICAgIG9uT3BlbkNoYW5nZSA9PSBudWxsID8gdm9pZCAwIDogb25PcGVuQ2hhbmdlKG8pO1xuICAgICAgICAgICAgaWYgKCFvICYmICFuZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXN0b3JlUG9zaXRpb25TZXR0aW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAgICAgb25BbmltYXRpb25FbmQgPT0gbnVsbCA/IHZvaWQgMCA6IG9uQW5pbWF0aW9uRW5kKG8pO1xuICAgICAgICAgICAgfSwgVFJBTlNJVElPTlMuRFVSQVRJT04gKiAxMDAwKTtcbiAgICAgICAgICAgIGlmIChvICYmICFtb2RhbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbykge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gdGhlIGV4aXQgYW5pbWF0aW9uIGVuZHMgKGA1MDBtc2ApXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgW2hhc0JlZW5PcGVuZWQsIHNldEhhc0JlZW5PcGVuZWRdID0gUmVhY3RfX2RlZmF1bHQudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtpc0RyYWdnaW5nLCBzZXRJc0RyYWdnaW5nXSA9IFJlYWN0X19kZWZhdWx0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbanVzdFJlbGVhc2VkLCBzZXRKdXN0UmVsZWFzZWRdID0gUmVhY3RfX2RlZmF1bHQudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IG92ZXJsYXlSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgb3BlblRpbWUgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3QgZHJhZ1N0YXJ0VGltZSA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBkcmFnRW5kVGltZSA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBsYXN0VGltZURyYWdQcmV2ZW50ZWQgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3QgaXNBbGxvd2VkVG9EcmFnID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBuZXN0ZWRPcGVuQ2hhbmdlVGltZXIgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3QgcG9pbnRlclN0YXJ0ID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKDApO1xuICAgIGNvbnN0IGtleWJvYXJkSXNPcGVuID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCBwcmV2aW91c0RpZmZGcm9tSW5pdGlhbCA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZigwKTtcbiAgICBjb25zdCBkcmF3ZXJSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3QgZHJhd2VySGVpZ2h0UmVmID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKCgoX2RyYXdlclJlZl9jdXJyZW50ID0gZHJhd2VyUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZHJhd2VyUmVmX2N1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KSB8fCAwKTtcbiAgICBjb25zdCBkcmF3ZXJXaWR0aFJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZigoKF9kcmF3ZXJSZWZfY3VycmVudDEgPSBkcmF3ZXJSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kcmF3ZXJSZWZfY3VycmVudDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpIHx8IDApO1xuICAgIGNvbnN0IGluaXRpYWxEcmF3ZXJIZWlnaHQgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoMCk7XG4gICAgY29uc3Qgb25TbmFwUG9pbnRDaGFuZ2UgPSBSZWFjdF9fZGVmYXVsdC51c2VDYWxsYmFjaygoYWN0aXZlU25hcFBvaW50SW5kZXgpPT57XG4gICAgICAgIC8vIENoYW5nZSBvcGVuVGltZSByZWYgd2hlbiB3ZSByZWFjaCB0aGUgbGFzdCBzbmFwIHBvaW50IHRvIHByZXZlbnQgZHJhZ2dpbmcgZm9yIDUwMG1zIGluY2FzZSBpdCdzIHNjcm9sbGFibGUuXG4gICAgICAgIGlmIChzbmFwUG9pbnRzICYmIGFjdGl2ZVNuYXBQb2ludEluZGV4ID09PSBzbmFwUG9pbnRzT2Zmc2V0Lmxlbmd0aCAtIDEpIG9wZW5UaW1lLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCB7IGFjdGl2ZVNuYXBQb2ludCwgYWN0aXZlU25hcFBvaW50SW5kZXgsIHNldEFjdGl2ZVNuYXBQb2ludCwgb25SZWxlYXNlOiBvblJlbGVhc2VTbmFwUG9pbnRzLCBzbmFwUG9pbnRzT2Zmc2V0LCBvbkRyYWc6IG9uRHJhZ1NuYXBQb2ludHMsIHNob3VsZEZhZGUsIGdldFBlcmNlbnRhZ2VEcmFnZ2VkOiBnZXRTbmFwUG9pbnRzUGVyY2VudGFnZURyYWdnZWQgfSA9IHVzZVNuYXBQb2ludHMoe1xuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnRQcm9wLFxuICAgICAgICBzZXRBY3RpdmVTbmFwUG9pbnRQcm9wLFxuICAgICAgICBkcmF3ZXJSZWYsXG4gICAgICAgIGZhZGVGcm9tSW5kZXgsXG4gICAgICAgIG92ZXJsYXlSZWYsXG4gICAgICAgIG9uU25hcFBvaW50Q2hhbmdlLFxuICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgc25hcFRvU2VxdWVudGlhbFBvaW50XG4gICAgfSk7XG4gICAgdXNlUHJldmVudFNjcm9sbCh7XG4gICAgICAgIGlzRGlzYWJsZWQ6ICFpc09wZW4gfHwgaXNEcmFnZ2luZyB8fCAhbW9kYWwgfHwganVzdFJlbGVhc2VkIHx8ICFoYXNCZWVuT3BlbmVkIHx8ICFyZXBvc2l0aW9uSW5wdXRzIHx8ICFkaXNhYmxlUHJldmVudFNjcm9sbFxuICAgIH0pO1xuICAgIGNvbnN0IHsgcmVzdG9yZVBvc2l0aW9uU2V0dGluZyB9ID0gdXNlUG9zaXRpb25GaXhlZCh7XG4gICAgICAgIGlzT3BlbixcbiAgICAgICAgbW9kYWwsXG4gICAgICAgIG5lc3RlZCxcbiAgICAgICAgaGFzQmVlbk9wZW5lZCxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc3RvcmF0aW9uLFxuICAgICAgICBub0JvZHlTdHlsZXNcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBnZXRTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuICh3aW5kb3cuaW5uZXJXaWR0aCAtIFdJTkRPV19UT1BfT0ZGU0VUKSAvIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblByZXNzKGV2ZW50KSB7XG4gICAgICAgIHZhciBfZHJhd2VyUmVmX2N1cnJlbnQsIF9kcmF3ZXJSZWZfY3VycmVudDE7XG4gICAgICAgIGlmICghZGlzbWlzc2libGUgJiYgIXNuYXBQb2ludHMpIHJldHVybjtcbiAgICAgICAgaWYgKGRyYXdlclJlZi5jdXJyZW50ICYmICFkcmF3ZXJSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpKSByZXR1cm47XG4gICAgICAgIGRyYXdlckhlaWdodFJlZi5jdXJyZW50ID0gKChfZHJhd2VyUmVmX2N1cnJlbnQgPSBkcmF3ZXJSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kcmF3ZXJSZWZfY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpIHx8IDA7XG4gICAgICAgIGRyYXdlcldpZHRoUmVmLmN1cnJlbnQgPSAoKF9kcmF3ZXJSZWZfY3VycmVudDEgPSBkcmF3ZXJSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kcmF3ZXJSZWZfY3VycmVudDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpIHx8IDA7XG4gICAgICAgIHNldElzRHJhZ2dpbmcodHJ1ZSk7XG4gICAgICAgIGRyYWdTdGFydFRpbWUuY3VycmVudCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIC8vIGlPUyBkb2Vzbid0IHRyaWdnZXIgbW91c2VVcCBhZnRlciBzY3JvbGxpbmcgc28gd2UgbmVlZCB0byBsaXN0ZW4gdG8gdG91Y2hlZCBpbiBvcmRlciB0byBkaXNhbGxvdyBkcmFnZ2luZ1xuICAgICAgICBpZiAoaXNJT1MoKSkge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKCk9PmlzQWxsb3dlZFRvRHJhZy5jdXJyZW50ID0gZmFsc2UsIHtcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgd2UgbWFpbnRhaW4gY29ycmVjdCBwb2ludGVyIGNhcHR1cmUgZXZlbiB3aGVuIGdvaW5nIG91dHNpZGUgb2YgdGhlIGRyYXdlclxuICAgICAgICBldmVudC50YXJnZXQuc2V0UG9pbnRlckNhcHR1cmUoZXZlbnQucG9pbnRlcklkKTtcbiAgICAgICAgcG9pbnRlclN0YXJ0LmN1cnJlbnQgPSBpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyBldmVudC5wYWdlWSA6IGV2ZW50LnBhZ2VYO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaG91bGREcmFnKGVsLCBpc0RyYWdnaW5nSW5EaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIF93aW5kb3dfZ2V0U2VsZWN0aW9uLCBfbGFzdFRpbWVEcmFnUHJldmVudGVkX2N1cnJlbnQ7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodGVkVGV4dCA9IChfd2luZG93X2dldFNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3dfZ2V0U2VsZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHN3aXBlQW1vdW50ID0gZHJhd2VyUmVmLmN1cnJlbnQgPyBnZXRUcmFuc2xhdGUoZHJhd2VyUmVmLmN1cnJlbnQsIGRpcmVjdGlvbikgOiBudWxsO1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLXZhdWwtbm8tZHJhZycpIHx8IGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtdmF1bC1uby1kcmFnXScpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgc2Nyb2xsaW5nIHdoZW4gYW5pbWF0aW5nXG4gICAgICAgIGlmIChvcGVuVGltZS5jdXJyZW50ICYmIGRhdGUuZ2V0VGltZSgpIC0gb3BlblRpbWUuY3VycmVudC5nZXRUaW1lKCkgPCA1MDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVBbW91bnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdib3R0b20nID8gc3dpcGVBbW91bnQgPiAwIDogc3dpcGVBbW91bnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG9uJ3QgZHJhZyBpZiB0aGVyZSdzIGhpZ2hsaWdodGVkIHRleHRcbiAgICAgICAgaWYgKGhpZ2hsaWdodGVkVGV4dCAmJiBoaWdobGlnaHRlZFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIERpc2FsbG93IGRyYWdnaW5nIGlmIGRyYXdlciB3YXMgc2Nyb2xsZWQgd2l0aGluIGBzY3JvbGxMb2NrVGltZW91dGBcbiAgICAgICAgaWYgKGRhdGUuZ2V0VGltZSgpIC0gKChfbGFzdFRpbWVEcmFnUHJldmVudGVkX2N1cnJlbnQgPSBsYXN0VGltZURyYWdQcmV2ZW50ZWQuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0VGltZURyYWdQcmV2ZW50ZWRfY3VycmVudC5nZXRUaW1lKCkpIDwgc2Nyb2xsTG9ja1RpbWVvdXQgJiYgc3dpcGVBbW91bnQgPT09IDApIHtcbiAgICAgICAgICAgIGxhc3RUaW1lRHJhZ1ByZXZlbnRlZC5jdXJyZW50ID0gZGF0ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEcmFnZ2luZ0luRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBsYXN0VGltZURyYWdQcmV2ZW50ZWQuY3VycmVudCA9IGRhdGU7XG4gICAgICAgICAgICAvLyBXZSBhcmUgZHJhZ2dpbmcgZG93biBzbyB3ZSBzaG91bGQgYWxsb3cgc2Nyb2xsaW5nXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gS2VlcCBjbGltYmluZyB1cCB0aGUgRE9NIHRyZWUgYXMgbG9uZyBhcyB0aGVyZSdzIGEgcGFyZW50XG4gICAgICAgIHdoaWxlKGVsZW1lbnQpe1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudC5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zY3JvbGxUb3AgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRpbWVEcmFnUHJldmVudGVkLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlIGFuZCBub3Qgc2Nyb2xsZWQgdG8gdGhlIHRvcCwgc28gZG9uJ3QgZHJhZ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAnZGlhbG9nJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNb3ZlIHVwIHRvIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBzY3JvbGxhYmxlIHBhcmVudHMgbm90IHNjcm9sbGVkIHRvIHRoZSB0b3AgZm91bmQsIHNvIGRyYWdcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZyhldmVudCkge1xuICAgICAgICBpZiAoIWRyYXdlclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCB0byBrbm93IGhvdyBtdWNoIG9mIHRoZSBkcmF3ZXIgaGFzIGJlZW4gZHJhZ2dlZCBpbiBwZXJjZW50YWdlcyBzbyB0aGF0IHdlIGNhbiB0cmFuc2Zvcm0gYmFja2dyb3VuZCBhY2NvcmRpbmdseVxuICAgICAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uTXVsdGlwbGllciA9IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbScgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnID8gMSA6IC0xO1xuICAgICAgICAgICAgY29uc3QgZHJhZ2dlZERpc3RhbmNlID0gKHBvaW50ZXJTdGFydC5jdXJyZW50IC0gKGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGV2ZW50LnBhZ2VZIDogZXZlbnQucGFnZVgpKSAqIGRpcmVjdGlvbk11bHRpcGxpZXI7XG4gICAgICAgICAgICBjb25zdCBpc0RyYWdnaW5nSW5EaXJlY3Rpb24gPSBkcmFnZ2VkRGlzdGFuY2UgPiAwO1xuICAgICAgICAgICAgLy8gUHJlIGNvbmRpdGlvbiBmb3IgZGlzYWxsb3dpbmcgZHJhZ2dpbmcgaW4gdGhlIGNsb3NlIGRpcmVjdGlvbi5cbiAgICAgICAgICAgIGNvbnN0IG5vQ2xvc2VTbmFwUG9pbnRzUHJlQ29uZGl0aW9uID0gc25hcFBvaW50cyAmJiAhZGlzbWlzc2libGUgJiYgIWlzRHJhZ2dpbmdJbkRpcmVjdGlvbjtcbiAgICAgICAgICAgIC8vIERpc2FsbG93IGRyYWdnaW5nIGRvd24gdG8gY2xvc2Ugd2hlbiBmaXJzdCBzbmFwIHBvaW50IGlzIHRoZSBhY3RpdmUgb25lIGFuZCBkaXNtaXNzaWJsZSBwcm9wIGlzIHNldCB0byBmYWxzZS5cbiAgICAgICAgICAgIGlmIChub0Nsb3NlU25hcFBvaW50c1ByZUNvbmRpdGlvbiAmJiBhY3RpdmVTbmFwUG9pbnRJbmRleCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjYXB0dXJlIGxhc3QgdGltZSB3aGVuIGRyYWcgd2l0aCBzY3JvbGwgd2FzIHRyaWdnZXJlZCBhbmQgaGF2ZSBhIHRpbWVvdXQgYmV0d2VlblxuICAgICAgICAgICAgY29uc3QgYWJzRHJhZ2dlZERpc3RhbmNlID0gTWF0aC5hYnMoZHJhZ2dlZERpc3RhbmNlKTtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS12YXVsLWRyYXdlci13cmFwcGVyXScpO1xuICAgICAgICAgICAgY29uc3QgZHJhd2VyRGltZW5zaW9uID0gZGlyZWN0aW9uID09PSAnYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICd0b3AnID8gZHJhd2VySGVpZ2h0UmVmLmN1cnJlbnQgOiBkcmF3ZXJXaWR0aFJlZi5jdXJyZW50O1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlIGRyYWdnZWQsIHdoZXJlIDEgaXMgdGhlIGNsb3NlZCBwb3NpdGlvblxuICAgICAgICAgICAgbGV0IHBlcmNlbnRhZ2VEcmFnZ2VkID0gYWJzRHJhZ2dlZERpc3RhbmNlIC8gZHJhd2VyRGltZW5zaW9uO1xuICAgICAgICAgICAgY29uc3Qgc25hcFBvaW50UGVyY2VudGFnZURyYWdnZWQgPSBnZXRTbmFwUG9pbnRzUGVyY2VudGFnZURyYWdnZWQoYWJzRHJhZ2dlZERpc3RhbmNlLCBpc0RyYWdnaW5nSW5EaXJlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHNuYXBQb2ludFBlcmNlbnRhZ2VEcmFnZ2VkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZURyYWdnZWQgPSBzbmFwUG9pbnRQZXJjZW50YWdlRHJhZ2dlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERpc2FsbG93IGNsb3NlIGRyYWdnaW5nIGJleW9uZCB0aGUgc21hbGxlc3Qgc25hcCBwb2ludC5cbiAgICAgICAgICAgIGlmIChub0Nsb3NlU25hcFBvaW50c1ByZUNvbmRpdGlvbiAmJiBwZXJjZW50YWdlRHJhZ2dlZCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWRUb0RyYWcuY3VycmVudCAmJiAhc2hvdWxkRHJhZyhldmVudC50YXJnZXQsIGlzRHJhZ2dpbmdJbkRpcmVjdGlvbikpIHJldHVybjtcbiAgICAgICAgICAgIGRyYXdlclJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoRFJBR19DTEFTUyk7XG4gICAgICAgICAgICAvLyBJZiBzaG91bGREcmFnIGdhdmUgdHJ1ZSBvbmNlIGFmdGVyIHByZXNzaW5nIGRvd24gb24gdGhlIGRyYXdlciwgd2Ugc2V0IGlzQWxsb3dlZFRvRHJhZyB0byB0cnVlIGFuZCBpdCB3aWxsIHJlbWFpbiB0cnVlIHVudGlsIHdlIGxldCBnbywgdGhlcmUncyBubyByZWFzb24gdG8gZGlzYWJsZSBkcmFnZ2luZyBtaWQgd2F5LCBldmVyLCBhbmQgdGhhdCdzIHRoZSBzb2x1dGlvbiB0byBpdFxuICAgICAgICAgICAgaXNBbGxvd2VkVG9EcmFnLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldChvdmVybGF5UmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNuYXBQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBvbkRyYWdTbmFwUG9pbnRzKHtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dlZERpc3RhbmNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSdW4gdGhpcyBvbmx5IGlmIHNuYXBQb2ludHMgYXJlIG5vdCBkZWZpbmVkIG9yIGlmIHdlIGFyZSBhdCB0aGUgbGFzdCBzbmFwIHBvaW50IChoaWdoZXN0IG9uZSlcbiAgICAgICAgICAgIGlmIChpc0RyYWdnaW5nSW5EaXJlY3Rpb24gJiYgIXNuYXBQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYW1wZW5lZERyYWdnZWREaXN0YW5jZSA9IGRhbXBlblZhbHVlKGRyYWdnZWREaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBNYXRoLm1pbihkYW1wZW5lZERyYWdnZWREaXN0YW5jZSAqIC0xLCAwKSAqIGRpcmVjdGlvbk11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gYHRyYW5zbGF0ZTNkKDAsICR7dHJhbnNsYXRlVmFsdWV9cHgsIDApYCA6IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVZhbHVlfXB4LCAwLCAwKWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5VmFsdWUgPSAxIC0gcGVyY2VudGFnZURyYWdnZWQ7XG4gICAgICAgICAgICBpZiAoc2hvdWxkRmFkZSB8fCBmYWRlRnJvbUluZGV4ICYmIGFjdGl2ZVNuYXBQb2ludEluZGV4ID09PSBmYWRlRnJvbUluZGV4IC0gMSkge1xuICAgICAgICAgICAgICAgIG9uRHJhZ1Byb3AgPT0gbnVsbCA/IHZvaWQgMCA6IG9uRHJhZ1Byb3AoZXZlbnQsIHBlcmNlbnRhZ2VEcmFnZ2VkKTtcbiAgICAgICAgICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IGAke29wYWNpdHlWYWx1ZX1gLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3cmFwcGVyICYmIG92ZXJsYXlSZWYuY3VycmVudCAmJiBzaG91bGRTY2FsZUJhY2tncm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudGFnZURyYWdnZWQgYXMgYSBmcmFjdGlvbiAoMCB0byAxKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlVmFsdWUgPSBNYXRoLm1pbihnZXRTY2FsZSgpICsgcGVyY2VudGFnZURyYWdnZWQgKiAoMSAtIGdldFNjYWxlKCkpLCAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXNWYWx1ZSA9IDggLSBwZXJjZW50YWdlRHJhZ2dlZCAqIDg7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBNYXRoLm1heCgwLCAxNCAtIHBlcmNlbnRhZ2VEcmFnZ2VkICogMTQpO1xuICAgICAgICAgICAgICAgIHNldCh3cmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogYCR7Ym9yZGVyUmFkaXVzVmFsdWV9cHhgLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGBzY2FsZSgke3NjYWxlVmFsdWV9KSB0cmFuc2xhdGUzZCgwLCAke3RyYW5zbGF0ZVZhbHVlfXB4LCAwKWAgOiBgc2NhbGUoJHtzY2FsZVZhbHVlfSkgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVWYWx1ZX1weCwgMCwgMClgLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc25hcFBvaW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gYWJzRHJhZ2dlZERpc3RhbmNlICogZGlyZWN0aW9uTXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICBzZXQoZHJhd2VyUmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyBgdHJhbnNsYXRlM2QoMCwgJHt0cmFuc2xhdGVWYWx1ZX1weCwgMClgIDogYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlVmFsdWV9cHgsIDAsIDApYFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICB2YXIgX3dpbmRvd192aXN1YWxWaWV3cG9ydDtcbiAgICAgICAgZnVuY3Rpb24gb25WaXN1YWxWaWV3cG9ydENoYW5nZSgpIHtcbiAgICAgICAgICAgIGlmICghZHJhd2VyUmVmLmN1cnJlbnQgfHwgIXJlcG9zaXRpb25JbnB1dHMpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWRFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChpc0lucHV0KGZvY3VzZWRFbGVtZW50KSB8fCBrZXlib2FyZElzT3Blbi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIF93aW5kb3dfdmlzdWFsVmlld3BvcnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlzdWFsVmlld3BvcnRIZWlnaHQgPSAoKF93aW5kb3dfdmlzdWFsVmlld3BvcnQgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93X3Zpc3VhbFZpZXdwb3J0LmhlaWdodCkgfHwgMDtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3RhbEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBoZWlnaHQgb2YgdGhlIGtleWJvYXJkXG4gICAgICAgICAgICAgICAgbGV0IGRpZmZGcm9tSW5pdGlhbCA9IHRvdGFsSGVpZ2h0IC0gdmlzdWFsVmlld3BvcnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZHJhd2VySGVpZ2h0ID0gZHJhd2VyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IHx8IDA7XG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0IGRyYXdlciBoZWlnaHQgb25seSBpZiBpdCdzIHRhbGwgZW5vdWdoXG4gICAgICAgICAgICAgICAgY29uc3QgaXNUYWxsRW5vdWdoID0gZHJhd2VySGVpZ2h0ID4gdG90YWxIZWlnaHQgKiAwLjg7XG4gICAgICAgICAgICAgICAgaWYgKCFpbml0aWFsRHJhd2VySGVpZ2h0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERyYXdlckhlaWdodC5jdXJyZW50ID0gZHJhd2VySGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRGcm9tVG9wID0gZHJhd2VyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICAgICAgIC8vIHZpc3VhbFZpZXdwb3J0IGhlaWdodCBtYXkgY2hhbmdlIGR1ZSB0byBzb21xIGUgc3VidGxlIGNoYW5nZXMgdG8gdGhlIGtleWJvYXJkLiBDaGVja2luZyBpZiB0aGUgaGVpZ2h0IGNoYW5nZWQgYnkgNjAgb3IgbW9yZSB3aWxsIG1ha2Ugc3VyZSB0aGF0IHRoZXkga2V5Ym9hcmQgcmVhbGx5IGNoYW5nZWQgaXRzIG9wZW4gc3RhdGUuXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHByZXZpb3VzRGlmZkZyb21Jbml0aWFsLmN1cnJlbnQgLSBkaWZmRnJvbUluaXRpYWwpID4gNjApIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRJc09wZW4uY3VycmVudCA9ICFrZXlib2FyZElzT3Blbi5jdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc25hcFBvaW50cyAmJiBzbmFwUG9pbnRzLmxlbmd0aCA+IDAgJiYgc25hcFBvaW50c09mZnNldCAmJiBhY3RpdmVTbmFwUG9pbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVTbmFwUG9pbnRIZWlnaHQgPSBzbmFwUG9pbnRzT2Zmc2V0W2FjdGl2ZVNuYXBQb2ludEluZGV4XSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICBkaWZmRnJvbUluaXRpYWwgKz0gYWN0aXZlU25hcFBvaW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2aW91c0RpZmZGcm9tSW5pdGlhbC5jdXJyZW50ID0gZGlmZkZyb21Jbml0aWFsO1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGhhdmUgdG8gY2hhbmdlIHRoZSBoZWlnaHQgaWYgdGhlIGlucHV0IGlzIGluIHZpZXcsIHdoZW4gd2UgYXJlIGhlcmUgd2UgYXJlIGluIHRoZSBvcGVuZWQga2V5Ym9hcmQgc3RhdGUgc28gd2UgY2FuIGNvcnJlY3RseSBjaGVjayBpZiB0aGUgaW5wdXQgaXMgaW4gdmlld1xuICAgICAgICAgICAgICAgIGlmIChkcmF3ZXJIZWlnaHQgPiB2aXN1YWxWaWV3cG9ydEhlaWdodCB8fCBrZXlib2FyZElzT3Blbi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGRyYXdlclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0RyYXdlckhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlaWdodCA+IHZpc3VhbFZpZXdwb3J0SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEcmF3ZXJIZWlnaHQgPSB2aXN1YWxWaWV3cG9ydEhlaWdodCAtIChpc1RhbGxFbm91Z2ggPyBvZmZzZXRGcm9tVG9wIDogV0lORE9XX1RPUF9PRkZTRVQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gZml4ZWQsIGRvbid0IG1vdmUgdGhlIGRyYXdlciB1cHdhcmRzIGlmIHRoZXJlJ3Mgc3BhY2UsIGJ1dCByYXRoZXIgb25seSBjaGFuZ2UgaXQncyBoZWlnaHQgc28gaXQncyBmdWxseSBzY3JvbGxhYmxlIHdoZW4gdGhlIGtleWJvYXJkIGlzIG9wZW5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3ZXJSZWYuY3VycmVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHQgLSBNYXRoLm1heChkaWZmRnJvbUluaXRpYWwsIDApfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdlclJlZi5jdXJyZW50LnN0eWxlLmhlaWdodCA9IGAke01hdGgubWF4KG5ld0RyYXdlckhlaWdodCwgdmlzdWFsVmlld3BvcnRIZWlnaHQgLSBvZmZzZXRGcm9tVG9wKX1weGA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkcmF3ZXJSZWYuY3VycmVudC5zdHlsZS5oZWlnaHQgPSBgJHtpbml0aWFsRHJhd2VySGVpZ2h0LmN1cnJlbnR9cHhgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc25hcFBvaW50cyAmJiBzbmFwUG9pbnRzLmxlbmd0aCA+IDAgJiYgIWtleWJvYXJkSXNPcGVuLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd2VyUmVmLmN1cnJlbnQuc3R5bGUuYm90dG9tID0gYDBweGA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTmVnYXRpdmUgYm90dG9tIHZhbHVlIHdvdWxkIG5ldmVyIG1ha2Ugc2Vuc2VcbiAgICAgICAgICAgICAgICAgICAgZHJhd2VyUmVmLmN1cnJlbnQuc3R5bGUuYm90dG9tID0gYCR7TWF0aC5tYXgoZGlmZkZyb21Jbml0aWFsLCAwKX1weGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIChfd2luZG93X3Zpc3VhbFZpZXdwb3J0ID0gd2luZG93LnZpc3VhbFZpZXdwb3J0KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvd192aXN1YWxWaWV3cG9ydC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblZpc3VhbFZpZXdwb3J0Q2hhbmdlKTtcbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICB2YXIgX3dpbmRvd192aXN1YWxWaWV3cG9ydDtcbiAgICAgICAgICAgIHJldHVybiAoX3dpbmRvd192aXN1YWxWaWV3cG9ydCA9IHdpbmRvdy52aXN1YWxWaWV3cG9ydCkgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3dfdmlzdWFsVmlld3BvcnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25WaXN1YWxWaWV3cG9ydENoYW5nZSk7XG4gICAgICAgIH07XG4gICAgfSwgW1xuICAgICAgICBhY3RpdmVTbmFwUG9pbnRJbmRleCxcbiAgICAgICAgc25hcFBvaW50cyxcbiAgICAgICAgc25hcFBvaW50c09mZnNldFxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIGNsb3NlRHJhd2VyKGZyb21XaXRoaW4pIHtcbiAgICAgICAgY2FuY2VsRHJhZygpO1xuICAgICAgICBvbkNsb3NlID09IG51bGwgPyB2b2lkIDAgOiBvbkNsb3NlKCk7XG4gICAgICAgIGlmICghZnJvbVdpdGhpbikge1xuICAgICAgICAgICAgc2V0SXNPcGVuKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICBpZiAoc25hcFBvaW50cykge1xuICAgICAgICAgICAgICAgIHNldEFjdGl2ZVNuYXBQb2ludChzbmFwUG9pbnRzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgVFJBTlNJVElPTlMuRFVSQVRJT04gKiAxMDAwKTsgLy8gc2Vjb25kcyB0byBtc1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNldERyYXdlcigpIHtcbiAgICAgICAgaWYgKCFkcmF3ZXJSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdmF1bC1kcmF3ZXItd3JhcHBlcl0nKTtcbiAgICAgICAgY29uc3QgY3VycmVudFN3aXBlQW1vdW50ID0gZ2V0VHJhbnNsYXRlKGRyYXdlclJlZi5jdXJyZW50LCBkaXJlY3Rpb24pO1xuICAgICAgICBzZXQoZHJhd2VyUmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgXG4gICAgICAgIH0pO1xuICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke1RSQU5TSVRJT05TLkRVUkFUSU9OfXMgY3ViaWMtYmV6aWVyKCR7VFJBTlNJVElPTlMuRUFTRS5qb2luKCcsJyl9KWAsXG4gICAgICAgICAgICBvcGFjaXR5OiAnMSdcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIERvbid0IHJlc2V0IGJhY2tncm91bmQgaWYgc3dpcGVkIHVwd2FyZHNcbiAgICAgICAgaWYgKHNob3VsZFNjYWxlQmFja2dyb3VuZCAmJiBjdXJyZW50U3dpcGVBbW91bnQgJiYgY3VycmVudFN3aXBlQW1vdW50ID4gMCAmJiBpc09wZW4pIHtcbiAgICAgICAgICAgIHNldCh3cmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBgJHtCT1JERVJfUkFESVVTfXB4YCxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgLi4uaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8ge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2dldFNjYWxlKCl9KSB0cmFuc2xhdGUzZCgwLCBjYWxjKGVudihzYWZlLWFyZWEtaW5zZXQtdG9wKSArIDE0cHgpLCAwKWAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCdcbiAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2dldFNjYWxlKCl9KSB0cmFuc2xhdGUzZChjYWxjKGVudihzYWZlLWFyZWEtaW5zZXQtdG9wKSArIDE0cHgpLCAwLCAwKWAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6ICd0cmFuc2Zvcm0sIGJvcmRlci1yYWRpdXMnLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogYCR7VFJBTlNJVElPTlMuRFVSQVRJT059c2AsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBgY3ViaWMtYmV6aWVyKCR7VFJBTlNJVElPTlMuRUFTRS5qb2luKCcsJyl9KWBcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhbmNlbERyYWcoKSB7XG4gICAgICAgIGlmICghaXNEcmFnZ2luZyB8fCAhZHJhd2VyUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICAgICAgZHJhd2VyUmVmLmN1cnJlbnQuY2xhc3NMaXN0LnJlbW92ZShEUkFHX0NMQVNTKTtcbiAgICAgICAgaXNBbGxvd2VkVG9EcmFnLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgc2V0SXNEcmFnZ2luZyhmYWxzZSk7XG4gICAgICAgIGRyYWdFbmRUaW1lLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblJlbGVhc2UoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFpc0RyYWdnaW5nIHx8ICFkcmF3ZXJSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICBkcmF3ZXJSZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKERSQUdfQ0xBU1MpO1xuICAgICAgICBpc0FsbG93ZWRUb0RyYWcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICBzZXRJc0RyYWdnaW5nKGZhbHNlKTtcbiAgICAgICAgZHJhZ0VuZFRpbWUuY3VycmVudCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IHN3aXBlQW1vdW50ID0gZ2V0VHJhbnNsYXRlKGRyYXdlclJlZi5jdXJyZW50LCBkaXJlY3Rpb24pO1xuICAgICAgICBpZiAoIXNob3VsZERyYWcoZXZlbnQudGFyZ2V0LCBmYWxzZSkgfHwgIXN3aXBlQW1vdW50IHx8IE51bWJlci5pc05hTihzd2lwZUFtb3VudCkpIHJldHVybjtcbiAgICAgICAgaWYgKGRyYWdTdGFydFRpbWUuY3VycmVudCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0aW1lVGFrZW4gPSBkcmFnRW5kVGltZS5jdXJyZW50LmdldFRpbWUoKSAtIGRyYWdTdGFydFRpbWUuY3VycmVudC5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnN0IGRpc3RNb3ZlZCA9IHBvaW50ZXJTdGFydC5jdXJyZW50IC0gKGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGV2ZW50LnBhZ2VZIDogZXZlbnQucGFnZVgpO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IE1hdGguYWJzKGRpc3RNb3ZlZCkgLyB0aW1lVGFrZW47XG4gICAgICAgIGlmICh2ZWxvY2l0eSA+IDAuMDUpIHtcbiAgICAgICAgICAgIC8vIGBqdXN0UmVsZWFzZWRgIGlzIG5lZWRlZCB0byBwcmV2ZW50IHRoZSBkcmF3ZXIgZnJvbSBmb2N1c2luZyBvbiBhbiBpbnB1dCB3aGVuIHRoZSBkcmFnIGVuZHMsIGFzIGl0J3Mgbm90IHRoZSBpbnRlbnQgbW9zdCBvZiB0aGUgdGltZS5cbiAgICAgICAgICAgIHNldEp1c3RSZWxlYXNlZCh0cnVlKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBzZXRKdXN0UmVsZWFzZWQoZmFsc2UpO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc25hcFBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uTXVsdGlwbGllciA9IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbScgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnID8gMSA6IC0xO1xuICAgICAgICAgICAgb25SZWxlYXNlU25hcFBvaW50cyh7XG4gICAgICAgICAgICAgICAgZHJhZ2dlZERpc3RhbmNlOiBkaXN0TW92ZWQgKiBkaXJlY3Rpb25NdWx0aXBsaWVyLFxuICAgICAgICAgICAgICAgIGNsb3NlRHJhd2VyLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5LFxuICAgICAgICAgICAgICAgIGRpc21pc3NpYmxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9uUmVsZWFzZVByb3AgPT0gbnVsbCA/IHZvaWQgMCA6IG9uUmVsZWFzZVByb3AoZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmVkIHVwd2FyZHMsIGRvbid0IGRvIGFueXRoaW5nXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/IGRpc3RNb3ZlZCA+IDAgOiBkaXN0TW92ZWQgPCAwKSB7XG4gICAgICAgICAgICByZXNldERyYXdlcigpO1xuICAgICAgICAgICAgb25SZWxlYXNlUHJvcCA9PSBudWxsID8gdm9pZCAwIDogb25SZWxlYXNlUHJvcChldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZlbG9jaXR5ID4gVkVMT0NJVFlfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICBjbG9zZURyYXdlcigpO1xuICAgICAgICAgICAgb25SZWxlYXNlUHJvcCA9PSBudWxsID8gdm9pZCAwIDogb25SZWxlYXNlUHJvcChldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X2hlaWdodDtcbiAgICAgICAgY29uc3QgdmlzaWJsZURyYXdlckhlaWdodCA9IE1hdGgubWluKChfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X2hlaWdodCA9IGRyYXdlclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCkgIT0gbnVsbCA/IF9kcmF3ZXJSZWZfY3VycmVudF9nZXRCb3VuZGluZ0NsaWVudFJlY3RfaGVpZ2h0IDogMCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgdmFyIF9kcmF3ZXJSZWZfY3VycmVudF9nZXRCb3VuZGluZ0NsaWVudFJlY3Rfd2lkdGg7XG4gICAgICAgIGNvbnN0IHZpc2libGVEcmF3ZXJXaWR0aCA9IE1hdGgubWluKChfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X3dpZHRoID0gZHJhd2VyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpICE9IG51bGwgPyBfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X3dpZHRoIDogMCwgd2luZG93LmlubmVyV2lkdGgpO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWxTd2lwZSA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JztcbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlQW1vdW50KSA+PSAoaXNIb3Jpem9udGFsU3dpcGUgPyB2aXNpYmxlRHJhd2VyV2lkdGggOiB2aXNpYmxlRHJhd2VySGVpZ2h0KSAqIGNsb3NlVGhyZXNob2xkKSB7XG4gICAgICAgICAgICBjbG9zZURyYXdlcigpO1xuICAgICAgICAgICAgb25SZWxlYXNlUHJvcCA9PSBudWxsID8gdm9pZCAwIDogb25SZWxlYXNlUHJvcChldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9uUmVsZWFzZVByb3AgPT0gbnVsbCA/IHZvaWQgMCA6IG9uUmVsZWFzZVByb3AoZXZlbnQsIHRydWUpO1xuICAgICAgICByZXNldERyYXdlcigpO1xuICAgIH1cbiAgICBSZWFjdF9fZGVmYXVsdC51c2VFZmZlY3QoKCk9PntcbiAgICAgICAgLy8gVHJpZ2dlciBlbnRlciBhbmltYXRpb24gd2l0aG91dCB1c2luZyBDU1MgYW5pbWF0aW9uXG4gICAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgICAgIHNldChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxCZWhhdmlvcjogJ2F1dG8nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wZW5UaW1lLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgcmVzZXQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnc2Nyb2xsQmVoYXZpb3InKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXG4gICAgICAgIGlzT3BlblxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIG9uTmVzdGVkT3BlbkNoYW5nZShvKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gbyA/ICh3aW5kb3cuaW5uZXJXaWR0aCAtIE5FU1RFRF9ESVNQTEFDRU1FTlQpIC8gd2luZG93LmlubmVyV2lkdGggOiAxO1xuICAgICAgICBjb25zdCB5ID0gbyA/IC1ORVNURURfRElTUExBQ0VNRU5UIDogMDtcbiAgICAgICAgaWYgKG5lc3RlZE9wZW5DaGFuZ2VUaW1lci5jdXJyZW50KSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KG5lc3RlZE9wZW5DaGFuZ2VUaW1lci5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBzZXQoZHJhd2VyUmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoJHtzY2FsZX0pIHRyYW5zbGF0ZTNkKDAsICR7eX1weCwgMClgXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIW8gJiYgZHJhd2VyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIG5lc3RlZE9wZW5DaGFuZ2VUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gZ2V0VHJhbnNsYXRlKGRyYXdlclJlZi5jdXJyZW50LCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gYHRyYW5zbGF0ZTNkKDAsICR7dHJhbnNsYXRlVmFsdWV9cHgsIDApYCA6IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVZhbHVlfXB4LCAwLCAwKWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25OZXN0ZWREcmFnKF9ldmVudCwgcGVyY2VudGFnZURyYWdnZWQpIHtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2VEcmFnZ2VkIDwgMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpbml0aWFsU2NhbGUgPSAod2luZG93LmlubmVyV2lkdGggLSBORVNURURfRElTUExBQ0VNRU5UKSAvIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICBjb25zdCBuZXdTY2FsZSA9IGluaXRpYWxTY2FsZSArIHBlcmNlbnRhZ2VEcmFnZ2VkICogKDEgLSBpbml0aWFsU2NhbGUpO1xuICAgICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSAtTkVTVEVEX0RJU1BMQUNFTUVOVCArIHBlcmNlbnRhZ2VEcmFnZ2VkICogTkVTVEVEX0RJU1BMQUNFTUVOVDtcbiAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGBzY2FsZSgke25ld1NjYWxlfSkgdHJhbnNsYXRlM2QoMCwgJHtuZXdUcmFuc2xhdGV9cHgsIDApYCA6IGBzY2FsZSgke25ld1NjYWxlfSkgdHJhbnNsYXRlM2QoJHtuZXdUcmFuc2xhdGV9cHgsIDAsIDApYCxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25OZXN0ZWRSZWxlYXNlKF9ldmVudCwgbykge1xuICAgICAgICBjb25zdCBkaW0gPSBpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBvID8gKGRpbSAtIE5FU1RFRF9ESVNQTEFDRU1FTlQpIC8gZGltIDogMTtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gbyA/IC1ORVNURURfRElTUExBQ0VNRU5UIDogMDtcbiAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gYHNjYWxlKCR7c2NhbGV9KSB0cmFuc2xhdGUzZCgwLCAke3RyYW5zbGF0ZX1weCwgMClgIDogYHNjYWxlKCR7c2NhbGV9KSB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZX1weCwgMCwgMClgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KERpYWxvZ1ByaW1pdGl2ZS5Sb290LCB7XG4gICAgICAgIGRlZmF1bHRPcGVuOiBkZWZhdWx0T3BlbixcbiAgICAgICAgb25PcGVuQ2hhbmdlOiAob3Blbik9PntcbiAgICAgICAgICAgIGlmICghZGlzbWlzc2libGUgJiYgIW9wZW4pIHJldHVybjtcbiAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgc2V0SGFzQmVlbk9wZW5lZCh0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xvc2VEcmF3ZXIodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRJc09wZW4ob3Blbik7XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGlzT3BlblxuICAgIH0sIC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChEcmF3ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBhY3RpdmVTbmFwUG9pbnQsXG4gICAgICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50LFxuICAgICAgICAgICAgZHJhd2VyUmVmLFxuICAgICAgICAgICAgb3ZlcmxheVJlZixcbiAgICAgICAgICAgIG9uT3BlbkNoYW5nZSxcbiAgICAgICAgICAgIG9uUHJlc3MsXG4gICAgICAgICAgICBvblJlbGVhc2UsXG4gICAgICAgICAgICBvbkRyYWcsXG4gICAgICAgICAgICBkaXNtaXNzaWJsZSxcbiAgICAgICAgICAgIGhhbmRsZU9ubHksXG4gICAgICAgICAgICBpc09wZW4sXG4gICAgICAgICAgICBpc0RyYWdnaW5nLFxuICAgICAgICAgICAgc2hvdWxkRmFkZSxcbiAgICAgICAgICAgIGNsb3NlRHJhd2VyLFxuICAgICAgICAgICAgb25OZXN0ZWREcmFnLFxuICAgICAgICAgICAgb25OZXN0ZWRPcGVuQ2hhbmdlLFxuICAgICAgICAgICAgb25OZXN0ZWRSZWxlYXNlLFxuICAgICAgICAgICAga2V5Ym9hcmRJc09wZW4sXG4gICAgICAgICAgICBtb2RhbCxcbiAgICAgICAgICAgIHNuYXBQb2ludHNPZmZzZXQsXG4gICAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgICBzaG91bGRTY2FsZUJhY2tncm91bmQsXG4gICAgICAgICAgICBzZXRCYWNrZ3JvdW5kQ29sb3JPblNjYWxlLFxuICAgICAgICAgICAgbm9Cb2R5U3R5bGVzLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgIH1cbiAgICB9LCBjaGlsZHJlbikpO1xufVxuY29uc3QgT3ZlcmxheSA9IC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbih7IC4uLnJlc3QgfSwgcmVmKSB7XG4gICAgY29uc3QgeyBvdmVybGF5UmVmLCBzbmFwUG9pbnRzLCBvblJlbGVhc2UsIHNob3VsZEZhZGUsIGlzT3BlbiwgbW9kYWwgfSA9IHVzZURyYXdlckNvbnRleHQoKTtcbiAgICBjb25zdCBjb21wb3NlZFJlZiA9IHVzZUNvbXBvc2VkUmVmcyhyZWYsIG92ZXJsYXlSZWYpO1xuICAgIGNvbnN0IGhhc1NuYXBQb2ludHMgPSBzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoID4gMDtcbiAgICAvLyBPdmVybGF5IGlzIHRoZSBjb21wb25lbnQgdGhhdCBpcyBsb2NraW5nIHNjcm9sbCwgcmVtb3ZpbmcgaXQgd2lsbCB1bmxvY2sgdGhlIHNjcm9sbCB3aXRob3V0IGhhdmluZyB0byBkaWcgaW50byBSYWRpeCdzIERpYWxvZyBsaWJyYXJ5XG4gICAgaWYgKCFtb2RhbCkge1xuICAgICAgICAvLyBOZWVkIHRvIGRvIHRoaXMgbWFudWFsbHkgdW5mb3J0dW5hdGVseVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChEaWFsb2dQcmltaXRpdmUuT3ZlcmxheSwge1xuICAgICAgICBvbk1vdXNlVXA6IG9uUmVsZWFzZSxcbiAgICAgICAgcmVmOiBjb21wb3NlZFJlZixcbiAgICAgICAgXCJkYXRhLXZhdWwtb3ZlcmxheVwiOiBcIlwiLFxuICAgICAgICBcImRhdGEtdmF1bC1zbmFwLXBvaW50c1wiOiBpc09wZW4gJiYgaGFzU25hcFBvaW50cyA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgIFwiZGF0YS12YXVsLXNuYXAtcG9pbnRzLW92ZXJsYXlcIjogaXNPcGVuICYmIHNob3VsZEZhZGUgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICAuLi5yZXN0XG4gICAgfSk7XG59KTtcbk92ZXJsYXkuZGlzcGxheU5hbWUgPSAnRHJhd2VyLk92ZXJsYXknO1xuY29uc3QgQ29udGVudCA9IC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbih7IG9uUG9pbnRlckRvd25PdXRzaWRlLCBzdHlsZSwgb25PcGVuQXV0b0ZvY3VzLCAuLi5yZXN0IH0sIHJlZikge1xuICAgIGNvbnN0IHsgZHJhd2VyUmVmLCBvblByZXNzLCBvblJlbGVhc2UsIG9uRHJhZywga2V5Ym9hcmRJc09wZW4sIHNuYXBQb2ludHNPZmZzZXQsIG1vZGFsLCBpc09wZW4sIGRpcmVjdGlvbiwgc25hcFBvaW50cywgY29udGFpbmVyLCBoYW5kbGVPbmx5LCBhdXRvRm9jdXMgfSA9IHVzZURyYXdlckNvbnRleHQoKTtcbiAgICAvLyBOZWVkZWQgdG8gdXNlIHRyYW5zaXRpb24gaW5zdGVhZCBvZiBhbmltYXRpb25zXG4gICAgY29uc3QgW2RlbGF5ZWRTbmFwUG9pbnRzLCBzZXREZWxheWVkU25hcFBvaW50c10gPSBSZWFjdF9fZGVmYXVsdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgY29tcG9zZWRSZWYgPSB1c2VDb21wb3NlZFJlZnMocmVmLCBkcmF3ZXJSZWYpO1xuICAgIGNvbnN0IHBvaW50ZXJTdGFydFJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBsYXN0S25vd25Qb2ludGVyRXZlbnRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgd2FzQmV5b25kVGhlUG9pbnRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGhhc1NuYXBQb2ludHMgPSBzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoID4gMDtcbiAgICB1c2VTY2FsZUJhY2tncm91bmQoKTtcbiAgICBjb25zdCBpc0RlbHRhSW5EaXJlY3Rpb24gPSAoZGVsdGEsIGRpcmVjdGlvbiwgdGhyZXNob2xkID0gMCk9PntcbiAgICAgICAgaWYgKHdhc0JleW9uZFRoZVBvaW50UmVmLmN1cnJlbnQpIHJldHVybiB0cnVlO1xuICAgICAgICBjb25zdCBkZWx0YVkgPSBNYXRoLmFicyhkZWx0YS55KTtcbiAgICAgICAgY29uc3QgZGVsdGFYID0gTWF0aC5hYnMoZGVsdGEueCk7XG4gICAgICAgIGNvbnN0IGlzRGVsdGFYID0gZGVsdGFYID4gZGVsdGFZO1xuICAgICAgICBjb25zdCBkRmFjdG9yID0gW1xuICAgICAgICAgICAgJ2JvdHRvbScsXG4gICAgICAgICAgICAncmlnaHQnXG4gICAgICAgIF0uaW5jbHVkZXMoZGlyZWN0aW9uKSA/IDEgOiAtMTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgY29uc3QgaXNSZXZlcnNlRGlyZWN0aW9uID0gZGVsdGEueCAqIGRGYWN0b3IgPCAwO1xuICAgICAgICAgICAgaWYgKCFpc1JldmVyc2VEaXJlY3Rpb24gJiYgZGVsdGFYID49IDAgJiYgZGVsdGFYIDw9IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0RlbHRhWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGlzUmV2ZXJzZURpcmVjdGlvbiA9IGRlbHRhLnkgKiBkRmFjdG9yIDwgMDtcbiAgICAgICAgICAgIGlmICghaXNSZXZlcnNlRGlyZWN0aW9uICYmIGRlbHRhWSA+PSAwICYmIGRlbHRhWSA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzRGVsdGFYO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdhc0JleW9uZFRoZVBvaW50UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoaGFzU25hcFBvaW50cykge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e1xuICAgICAgICAgICAgICAgIHNldERlbGF5ZWRTbmFwUG9pbnRzKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgZnVuY3Rpb24gaGFuZGxlT25Qb2ludGVyVXAoZXZlbnQpIHtcbiAgICAgICAgcG9pbnRlclN0YXJ0UmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB3YXNCZXlvbmRUaGVQb2ludFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIG9uUmVsZWFzZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRGlhbG9nUHJpbWl0aXZlLkNvbnRlbnQsIHtcbiAgICAgICAgXCJkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvblwiOiBkaXJlY3Rpb24sXG4gICAgICAgIFwiZGF0YS12YXVsLWRyYXdlclwiOiBcIlwiLFxuICAgICAgICBcImRhdGEtdmF1bC1kZWxheWVkLXNuYXAtcG9pbnRzXCI6IGRlbGF5ZWRTbmFwUG9pbnRzID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgXCJkYXRhLXZhdWwtc25hcC1wb2ludHNcIjogaXNPcGVuICYmIGhhc1NuYXBQb2ludHMgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICBcImRhdGEtdmF1bC1jdXN0b20tY29udGFpbmVyXCI6IGNvbnRhaW5lciA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIHJlZjogY29tcG9zZWRSZWYsXG4gICAgICAgIHN0eWxlOiBzbmFwUG9pbnRzT2Zmc2V0ICYmIHNuYXBQb2ludHNPZmZzZXQubGVuZ3RoID4gMCA/IHtcbiAgICAgICAgICAgICctLXNuYXAtcG9pbnQtaGVpZ2h0JzogYCR7c25hcFBvaW50c09mZnNldFswXX1weGAsXG4gICAgICAgICAgICAuLi5zdHlsZVxuICAgICAgICB9IDogc3R5bGUsXG4gICAgICAgIG9uUG9pbnRlckRvd246IChldmVudCk9PntcbiAgICAgICAgICAgIGlmIChoYW5kbGVPbmx5KSByZXR1cm47XG4gICAgICAgICAgICByZXN0Lm9uUG9pbnRlckRvd24gPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3Qub25Qb2ludGVyRG93bi5jYWxsKHJlc3QsIGV2ZW50KTtcbiAgICAgICAgICAgIHBvaW50ZXJTdGFydFJlZi5jdXJyZW50ID0ge1xuICAgICAgICAgICAgICAgIHg6IGV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgICAgIHk6IGV2ZW50LnBhZ2VZXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgb25QcmVzcyhldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uT3BlbkF1dG9Gb2N1czogKGUpPT57XG4gICAgICAgICAgICBvbk9wZW5BdXRvRm9jdXMgPT0gbnVsbCA/IHZvaWQgMCA6IG9uT3BlbkF1dG9Gb2N1cyhlKTtcbiAgICAgICAgICAgIGlmICghYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblBvaW50ZXJEb3duT3V0c2lkZTogKGUpPT57XG4gICAgICAgICAgICBvblBvaW50ZXJEb3duT3V0c2lkZSA9PSBudWxsID8gdm9pZCAwIDogb25Qb2ludGVyRG93bk91dHNpZGUoZSk7XG4gICAgICAgICAgICBpZiAoIW1vZGFsIHx8IGUuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5Ym9hcmRJc09wZW4uY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGtleWJvYXJkSXNPcGVuLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Gb2N1c091dHNpZGU6IChlKT0+e1xuICAgICAgICAgICAgaWYgKCFtb2RhbCkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUG9pbnRlck1vdmU6IChldmVudCk9PntcbiAgICAgICAgICAgIGxhc3RLbm93blBvaW50ZXJFdmVudFJlZi5jdXJyZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICBpZiAoaGFuZGxlT25seSkgcmV0dXJuO1xuICAgICAgICAgICAgcmVzdC5vblBvaW50ZXJNb3ZlID09IG51bGwgPyB2b2lkIDAgOiByZXN0Lm9uUG9pbnRlck1vdmUuY2FsbChyZXN0LCBldmVudCk7XG4gICAgICAgICAgICBpZiAoIXBvaW50ZXJTdGFydFJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB5UG9zaXRpb24gPSBldmVudC5wYWdlWSAtIHBvaW50ZXJTdGFydFJlZi5jdXJyZW50Lnk7XG4gICAgICAgICAgICBjb25zdCB4UG9zaXRpb24gPSBldmVudC5wYWdlWCAtIHBvaW50ZXJTdGFydFJlZi5jdXJyZW50Lng7XG4gICAgICAgICAgICBjb25zdCBzd2lwZVN0YXJ0VGhyZXNob2xkID0gZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgPyAxMCA6IDI7XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgeTogeVBvc2l0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgaXNBbGxvd2VkVG9Td2lwZSA9IGlzRGVsdGFJbkRpcmVjdGlvbihkZWx0YSwgZGlyZWN0aW9uLCBzd2lwZVN0YXJ0VGhyZXNob2xkKTtcbiAgICAgICAgICAgIGlmIChpc0FsbG93ZWRUb1N3aXBlKSBvbkRyYWcoZXZlbnQpO1xuICAgICAgICAgICAgZWxzZSBpZiAoTWF0aC5hYnMoeFBvc2l0aW9uKSA+IHN3aXBlU3RhcnRUaHJlc2hvbGQgfHwgTWF0aC5hYnMoeVBvc2l0aW9uKSA+IHN3aXBlU3RhcnRUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyU3RhcnRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUG9pbnRlclVwOiAoZXZlbnQpPT57XG4gICAgICAgICAgICByZXN0Lm9uUG9pbnRlclVwID09IG51bGwgPyB2b2lkIDAgOiByZXN0Lm9uUG9pbnRlclVwLmNhbGwocmVzdCwgZXZlbnQpO1xuICAgICAgICAgICAgcG9pbnRlclN0YXJ0UmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgd2FzQmV5b25kVGhlUG9pbnRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgb25SZWxlYXNlKGV2ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Qb2ludGVyT3V0OiAoZXZlbnQpPT57XG4gICAgICAgICAgICByZXN0Lm9uUG9pbnRlck91dCA9PSBudWxsID8gdm9pZCAwIDogcmVzdC5vblBvaW50ZXJPdXQuY2FsbChyZXN0LCBldmVudCk7XG4gICAgICAgICAgICBoYW5kbGVPblBvaW50ZXJVcChsYXN0S25vd25Qb2ludGVyRXZlbnRSZWYuY3VycmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ29udGV4dE1lbnU6IChldmVudCk9PntcbiAgICAgICAgICAgIHJlc3Qub25Db250ZXh0TWVudSA9PSBudWxsID8gdm9pZCAwIDogcmVzdC5vbkNvbnRleHRNZW51LmNhbGwocmVzdCwgZXZlbnQpO1xuICAgICAgICAgICAgaGFuZGxlT25Qb2ludGVyVXAobGFzdEtub3duUG9pbnRlckV2ZW50UmVmLmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbkNvbnRlbnQuZGlzcGxheU5hbWUgPSAnRHJhd2VyLkNvbnRlbnQnO1xuY29uc3QgTE9OR19IQU5ETEVfUFJFU1NfVElNRU9VVCA9IDI1MDtcbmNvbnN0IERPVUJMRV9UQVBfVElNRU9VVCA9IDEyMDtcbmNvbnN0IEhhbmRsZSA9IC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbih7IHByZXZlbnRDeWNsZSA9IGZhbHNlLCBjaGlsZHJlbiwgLi4ucmVzdCB9LCByZWYpIHtcbiAgICBjb25zdCB7IGNsb3NlRHJhd2VyLCBpc0RyYWdnaW5nLCBzbmFwUG9pbnRzLCBhY3RpdmVTbmFwUG9pbnQsIHNldEFjdGl2ZVNuYXBQb2ludCwgZGlzbWlzc2libGUsIGhhbmRsZU9ubHksIGlzT3Blbiwgb25QcmVzcywgb25EcmFnIH0gPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgY29uc3QgY2xvc2VUaW1lb3V0SWRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgc2hvdWxkQ2FuY2VsSW50ZXJhY3Rpb25SZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0Q3ljbGUoKSB7XG4gICAgICAgIC8vIFN0b3AgaWYgdGhpcyBpcyB0aGUgc2Vjb25kIGNsaWNrIG9mIGEgZG91YmxlIGNsaWNrXG4gICAgICAgIGlmIChzaG91bGRDYW5jZWxJbnRlcmFjdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICBoYW5kbGVDeWNsZVNuYXBQb2ludHMoKTtcbiAgICAgICAgfSwgRE9VQkxFX1RBUF9USU1FT1VUKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlQ3ljbGVTbmFwUG9pbnRzKCkge1xuICAgICAgICAvLyBQcmV2ZW50IGFjY2lkZW50YWwgdGFwcyB3aGlsZSByZXNpemluZyBkcmF3ZXJcbiAgICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgcHJldmVudEN5Y2xlIHx8IHNob3VsZENhbmNlbEludGVyYWN0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbEludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGNsZWFyIHRoZSB0aW1lb3V0IGlkIGlmIHRoZSB1c2VyIHJlbGVhc2VzIHRoZSBoYW5kbGUgYmVmb3JlIHRoZSBjYW5jZWwgdGltZW91dFxuICAgICAgICBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbigpO1xuICAgICAgICBpZiAoKCFzbmFwUG9pbnRzIHx8IHNuYXBQb2ludHMubGVuZ3RoID09PSAwKSAmJiBkaXNtaXNzaWJsZSkge1xuICAgICAgICAgICAgY2xvc2VEcmF3ZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0xhc3RTbmFwUG9pbnQgPSBhY3RpdmVTbmFwUG9pbnQgPT09IHNuYXBQb2ludHNbc25hcFBvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGlzTGFzdFNuYXBQb2ludCAmJiBkaXNtaXNzaWJsZSkge1xuICAgICAgICAgICAgY2xvc2VEcmF3ZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50U25hcEluZGV4ID0gc25hcFBvaW50cy5maW5kSW5kZXgoKHBvaW50KT0+cG9pbnQgPT09IGFjdGl2ZVNuYXBQb2ludCk7XG4gICAgICAgIGlmIChjdXJyZW50U25hcEluZGV4ID09PSAtMSkgcmV0dXJuOyAvLyBhY3RpdmVTbmFwUG9pbnQgbm90IGZvdW5kIGluIHNuYXBQb2ludHNcbiAgICAgICAgY29uc3QgbmV4dFNuYXBQb2ludCA9IHNuYXBQb2ludHNbY3VycmVudFNuYXBJbmRleCArIDFdO1xuICAgICAgICBzZXRBY3RpdmVTbmFwUG9pbnQobmV4dFNuYXBQb2ludCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0SW50ZXJhY3Rpb24oKSB7XG4gICAgICAgIGNsb3NlVGltZW91dElkUmVmLmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgLy8gQ2FuY2VsIGNsaWNrIGludGVyYWN0aW9uIG9uIGEgbG9uZyBwcmVzc1xuICAgICAgICAgICAgc2hvdWxkQ2FuY2VsSW50ZXJhY3Rpb25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH0sIExPTkdfSEFORExFX1BSRVNTX1RJTUVPVVQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbigpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChjbG9zZVRpbWVvdXRJZFJlZi5jdXJyZW50KTtcbiAgICAgICAgc2hvdWxkQ2FuY2VsSW50ZXJhY3Rpb25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgb25DbGljazogaGFuZGxlU3RhcnRDeWNsZSxcbiAgICAgICAgb25Qb2ludGVyQ2FuY2VsOiBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbixcbiAgICAgICAgb25Qb2ludGVyRG93bjogKGUpPT57XG4gICAgICAgICAgICBpZiAoaGFuZGxlT25seSkgb25QcmVzcyhlKTtcbiAgICAgICAgICAgIGhhbmRsZVN0YXJ0SW50ZXJhY3Rpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Qb2ludGVyTW92ZTogKGUpPT57XG4gICAgICAgICAgICBpZiAoaGFuZGxlT25seSkgb25EcmFnKGUpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBvblBvaW50ZXJVcCBpcyBhbHJlYWR5IGhhbmRsZWQgYnkgdGhlIGNvbnRlbnQgY29tcG9uZW50XG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBcImRhdGEtdmF1bC1kcmF3ZXItdmlzaWJsZVwiOiBpc09wZW4gPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICBcImRhdGEtdmF1bC1oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgLi4ucmVzdFxuICAgIH0sIC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBcImRhdGEtdmF1bC1oYW5kbGUtaGl0YXJlYVwiOiBcIlwiLFxuICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gICAgfSwgY2hpbGRyZW4pKTtcbn0pO1xuSGFuZGxlLmRpc3BsYXlOYW1lID0gJ0RyYXdlci5IYW5kbGUnO1xuZnVuY3Rpb24gTmVzdGVkUm9vdCh7IG9uRHJhZywgb25PcGVuQ2hhbmdlLCAuLi5yZXN0IH0pIHtcbiAgICBjb25zdCB7IG9uTmVzdGVkRHJhZywgb25OZXN0ZWRPcGVuQ2hhbmdlLCBvbk5lc3RlZFJlbGVhc2UgfSA9IHVzZURyYXdlckNvbnRleHQoKTtcbiAgICBpZiAoIW9uTmVzdGVkRHJhZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYXdlci5OZXN0ZWRSb290IG11c3QgYmUgcGxhY2VkIGluIGFub3RoZXIgZHJhd2VyJyk7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUm9vdCwge1xuICAgICAgICBuZXN0ZWQ6IHRydWUsXG4gICAgICAgIG9uQ2xvc2U6ICgpPT57XG4gICAgICAgICAgICBvbk5lc3RlZE9wZW5DaGFuZ2UoZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBvbkRyYWc6IChlLCBwKT0+e1xuICAgICAgICAgICAgb25OZXN0ZWREcmFnKGUsIHApO1xuICAgICAgICAgICAgb25EcmFnID09IG51bGwgPyB2b2lkIDAgOiBvbkRyYWcoZSwgcCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uT3BlbkNoYW5nZTogKG8pPT57XG4gICAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgICAgIG9uTmVzdGVkT3BlbkNoYW5nZShvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25SZWxlYXNlOiBvbk5lc3RlZFJlbGVhc2UsXG4gICAgICAgIC4uLnJlc3RcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIFBvcnRhbChwcm9wcykge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgY29uc3QgeyBjb250YWluZXIgPSBjb250ZXh0LmNvbnRhaW5lciwgLi4ucG9ydGFsUHJvcHMgfSA9IHByb3BzO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRGlhbG9nUHJpbWl0aXZlLlBvcnRhbCwge1xuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgLi4ucG9ydGFsUHJvcHNcbiAgICB9KTtcbn1cbmNvbnN0IERyYXdlciA9IHtcbiAgICBSb290LFxuICAgIE5lc3RlZFJvb3QsXG4gICAgQ29udGVudCxcbiAgICBPdmVybGF5LFxuICAgIFRyaWdnZXI6IERpYWxvZ1ByaW1pdGl2ZS5UcmlnZ2VyLFxuICAgIFBvcnRhbCxcbiAgICBIYW5kbGUsXG4gICAgQ2xvc2U6IERpYWxvZ1ByaW1pdGl2ZS5DbG9zZSxcbiAgICBUaXRsZTogRGlhbG9nUHJpbWl0aXZlLlRpdGxlLFxuICAgIERlc2NyaXB0aW9uOiBEaWFsb2dQcmltaXRpdmUuRGVzY3JpcHRpb25cbn07XG5cbmV4cG9ydCB7IENvbnRlbnQsIERyYXdlciwgSGFuZGxlLCBOZXN0ZWRSb290LCBPdmVybGF5LCBQb3J0YWwsIFJvb3QgfTtcbiJdLCJuYW1lcyI6WyJfX2luc2VydENTUyIsImNvZGUiLCJkb2N1bWVudCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJhcHBlbmRDaGlsZCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJEaWFsb2dQcmltaXRpdmUiLCJSZWFjdCIsIlJlYWN0X19kZWZhdWx0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0IiwidXNlTWVtbyIsIkRyYXdlckNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZHJhd2VyUmVmIiwiY3VycmVudCIsIm92ZXJsYXlSZWYiLCJvblByZXNzIiwib25SZWxlYXNlIiwib25EcmFnIiwib25OZXN0ZWREcmFnIiwib25OZXN0ZWRPcGVuQ2hhbmdlIiwib25OZXN0ZWRSZWxlYXNlIiwib3BlblByb3AiLCJ1bmRlZmluZWQiLCJkaXNtaXNzaWJsZSIsImlzT3BlbiIsImlzRHJhZ2dpbmciLCJrZXlib2FyZElzT3BlbiIsInNuYXBQb2ludHNPZmZzZXQiLCJzbmFwUG9pbnRzIiwiaGFuZGxlT25seSIsIm1vZGFsIiwic2hvdWxkRmFkZSIsImFjdGl2ZVNuYXBQb2ludCIsIm9uT3BlbkNoYW5nZSIsInNldEFjdGl2ZVNuYXBQb2ludCIsImNsb3NlRHJhd2VyIiwiZGlyZWN0aW9uIiwic2hvdWxkU2NhbGVCYWNrZ3JvdW5kIiwic2V0QmFja2dyb3VuZENvbG9yT25TY2FsZSIsIm5vQm9keVN0eWxlcyIsImNvbnRhaW5lciIsImF1dG9Gb2N1cyIsInVzZURyYXdlckNvbnRleHQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIiwiS0VZQk9BUkRfQlVGRkVSIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImNoYWluJDEiLCJjYWxsYmFja3MiLCJhcmdzIiwiY2FsbGJhY2siLCJpc01hYyIsInRlc3RQbGF0Zm9ybSIsImlzSVBob25lIiwiaXNTYWZhcmkiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJUGFkIiwibWF4VG91Y2hQb2ludHMiLCJpc0lPUyIsInJlIiwid2luZG93IiwicGxhdGZvcm0iLCJ2aXN1YWxWaWV3cG9ydCIsImlzU2Nyb2xsYWJsZSIsIm5vZGUiLCJnZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRTY3JvbGxQYXJlbnQiLCJwYXJlbnRFbGVtZW50Iiwic2Nyb2xsaW5nRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsIm5vblRleHRJbnB1dFR5cGVzIiwiU2V0IiwicHJldmVudFNjcm9sbENvdW50IiwicmVzdG9yZSIsInVzZVByZXZlbnRTY3JvbGwiLCJvcHRpb25zIiwiaXNEaXNhYmxlZCIsInByZXZlbnRTY3JvbGxNb2JpbGVTYWZhcmkiLCJzY3JvbGxhYmxlIiwibGFzdFkiLCJvblRvdWNoU3RhcnQiLCJlIiwidGFyZ2V0IiwiYm9keSIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVkiLCJvblRvdWNoTW92ZSIsInByZXZlbnREZWZhdWx0IiwieSIsInNjcm9sbFRvcCIsImJvdHRvbSIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIm9uVG91Y2hFbmQiLCJpc0lucHV0IiwiYWN0aXZlRWxlbWVudCIsInRyYW5zZm9ybSIsImZvY3VzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib25Gb2N1cyIsImhlaWdodCIsImlubmVySGVpZ2h0Iiwic2Nyb2xsSW50b1ZpZXciLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsIm9uV2luZG93U2Nyb2xsIiwic2Nyb2xsVG8iLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJyZXN0b3JlU3R5bGVzIiwic2V0U3R5bGUiLCJpbm5lcldpZHRoIiwiY2xpZW50V2lkdGgiLCJyZW1vdmVFdmVudHMiLCJhZGRFdmVudCIsInBhc3NpdmUiLCJjYXB0dXJlIiwiZWxlbWVudCIsInZhbHVlIiwiY3VyIiwiZXZlbnQiLCJoYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJvb3QiLCJzY3JvbGxhYmxlVG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwidGFyZ2V0VG9wIiwidGFyZ2V0Qm90dG9tIiwia2V5Ym9hcmRIZWlnaHQiLCJIVE1MSW5wdXRFbGVtZW50IiwiaGFzIiwiSFRNTFRleHRBcmVhRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiaXNDb250ZW50RWRpdGFibGUiLCJzZXRSZWYiLCJyZWYiLCJjb21wb3NlUmVmcyIsInJlZnMiLCJmb3JFYWNoIiwidXNlQ29tcG9zZWRSZWZzIiwidXNlQ2FsbGJhY2siLCJjYWNoZSIsIldlYWtNYXAiLCJzZXQiLCJlbCIsInN0eWxlcyIsImlnbm9yZUNhY2hlIiwib3JpZ2luYWxTdHlsZXMiLCJPYmplY3QiLCJlbnRyaWVzIiwia2V5Iiwic3RhcnRzV2l0aCIsInNldFByb3BlcnR5IiwicmVzZXQiLCJwcm9wIiwiZ2V0IiwiaXNWZXJ0aWNhbCIsImdldFRyYW5zbGF0ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1velRyYW5zZm9ybSIsIm1hdCIsIm1hdGNoIiwicGFyc2VGbG9hdCIsInNwbGl0IiwiZGFtcGVuVmFsdWUiLCJ2IiwiTWF0aCIsImxvZyIsImFzc2lnblN0eWxlIiwicHJldlN0eWxlIiwiYXNzaWduIiwiY2hhaW4iLCJmbnMiLCJmbiIsIlRSQU5TSVRJT05TIiwiRFVSQVRJT04iLCJFQVNFIiwiVkVMT0NJVFlfVEhSRVNIT0xEIiwiQ0xPU0VfVEhSRVNIT0xEIiwiU0NST0xMX0xPQ0tfVElNRU9VVCIsIkJPUkRFUl9SQURJVVMiLCJORVNURURfRElTUExBQ0VNRU5UIiwiV0lORE9XX1RPUF9PRkZTRVQiLCJEUkFHX0NMQVNTIiwidXNlQ2FsbGJhY2tSZWYiLCJjYWxsYmFja1JlZiIsInVzZVJlZiIsImNhbGwiLCJ1c2VVbmNvbnRyb2xsZWRTdGF0ZSIsImRlZmF1bHRQcm9wIiwib25DaGFuZ2UiLCJ1bmNvbnRyb2xsZWRTdGF0ZSIsInVzZVN0YXRlIiwicHJldlZhbHVlUmVmIiwiaGFuZGxlQ2hhbmdlIiwidXNlQ29udHJvbGxhYmxlU3RhdGUiLCJ1bmNvbnRyb2xsZWRQcm9wIiwic2V0VW5jb250cm9sbGVkUHJvcCIsImlzQ29udHJvbGxlZCIsInNldFZhbHVlIiwibmV4dFZhbHVlIiwic2V0dGVyIiwidXNlU25hcFBvaW50cyIsImFjdGl2ZVNuYXBQb2ludFByb3AiLCJzZXRBY3RpdmVTbmFwUG9pbnRQcm9wIiwiZmFkZUZyb21JbmRleCIsIm9uU25hcFBvaW50Q2hhbmdlIiwic25hcFRvU2VxdWVudGlhbFBvaW50Iiwid2luZG93RGltZW5zaW9ucyIsInNldFdpbmRvd0RpbWVuc2lvbnMiLCJvblJlc2l6ZSIsImlzTGFzdFNuYXBQb2ludCIsImxlbmd0aCIsImFjdGl2ZVNuYXBQb2ludEluZGV4IiwiZmluZEluZGV4Iiwic25hcFBvaW50IiwiTnVtYmVyIiwiaXNOYU4iLCJjb250YWluZXJTaXplIiwid2lkdGgiLCJfc25hcFBvaW50c19tYXAiLCJtYXAiLCJpc1B4Iiwic25hcFBvaW50QXNOdW1iZXIiLCJwYXJzZUludCIsImFjdGl2ZVNuYXBQb2ludE9mZnNldCIsInNuYXBUb1BvaW50IiwiZGltZW5zaW9uIiwiX3NuYXBQb2ludHNPZmZzZXRfZmluZEluZGV4IiwibmV3U25hcFBvaW50SW5kZXgiLCJzbmFwUG9pbnREaW0iLCJ0cmFuc2l0aW9uIiwiam9pbiIsIm9wYWNpdHkiLCJtYXgiLCJfc25hcFBvaW50c19maW5kSW5kZXgiLCJuZXdJbmRleCIsImRyYWdnZWREaXN0YW5jZSIsInZlbG9jaXR5IiwiY3VycmVudFBvc2l0aW9uIiwiaXNPdmVybGF5U25hcFBvaW50IiwiaXNGaXJzdCIsImhhc0RyYWdnZWRVcCIsImNsb3Nlc3RTbmFwUG9pbnQiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsImFicyIsImRpbSIsImRyYWdEaXJlY3Rpb24iLCJuZXdWYWx1ZSIsImdldFBlcmNlbnRhZ2VEcmFnZ2VkIiwiYWJzRHJhZ2dlZERpc3RhbmNlIiwiaXNEcmFnZ2luZ0Rvd24iLCJpc092ZXJsYXlTbmFwUG9pbnRPckhpZ2hlciIsInRhcmdldFNuYXBQb2ludEluZGV4Iiwic25hcFBvaW50RGlzdGFuY2UiLCJwZXJjZW50YWdlRHJhZ2dlZCIsIm5vb3AiLCJ1c2VTY2FsZUJhY2tncm91bmQiLCJ0aW1lb3V0SWRSZWYiLCJpbml0aWFsQmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0U2NhbGUiLCJjbGVhclRpbWVvdXQiLCJ3cmFwcGVyIiwicXVlcnlTZWxlY3RvciIsImJhY2tncm91bmQiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJ3cmFwcGVyU3R5bGVzQ2xlYW51cCIsImJvcmRlclJhZGl1cyIsInNldFRpbWVvdXQiLCJyZW1vdmVQcm9wZXJ0eSIsInByZXZpb3VzQm9keVBvc2l0aW9uIiwidXNlUG9zaXRpb25GaXhlZCIsIm5lc3RlZCIsImhhc0JlZW5PcGVuZWQiLCJwcmV2ZW50U2Nyb2xsUmVzdG9yYXRpb24iLCJhY3RpdmVVcmwiLCJzZXRBY3RpdmVVcmwiLCJsb2NhdGlvbiIsImhyZWYiLCJzY3JvbGxQb3MiLCJzZXRQb3NpdGlvbkZpeGVkIiwicG9zaXRpb24iLCJsZWZ0IiwicmlnaHQiLCJib3R0b21CYXJIZWlnaHQiLCJyZXN0b3JlUG9zaXRpb25TZXR0aW5nIiwieCIsIm9uU2Nyb2xsIiwiaXNTdGFuZGFsb25lIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJSb290Iiwib3BlbiIsImNoaWxkcmVuIiwib25EcmFnUHJvcCIsIm9uUmVsZWFzZVByb3AiLCJjbG9zZVRocmVzaG9sZCIsInNjcm9sbExvY2tUaW1lb3V0IiwiZml4ZWQiLCJvbkNsb3NlIiwiZGVmYXVsdE9wZW4iLCJkaXNhYmxlUHJldmVudFNjcm9sbCIsInJlcG9zaXRpb25JbnB1dHMiLCJvbkFuaW1hdGlvbkVuZCIsIl9kcmF3ZXJSZWZfY3VycmVudCIsIl9kcmF3ZXJSZWZfY3VycmVudDEiLCJzZXRJc09wZW4iLCJvIiwicG9pbnRlckV2ZW50cyIsInNldEhhc0JlZW5PcGVuZWQiLCJzZXRJc0RyYWdnaW5nIiwianVzdFJlbGVhc2VkIiwic2V0SnVzdFJlbGVhc2VkIiwib3BlblRpbWUiLCJkcmFnU3RhcnRUaW1lIiwiZHJhZ0VuZFRpbWUiLCJsYXN0VGltZURyYWdQcmV2ZW50ZWQiLCJpc0FsbG93ZWRUb0RyYWciLCJuZXN0ZWRPcGVuQ2hhbmdlVGltZXIiLCJwb2ludGVyU3RhcnQiLCJwcmV2aW91c0RpZmZGcm9tSW5pdGlhbCIsImRyYXdlckhlaWdodFJlZiIsImRyYXdlcldpZHRoUmVmIiwiaW5pdGlhbERyYXdlckhlaWdodCIsIkRhdGUiLCJvblJlbGVhc2VTbmFwUG9pbnRzIiwib25EcmFnU25hcFBvaW50cyIsImdldFNuYXBQb2ludHNQZXJjZW50YWdlRHJhZ2dlZCIsImNvbnRhaW5zIiwic2V0UG9pbnRlckNhcHR1cmUiLCJwb2ludGVySWQiLCJwYWdlWCIsInNob3VsZERyYWciLCJpc0RyYWdnaW5nSW5EaXJlY3Rpb24iLCJfd2luZG93X2dldFNlbGVjdGlvbiIsIl9sYXN0VGltZURyYWdQcmV2ZW50ZWRfY3VycmVudCIsImhpZ2hsaWdodGVkVGV4dCIsImdldFNlbGVjdGlvbiIsInRvU3RyaW5nIiwic3dpcGVBbW91bnQiLCJkYXRlIiwiaGFzQXR0cmlidXRlIiwiY2xvc2VzdCIsImdldFRpbWUiLCJnZXRBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwiZGlyZWN0aW9uTXVsdGlwbGllciIsIm5vQ2xvc2VTbmFwUG9pbnRzUHJlQ29uZGl0aW9uIiwiZHJhd2VyRGltZW5zaW9uIiwic25hcFBvaW50UGVyY2VudGFnZURyYWdnZWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJkYW1wZW5lZERyYWdnZWREaXN0YW5jZSIsInRyYW5zbGF0ZVZhbHVlIiwibWluIiwib3BhY2l0eVZhbHVlIiwic2NhbGVWYWx1ZSIsImJvcmRlclJhZGl1c1ZhbHVlIiwiX3dpbmRvd192aXN1YWxWaWV3cG9ydCIsIm9uVmlzdWFsVmlld3BvcnRDaGFuZ2UiLCJmb2N1c2VkRWxlbWVudCIsInZpc3VhbFZpZXdwb3J0SGVpZ2h0IiwidG90YWxIZWlnaHQiLCJkaWZmRnJvbUluaXRpYWwiLCJkcmF3ZXJIZWlnaHQiLCJpc1RhbGxFbm91Z2giLCJvZmZzZXRGcm9tVG9wIiwiYWN0aXZlU25hcFBvaW50SGVpZ2h0IiwibmV3RHJhd2VySGVpZ2h0IiwiZnJvbVdpdGhpbiIsImNhbmNlbERyYWciLCJyZXNldERyYXdlciIsImN1cnJlbnRTd2lwZUFtb3VudCIsInJlbW92ZSIsInRpbWVUYWtlbiIsImRpc3RNb3ZlZCIsIl9kcmF3ZXJSZWZfY3VycmVudF9nZXRCb3VuZGluZ0NsaWVudFJlY3RfaGVpZ2h0IiwidmlzaWJsZURyYXdlckhlaWdodCIsIl9kcmF3ZXJSZWZfY3VycmVudF9nZXRCb3VuZGluZ0NsaWVudFJlY3Rfd2lkdGgiLCJ2aXNpYmxlRHJhd2VyV2lkdGgiLCJpc0hvcml6b250YWxTd2lwZSIsInNjcm9sbEJlaGF2aW9yIiwic2NhbGUiLCJfZXZlbnQiLCJpbml0aWFsU2NhbGUiLCJuZXdTY2FsZSIsIm5ld1RyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsIlByb3ZpZGVyIiwiT3ZlcmxheSIsImZvcndhcmRSZWYiLCJyZXN0IiwiY29tcG9zZWRSZWYiLCJoYXNTbmFwUG9pbnRzIiwib25Nb3VzZVVwIiwiZGlzcGxheU5hbWUiLCJDb250ZW50Iiwib25Qb2ludGVyRG93bk91dHNpZGUiLCJvbk9wZW5BdXRvRm9jdXMiLCJkZWxheWVkU25hcFBvaW50cyIsInNldERlbGF5ZWRTbmFwUG9pbnRzIiwicG9pbnRlclN0YXJ0UmVmIiwibGFzdEtub3duUG9pbnRlckV2ZW50UmVmIiwid2FzQmV5b25kVGhlUG9pbnRSZWYiLCJpc0RlbHRhSW5EaXJlY3Rpb24iLCJkZWx0YSIsInRocmVzaG9sZCIsImRlbHRhWSIsImRlbHRhWCIsImlzRGVsdGFYIiwiZEZhY3RvciIsImluY2x1ZGVzIiwiaXNSZXZlcnNlRGlyZWN0aW9uIiwiaGFuZGxlT25Qb2ludGVyVXAiLCJvblBvaW50ZXJEb3duIiwiZGVmYXVsdFByZXZlbnRlZCIsIm9uRm9jdXNPdXRzaWRlIiwib25Qb2ludGVyTW92ZSIsInlQb3NpdGlvbiIsInhQb3NpdGlvbiIsInN3aXBlU3RhcnRUaHJlc2hvbGQiLCJwb2ludGVyVHlwZSIsImlzQWxsb3dlZFRvU3dpcGUiLCJvblBvaW50ZXJVcCIsIm9uUG9pbnRlck91dCIsIm9uQ29udGV4dE1lbnUiLCJMT05HX0hBTkRMRV9QUkVTU19USU1FT1VUIiwiRE9VQkxFX1RBUF9USU1FT1VUIiwiSGFuZGxlIiwicHJldmVudEN5Y2xlIiwiY2xvc2VUaW1lb3V0SWRSZWYiLCJzaG91bGRDYW5jZWxJbnRlcmFjdGlvblJlZiIsImhhbmRsZVN0YXJ0Q3ljbGUiLCJoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbiIsImhhbmRsZUN5Y2xlU25hcFBvaW50cyIsImN1cnJlbnRTbmFwSW5kZXgiLCJwb2ludCIsIm5leHRTbmFwUG9pbnQiLCJoYW5kbGVTdGFydEludGVyYWN0aW9uIiwib25DbGljayIsIm9uUG9pbnRlckNhbmNlbCIsIk5lc3RlZFJvb3QiLCJwIiwiUG9ydGFsIiwicHJvcHMiLCJwb3J0YWxQcm9wcyIsIkRyYXdlciIsIlRyaWdnZXIiLCJDbG9zZSIsIlRpdGxlIiwiRGVzY3JpcHRpb24iXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/chat-ui/node_modules/vaul/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/colors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/colors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentColorEnum: () => (/* binding */ DocumentColorEnum),\n/* harmony export */   highlightColors: () => (/* binding */ highlightColors)\n/* harmony export */ });\nvar DocumentColorEnum;\n(function (DocumentColorEnum) {\n    DocumentColorEnum[\"purple\"] = \"llama-purple\";\n    DocumentColorEnum[\"magenta\"] = \"llama-magenta\";\n    DocumentColorEnum[\"red\"] = \"llama-red\";\n    DocumentColorEnum[\"orange\"] = \"llama-orange\";\n    DocumentColorEnum[\"yellow\"] = \"llama-yellow\";\n    DocumentColorEnum[\"lime\"] = \"llama-lime\";\n    DocumentColorEnum[\"teal\"] = \"llama-teal\";\n    DocumentColorEnum[\"cyan\"] = \"llama-cyan\";\n    DocumentColorEnum[\"blue\"] = \"llama-blue\";\n    DocumentColorEnum[\"indigo\"] = \"llama-indigo\";\n})(DocumentColorEnum || (DocumentColorEnum = {}));\nconst highlightColors = {\n    [DocumentColorEnum.purple]: 'bg-llama-purple-light',\n    [DocumentColorEnum.magenta]: 'bg-llama-magenta-light',\n    [DocumentColorEnum.red]: 'bg-llama-red-light',\n    [DocumentColorEnum.indigo]: 'bg-llama-indigo-light',\n    [DocumentColorEnum.lime]: 'bg-llama-lime-light',\n    [DocumentColorEnum.orange]: 'bg-llama-orange-light',\n    [DocumentColorEnum.blue]: 'bg-llama-blue-light',\n    [DocumentColorEnum.yellow]: 'bg-llama-yellow-light',\n    [DocumentColorEnum.teal]: 'bg-llama-teal-light',\n    [DocumentColorEnum.cyan]: 'bg-llama-cyan-light',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9jb25zdGFudHMvY29sb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDeEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L3BkZi12aWV3ZXIvZGlzdC9lc20vY29uc3RhbnRzL2NvbG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIERvY3VtZW50Q29sb3JFbnVtO1xuKGZ1bmN0aW9uIChEb2N1bWVudENvbG9yRW51bSkge1xuICAgIERvY3VtZW50Q29sb3JFbnVtW1wicHVycGxlXCJdID0gXCJsbGFtYS1wdXJwbGVcIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcIm1hZ2VudGFcIl0gPSBcImxsYW1hLW1hZ2VudGFcIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcInJlZFwiXSA9IFwibGxhbWEtcmVkXCI7XG4gICAgRG9jdW1lbnRDb2xvckVudW1bXCJvcmFuZ2VcIl0gPSBcImxsYW1hLW9yYW5nZVwiO1xuICAgIERvY3VtZW50Q29sb3JFbnVtW1wieWVsbG93XCJdID0gXCJsbGFtYS15ZWxsb3dcIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcImxpbWVcIl0gPSBcImxsYW1hLWxpbWVcIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcInRlYWxcIl0gPSBcImxsYW1hLXRlYWxcIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcImN5YW5cIl0gPSBcImxsYW1hLWN5YW5cIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcImJsdWVcIl0gPSBcImxsYW1hLWJsdWVcIjtcbiAgICBEb2N1bWVudENvbG9yRW51bVtcImluZGlnb1wiXSA9IFwibGxhbWEtaW5kaWdvXCI7XG59KShEb2N1bWVudENvbG9yRW51bSB8fCAoRG9jdW1lbnRDb2xvckVudW0gPSB7fSkpO1xuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodENvbG9ycyA9IHtcbiAgICBbRG9jdW1lbnRDb2xvckVudW0ucHVycGxlXTogJ2JnLWxsYW1hLXB1cnBsZS1saWdodCcsXG4gICAgW0RvY3VtZW50Q29sb3JFbnVtLm1hZ2VudGFdOiAnYmctbGxhbWEtbWFnZW50YS1saWdodCcsXG4gICAgW0RvY3VtZW50Q29sb3JFbnVtLnJlZF06ICdiZy1sbGFtYS1yZWQtbGlnaHQnLFxuICAgIFtEb2N1bWVudENvbG9yRW51bS5pbmRpZ29dOiAnYmctbGxhbWEtaW5kaWdvLWxpZ2h0JyxcbiAgICBbRG9jdW1lbnRDb2xvckVudW0ubGltZV06ICdiZy1sbGFtYS1saW1lLWxpZ2h0JyxcbiAgICBbRG9jdW1lbnRDb2xvckVudW0ub3JhbmdlXTogJ2JnLWxsYW1hLW9yYW5nZS1saWdodCcsXG4gICAgW0RvY3VtZW50Q29sb3JFbnVtLmJsdWVdOiAnYmctbGxhbWEtYmx1ZS1saWdodCcsXG4gICAgW0RvY3VtZW50Q29sb3JFbnVtLnllbGxvd106ICdiZy1sbGFtYS15ZWxsb3ctbGlnaHQnLFxuICAgIFtEb2N1bWVudENvbG9yRW51bS50ZWFsXTogJ2JnLWxsYW1hLXRlYWwtbGlnaHQnLFxuICAgIFtEb2N1bWVudENvbG9yRW51bS5jeWFuXTogJ2JnLWxsYW1hLWN5YW4tbGlnaHQnLFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/colors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/constants.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/constants.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDF_DISPLAY_DEFAULTS: () => (/* binding */ PDF_DISPLAY_DEFAULTS)\n/* harmony export */ });\nconst VERTICAL_GUTTER_SIZE_PX = 20;\nconst HORIZONTAL_GUTTER_SIZE_PX = 20;\nconst PAGE_HEIGHT = 792;\nconst PDF_WIDTH_PERCENTAGE = 56;\nconst PDF_HEIGHT_PERCENTAGE = 94;\nconst OBSERVER_THRESHOLD_PERCENTAGE = 0.4;\nconst PDF_HEADER_SIZE_PX = 44;\nconst PDF_SIDEBAR_SIZE_PX = 80;\nconst PDF_DISPLAY_DEFAULTS = {\n    VERTICAL_GUTTER_SIZE_PX,\n    HORIZONTAL_GUTTER_SIZE_PX,\n    PAGE_HEIGHT,\n    PDF_WIDTH_PERCENTAGE,\n    PDF_HEIGHT_PERCENTAGE,\n    OBSERVER_THRESHOLD_PERCENTAGE,\n    PDF_HEADER_SIZE_PX,\n    PDF_SIDEBAR_SIZE_PX,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9jb25zdGFudHMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9jb25zdGFudHMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFZFUlRJQ0FMX0dVVFRFUl9TSVpFX1BYID0gMjA7XG5jb25zdCBIT1JJWk9OVEFMX0dVVFRFUl9TSVpFX1BYID0gMjA7XG5jb25zdCBQQUdFX0hFSUdIVCA9IDc5MjtcbmNvbnN0IFBERl9XSURUSF9QRVJDRU5UQUdFID0gNTY7XG5jb25zdCBQREZfSEVJR0hUX1BFUkNFTlRBR0UgPSA5NDtcbmNvbnN0IE9CU0VSVkVSX1RIUkVTSE9MRF9QRVJDRU5UQUdFID0gMC40O1xuY29uc3QgUERGX0hFQURFUl9TSVpFX1BYID0gNDQ7XG5jb25zdCBQREZfU0lERUJBUl9TSVpFX1BYID0gODA7XG5leHBvcnQgY29uc3QgUERGX0RJU1BMQVlfREVGQVVMVFMgPSB7XG4gICAgVkVSVElDQUxfR1VUVEVSX1NJWkVfUFgsXG4gICAgSE9SSVpPTlRBTF9HVVRURVJfU0laRV9QWCxcbiAgICBQQUdFX0hFSUdIVCxcbiAgICBQREZfV0lEVEhfUEVSQ0VOVEFHRSxcbiAgICBQREZfSEVJR0hUX1BFUkNFTlRBR0UsXG4gICAgT0JTRVJWRVJfVEhSRVNIT0xEX1BFUkNFTlRBR0UsXG4gICAgUERGX0hFQURFUl9TSVpFX1BYLFxuICAgIFBERl9TSURFQkFSX1NJWkVfUFgsXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/contexts/PdfFocusContext.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/contexts/PdfFocusContext.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PdfFocusContext: () => (/* binding */ PdfFocusContext),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\n\n// Initialize Context\nconst PdfFocusContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// PDF Provider\nconst PdfFocusProvider = ({ children }) => {\n    const [pdfFocusState, setPdfFocusState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        documentId: '',\n        pageNumber: 0,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PdfFocusContext.Provider, { value: {\n            pdfFocusState: pdfFocusState,\n            setPdfFocusState: setPdfFocusState,\n        }, children: children }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PdfFocusProvider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9jb250ZXh0cy9QZGZGb2N1c0NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRDtBQUNPO0FBQ3ZEO0FBQ08sd0JBQXdCLG9EQUFhO0FBQzVDO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEMsOENBQThDLCtDQUFRO0FBQ3REO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWSxzREFBSSw2QkFBNkI7QUFDN0M7QUFDQTtBQUNBLFNBQVMsc0JBQXNCO0FBQy9CO0FBQ0EsaUVBQWUsZ0JBQWdCLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9jb250ZXh0cy9QZGZGb2N1c0NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0Jztcbi8vIEluaXRpYWxpemUgQ29udGV4dFxuZXhwb3J0IGNvbnN0IFBkZkZvY3VzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbi8vIFBERiBQcm92aWRlclxuY29uc3QgUGRmRm9jdXNQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgICBjb25zdCBbcGRmRm9jdXNTdGF0ZSwgc2V0UGRmRm9jdXNTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgICAgIGRvY3VtZW50SWQ6ICcnLFxuICAgICAgICBwYWdlTnVtYmVyOiAwLFxuICAgIH0pO1xuICAgIHJldHVybiAoX2pzeChQZGZGb2N1c0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHtcbiAgICAgICAgICAgIHBkZkZvY3VzU3RhdGU6IHBkZkZvY3VzU3RhdGUsXG4gICAgICAgICAgICBzZXRQZGZGb2N1c1N0YXRlOiBzZXRQZGZGb2N1c1N0YXRlLFxuICAgICAgICB9LCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFBkZkZvY3VzUHJvdmlkZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/contexts/PdfFocusContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfFocus.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfFocus.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePdfFocus: () => (/* binding */ usePdfFocus)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _contexts_PdfFocusContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/PdfFocusContext.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/contexts/PdfFocusContext.js\");\n\n\n// Custom Hook to use PDF Context\nconst usePdfFocus = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_contexts_PdfFocusContext_js__WEBPACK_IMPORTED_MODULE_1__.PdfFocusContext);\n    if (context === undefined) {\n        throw new Error('usePDF must be used within a PDFProvider');\n    }\n    return context;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9ob29rcy91c2VQZGZGb2N1cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDOEI7QUFDakU7QUFDTztBQUNQLG9CQUFvQixpREFBVSxDQUFDLHlFQUFlO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9ob29rcy91c2VQZGZGb2N1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGRmRm9jdXNDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dHMvUGRmRm9jdXNDb250ZXh0LmpzJztcbi8vIEN1c3RvbSBIb29rIHRvIHVzZSBQREYgQ29udGV4dFxuZXhwb3J0IGNvbnN0IHVzZVBkZkZvY3VzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFBkZkZvY3VzQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZVBERiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgUERGUHJvdmlkZXInKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQ7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfFocus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfViewer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfViewer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   zoomLevels: () => (/* binding */ zoomLevels)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _usePdfFocus_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./usePdfFocus.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfFocus.js\");\n// usePDFViewer.ts\n\n\nconst zoomLevels = ['50%', '80%', '100%', '130%', '200%', '300%', '400%'];\nconst startZoomLevelIdx = 2;\nconst usePDFViewer = (file) => {\n    const [scrolledIndex, setScrolledIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [scale, setScale] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1.0);\n    const [scaleFit, setScaleFit] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1.0);\n    const [numPages, setNumPages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isPdfRendered, setIsPdfRendered] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [zoomLevelIdx, setZoomLevelIdx] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(startZoomLevelIdx);\n    const { pdfFocusState } = (0,_usePdfFocus_js__WEBPACK_IMPORTED_MODULE_1__.usePdfFocus)();\n    const pdfFocusRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const goToPage = (page) => {\n        if (pdfFocusRef.current) {\n            pdfFocusRef.current.scrollToPage(page);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const activeDocumentId = pdfFocusState.documentId;\n        if (activeDocumentId === file.id) {\n            if (pdfFocusState.pageNumber) {\n                goToPage(pdfFocusState.pageNumber - 1);\n            }\n        }\n    }, [file, pdfFocusState]);\n    const setCurrentPageNumber = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((n) => {\n        setScrolledIndex(n);\n    }, []);\n    const handleZoomIn = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        const nextLevel = zoomLevelIdx + 1;\n        if (nextLevel >= zoomLevels.length) {\n            return;\n        }\n        setZoomLevel(zoomLevels[nextLevel] || '100%');\n    }, [zoomLevelIdx, scrolledIndex, pdfFocusRef]);\n    const handleZoomOut = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n        const nextLevel = zoomLevelIdx - 1;\n        if (nextLevel < 0) {\n            return;\n        }\n        setZoomLevel(zoomLevels[nextLevel] || '100%');\n    }, [zoomLevelIdx, scrolledIndex, pdfFocusRef]);\n    const nextPage = () => {\n        goToPage(scrolledIndex + 1);\n    };\n    const prevPage = () => {\n        goToPage(scrolledIndex - 1);\n    };\n    const toPercentPlusBase = (n) => {\n        return `${100 + n * 100}%`;\n    };\n    const setZoomLevel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((zoomLevel) => {\n        const newZoomLevelIdx = zoomLevels.indexOf(zoomLevel);\n        const newScale = percentToScale(zoomLevel) + scaleFit - 1;\n        setScale(newScale);\n        setTimeout(() => {\n            goToPage(scrolledIndex);\n        }, 30);\n        setZoomLevelIdx(newZoomLevelIdx);\n    }, [scrolledIndex]);\n    function percentToScale(percent) {\n        const number = parseInt(percent, 10);\n        return number / 100;\n    }\n    const scaleDiff = Math.round((scale - scaleFit) * 10) / 10;\n    const scaleText = toPercentPlusBase(scaleDiff);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        setScale(scaleFit);\n    }, [scaleFit]);\n    const zoomInEnabled = zoomLevelIdx < zoomLevels.length - 1;\n    const zoomOutEnabled = zoomLevelIdx > 0;\n    return {\n        scrolledIndex,\n        setCurrentPageNumber,\n        scale,\n        setScaleFit,\n        numPages,\n        setNumPages,\n        handleZoomIn,\n        handleZoomOut,\n        nextPage,\n        prevPage,\n        scaleText,\n        isPdfRendered,\n        setIsPdfRendered,\n        pdfFocusRef,\n        goToPage,\n        setZoomLevel,\n        zoomInEnabled,\n        zoomOutEnabled,\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (usePDFViewer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9ob29rcy91c2VQZGZWaWV3ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ2dFO0FBQ2pCO0FBQ3hDO0FBQ1A7QUFDQTtBQUNBLDhDQUE4QywrQ0FBUTtBQUN0RCw4QkFBOEIsK0NBQVE7QUFDdEMsb0NBQW9DLCtDQUFRO0FBQzVDLG9DQUFvQywrQ0FBUTtBQUM1Qyw4Q0FBOEMsK0NBQVE7QUFDdEQsNENBQTRDLCtDQUFRO0FBQ3BELFlBQVksZ0JBQWdCLEVBQUUsNERBQVc7QUFDekMsd0JBQXdCLHlDQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGlDQUFpQyxrREFBVztBQUM1QztBQUNBLEtBQUs7QUFDTCx5QkFBeUIsa0RBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwwQkFBMEIsa0RBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0EseUJBQXlCLGtEQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxZQUFZLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9ob29rcy91c2VQZGZWaWV3ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdXNlUERGVmlld2VyLnRzXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VQZGZGb2N1cyB9IGZyb20gJy4vdXNlUGRmRm9jdXMuanMnO1xuZXhwb3J0IGNvbnN0IHpvb21MZXZlbHMgPSBbJzUwJScsICc4MCUnLCAnMTAwJScsICcxMzAlJywgJzIwMCUnLCAnMzAwJScsICc0MDAlJ107XG5jb25zdCBzdGFydFpvb21MZXZlbElkeCA9IDI7XG5jb25zdCB1c2VQREZWaWV3ZXIgPSAoZmlsZSkgPT4ge1xuICAgIGNvbnN0IFtzY3JvbGxlZEluZGV4LCBzZXRTY3JvbGxlZEluZGV4XSA9IHVzZVN0YXRlKDEpO1xuICAgIGNvbnN0IFtzY2FsZSwgc2V0U2NhbGVdID0gdXNlU3RhdGUoMS4wKTtcbiAgICBjb25zdCBbc2NhbGVGaXQsIHNldFNjYWxlRml0XSA9IHVzZVN0YXRlKDEuMCk7XG4gICAgY29uc3QgW251bVBhZ2VzLCBzZXROdW1QYWdlc10gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBbaXNQZGZSZW5kZXJlZCwgc2V0SXNQZGZSZW5kZXJlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW3pvb21MZXZlbElkeCwgc2V0Wm9vbUxldmVsSWR4XSA9IHVzZVN0YXRlKHN0YXJ0Wm9vbUxldmVsSWR4KTtcbiAgICBjb25zdCB7IHBkZkZvY3VzU3RhdGUgfSA9IHVzZVBkZkZvY3VzKCk7XG4gICAgY29uc3QgcGRmRm9jdXNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3QgZ29Ub1BhZ2UgPSAocGFnZSkgPT4ge1xuICAgICAgICBpZiAocGRmRm9jdXNSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgcGRmRm9jdXNSZWYuY3VycmVudC5zY3JvbGxUb1BhZ2UocGFnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZURvY3VtZW50SWQgPSBwZGZGb2N1c1N0YXRlLmRvY3VtZW50SWQ7XG4gICAgICAgIGlmIChhY3RpdmVEb2N1bWVudElkID09PSBmaWxlLmlkKSB7XG4gICAgICAgICAgICBpZiAocGRmRm9jdXNTdGF0ZS5wYWdlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZ29Ub1BhZ2UocGRmRm9jdXNTdGF0ZS5wYWdlTnVtYmVyIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbZmlsZSwgcGRmRm9jdXNTdGF0ZV0pO1xuICAgIGNvbnN0IHNldEN1cnJlbnRQYWdlTnVtYmVyID0gdXNlQ2FsbGJhY2soKG4pID0+IHtcbiAgICAgICAgc2V0U2Nyb2xsZWRJbmRleChuKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgaGFuZGxlWm9vbUluID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXh0TGV2ZWwgPSB6b29tTGV2ZWxJZHggKyAxO1xuICAgICAgICBpZiAobmV4dExldmVsID49IHpvb21MZXZlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0Wm9vbUxldmVsKHpvb21MZXZlbHNbbmV4dExldmVsXSB8fCAnMTAwJScpO1xuICAgIH0sIFt6b29tTGV2ZWxJZHgsIHNjcm9sbGVkSW5kZXgsIHBkZkZvY3VzUmVmXSk7XG4gICAgY29uc3QgaGFuZGxlWm9vbU91dCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgbmV4dExldmVsID0gem9vbUxldmVsSWR4IC0gMTtcbiAgICAgICAgaWYgKG5leHRMZXZlbCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRab29tTGV2ZWwoem9vbUxldmVsc1tuZXh0TGV2ZWxdIHx8ICcxMDAlJyk7XG4gICAgfSwgW3pvb21MZXZlbElkeCwgc2Nyb2xsZWRJbmRleCwgcGRmRm9jdXNSZWZdKTtcbiAgICBjb25zdCBuZXh0UGFnZSA9ICgpID0+IHtcbiAgICAgICAgZ29Ub1BhZ2Uoc2Nyb2xsZWRJbmRleCArIDEpO1xuICAgIH07XG4gICAgY29uc3QgcHJldlBhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGdvVG9QYWdlKHNjcm9sbGVkSW5kZXggLSAxKTtcbiAgICB9O1xuICAgIGNvbnN0IHRvUGVyY2VudFBsdXNCYXNlID0gKG4pID0+IHtcbiAgICAgICAgcmV0dXJuIGAkezEwMCArIG4gKiAxMDB9JWA7XG4gICAgfTtcbiAgICBjb25zdCBzZXRab29tTGV2ZWwgPSB1c2VDYWxsYmFjaygoem9vbUxldmVsKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1pvb21MZXZlbElkeCA9IHpvb21MZXZlbHMuaW5kZXhPZih6b29tTGV2ZWwpO1xuICAgICAgICBjb25zdCBuZXdTY2FsZSA9IHBlcmNlbnRUb1NjYWxlKHpvb21MZXZlbCkgKyBzY2FsZUZpdCAtIDE7XG4gICAgICAgIHNldFNjYWxlKG5ld1NjYWxlKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBnb1RvUGFnZShzY3JvbGxlZEluZGV4KTtcbiAgICAgICAgfSwgMzApO1xuICAgICAgICBzZXRab29tTGV2ZWxJZHgobmV3Wm9vbUxldmVsSWR4KTtcbiAgICB9LCBbc2Nyb2xsZWRJbmRleF0pO1xuICAgIGZ1bmN0aW9uIHBlcmNlbnRUb1NjYWxlKHBlcmNlbnQpIHtcbiAgICAgICAgY29uc3QgbnVtYmVyID0gcGFyc2VJbnQocGVyY2VudCwgMTApO1xuICAgICAgICByZXR1cm4gbnVtYmVyIC8gMTAwO1xuICAgIH1cbiAgICBjb25zdCBzY2FsZURpZmYgPSBNYXRoLnJvdW5kKChzY2FsZSAtIHNjYWxlRml0KSAqIDEwKSAvIDEwO1xuICAgIGNvbnN0IHNjYWxlVGV4dCA9IHRvUGVyY2VudFBsdXNCYXNlKHNjYWxlRGlmZik7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0U2NhbGUoc2NhbGVGaXQpO1xuICAgIH0sIFtzY2FsZUZpdF0pO1xuICAgIGNvbnN0IHpvb21JbkVuYWJsZWQgPSB6b29tTGV2ZWxJZHggPCB6b29tTGV2ZWxzLmxlbmd0aCAtIDE7XG4gICAgY29uc3Qgem9vbU91dEVuYWJsZWQgPSB6b29tTGV2ZWxJZHggPiAwO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjcm9sbGVkSW5kZXgsXG4gICAgICAgIHNldEN1cnJlbnRQYWdlTnVtYmVyLFxuICAgICAgICBzY2FsZSxcbiAgICAgICAgc2V0U2NhbGVGaXQsXG4gICAgICAgIG51bVBhZ2VzLFxuICAgICAgICBzZXROdW1QYWdlcyxcbiAgICAgICAgaGFuZGxlWm9vbUluLFxuICAgICAgICBoYW5kbGVab29tT3V0LFxuICAgICAgICBuZXh0UGFnZSxcbiAgICAgICAgcHJldlBhZ2UsXG4gICAgICAgIHNjYWxlVGV4dCxcbiAgICAgICAgaXNQZGZSZW5kZXJlZCxcbiAgICAgICAgc2V0SXNQZGZSZW5kZXJlZCxcbiAgICAgICAgcGRmRm9jdXNSZWYsXG4gICAgICAgIGdvVG9QYWdlLFxuICAgICAgICBzZXRab29tTGV2ZWwsXG4gICAgICAgIHpvb21JbkVuYWJsZWQsXG4gICAgICAgIHpvb21PdXRFbmFibGVkLFxuICAgIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlUERGVmlld2VyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfViewer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoizedVirtualizedPDF: () => (/* reexport safe */ _view_VirtualizedPdf_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   PDFOptionsBar: () => (/* reexport safe */ _view_PdfOptionsBar_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   PDFViewer: () => (/* reexport safe */ _view_PDFViewer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   PdfFocusProvider: () => (/* reexport safe */ _contexts_PdfFocusContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _contexts_PdfFocusContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contexts/PdfFocusContext.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/contexts/PdfFocusContext.js\");\n/* harmony import */ var _view_PDFViewer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./view/PDFViewer.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PDFViewer.js\");\n/* harmony import */ var _view_PdfOptionsBar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/PdfOptionsBar.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PdfOptionsBar.js\");\n/* harmony import */ var _view_VirtualizedPdf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./view/VirtualizedPdf.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/VirtualizedPdf.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE2RDtBQUNqQjtBQUNRO0FBQ1U7QUFDZ0IiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGRmRm9jdXNQcm92aWRlciBmcm9tICcuL2NvbnRleHRzL1BkZkZvY3VzQ29udGV4dC5qcyc7XG5pbXBvcnQgUERGVmlld2VyIGZyb20gJy4vdmlldy9QREZWaWV3ZXIuanMnO1xuaW1wb3J0IFBERk9wdGlvbnNCYXIgZnJvbSAnLi92aWV3L1BkZk9wdGlvbnNCYXIuanMnO1xuaW1wb3J0IE1lbW9pemVkVmlydHVhbGl6ZWRQREYgZnJvbSAnLi92aWV3L1ZpcnR1YWxpemVkUGRmLmpzJztcbmV4cG9ydCB7IE1lbW9pemVkVmlydHVhbGl6ZWRQREYsIFBERk9wdGlvbnNCYXIsIFBERlZpZXdlciwgUGRmRm9jdXNQcm92aWRlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/utils/multi-line-highlight.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/utils/multi-line-highlight.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multiHighlight: () => (/* binding */ multiHighlight)\n/* harmony export */ });\n/* harmony import */ var fuse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fuse.js */ \"(ssr)/./node_modules/fuse.js/dist/fuse.esm.js\");\n/* harmony import */ var _constants_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/colors.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/colors.js\");\n\n\n/*\n * This function works by breaking the doc up into\n * individual words, finding the longest contiguous sub-sequence\n * that matches the given textToHighlight, and directly\n * setting the background-color on the spans associated with the\n * longest contiguous sub-sequence.\n * TODO: I do wish it was easier to understand / cleaner\n */\nconst multiHighlight = (textToHighlight, pageNumber, color = _constants_colors_js__WEBPACK_IMPORTED_MODULE_0__.DocumentColorEnum.yellow) => {\n    var _a;\n    const highlightColor = _constants_colors_js__WEBPACK_IMPORTED_MODULE_0__.highlightColors[color];\n    const spans = document.querySelectorAll(`div[data-page-number='${pageNumber + 1}'] .react-pdf__Page__textContent.textLayer span`);\n    const words = [];\n    spans.forEach((span, spanIdx) => {\n        const htmlSpan = span;\n        const spanWords = htmlSpan.textContent || '';\n        spanWords.split(' ').map((text, wordIdx) => {\n            words.push({ text, spanIdx, wordIdx });\n        });\n    });\n    let searchString = textToHighlight;\n    searchString = searchString.replace(/\\s{2,}/g, ' ');\n    searchString = searchString.replace(/\\t/g, ' ');\n    searchString = searchString\n        .toString()\n        .trim()\n        .replace(/(\\r\\n|\\n|\\r)/g, '');\n    const searchWords = searchString.split(' ');\n    const lenSearchString = searchWords.length;\n    if (!lenSearchString) {\n        return;\n    }\n    const firstWord = searchWords[0];\n    if (!firstWord) {\n        return;\n    }\n    const searchData = generateDirectSearchData(firstWord, words, lenSearchString);\n    const options = {\n        includeScore: true,\n        threshold: 0.1, // Adjust this threshold according to your requirement.\n        minMatchCharLength: 10, // You might want to increase this for sentences.\n        shouldSort: true,\n        findAllMatches: true,\n        includeMatches: true,\n        keys: ['text'], // This tells Fuse.js to search in the `text` property of the items in your list\n    };\n    // @ts-ignore\n    const fuse = new fuse_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](searchData, options);\n    const result = fuse.search(searchString);\n    if (result.length > 0) {\n        const searchResult = (_a = result[0]) === null || _a === void 0 ? void 0 : _a.item;\n        const startSpan = (searchResult === null || searchResult === void 0 ? void 0 : searchResult.startSpan) || 0;\n        const endSpan = (searchResult === null || searchResult === void 0 ? void 0 : searchResult.endSpan) || 0;\n        const startWordIdx = (searchResult === null || searchResult === void 0 ? void 0 : searchResult.startWordIdx) || 0;\n        const endWordIdx = (searchResult === null || searchResult === void 0 ? void 0 : searchResult.endWordIdx) || 0;\n        for (let i = startSpan; i < endSpan + 1; i++) {\n            const spanToHighlight = spans[i];\n            if (i == startSpan) {\n                if (startWordIdx === 0) {\n                    highlightHtmlElement(spanToHighlight, highlightColor);\n                }\n                else {\n                    partialHighlight(startWordIdx, spanToHighlight, DIRECTION.START);\n                }\n            }\n            else if (i == endSpan) {\n                if (endWordIdx === 0) {\n                    return;\n                }\n                else {\n                    partialHighlight(endWordIdx, spanToHighlight, DIRECTION.END);\n                }\n            }\n            else {\n                highlightHtmlElement(spanToHighlight, highlightColor);\n            }\n        }\n    }\n    return true;\n};\nconst HIGHLIGHT_CLASSNAME = 'opacity-40 saturate-[3] highlighted-by-llama ';\nconst highlightHtmlElement = (div, color) => {\n    const text = div.textContent || '';\n    const newSpan = document.createElement('span');\n    newSpan.className = HIGHLIGHT_CLASSNAME + color;\n    newSpan.innerText = text;\n    div.innerText = '';\n    div.appendChild(newSpan);\n};\nvar DIRECTION;\n(function (DIRECTION) {\n    DIRECTION[DIRECTION[\"START\"] = 0] = \"START\";\n    DIRECTION[DIRECTION[\"END\"] = 1] = \"END\";\n})(DIRECTION || (DIRECTION = {}));\nconst partialHighlight = (idx, span, direction = DIRECTION.START) => {\n    const text = span.textContent;\n    if (!text) {\n        return;\n    }\n    const test = text.split(' ')[idx - 1] || '';\n    const substringToHighlight = test; // replace this with the actual substring\n    // Remove existing content in the span\n    span.textContent = '';\n    // Split the text into pieces by the substring\n    const parts = text.split(substringToHighlight);\n    // For each piece, append it and the highlighted substring (except for the last piece)\n    parts.forEach((part, index) => {\n        if (direction === DIRECTION.START) {\n            if (index == 0) {\n                span.appendChild(document.createTextNode(part));\n            }\n            else {\n                span.appendChild(document.createTextNode(test));\n                const highlightSpan = document.createElement('span');\n                highlightSpan.className = HIGHLIGHT_CLASSNAME;\n                highlightSpan.textContent = part;\n                span.appendChild(highlightSpan);\n            }\n        }\n        if (direction === DIRECTION.END) {\n            if (index == 0) {\n                const highlightSpan = document.createElement('span');\n                highlightSpan.className = HIGHLIGHT_CLASSNAME;\n                highlightSpan.textContent = part;\n                span.appendChild(highlightSpan);\n                // TODO: this is wrong, because it causes a double copy paste issue.\n                // But without it, the offset is incorrect.\n                span.appendChild(document.createTextNode(part));\n            }\n            else {\n                span.appendChild(document.createTextNode(test));\n                span.appendChild(document.createTextNode(part));\n            }\n        }\n    });\n};\nfunction generateDirectSearchData(startString, words, n) {\n    var _a, _b, _c, _d, _e;\n    const searchStrings = [];\n    for (let i = 0; i <= words.length - n; i++) {\n        if (((_a = words[i]) === null || _a === void 0 ? void 0 : _a.text) === startString) {\n            // constructs sentence of length n\n            const text = words.slice(i, i + n).reduce((acc, val) => acc + ' ' + val.text, '');\n            const startSpan = ((_b = words[i]) === null || _b === void 0 ? void 0 : _b.spanIdx) || 0; // have to add these defaults because typescript is dumb\n            const endSpan = ((_c = words[i + n]) === null || _c === void 0 ? void 0 : _c.spanIdx) || 0;\n            const startWordIdx = ((_d = words[i]) === null || _d === void 0 ? void 0 : _d.wordIdx) || 0;\n            const endWordIdx = ((_e = words[i + n]) === null || _e === void 0 ? void 0 : _e.wordIdx) || 0;\n            searchStrings.push({\n                text,\n                startSpan,\n                endSpan,\n                startWordIdx,\n                endWordIdx,\n            });\n        }\n    }\n    return searchStrings;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/utils/multi-line-highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PDFViewer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PDFViewer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _hooks_usePdfViewer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/usePdfViewer.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfViewer.js\");\n/* harmony import */ var _VirtualizedPdf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./VirtualizedPdf.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/VirtualizedPdf.js\");\n/* harmony import */ var _PdfOptionsBar_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PdfOptionsBar.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PdfOptionsBar.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n\n\n\n\n\n\nconst PDFViewer = ({ file, hideOptionBar, containerClassName }) => {\n    const { scrolledIndex, setCurrentPageNumber, scale, setScaleFit, numPages, setNumPages, handleZoomIn, handleZoomOut, nextPage, prevPage, scaleText, pdfFocusRef, goToPage, setZoomLevel, zoomInEnabled, zoomOutEnabled, } = (0,_hooks_usePdfViewer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(file);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__.clsx)('pdf-viewer-container', containerClassName), children: [!hideOptionBar && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_PdfOptionsBar_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], { file: file, scrolledIndex: scrolledIndex, numPages: numPages, scaleText: scaleText, nextPage: nextPage, prevPage: prevPage, handleZoomIn: handleZoomIn, handleZoomOut: handleZoomOut, goToPage: goToPage, setZoomLevel: setZoomLevel, zoomInEnabled: zoomInEnabled, zoomOutEnabled: zoomOutEnabled })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_VirtualizedPdf_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"], { ref: pdfFocusRef, file: file, setIndex: setCurrentPageNumber, scale: scale, setScaleFit: setScaleFit, setNumPages: setNumPages }, `${file.id}`)] }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PDFViewer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS92aWV3L1BERlZpZXdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQStEO0FBQ3JDO0FBQzBCO0FBQ0s7QUFDVjtBQUNuQjtBQUM1QixxQkFBcUIseUNBQXlDO0FBQzlELFlBQVksa05BQWtOLEVBQUUsa0VBQVk7QUFDNU8sWUFBWSx1REFBSyxVQUFVLFdBQVcsMENBQUksNEVBQTRFLHNEQUFJLENBQUMseURBQWEsSUFBSSxvU0FBb1MsSUFBSSxzREFBSSxDQUFDLDBEQUFzQixJQUFJLGdJQUFnSSxLQUFLLFFBQVEsS0FBSztBQUNybUI7QUFDQSxpRUFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS92aWV3L1BERlZpZXdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VQREZWaWV3ZXIgZnJvbSAnLi4vaG9va3MvdXNlUGRmVmlld2VyLmpzJztcbmltcG9ydCBNZW1vaXplZFZpcnR1YWxpemVkUERGIGZyb20gJy4vVmlydHVhbGl6ZWRQZGYuanMnO1xuaW1wb3J0IFBERk9wdGlvbnNCYXIgZnJvbSAnLi9QZGZPcHRpb25zQmFyLmpzJztcbmltcG9ydCB7IGNsc3ggfSBmcm9tICdjbHN4JztcbmNvbnN0IFBERlZpZXdlciA9ICh7IGZpbGUsIGhpZGVPcHRpb25CYXIsIGNvbnRhaW5lckNsYXNzTmFtZSB9KSA9PiB7XG4gICAgY29uc3QgeyBzY3JvbGxlZEluZGV4LCBzZXRDdXJyZW50UGFnZU51bWJlciwgc2NhbGUsIHNldFNjYWxlRml0LCBudW1QYWdlcywgc2V0TnVtUGFnZXMsIGhhbmRsZVpvb21JbiwgaGFuZGxlWm9vbU91dCwgbmV4dFBhZ2UsIHByZXZQYWdlLCBzY2FsZVRleHQsIHBkZkZvY3VzUmVmLCBnb1RvUGFnZSwgc2V0Wm9vbUxldmVsLCB6b29tSW5FbmFibGVkLCB6b29tT3V0RW5hYmxlZCwgfSA9IHVzZVBERlZpZXdlcihmaWxlKTtcbiAgICByZXR1cm4gKF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4KCdwZGYtdmlld2VyLWNvbnRhaW5lcicsIGNvbnRhaW5lckNsYXNzTmFtZSksIGNoaWxkcmVuOiBbIWhpZGVPcHRpb25CYXIgJiYgKF9qc3goUERGT3B0aW9uc0JhciwgeyBmaWxlOiBmaWxlLCBzY3JvbGxlZEluZGV4OiBzY3JvbGxlZEluZGV4LCBudW1QYWdlczogbnVtUGFnZXMsIHNjYWxlVGV4dDogc2NhbGVUZXh0LCBuZXh0UGFnZTogbmV4dFBhZ2UsIHByZXZQYWdlOiBwcmV2UGFnZSwgaGFuZGxlWm9vbUluOiBoYW5kbGVab29tSW4sIGhhbmRsZVpvb21PdXQ6IGhhbmRsZVpvb21PdXQsIGdvVG9QYWdlOiBnb1RvUGFnZSwgc2V0Wm9vbUxldmVsOiBzZXRab29tTGV2ZWwsIHpvb21JbkVuYWJsZWQ6IHpvb21JbkVuYWJsZWQsIHpvb21PdXRFbmFibGVkOiB6b29tT3V0RW5hYmxlZCB9KSksIF9qc3goTWVtb2l6ZWRWaXJ0dWFsaXplZFBERiwgeyByZWY6IHBkZkZvY3VzUmVmLCBmaWxlOiBmaWxlLCBzZXRJbmRleDogc2V0Q3VycmVudFBhZ2VOdW1iZXIsIHNjYWxlOiBzY2FsZSwgc2V0U2NhbGVGaXQ6IHNldFNjYWxlRml0LCBzZXROdW1QYWdlczogc2V0TnVtUGFnZXMgfSwgYCR7ZmlsZS5pZH1gKV0gfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFBERlZpZXdlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PDFViewer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PdfOptionsBar.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PdfOptionsBar.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _icon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icon.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/icon.js\");\n/* harmony import */ var _hooks_usePdfViewer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/usePdfViewer.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfViewer.js\");\n\n\n\n\nconst PDFOptionsBar = ({ file, scrolledIndex, numPages, scaleText, nextPage, prevPage, handleZoomIn, handleZoomOut, goToPage, setZoomLevel, zoomInEnabled, zoomOutEnabled, }) => {\n    const [inputValue, setInputValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(`${scrolledIndex + 1}`);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        setInputValue(`${scrolledIndex + 1}`);\n    }, [scrolledIndex]);\n    const handleZoomSelection = (zoom) => {\n        setZoomLevel(zoom);\n    };\n    const handleChange = (e) => {\n        setInputValue(e.target.value);\n    };\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            const value = parseInt(inputValue, 10);\n            if (!isNaN(value) && value > 0) {\n                scrollToPage(value - 1);\n            }\n        }\n    };\n    const scrollToPage = (page) => {\n        goToPage(page);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"optionBar\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"title truncate\", children: [\"File ID: \", file.id] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"control\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"pageControl\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", { className: \"pageUp\", onClick: prevPage, disabled: scrolledIndex === 0, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_icon_js__WEBPACK_IMPORTED_MODULE_2__.CaretUpIcon, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", { className: \"pageInput\", value: inputValue, onChange: handleChange, onKeyDown: handleKeyDown }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", { className: \"pageDown\", onClick: nextPage, disabled: scrolledIndex === numPages - 1, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_icon_js__WEBPACK_IMPORTED_MODULE_2__.CaretDownIcon, {}) })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { className: \"zoomControl\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", { className: \"zoomOut\", onClick: handleZoomOut, disabled: !zoomOutEnabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_icon_js__WEBPACK_IMPORTED_MODULE_2__.ZoomOutIcon, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"select\", { className: \"zoomSelect\", value: scaleText, onChange: (e) => handleZoomSelection(e.target.value), children: _hooks_usePdfViewer_js__WEBPACK_IMPORTED_MODULE_3__.zoomLevels.map((zoom, index) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"option\", { value: zoom, children: zoom }, index))) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", { className: \"zoomIn\", onClick: handleZoomIn, disabled: !zoomInEnabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_icon_js__WEBPACK_IMPORTED_MODULE_2__.ZoomInIcon, {}) })] })] })] }));\n};\nPDFOptionsBar.displayName = 'PDFOptionsBar';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PDFOptionsBar);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS92aWV3L1BkZk9wdGlvbnNCYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0Q7QUFDbkI7QUFDb0M7QUFDMUI7QUFDdEQseUJBQXlCLG1KQUFtSjtBQUM1Syx3Q0FBd0MsK0NBQVEsSUFBSSxrQkFBa0I7QUFDdEUsSUFBSSxnREFBUztBQUNiLHlCQUF5QixrQkFBa0I7QUFDM0MsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFLLFVBQVUsbUNBQW1DLHVEQUFLLFVBQVUsK0RBQStELEdBQUcsdURBQUssVUFBVSxpQ0FBaUMsdURBQUssVUFBVSxxQ0FBcUMsc0RBQUksYUFBYSxpRkFBaUYsc0RBQUksQ0FBQyxpREFBVyxJQUFJLEdBQUcsR0FBRyxzREFBSSxZQUFZLDZGQUE2RixHQUFHLHNEQUFJLGFBQWEsOEZBQThGLHNEQUFJLENBQUMsbURBQWEsSUFBSSxHQUFHLElBQUksR0FBRyx1REFBSyxVQUFVLHFDQUFxQyxzREFBSSxhQUFhLG1GQUFtRixzREFBSSxDQUFDLGlEQUFXLElBQUksR0FBRyxHQUFHLHNEQUFJLGFBQWEsMkdBQTJHLDhEQUFVLHVCQUF1QixzREFBSSxhQUFhLDZCQUE2QixZQUFZLEdBQUcsc0RBQUksYUFBYSxnRkFBZ0Ysc0RBQUksQ0FBQyxnREFBVSxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUk7QUFDN25DO0FBQ0E7QUFDQSxpRUFBZSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS92aWV3L1BkZk9wdGlvbnNCYXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4cyBhcyBfanN4cywganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDYXJldERvd25JY29uLCBDYXJldFVwSWNvbiwgWm9vbU91dEljb24sIFpvb21Jbkljb24gfSBmcm9tICcuL2ljb24uanMnO1xuaW1wb3J0IHsgem9vbUxldmVscyB9IGZyb20gJy4uL2hvb2tzL3VzZVBkZlZpZXdlci5qcyc7XG5jb25zdCBQREZPcHRpb25zQmFyID0gKHsgZmlsZSwgc2Nyb2xsZWRJbmRleCwgbnVtUGFnZXMsIHNjYWxlVGV4dCwgbmV4dFBhZ2UsIHByZXZQYWdlLCBoYW5kbGVab29tSW4sIGhhbmRsZVpvb21PdXQsIGdvVG9QYWdlLCBzZXRab29tTGV2ZWwsIHpvb21JbkVuYWJsZWQsIHpvb21PdXRFbmFibGVkLCB9KSA9PiB7XG4gICAgY29uc3QgW2lucHV0VmFsdWUsIHNldElucHV0VmFsdWVdID0gdXNlU3RhdGUoYCR7c2Nyb2xsZWRJbmRleCArIDF9YCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0SW5wdXRWYWx1ZShgJHtzY3JvbGxlZEluZGV4ICsgMX1gKTtcbiAgICB9LCBbc2Nyb2xsZWRJbmRleF0pO1xuICAgIGNvbnN0IGhhbmRsZVpvb21TZWxlY3Rpb24gPSAoem9vbSkgPT4ge1xuICAgICAgICBzZXRab29tTGV2ZWwoem9vbSk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgICBzZXRJbnB1dFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQoaW5wdXRWYWx1ZSwgMTApO1xuICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9QYWdlKHZhbHVlIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNjcm9sbFRvUGFnZSA9IChwYWdlKSA9PiB7XG4gICAgICAgIGdvVG9QYWdlKHBhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIChfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJvcHRpb25CYXJcIiwgY2hpbGRyZW46IFtfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ0aXRsZSB0cnVuY2F0ZVwiLCBjaGlsZHJlbjogW1wiRmlsZSBJRDogXCIsIGZpbGUuaWRdIH0pLCBfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjb250cm9sXCIsIGNoaWxkcmVuOiBbX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwicGFnZUNvbnRyb2xcIiwgY2hpbGRyZW46IFtfanN4KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcInBhZ2VVcFwiLCBvbkNsaWNrOiBwcmV2UGFnZSwgZGlzYWJsZWQ6IHNjcm9sbGVkSW5kZXggPT09IDAsIGNoaWxkcmVuOiBfanN4KENhcmV0VXBJY29uLCB7fSkgfSksIF9qc3goXCJpbnB1dFwiLCB7IGNsYXNzTmFtZTogXCJwYWdlSW5wdXRcIiwgdmFsdWU6IGlucHV0VmFsdWUsIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsIG9uS2V5RG93bjogaGFuZGxlS2V5RG93biB9KSwgX2pzeChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogXCJwYWdlRG93blwiLCBvbkNsaWNrOiBuZXh0UGFnZSwgZGlzYWJsZWQ6IHNjcm9sbGVkSW5kZXggPT09IG51bVBhZ2VzIC0gMSwgY2hpbGRyZW46IF9qc3goQ2FyZXREb3duSWNvbiwge30pIH0pXSB9KSwgX2pzeHMoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiem9vbUNvbnRyb2xcIiwgY2hpbGRyZW46IFtfanN4KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcInpvb21PdXRcIiwgb25DbGljazogaGFuZGxlWm9vbU91dCwgZGlzYWJsZWQ6ICF6b29tT3V0RW5hYmxlZCwgY2hpbGRyZW46IF9qc3goWm9vbU91dEljb24sIHt9KSB9KSwgX2pzeChcInNlbGVjdFwiLCB7IGNsYXNzTmFtZTogXCJ6b29tU2VsZWN0XCIsIHZhbHVlOiBzY2FsZVRleHQsIG9uQ2hhbmdlOiAoZSkgPT4gaGFuZGxlWm9vbVNlbGVjdGlvbihlLnRhcmdldC52YWx1ZSksIGNoaWxkcmVuOiB6b29tTGV2ZWxzLm1hcCgoem9vbSwgaW5kZXgpID0+IChfanN4KFwib3B0aW9uXCIsIHsgdmFsdWU6IHpvb20sIGNoaWxkcmVuOiB6b29tIH0sIGluZGV4KSkpIH0pLCBfanN4KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcInpvb21JblwiLCBvbkNsaWNrOiBoYW5kbGVab29tSW4sIGRpc2FibGVkOiAhem9vbUluRW5hYmxlZCwgY2hpbGRyZW46IF9qc3goWm9vbUluSWNvbiwge30pIH0pXSB9KV0gfSldIH0pKTtcbn07XG5QREZPcHRpb25zQmFyLmRpc3BsYXlOYW1lID0gJ1BERk9wdGlvbnNCYXInO1xuZXhwb3J0IGRlZmF1bHQgUERGT3B0aW9uc0JhcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/PdfOptionsBar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/VirtualizedPdf.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/view/VirtualizedPdf.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _wojtekmaj_react_hooks__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @wojtekmaj/react-hooks */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowWidth.js\");\n/* harmony import */ var _wojtekmaj_react_hooks__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @wojtekmaj/react-hooks */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowHeight.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.debounce */ \"(ssr)/./node_modules/lodash.debounce/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_intersection_observer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-intersection-observer */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/react-intersection-observer/index.mjs\");\n/* harmony import */ var react_pdf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-pdf */ \"(ssr)/./node_modules/pdfjs-dist/build/pdf.mjs\");\n/* harmony import */ var react_pdf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-pdf */ \"(ssr)/./node_modules/react-pdf/dist/esm/Page.js\");\n/* harmony import */ var react_pdf__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-pdf */ \"(ssr)/./node_modules/react-pdf/dist/esm/Document.js\");\n/* harmony import */ var react_window__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-window */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/react-window/dist/index.esm.js\");\n/* harmony import */ var _utils_multi_line_highlight_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/multi-line-highlight.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/utils/multi-line-highlight.js\");\n/* harmony import */ var _hooks_usePdfFocus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hooks/usePdfFocus.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/hooks/usePdfFocus.js\");\n/* harmony import */ var _constants_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants/constants.js */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/constants/constants.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst pdfjsOptions = react_pdf__WEBPACK_IMPORTED_MODULE_3__.GlobalWorkerOptions;\nconst pdfjsVersion = react_pdf__WEBPACK_IMPORTED_MODULE_3__.version;\npdfjsOptions.workerSrc =\n    '//unpkg.com/pdfjs-dist@' + String(pdfjsVersion) + '/legacy/build/pdf.worker.min.mjs';\nconst { HORIZONTAL_GUTTER_SIZE_PX, OBSERVER_THRESHOLD_PERCENTAGE, PAGE_HEIGHT, PDF_HEADER_SIZE_PX, PDF_SIDEBAR_SIZE_PX, PDF_WIDTH_PERCENTAGE, VERTICAL_GUTTER_SIZE_PX, } = _constants_constants_js__WEBPACK_IMPORTED_MODULE_4__.PDF_DISPLAY_DEFAULTS;\nconst PageRenderer = ({ file, pageNumber, style, scale, listWidth, setPageInView, }) => {\n    var _a;\n    const { pdfFocusState } = (0,_hooks_usePdfFocus_js__WEBPACK_IMPORTED_MODULE_5__.usePdfFocus)();\n    const [shouldCenter, setShouldCenter] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [isHighlighted, setIsHighlighted] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    // Get which page is in view from an intersection observer\n    const { ref: inViewRef, inView } = (0,react_intersection_observer__WEBPACK_IMPORTED_MODULE_6__.useInView)({\n        threshold: OBSERVER_THRESHOLD_PERCENTAGE * Math.min(1 / scale, 1),\n    });\n    // Prevents black flickering, which is fixed in 7.1.2, but we must\n    // use 6.2.2 because highlights are broken in 7.1.2 :/\n    // https://github.com/wojtekmaj/react-pdf/issues/1340#issuecomment-1483869537\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    // Use `useCallback` so we don't recreate the function on each render\n    // Need to set two Refs, one for the intersection observer, one for the container\n    const setRefs = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((node) => {\n        // Ref's from useRef needs to have the node assigned to `current`\n        containerRef.current =\n            node;\n        // Callback refs, like the one from `useInView`, is a function that takes the node as an argument\n        inViewRef(node);\n    }, [inViewRef]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {\n        if (inView) {\n            setPageInView(pageNumber);\n        }\n    }, [inView, pageNumber, setPageInView, inViewRef]);\n    const hidePageCanvas = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {\n        if (containerRef.current) {\n            const canvas = containerRef.current.querySelector('canvas');\n            if (canvas)\n                canvas.style.visibility = 'hidden';\n        }\n    }, [containerRef]);\n    const showPageCanvas = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {\n        if (containerRef.current) {\n            const canvas = containerRef.current.querySelector('canvas');\n            if (canvas)\n                canvas.style.visibility = 'visible';\n        }\n    }, [containerRef]);\n    const onPageLoadSuccess = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {\n        hidePageCanvas();\n    }, [hidePageCanvas]);\n    const onPageRenderError = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(() => {\n        showPageCanvas();\n    }, [showPageCanvas]);\n    const onPageRenderSuccess = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((page) => {\n        // console.log(\"triggering rerender for page\", index);\n        showPageCanvas();\n        maybeHighlight();\n        // react-pdf absolutely pins the pdf into the upper left corner\n        // so when the scale changes and the width is smaller than the parent\n        // container, we need to use flex box to center the pdf.\n        //\n        // why not always center the pdf? when this condition is not true,\n        // display: flex breaks scrolling. not quite sure why.\n        if (listWidth > page.width) {\n            setShouldCenter(true);\n        }\n        else {\n            setShouldCenter(false);\n        }\n    }, [showPageCanvas, listWidth]);\n    const documentFocused = pdfFocusState.documentId === file.id;\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {\n        maybeHighlight();\n    }, [documentFocused, inView]);\n    const maybeHighlight = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__(() => {\n        var _a;\n        if (documentFocused &&\n            ((_a = pdfFocusState.citation) === null || _a === void 0 ? void 0 : _a.pageNumber) === pageNumber + 1 &&\n            !isHighlighted) {\n            (0,_utils_multi_line_highlight_js__WEBPACK_IMPORTED_MODULE_7__.multiHighlight)(pdfFocusState.citation.snippet, pageNumber, pdfFocusState.citation.color);\n            setIsHighlighted(true);\n        }\n    }, 50), [(_a = pdfFocusState.citation) === null || _a === void 0 ? void 0 : _a.snippet, pageNumber, isHighlighted]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: setRefs, style: Object.assign(Object.assign({}, style), { \n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            padding: '10px', backgroundColor: 'WhiteSmoke', display: `${shouldCenter ? 'flex' : ''}`, justifyContent: 'center' }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_pdf__WEBPACK_IMPORTED_MODULE_8__[\"default\"], { scale: scale, onRenderSuccess: onPageRenderSuccess, onLoadSuccess: onPageLoadSuccess, onRenderError: onPageRenderError, pageIndex: pageNumber, renderAnnotationLayer: true }) }, `${file.url}-${pageNumber}`));\n};\n// eslint-disable-next-line react/display-name\nconst VirtualizedPDF = (0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(({ file, scale, setIndex, setScaleFit, setNumPages }, ref) => {\n    const windowWidth = (0,_wojtekmaj_react_hooks__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n    const windowHeight = (0,_wojtekmaj_react_hooks__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n    const height = (windowHeight || 0) - PDF_HEADER_SIZE_PX;\n    const newWidthPx = PDF_WIDTH_PERCENTAGE * 0.01 * (windowWidth || 0) -\n        PDF_SIDEBAR_SIZE_PX -\n        HORIZONTAL_GUTTER_SIZE_PX;\n    const [pdf, setPdf] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const listRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {\n        // Changing scale changes the measurement of the item, so we need to bust the cache, see:\n        // https://github.com/bvaughn/react-window/issues/344#issuecomment-540583132\n        if (listRef.current) {\n            listRef.current.resetAfterIndex(0);\n        }\n    }, [scale]);\n    function onDocumentLoadSuccess(nextPdf) {\n        setPdf(nextPdf);\n    }\n    function getPageHeight() {\n        const actualHeight = (PAGE_HEIGHT + VERTICAL_GUTTER_SIZE_PX) * scale;\n        return actualHeight;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {\n        if (!pdf) {\n            return;\n        }\n        function loadFirstPage() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (pdf) {\n                    yield pdf\n                        .getPage(1)\n                        .then((page) => {\n                        const pageViewport = page.getViewport({ scale: 1 });\n                        const pageWidth = pageViewport.width;\n                        const computedScaleFit = newWidthPx / pageWidth;\n                        // set scale to fit to page\n                        setScaleFit(computedScaleFit);\n                    });\n                }\n            });\n        }\n        loadFirstPage().catch(() => console.log('page load error'));\n        setNumPages(pdf.numPages);\n    }, [pdf, setNumPages, setScaleFit, newWidthPx]);\n    react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle(ref, () => ({\n        // This function can be called from the parent component\n        scrollToPage: (page) => {\n            onItemClick({ pageNumber: page });\n        },\n    }));\n    const onItemClick = ({ pageNumber: itemPageNumber }) => {\n        const fixedPosition = itemPageNumber * (PAGE_HEIGHT + VERTICAL_GUTTER_SIZE_PX) * scale;\n        if (listRef.current) {\n            listRef.current.scrollTo(fixedPosition);\n        }\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"pdfDocument\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_pdf__WEBPACK_IMPORTED_MODULE_11__[\"default\"], { onItemClick: onItemClick, file: file.url, onLoadSuccess: onDocumentLoadSuccess, loading: \"Loading...\", children: pdf ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_window__WEBPACK_IMPORTED_MODULE_12__.VariableSizeList, { ref: listRef, width: newWidthPx + HORIZONTAL_GUTTER_SIZE_PX, height: height, itemCount: pdf.numPages, itemSize: getPageHeight, estimatedItemSize: (PAGE_HEIGHT + VERTICAL_GUTTER_SIZE_PX) * scale, children: ({ index, style }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PageRenderer, { file: file, pageNumber: index, style: style, scale: scale, listWidth: newWidthPx, setPageInView: setIndex }, `page-${index}`)) })) : null }, file.url) }));\n});\nconst MemoizedVirtualizedPDF = (0,react__WEBPACK_IMPORTED_MODULE_2__.memo)(VirtualizedPDF);\nMemoizedVirtualizedPDF.displayName = 'VirtualizedPDF';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MemoizedVirtualizedPDF);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/VirtualizedPdf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/icon.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/dist/esm/view/icon.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CaretDownIcon: () => (/* binding */ CaretDownIcon),\n/* harmony export */   CaretUpIcon: () => (/* binding */ CaretUpIcon),\n/* harmony export */   ZoomInIcon: () => (/* binding */ ZoomInIcon),\n/* harmony export */   ZoomOutIcon: () => (/* binding */ ZoomOutIcon)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\nconst CaretDownIcon = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }, props, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"m6 9 6 6 6-6\" }) })));\nconst CaretUpIcon = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }, props, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", { d: \"m18 15-6-6-6 6\" }) })));\nconst ZoomOutIcon = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", { cx: \"11\", cy: \"11\", r: \"8\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", { x1: \"21\", x2: \"16.65\", y1: \"21\", y2: \"16.65\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", { x1: \"8\", x2: \"14\", y1: \"11\", y2: \"11\" })] })));\nconst ZoomInIcon = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }, props, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", { cx: \"11\", cy: \"11\", r: \"8\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", { x1: \"21\", x2: \"16.65\", y1: \"21\", y2: \"16.65\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", { x1: \"11\", x2: \"11\", y1: \"8\", y2: \"14\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", { x1: \"8\", x2: \"14\", y1: \"11\", y2: \"11\" })] })));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9kaXN0L2VzbS92aWV3L2ljb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0Q7QUFDeEQsa0NBQWtDLHNEQUFJLHdCQUF3QiwrTEFBK0wsV0FBVyxVQUFVLHNEQUFJLFdBQVcsbUJBQW1CLEdBQUc7QUFDdlQsZ0NBQWdDLHNEQUFJLHdCQUF3QiwrTEFBK0wsV0FBVyxVQUFVLHNEQUFJLFdBQVcscUJBQXFCLEdBQUc7QUFDdlQsZ0NBQWdDLHVEQUFLLHdCQUF3QiwrTEFBK0wsV0FBVyxXQUFXLHNEQUFJLGFBQWEsNEJBQTRCLEdBQUcsc0RBQUksV0FBVyw4Q0FBOEMsR0FBRyxzREFBSSxXQUFXLHVDQUF1QyxJQUFJO0FBQzViLCtCQUErQix1REFBSyx3QkFBd0IsK0xBQStMLFdBQVcsV0FBVyxzREFBSSxhQUFhLDRCQUE0QixHQUFHLHNEQUFJLFdBQVcsOENBQThDLEdBQUcsc0RBQUksV0FBVyx1Q0FBdUMsR0FBRyxzREFBSSxXQUFXLHVDQUF1QyxJQUFJIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L3BkZi12aWV3ZXIvZGlzdC9lc20vdmlldy9pY29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3QgQ2FyZXREb3duSWNvbiA9IChwcm9wcykgPT4gKF9qc3goXCJzdmdcIiwgT2JqZWN0LmFzc2lnbih7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiBcIjI0XCIsIGhlaWdodDogXCIyNFwiLCB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLCBmaWxsOiBcIm5vbmVcIiwgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLCBzdHJva2VXaWR0aDogXCIyXCIsIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIiwgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIiB9LCBwcm9wcywgeyBjaGlsZHJlbjogX2pzeChcInBhdGhcIiwgeyBkOiBcIm02IDkgNiA2IDYtNlwiIH0pIH0pKSk7XG5leHBvcnQgY29uc3QgQ2FyZXRVcEljb24gPSAocHJvcHMpID0+IChfanN4KFwic3ZnXCIsIE9iamVjdC5hc3NpZ24oeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogXCIyNFwiLCBoZWlnaHQ6IFwiMjRcIiwgdmlld0JveDogXCIwIDAgMjQgMjRcIiwgZmlsbDogXCJub25lXCIsIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIiwgc3Ryb2tlV2lkdGg6IFwiMlwiLCBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIgfSwgcHJvcHMsIHsgY2hpbGRyZW46IF9qc3goXCJwYXRoXCIsIHsgZDogXCJtMTggMTUtNi02LTYgNlwiIH0pIH0pKSk7XG5leHBvcnQgY29uc3QgWm9vbU91dEljb24gPSAocHJvcHMpID0+IChfanN4cyhcInN2Z1wiLCBPYmplY3QuYXNzaWduKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IFwiMjRcIiwgaGVpZ2h0OiBcIjI0XCIsIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsIGZpbGw6IFwibm9uZVwiLCBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsIHN0cm9rZVdpZHRoOiBcIjJcIiwgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLCBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiIH0sIHByb3BzLCB7IGNoaWxkcmVuOiBbX2pzeChcImNpcmNsZVwiLCB7IGN4OiBcIjExXCIsIGN5OiBcIjExXCIsIHI6IFwiOFwiIH0pLCBfanN4KFwibGluZVwiLCB7IHgxOiBcIjIxXCIsIHgyOiBcIjE2LjY1XCIsIHkxOiBcIjIxXCIsIHkyOiBcIjE2LjY1XCIgfSksIF9qc3goXCJsaW5lXCIsIHsgeDE6IFwiOFwiLCB4MjogXCIxNFwiLCB5MTogXCIxMVwiLCB5MjogXCIxMVwiIH0pXSB9KSkpO1xuZXhwb3J0IGNvbnN0IFpvb21Jbkljb24gPSAocHJvcHMpID0+IChfanN4cyhcInN2Z1wiLCBPYmplY3QuYXNzaWduKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IFwiMjRcIiwgaGVpZ2h0OiBcIjI0XCIsIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsIGZpbGw6IFwibm9uZVwiLCBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsIHN0cm9rZVdpZHRoOiBcIjJcIiwgc3Ryb2tlTGluZWNhcDogXCJyb3VuZFwiLCBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiIH0sIHByb3BzLCB7IGNoaWxkcmVuOiBbX2pzeChcImNpcmNsZVwiLCB7IGN4OiBcIjExXCIsIGN5OiBcIjExXCIsIHI6IFwiOFwiIH0pLCBfanN4KFwibGluZVwiLCB7IHgxOiBcIjIxXCIsIHgyOiBcIjE2LjY1XCIsIHkxOiBcIjIxXCIsIHkyOiBcIjE2LjY1XCIgfSksIF9qc3goXCJsaW5lXCIsIHsgeDE6IFwiMTFcIiwgeDI6IFwiMTFcIiwgeTE6IFwiOFwiLCB5MjogXCIxNFwiIH0pLCBfanN4KFwibGluZVwiLCB7IHgxOiBcIjhcIiwgeDI6IFwiMTRcIiwgeTE6IFwiMTFcIiwgeTI6IFwiMTFcIiB9KV0gfSkpKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/dist/esm/view/icon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useEventListener.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useEventListener.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useEventListener)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useEventListener(element, type, listener) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        if (!element) {\n            return undefined;\n        }\n        element.addEventListener(type, listener);\n        return function () {\n            element.removeEventListener(type, listener);\n        };\n    }, [element, type, listener]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9ub2RlX21vZHVsZXMvQHdvanRla21hai9yZWFjdC1ob29rcy9kaXN0L2VzbS91c2VFdmVudExpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrQztBQUNuQjtBQUNmLElBQUksZ0RBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9wZGYtdmlld2VyL25vZGVfbW9kdWxlcy9Ad29qdGVrbWFqL3JlYWN0LWhvb2tzL2Rpc3QvZXNtL3VzZUV2ZW50TGlzdGVuZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICB9LCBbZWxlbWVudCwgdHlwZSwgbGlzdGVuZXJdKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useEventListener.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowHeight.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowHeight.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useWindowHeight)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _useEventListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useEventListener */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useEventListener.js\");\n\n\nvar isBrowser = typeof document !== 'undefined';\n/**\n * Returns the interior height of the window in pixels.\n *\n * @returns {number | null} Height of the window in pixels\n */\nfunction useWindowHeight() {\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isBrowser ? window.innerHeight : null), windowHeight = _a[0], setWindowHeight = _a[1];\n    var getWindowHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () { return setWindowHeight(window.innerHeight); }, []);\n    (0,_useEventListener__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(isBrowser ? window : null, 'resize', getWindowHeight);\n    return windowHeight;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9ub2RlX21vZHVsZXMvQHdvanRla21hai9yZWFjdC1ob29rcy9kaXN0L2VzbS91c2VXaW5kb3dIZWlnaHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QztBQUNJO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ2U7QUFDZixhQUFhLCtDQUFRO0FBQ3JCLDBCQUEwQixrREFBVyxlQUFlLDZDQUE2QztBQUNqRyxJQUFJLDZEQUFnQjtBQUNwQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L3BkZi12aWV3ZXIvbm9kZV9tb2R1bGVzL0B3b2p0ZWttYWovcmVhY3QtaG9va3MvZGlzdC9lc20vdXNlV2luZG93SGVpZ2h0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VFdmVudExpc3RlbmVyIGZyb20gJy4vdXNlRXZlbnRMaXN0ZW5lcic7XG52YXIgaXNCcm93c2VyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbi8qKlxuICogUmV0dXJucyB0aGUgaW50ZXJpb3IgaGVpZ2h0IG9mIHRoZSB3aW5kb3cgaW4gcGl4ZWxzLlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXIgfCBudWxsfSBIZWlnaHQgb2YgdGhlIHdpbmRvdyBpbiBwaXhlbHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlV2luZG93SGVpZ2h0KCkge1xuICAgIHZhciBfYSA9IHVzZVN0YXRlKGlzQnJvd3NlciA/IHdpbmRvdy5pbm5lckhlaWdodCA6IG51bGwpLCB3aW5kb3dIZWlnaHQgPSBfYVswXSwgc2V0V2luZG93SGVpZ2h0ID0gX2FbMV07XG4gICAgdmFyIGdldFdpbmRvd0hlaWdodCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFdpbmRvd0hlaWdodCh3aW5kb3cuaW5uZXJIZWlnaHQpOyB9LCBbXSk7XG4gICAgdXNlRXZlbnRMaXN0ZW5lcihpc0Jyb3dzZXIgPyB3aW5kb3cgOiBudWxsLCAncmVzaXplJywgZ2V0V2luZG93SGVpZ2h0KTtcbiAgICByZXR1cm4gd2luZG93SGVpZ2h0O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowHeight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowWidth.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowWidth.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useWindowWidth)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _useEventListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useEventListener */ \"(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useEventListener.js\");\n\n\nvar isBrowser = typeof document !== 'undefined';\n/**\n * Returns the interior width of the window in pixels.\n *\n * @returns {number | null} Width of the window in pixels\n */\nfunction useWindowWidth() {\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isBrowser ? window.innerWidth : null), windowWidth = _a[0], setWindowWidth = _a[1];\n    var getWindowWidth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () { return setWindowWidth(window.innerWidth); }, []);\n    (0,_useEventListener__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(isBrowser ? window : null, 'resize', getWindowWidth);\n    return windowWidth;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9ub2RlX21vZHVsZXMvQHdvanRla21hai9yZWFjdC1ob29rcy9kaXN0L2VzbS91c2VXaW5kb3dXaWR0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQ0k7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDZTtBQUNmLGFBQWEsK0NBQVE7QUFDckIseUJBQXlCLGtEQUFXLGVBQWUsMkNBQTJDO0FBQzlGLElBQUksNkRBQWdCO0FBQ3BCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvcGRmLXZpZXdlci9ub2RlX21vZHVsZXMvQHdvanRla21hai9yZWFjdC1ob29rcy9kaXN0L2VzbS91c2VXaW5kb3dXaWR0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRXZlbnRMaXN0ZW5lciBmcm9tICcuL3VzZUV2ZW50TGlzdGVuZXInO1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG4vKipcbiAqIFJldHVybnMgdGhlIGludGVyaW9yIHdpZHRoIG9mIHRoZSB3aW5kb3cgaW4gcGl4ZWxzLlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXIgfCBudWxsfSBXaWR0aCBvZiB0aGUgd2luZG93IGluIHBpeGVsc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VXaW5kb3dXaWR0aCgpIHtcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShpc0Jyb3dzZXIgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IG51bGwpLCB3aW5kb3dXaWR0aCA9IF9hWzBdLCBzZXRXaW5kb3dXaWR0aCA9IF9hWzFdO1xuICAgIHZhciBnZXRXaW5kb3dXaWR0aCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFdpbmRvd1dpZHRoKHdpbmRvdy5pbm5lcldpZHRoKTsgfSwgW10pO1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoaXNCcm93c2VyID8gd2luZG93IDogbnVsbCwgJ3Jlc2l6ZScsIGdldFdpbmRvd1dpZHRoKTtcbiAgICByZXR1cm4gd2luZG93V2lkdGg7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/@wojtekmaj/react-hooks/dist/esm/useWindowWidth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/react-intersection-observer/index.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/node_modules/react-intersection-observer/index.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InView: () => (/* binding */ InView),\n/* harmony export */   defaultFallbackInView: () => (/* binding */ defaultFallbackInView),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   useInView: () => (/* binding */ useInView)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ InView,defaultFallbackInView,observe,useInView auto */ // src/InView.tsx\n\n// src/observe.ts\nvar observerMap = /* @__PURE__ */ new Map();\nvar RootIds = /* @__PURE__ */ new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = void 0;\nfunction defaultFallbackInView(inView) {\n    unsupportedValue = inView;\n}\nfunction getRootId(root) {\n    if (!root) return \"0\";\n    if (RootIds.has(root)) return RootIds.get(root);\n    rootId += 1;\n    RootIds.set(root, rootId.toString());\n    return RootIds.get(root);\n}\nfunction optionsToId(options) {\n    return Object.keys(options).sort().filter((key)=>options[key] !== void 0).map((key)=>{\n        return `${key}_${key === \"root\" ? getRootId(options.root) : options[key]}`;\n    }).toString();\n}\nfunction createObserver(options) {\n    let id = optionsToId(options);\n    let instance = observerMap.get(id);\n    if (!instance) {\n        const elements = /* @__PURE__ */ new Map();\n        let thresholds;\n        const observer = new IntersectionObserver((entries)=>{\n            entries.forEach((entry)=>{\n                const inView = entry.isIntersecting && thresholds.some((threshold)=>entry.intersectionRatio >= threshold);\n                if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n                    entry.isVisible = inView;\n                }\n                elements.get(entry.target)?.forEach((callback)=>{\n                    callback(inView, entry);\n                });\n            });\n        }, options);\n        thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [\n            options.threshold || 0\n        ]);\n        instance = {\n            id,\n            observer,\n            elements\n        };\n        observerMap.set(id, instance);\n    }\n    return instance;\n}\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n    if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n        const bounds = element.getBoundingClientRect();\n        callback(fallbackInView, {\n            isIntersecting: fallbackInView,\n            target: element,\n            intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n            time: 0,\n            boundingClientRect: bounds,\n            intersectionRect: bounds,\n            rootBounds: bounds\n        });\n        return ()=>{};\n    }\n    const { id, observer, elements } = createObserver(options);\n    let callbacks = elements.get(element) || [];\n    if (!elements.has(element)) {\n        elements.set(element, callbacks);\n    }\n    callbacks.push(callback);\n    observer.observe(element);\n    return function unobserve() {\n        callbacks.splice(callbacks.indexOf(callback), 1);\n        if (callbacks.length === 0) {\n            elements.delete(element);\n            observer.unobserve(element);\n        }\n        if (elements.size === 0) {\n            observer.disconnect();\n            observerMap.delete(id);\n        }\n    };\n}\n// src/InView.tsx\nfunction isPlainChildren(props) {\n    return typeof props.children !== \"function\";\n}\nvar InView = class extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props){\n        super(props), this.node = null, this._unobserveCb = null, this.handleNode = (node)=>{\n            if (this.node) {\n                this.unobserve();\n                if (!node && !this.props.triggerOnce && !this.props.skip) {\n                    this.setState({\n                        inView: !!this.props.initialInView,\n                        entry: void 0\n                    });\n                }\n            }\n            this.node = node ? node : null;\n            this.observeNode();\n        }, this.handleChange = (inView, entry)=>{\n            if (inView && this.props.triggerOnce) {\n                this.unobserve();\n            }\n            if (!isPlainChildren(this.props)) {\n                this.setState({\n                    inView,\n                    entry\n                });\n            }\n            if (this.props.onChange) {\n                this.props.onChange(inView, entry);\n            }\n        };\n        this.state = {\n            inView: !!props.initialInView,\n            entry: void 0\n        };\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n            this.unobserve();\n            this.observeNode();\n        }\n    }\n    componentWillUnmount() {\n        this.unobserve();\n        this.node = null;\n    }\n    observeNode() {\n        if (!this.node || this.props.skip) return;\n        const { threshold, root, rootMargin, trackVisibility, delay, fallbackInView } = this.props;\n        this._unobserveCb = observe(this.node, this.handleChange, {\n            threshold,\n            root,\n            rootMargin,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay\n        }, fallbackInView);\n    }\n    unobserve() {\n        if (this._unobserveCb) {\n            this._unobserveCb();\n            this._unobserveCb = null;\n        }\n    }\n    render() {\n        const { children } = this.props;\n        if (typeof children === \"function\") {\n            const { inView, entry } = this.state;\n            return children({\n                inView,\n                entry,\n                ref: this.handleNode\n            });\n        }\n        const { as, triggerOnce, threshold, root, rootMargin, onChange, skip, trackVisibility, delay, initialInView, fallbackInView, ...props } = this.props;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(as || \"div\", {\n            ref: this.handleNode,\n            ...props\n        }, children);\n    }\n};\n// src/useInView.tsx\n\nfunction useInView({ threshold, delay, trackVisibility, rootMargin, root, triggerOnce, skip, initialInView, fallbackInView, onChange } = {}) {\n    const [ref, setRef] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const callback = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        inView: !!initialInView,\n        entry: void 0\n    });\n    callback.current = onChange;\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect({\n        \"useInView.useEffect\": ()=>{\n            if (skip || !ref) return;\n            let unobserve;\n            unobserve = observe(ref, {\n                \"useInView.useEffect\": (inView, entry)=>{\n                    setState({\n                        inView,\n                        entry\n                    });\n                    if (callback.current) callback.current(inView, entry);\n                    if (entry.isIntersecting && triggerOnce && unobserve) {\n                        unobserve();\n                        unobserve = void 0;\n                    }\n                }\n            }[\"useInView.useEffect\"], {\n                root,\n                rootMargin,\n                threshold,\n                // @ts-ignore\n                trackVisibility,\n                // @ts-ignore\n                delay\n            }, fallbackInView);\n            return ({\n                \"useInView.useEffect\": ()=>{\n                    if (unobserve) {\n                        unobserve();\n                    }\n                }\n            })[\"useInView.useEffect\"];\n        }\n    }[\"useInView.useEffect\"], // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        // If the threshold is an array, convert it to a string, so it won't change between renders.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        Array.isArray(threshold) ? threshold.toString() : threshold,\n        ref,\n        root,\n        rootMargin,\n        triggerOnce,\n        skip,\n        trackVisibility,\n        fallbackInView,\n        delay\n    ]);\n    const entryTarget = state.entry?.target;\n    const previousEntryTarget = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n        previousEntryTarget.current = entryTarget;\n        setState({\n            inView: !!initialInView,\n            entry: void 0\n        });\n    }\n    const result = [\n        setRef,\n        state.inView,\n        state.entry\n    ];\n    result.ref = result[0];\n    result.inView = result[1];\n    result.entry = result[2];\n    return result;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/react-intersection-observer/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/react-window/dist/index.esm.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@llamaindex/pdf-viewer/node_modules/react-window/dist/index.esm.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedSizeGrid: () => (/* binding */ FixedSizeGrid),\n/* harmony export */   FixedSizeList: () => (/* binding */ FixedSizeList),\n/* harmony export */   VariableSizeGrid: () => (/* binding */ VariableSizeGrid),\n/* harmony export */   VariableSizeList: () => (/* binding */ VariableSizeList),\n/* harmony export */   areEqual: () => (/* binding */ areEqual),\n/* harmony export */   shouldComponentUpdate: () => (/* binding */ shouldComponentUpdate)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n\n\n\n\n\n\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (true) {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push((0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(react__WEBPACK_IMPORTED_MODULE_3__.PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (true) {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (true) {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (true) {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = (0,memoize_one__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var _this$props2 = this.props,\n          itemCount = _this$props2.itemCount,\n          layout = _this$props2.layout;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n\n      var scrollbarSize = 0;\n\n      if (this._outerRef) {\n        var outerRef = this._outerRef;\n\n        if (layout === 'vertical') {\n          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n        } else {\n          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n        }\n      }\n\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          initialScrollOffset = _this$props3.initialScrollOffset,\n          layout = _this$props3.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props4 = this.props,\n          direction = _this$props4.direction,\n          layout = _this$props4.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          className = _this$props5.className,\n          direction = _this$props5.direction,\n          height = _this$props5.height,\n          innerRef = _this$props5.innerRef,\n          innerElementType = _this$props5.innerElementType,\n          innerTagName = _this$props5.innerTagName,\n          itemCount = _this$props5.itemCount,\n          itemData = _this$props5.itemData,\n          _this$props5$itemKey = _this$props5.itemKey,\n          itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey,\n          layout = _this$props5.layout,\n          outerElementType = _this$props5.outerElementType,\n          outerTagName = _this$props5.outerTagName,\n          style = _this$props5.style,\n          useIsScrolling = _this$props5.useIsScrolling,\n          width = _this$props5.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push((0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, (0,react__WEBPACK_IMPORTED_MODULE_3__.createElement)(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props6 = this.props,\n          itemCount = _this$props6.itemCount,\n          overscanCount = _this$props6.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(react__WEBPACK_IMPORTED_MODULE_3__.PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (true) {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (true) {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (true) {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (true) {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _excluded = [\"style\"],\n    _excluded2 = [\"style\"];\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(prevProps, _excluded);\n\n  var nextStyle = nextProps.style,\n      nextRest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(nextProps, _excluded2);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@llamaindex/pdf-viewer/node_modules/react-window/dist/index.esm.js\n");

/***/ })

};
;