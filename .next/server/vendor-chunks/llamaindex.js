"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/llamaindex";
exports.ids = ["vendor-chunks/llamaindex"];
exports.modules = {

/***/ "(rsc)/./node_modules/llamaindex/dist/OutputParser.js":
/*!******************************************************!*\
  !*** ./node_modules/llamaindex/dist/OutputParser.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SubQuestionOutputParser: () => (/* binding */ SubQuestionOutputParser),\n/* harmony export */   parseJsonMarkdown: () => (/* binding */ parseJsonMarkdown)\n/* harmony export */ });\n/**\n * Error class for output parsing. Due to the nature of LLMs, anytime we use LLM\n * to generate structured output, it's possible that it will hallucinate something\n * that doesn't match the expected output format. So make sure to catch these\n * errors in production.\n */ class OutputParserError extends Error {\n    cause;\n    output;\n    constructor(message, options = {}){\n        super(message, options); // https://github.com/tc39/proposal-error-cause\n        this.name = \"OutputParserError\";\n        if (!this.cause) {\n            // Need to check for those environments that have implemented the proposal\n            this.cause = options.cause;\n        }\n        this.output = options.output;\n        // This line is to maintain proper stack trace in V8\n        // (https://v8.dev/docs/stack-trace-api)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, OutputParserError);\n        }\n    }\n}\n/**\n *\n * @param text A markdown block with JSON\n * @returns parsed JSON object\n */ function parseJsonMarkdown(text) {\n    text = text.trim();\n    const left_square = text.indexOf(\"[\");\n    const left_brace = text.indexOf(\"{\");\n    let left;\n    let right;\n    if (left_square < left_brace && left_square != -1) {\n        left = left_square;\n        right = text.lastIndexOf(\"]\");\n    } else {\n        left = left_brace;\n        right = text.lastIndexOf(\"}\");\n    }\n    const jsonText = text.substring(left, right + 1);\n    try {\n        //Single JSON object case\n        if (left_square === -1) {\n            return [\n                JSON.parse(jsonText)\n            ];\n        }\n        //Multiple JSON object case.\n        return JSON.parse(jsonText);\n    } catch (e) {\n        throw new OutputParserError(\"Not a json markdown\", {\n            output: text\n        });\n    }\n}\n/**\n * SubQuestionOutputParser is used to parse the output of the SubQuestionGenerator.\n */ class SubQuestionOutputParser {\n    parse(output) {\n        const parsed = parseJsonMarkdown(output);\n        return {\n            rawOutput: output,\n            parsedOutput: parsed\n        };\n    }\n    format(output) {\n        return output;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L091dHB1dFBhcnNlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFXO0FBQ1g7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9PdXRwdXRQYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFcnJvciBjbGFzcyBmb3Igb3V0cHV0IHBhcnNpbmcuIER1ZSB0byB0aGUgbmF0dXJlIG9mIExMTXMsIGFueXRpbWUgd2UgdXNlIExMTVxuICogdG8gZ2VuZXJhdGUgc3RydWN0dXJlZCBvdXRwdXQsIGl0J3MgcG9zc2libGUgdGhhdCBpdCB3aWxsIGhhbGx1Y2luYXRlIHNvbWV0aGluZ1xuICogdGhhdCBkb2Vzbid0IG1hdGNoIHRoZSBleHBlY3RlZCBvdXRwdXQgZm9ybWF0LiBTbyBtYWtlIHN1cmUgdG8gY2F0Y2ggdGhlc2VcbiAqIGVycm9ycyBpbiBwcm9kdWN0aW9uLlxuICovIGNsYXNzIE91dHB1dFBhcnNlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNhdXNlO1xuICAgIG91dHB1dDtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0ge30pe1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbiAgICAgICAgdGhpcy5uYW1lID0gXCJPdXRwdXRQYXJzZXJFcnJvclwiO1xuICAgICAgICBpZiAoIXRoaXMuY2F1c2UpIHtcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gY2hlY2sgZm9yIHRob3NlIGVudmlyb25tZW50cyB0aGF0IGhhdmUgaW1wbGVtZW50ZWQgdGhlIHByb3Bvc2FsXG4gICAgICAgICAgICB0aGlzLmNhdXNlID0gb3B0aW9ucy5jYXVzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm91dHB1dCA9IG9wdGlvbnMub3V0cHV0O1xuICAgICAgICAvLyBUaGlzIGxpbmUgaXMgdG8gbWFpbnRhaW4gcHJvcGVyIHN0YWNrIHRyYWNlIGluIFY4XG4gICAgICAgIC8vIChodHRwczovL3Y4LmRldi9kb2NzL3N0YWNrLXRyYWNlLWFwaSlcbiAgICAgICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBPdXRwdXRQYXJzZXJFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqXG4gKiBAcGFyYW0gdGV4dCBBIG1hcmtkb3duIGJsb2NrIHdpdGggSlNPTlxuICogQHJldHVybnMgcGFyc2VkIEpTT04gb2JqZWN0XG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnNvbk1hcmtkb3duKHRleHQpIHtcbiAgICB0ZXh0ID0gdGV4dC50cmltKCk7XG4gICAgY29uc3QgbGVmdF9zcXVhcmUgPSB0ZXh0LmluZGV4T2YoXCJbXCIpO1xuICAgIGNvbnN0IGxlZnRfYnJhY2UgPSB0ZXh0LmluZGV4T2YoXCJ7XCIpO1xuICAgIGxldCBsZWZ0O1xuICAgIGxldCByaWdodDtcbiAgICBpZiAobGVmdF9zcXVhcmUgPCBsZWZ0X2JyYWNlICYmIGxlZnRfc3F1YXJlICE9IC0xKSB7XG4gICAgICAgIGxlZnQgPSBsZWZ0X3NxdWFyZTtcbiAgICAgICAgcmlnaHQgPSB0ZXh0Lmxhc3RJbmRleE9mKFwiXVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZWZ0ID0gbGVmdF9icmFjZTtcbiAgICAgICAgcmlnaHQgPSB0ZXh0Lmxhc3RJbmRleE9mKFwifVwiKTtcbiAgICB9XG4gICAgY29uc3QganNvblRleHQgPSB0ZXh0LnN1YnN0cmluZyhsZWZ0LCByaWdodCArIDEpO1xuICAgIHRyeSB7XG4gICAgICAgIC8vU2luZ2xlIEpTT04gb2JqZWN0IGNhc2VcbiAgICAgICAgaWYgKGxlZnRfc3F1YXJlID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBKU09OLnBhcnNlKGpzb25UZXh0KVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICAvL011bHRpcGxlIEpTT04gb2JqZWN0IGNhc2UuXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25UZXh0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBPdXRwdXRQYXJzZXJFcnJvcihcIk5vdCBhIGpzb24gbWFya2Rvd25cIiwge1xuICAgICAgICAgICAgb3V0cHV0OiB0ZXh0XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogU3ViUXVlc3Rpb25PdXRwdXRQYXJzZXIgaXMgdXNlZCB0byBwYXJzZSB0aGUgb3V0cHV0IG9mIHRoZSBTdWJRdWVzdGlvbkdlbmVyYXRvci5cbiAqLyBleHBvcnQgY2xhc3MgU3ViUXVlc3Rpb25PdXRwdXRQYXJzZXIge1xuICAgIHBhcnNlKG91dHB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUpzb25NYXJrZG93bihvdXRwdXQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmF3T3V0cHV0OiBvdXRwdXQsXG4gICAgICAgICAgICBwYXJzZWRPdXRwdXQ6IHBhcnNlZFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmb3JtYXQob3V0cHV0KSB7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/OutputParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/QuestionGenerator.js":
/*!***********************************************************!*\
  !*** ./node_modules/llamaindex/dist/QuestionGenerator.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMQuestionGenerator: () => (/* binding */ LLMQuestionGenerator)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/openai */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js\");\n/* harmony import */ var _OutputParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OutputParser.js */ \"(rsc)/./node_modules/llamaindex/dist/OutputParser.js\");\n\n\n\n\n/**\n * LLMQuestionGenerator uses the LLM to generate new questions for the LLM using tools and a user query.\n */ class LLMQuestionGenerator extends _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptMixin {\n    llm;\n    prompt;\n    outputParser;\n    constructor(init){\n        super();\n        this.llm = init?.llm ?? new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI();\n        this.prompt = init?.prompt ?? _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultSubQuestionPrompt;\n        this.outputParser = init?.outputParser ?? new _OutputParser_js__WEBPACK_IMPORTED_MODULE_3__.SubQuestionOutputParser();\n    }\n    _getPrompts() {\n        return {\n            subQuestion: this.prompt\n        };\n    }\n    _updatePrompts(promptsDict) {\n        if (\"subQuestion\" in promptsDict) {\n            this.prompt = promptsDict.subQuestion;\n        }\n    }\n    async generate(tools, query) {\n        const toolsStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.toToolDescriptions)(tools);\n        const queryStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.extractText)(query);\n        const prediction = (await this.llm.complete({\n            prompt: this.prompt.format({\n                toolsStr,\n                queryStr\n            })\n        })).text;\n        const structuredOutput = this.outputParser.parse(prediction);\n        return structuredOutput.parsedOutput;\n    }\n    _getPromptModules() {\n        return {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L1F1ZXN0aW9uR2VuZXJhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlGO0FBQ1I7QUFDN0I7QUFDZ0I7QUFDNUQ7QUFDQTtBQUNBLElBQVcsbUNBQW1DLGlFQUFXO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msc0RBQU07QUFDMUMsc0NBQXNDLDhFQUF3QjtBQUM5RCxzREFBc0QscUVBQXVCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwwRUFBa0I7QUFDM0MseUJBQXlCLG1FQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvUXVlc3Rpb25HZW5lcmF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmYXVsdFN1YlF1ZXN0aW9uUHJvbXB0LCBQcm9tcHRNaXhpbiB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IGV4dHJhY3RUZXh0LCB0b1Rvb2xEZXNjcmlwdGlvbnMgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS91dGlsc1wiO1xuaW1wb3J0IHsgT3BlbkFJIH0gZnJvbSBcIkBsbGFtYWluZGV4L29wZW5haVwiO1xuaW1wb3J0IHsgU3ViUXVlc3Rpb25PdXRwdXRQYXJzZXIgfSBmcm9tIFwiLi9PdXRwdXRQYXJzZXIuanNcIjtcbi8qKlxuICogTExNUXVlc3Rpb25HZW5lcmF0b3IgdXNlcyB0aGUgTExNIHRvIGdlbmVyYXRlIG5ldyBxdWVzdGlvbnMgZm9yIHRoZSBMTE0gdXNpbmcgdG9vbHMgYW5kIGEgdXNlciBxdWVyeS5cbiAqLyBleHBvcnQgY2xhc3MgTExNUXVlc3Rpb25HZW5lcmF0b3IgZXh0ZW5kcyBQcm9tcHRNaXhpbiB7XG4gICAgbGxtO1xuICAgIHByb21wdDtcbiAgICBvdXRwdXRQYXJzZXI7XG4gICAgY29uc3RydWN0b3IoaW5pdCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubGxtID0gaW5pdD8ubGxtID8/IG5ldyBPcGVuQUkoKTtcbiAgICAgICAgdGhpcy5wcm9tcHQgPSBpbml0Py5wcm9tcHQgPz8gZGVmYXVsdFN1YlF1ZXN0aW9uUHJvbXB0O1xuICAgICAgICB0aGlzLm91dHB1dFBhcnNlciA9IGluaXQ/Lm91dHB1dFBhcnNlciA/PyBuZXcgU3ViUXVlc3Rpb25PdXRwdXRQYXJzZXIoKTtcbiAgICB9XG4gICAgX2dldFByb21wdHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWJRdWVzdGlvbjogdGhpcy5wcm9tcHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3VwZGF0ZVByb21wdHMocHJvbXB0c0RpY3QpIHtcbiAgICAgICAgaWYgKFwic3ViUXVlc3Rpb25cIiBpbiBwcm9tcHRzRGljdCkge1xuICAgICAgICAgICAgdGhpcy5wcm9tcHQgPSBwcm9tcHRzRGljdC5zdWJRdWVzdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZW5lcmF0ZSh0b29scywgcXVlcnkpIHtcbiAgICAgICAgY29uc3QgdG9vbHNTdHIgPSB0b1Rvb2xEZXNjcmlwdGlvbnModG9vbHMpO1xuICAgICAgICBjb25zdCBxdWVyeVN0ciA9IGV4dHJhY3RUZXh0KHF1ZXJ5KTtcbiAgICAgICAgY29uc3QgcHJlZGljdGlvbiA9IChhd2FpdCB0aGlzLmxsbS5jb21wbGV0ZSh7XG4gICAgICAgICAgICBwcm9tcHQ6IHRoaXMucHJvbXB0LmZvcm1hdCh7XG4gICAgICAgICAgICAgICAgdG9vbHNTdHIsXG4gICAgICAgICAgICAgICAgcXVlcnlTdHJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pKS50ZXh0O1xuICAgICAgICBjb25zdCBzdHJ1Y3R1cmVkT3V0cHV0ID0gdGhpcy5vdXRwdXRQYXJzZXIucGFyc2UocHJlZGljdGlvbik7XG4gICAgICAgIHJldHVybiBzdHJ1Y3R1cmVkT3V0cHV0LnBhcnNlZE91dHB1dDtcbiAgICB9XG4gICAgX2dldFByb21wdE1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/QuestionGenerator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/Settings.js":
/*!**************************************************!*\
  !*** ./node_modules/llamaindex/dist/Settings.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Settings: () => (/* binding */ Settings)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/indices */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js\");\n/* harmony import */ var _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/node-parser */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n\n\n\n\n/**\n * @internal\n */ class GlobalSettings {\n    #prompt = {};\n    #promptHelper = null;\n    #nodeParser = null;\n    #chunkOverlap;\n    #promptHelperAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.AsyncLocalStorage();\n    #nodeParserAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.AsyncLocalStorage();\n    #chunkOverlapAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.AsyncLocalStorage();\n    #promptAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.AsyncLocalStorage();\n    get debug() {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.debug;\n    }\n    get llm() {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.llm;\n    }\n    set llm(llm) {\n        _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.llm = llm;\n    }\n    withLLM(llm, fn) {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.withLLM(llm, fn);\n    }\n    get promptHelper() {\n        if (this.#promptHelper === null) {\n            this.#promptHelper = new _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_1__.PromptHelper();\n        }\n        return this.#promptHelperAsyncLocalStorage.getStore() ?? this.#promptHelper;\n    }\n    set promptHelper(promptHelper) {\n        this.#promptHelper = promptHelper;\n    }\n    withPromptHelper(promptHelper, fn) {\n        return this.#promptHelperAsyncLocalStorage.run(promptHelper, fn);\n    }\n    get embedModel() {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.embedModel;\n    }\n    set embedModel(embedModel) {\n        _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.embedModel = embedModel;\n    }\n    withEmbedModel(embedModel, fn) {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.withEmbedModel(embedModel, fn);\n    }\n    get nodeParser() {\n        if (this.#nodeParser === null) {\n            this.#nodeParser = new _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_2__.SentenceSplitter({\n                chunkSize: this.chunkSize,\n                chunkOverlap: this.chunkOverlap\n            });\n        }\n        return this.#nodeParserAsyncLocalStorage.getStore() ?? this.#nodeParser;\n    }\n    set nodeParser(nodeParser) {\n        this.#nodeParser = nodeParser;\n    }\n    withNodeParser(nodeParser, fn) {\n        return this.#nodeParserAsyncLocalStorage.run(nodeParser, fn);\n    }\n    get callbackManager() {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager;\n    }\n    set callbackManager(callbackManager) {\n        _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager = callbackManager;\n    }\n    withCallbackManager(callbackManager, fn) {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.withCallbackManager(callbackManager, fn);\n    }\n    set chunkSize(chunkSize) {\n        _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.chunkSize = chunkSize;\n    }\n    get chunkSize() {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.chunkSize;\n    }\n    withChunkSize(chunkSize, fn) {\n        return _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.withChunkSize(chunkSize, fn);\n    }\n    get chunkOverlap() {\n        return this.#chunkOverlapAsyncLocalStorage.getStore() ?? this.#chunkOverlap;\n    }\n    set chunkOverlap(chunkOverlap) {\n        if (typeof chunkOverlap === \"number\") {\n            this.#chunkOverlap = chunkOverlap;\n        }\n    }\n    withChunkOverlap(chunkOverlap, fn) {\n        return this.#chunkOverlapAsyncLocalStorage.run(chunkOverlap, fn);\n    }\n    get prompt() {\n        return this.#promptAsyncLocalStorage.getStore() ?? this.#prompt;\n    }\n    set prompt(prompt) {\n        this.#prompt = prompt;\n    }\n    withPrompt(prompt, fn) {\n        return this.#promptAsyncLocalStorage.run(prompt, fn);\n    }\n}\nconst Settings = new GlobalSettings();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L1NldHRpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1FO0FBQ1g7QUFDUTtBQUNaO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDhEQUFpQjtBQUMxRCx1Q0FBdUMsOERBQWlCO0FBQ3hELHlDQUF5Qyw4REFBaUI7QUFDMUQsbUNBQW1DLDhEQUFpQjtBQUNwRDtBQUNBLGVBQWUsNkRBQVk7QUFDM0I7QUFDQTtBQUNBLGVBQWUsNkRBQVk7QUFDM0I7QUFDQTtBQUNBLFFBQVEsNkRBQVk7QUFDcEI7QUFDQTtBQUNBLGVBQWUsNkRBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtFQUFZO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2REFBWTtBQUMzQjtBQUNBO0FBQ0EsUUFBUSw2REFBWTtBQUNwQjtBQUNBO0FBQ0EsZUFBZSw2REFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMEVBQWdCO0FBQ25EO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZEQUFZO0FBQzNCO0FBQ0E7QUFDQSxRQUFRLDZEQUFZO0FBQ3BCO0FBQ0E7QUFDQSxlQUFlLDZEQUFZO0FBQzNCO0FBQ0E7QUFDQSxRQUFRLDZEQUFZO0FBQ3BCO0FBQ0E7QUFDQSxlQUFlLDZEQUFZO0FBQzNCO0FBQ0E7QUFDQSxlQUFlLDZEQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08iLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L1NldHRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNldHRpbmdzIGFzIENvcmVTZXR0aW5ncyB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL2dsb2JhbFwiO1xuaW1wb3J0IHsgUHJvbXB0SGVscGVyIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvaW5kaWNlc1wiO1xuaW1wb3J0IHsgU2VudGVuY2VTcGxpdHRlciB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL25vZGUtcGFyc2VyXCI7XG5pbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZSB9IGZyb20gXCJAbGxhbWFpbmRleC9lbnZcIjtcbi8qKlxuICogQGludGVybmFsXG4gKi8gY2xhc3MgR2xvYmFsU2V0dGluZ3Mge1xuICAgICNwcm9tcHQgPSB7fTtcbiAgICAjcHJvbXB0SGVscGVyID0gbnVsbDtcbiAgICAjbm9kZVBhcnNlciA9IG51bGw7XG4gICAgI2NodW5rT3ZlcmxhcDtcbiAgICAjcHJvbXB0SGVscGVyQXN5bmNMb2NhbFN0b3JhZ2UgPSBuZXcgQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgICAjbm9kZVBhcnNlckFzeW5jTG9jYWxTdG9yYWdlID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgI2NodW5rT3ZlcmxhcEFzeW5jTG9jYWxTdG9yYWdlID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgI3Byb21wdEFzeW5jTG9jYWxTdG9yYWdlID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgZ2V0IGRlYnVnKCkge1xuICAgICAgICByZXR1cm4gQ29yZVNldHRpbmdzLmRlYnVnO1xuICAgIH1cbiAgICBnZXQgbGxtKCkge1xuICAgICAgICByZXR1cm4gQ29yZVNldHRpbmdzLmxsbTtcbiAgICB9XG4gICAgc2V0IGxsbShsbG0pIHtcbiAgICAgICAgQ29yZVNldHRpbmdzLmxsbSA9IGxsbTtcbiAgICB9XG4gICAgd2l0aExMTShsbG0sIGZuKSB7XG4gICAgICAgIHJldHVybiBDb3JlU2V0dGluZ3Mud2l0aExMTShsbG0sIGZuKTtcbiAgICB9XG4gICAgZ2V0IHByb21wdEhlbHBlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuI3Byb21wdEhlbHBlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy4jcHJvbXB0SGVscGVyID0gbmV3IFByb21wdEhlbHBlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiNwcm9tcHRIZWxwZXJBc3luY0xvY2FsU3RvcmFnZS5nZXRTdG9yZSgpID8/IHRoaXMuI3Byb21wdEhlbHBlcjtcbiAgICB9XG4gICAgc2V0IHByb21wdEhlbHBlcihwcm9tcHRIZWxwZXIpIHtcbiAgICAgICAgdGhpcy4jcHJvbXB0SGVscGVyID0gcHJvbXB0SGVscGVyO1xuICAgIH1cbiAgICB3aXRoUHJvbXB0SGVscGVyKHByb21wdEhlbHBlciwgZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb21wdEhlbHBlckFzeW5jTG9jYWxTdG9yYWdlLnJ1bihwcm9tcHRIZWxwZXIsIGZuKTtcbiAgICB9XG4gICAgZ2V0IGVtYmVkTW9kZWwoKSB7XG4gICAgICAgIHJldHVybiBDb3JlU2V0dGluZ3MuZW1iZWRNb2RlbDtcbiAgICB9XG4gICAgc2V0IGVtYmVkTW9kZWwoZW1iZWRNb2RlbCkge1xuICAgICAgICBDb3JlU2V0dGluZ3MuZW1iZWRNb2RlbCA9IGVtYmVkTW9kZWw7XG4gICAgfVxuICAgIHdpdGhFbWJlZE1vZGVsKGVtYmVkTW9kZWwsIGZuKSB7XG4gICAgICAgIHJldHVybiBDb3JlU2V0dGluZ3Mud2l0aEVtYmVkTW9kZWwoZW1iZWRNb2RlbCwgZm4pO1xuICAgIH1cbiAgICBnZXQgbm9kZVBhcnNlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuI25vZGVQYXJzZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuI25vZGVQYXJzZXIgPSBuZXcgU2VudGVuY2VTcGxpdHRlcih7XG4gICAgICAgICAgICAgICAgY2h1bmtTaXplOiB0aGlzLmNodW5rU2l6ZSxcbiAgICAgICAgICAgICAgICBjaHVua092ZXJsYXA6IHRoaXMuY2h1bmtPdmVybGFwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4jbm9kZVBhcnNlckFzeW5jTG9jYWxTdG9yYWdlLmdldFN0b3JlKCkgPz8gdGhpcy4jbm9kZVBhcnNlcjtcbiAgICB9XG4gICAgc2V0IG5vZGVQYXJzZXIobm9kZVBhcnNlcikge1xuICAgICAgICB0aGlzLiNub2RlUGFyc2VyID0gbm9kZVBhcnNlcjtcbiAgICB9XG4gICAgd2l0aE5vZGVQYXJzZXIobm9kZVBhcnNlciwgZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI25vZGVQYXJzZXJBc3luY0xvY2FsU3RvcmFnZS5ydW4obm9kZVBhcnNlciwgZm4pO1xuICAgIH1cbiAgICBnZXQgY2FsbGJhY2tNYW5hZ2VyKCkge1xuICAgICAgICByZXR1cm4gQ29yZVNldHRpbmdzLmNhbGxiYWNrTWFuYWdlcjtcbiAgICB9XG4gICAgc2V0IGNhbGxiYWNrTWFuYWdlcihjYWxsYmFja01hbmFnZXIpIHtcbiAgICAgICAgQ29yZVNldHRpbmdzLmNhbGxiYWNrTWFuYWdlciA9IGNhbGxiYWNrTWFuYWdlcjtcbiAgICB9XG4gICAgd2l0aENhbGxiYWNrTWFuYWdlcihjYWxsYmFja01hbmFnZXIsIGZuKSB7XG4gICAgICAgIHJldHVybiBDb3JlU2V0dGluZ3Mud2l0aENhbGxiYWNrTWFuYWdlcihjYWxsYmFja01hbmFnZXIsIGZuKTtcbiAgICB9XG4gICAgc2V0IGNodW5rU2l6ZShjaHVua1NpemUpIHtcbiAgICAgICAgQ29yZVNldHRpbmdzLmNodW5rU2l6ZSA9IGNodW5rU2l6ZTtcbiAgICB9XG4gICAgZ2V0IGNodW5rU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIENvcmVTZXR0aW5ncy5jaHVua1NpemU7XG4gICAgfVxuICAgIHdpdGhDaHVua1NpemUoY2h1bmtTaXplLCBmbikge1xuICAgICAgICByZXR1cm4gQ29yZVNldHRpbmdzLndpdGhDaHVua1NpemUoY2h1bmtTaXplLCBmbik7XG4gICAgfVxuICAgIGdldCBjaHVua092ZXJsYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjaHVua092ZXJsYXBBc3luY0xvY2FsU3RvcmFnZS5nZXRTdG9yZSgpID8/IHRoaXMuI2NodW5rT3ZlcmxhcDtcbiAgICB9XG4gICAgc2V0IGNodW5rT3ZlcmxhcChjaHVua092ZXJsYXApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaHVua092ZXJsYXAgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRoaXMuI2NodW5rT3ZlcmxhcCA9IGNodW5rT3ZlcmxhcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aXRoQ2h1bmtPdmVybGFwKGNodW5rT3ZlcmxhcCwgZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2NodW5rT3ZlcmxhcEFzeW5jTG9jYWxTdG9yYWdlLnJ1bihjaHVua092ZXJsYXAsIGZuKTtcbiAgICB9XG4gICAgZ2V0IHByb21wdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb21wdEFzeW5jTG9jYWxTdG9yYWdlLmdldFN0b3JlKCkgPz8gdGhpcy4jcHJvbXB0O1xuICAgIH1cbiAgICBzZXQgcHJvbXB0KHByb21wdCkge1xuICAgICAgICB0aGlzLiNwcm9tcHQgPSBwcm9tcHQ7XG4gICAgfVxuICAgIHdpdGhQcm9tcHQocHJvbXB0LCBmbikge1xuICAgICAgICByZXR1cm4gdGhpcy4jcHJvbXB0QXN5bmNMb2NhbFN0b3JhZ2UucnVuKHByb21wdCwgZm4pO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBTZXR0aW5ncyA9IG5ldyBHbG9iYWxTZXR0aW5ncygpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/Settings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/agent/contextAwareMixin.js":
/*!*****************************************************************!*\
  !*** ./node_modules/llamaindex/dist/agent/contextAwareMixin.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withContextAwareness: () => (/* binding */ withContextAwareness)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n/**\n * ContextAwareAgentRunner enhances the base AgentRunner with the ability to retrieve and inject relevant context\n * for each query. This allows the agent to access and utilize appropriate information from a given index or retriever,\n * providing more informed and context-specific responses to user queries.\n */ function withContextAwareness(Base) {\n    return class ContextAwareAgent extends Base {\n        contextRetriever;\n        retrievedContext = null;\n        constructor(params){\n            super(params);\n            this.contextRetriever = params.contextRetriever;\n        }\n        async retrieveContext(query) {\n            const nodes = await this.contextRetriever.retrieve({\n                query\n            });\n            return nodes.map((node)=>node.node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.NONE)).join(\"\\n\");\n        }\n        async injectContext(context) {\n            const systemMessage = this.chatHistory.find((msg)=>msg.role === \"system\");\n            if (systemMessage) {\n                systemMessage.content = `${context}\\n\\n${systemMessage.content}`;\n            } else {\n                this.chatHistory.unshift({\n                    role: \"system\",\n                    content: context\n                });\n            }\n        }\n        async chat(params) {\n            const context = await this.retrieveContext(params.message);\n            await this.injectContext(context);\n            if (\"stream\" in params && params.stream === true) {\n                return super.chat(params);\n            } else {\n                return super.chat(params);\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2FnZW50L2NvbnRleHRBd2FyZU1peGluLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDBEQUEwRCxpRUFBWTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRLE1BQU0sc0JBQXNCO0FBQy9FLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvYWdlbnQvY29udGV4dEF3YXJlTWl4aW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YWRhdGFNb2RlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc2NoZW1hXCI7XG4vKipcbiAqIENvbnRleHRBd2FyZUFnZW50UnVubmVyIGVuaGFuY2VzIHRoZSBiYXNlIEFnZW50UnVubmVyIHdpdGggdGhlIGFiaWxpdHkgdG8gcmV0cmlldmUgYW5kIGluamVjdCByZWxldmFudCBjb250ZXh0XG4gKiBmb3IgZWFjaCBxdWVyeS4gVGhpcyBhbGxvd3MgdGhlIGFnZW50IHRvIGFjY2VzcyBhbmQgdXRpbGl6ZSBhcHByb3ByaWF0ZSBpbmZvcm1hdGlvbiBmcm9tIGEgZ2l2ZW4gaW5kZXggb3IgcmV0cmlldmVyLFxuICogcHJvdmlkaW5nIG1vcmUgaW5mb3JtZWQgYW5kIGNvbnRleHQtc3BlY2lmaWMgcmVzcG9uc2VzIHRvIHVzZXIgcXVlcmllcy5cbiAqLyBleHBvcnQgZnVuY3Rpb24gd2l0aENvbnRleHRBd2FyZW5lc3MoQmFzZSkge1xuICAgIHJldHVybiBjbGFzcyBDb250ZXh0QXdhcmVBZ2VudCBleHRlbmRzIEJhc2Uge1xuICAgICAgICBjb250ZXh0UmV0cmlldmVyO1xuICAgICAgICByZXRyaWV2ZWRDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICAgICAgICAgIHN1cGVyKHBhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRSZXRyaWV2ZXIgPSBwYXJhbXMuY29udGV4dFJldHJpZXZlcjtcbiAgICAgICAgfVxuICAgICAgICBhc3luYyByZXRyaWV2ZUNvbnRleHQocXVlcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gYXdhaXQgdGhpcy5jb250ZXh0UmV0cmlldmVyLnJldHJpZXZlKHtcbiAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMubWFwKChub2RlKT0+bm9kZS5ub2RlLmdldENvbnRlbnQoTWV0YWRhdGFNb2RlLk5PTkUpKS5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGluamVjdENvbnRleHQoY29udGV4dCkge1xuICAgICAgICAgICAgY29uc3Qgc3lzdGVtTWVzc2FnZSA9IHRoaXMuY2hhdEhpc3RvcnkuZmluZCgobXNnKT0+bXNnLnJvbGUgPT09IFwic3lzdGVtXCIpO1xuICAgICAgICAgICAgaWYgKHN5c3RlbU1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBzeXN0ZW1NZXNzYWdlLmNvbnRlbnQgPSBgJHtjb250ZXh0fVxcblxcbiR7c3lzdGVtTWVzc2FnZS5jb250ZW50fWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhdEhpc3RvcnkudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IFwic3lzdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRleHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3luYyBjaGF0KHBhcmFtcykge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGF3YWl0IHRoaXMucmV0cmlldmVDb250ZXh0KHBhcmFtcy5tZXNzYWdlKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5qZWN0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChcInN0cmVhbVwiIGluIHBhcmFtcyAmJiBwYXJhbXMuc3RyZWFtID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmNoYXQocGFyYW1zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmNoYXQocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/agent/contextAwareMixin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/agent/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/llamaindex/dist/agent/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRunner: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.AgentRunner),\n/* harmony export */   AgentWorker: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.AgentWorker),\n/* harmony export */   LLMAgent: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.LLMAgent),\n/* harmony export */   LLMAgentWorker: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.LLMAgentWorker),\n/* harmony export */   OpenAIContextAwareAgent: () => (/* reexport safe */ _openai_js__WEBPACK_IMPORTED_MODULE_1__.OpenAIContextAwareAgent),\n/* harmony export */   ReACTAgentWorker: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.ReACTAgentWorker),\n/* harmony export */   ReActAgent: () => (/* reexport safe */ _react_js__WEBPACK_IMPORTED_MODULE_2__.ReActAgent),\n/* harmony export */   callTool: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.callTool),\n/* harmony export */   consumeAsyncIterable: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.consumeAsyncIterable),\n/* harmony export */   createReadableStream: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.createReadableStream),\n/* harmony export */   stepTools: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.stepTools),\n/* harmony export */   stepToolsStreaming: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.stepToolsStreaming),\n/* harmony export */   validateAgentParams: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.validateAgentParams)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/agent */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js\");\n/* harmony import */ var _openai_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./openai.js */ \"(rsc)/./node_modules/llamaindex/dist/agent/openai.js\");\n/* harmony import */ var _react_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./react.js */ \"(rsc)/./node_modules/llamaindex/dist/agent/react.js\");\n\n\n // todo: ParallelAgent\n // todo: CustomAgent\n // todo: ReactMultiModal\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2FnZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDZTtBQUNJLENBQUM7QUFDM0Q7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvYWdlbnQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvYWdlbnRcIjtcbmV4cG9ydCB7IE9wZW5BSUNvbnRleHRBd2FyZUFnZW50IH0gZnJvbSBcIi4vb3BlbmFpLmpzXCI7XG5leHBvcnQgeyBSZUFDVEFnZW50V29ya2VyLCBSZUFjdEFnZW50IH0gZnJvbSBcIi4vcmVhY3QuanNcIjsgLy8gdG9kbzogUGFyYWxsZWxBZ2VudFxuIC8vIHRvZG86IEN1c3RvbUFnZW50XG4gLy8gdG9kbzogUmVhY3RNdWx0aU1vZGFsXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/agent/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/agent/openai.js":
/*!******************************************************!*\
  !*** ./node_modules/llamaindex/dist/agent/openai.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_AVAILABLE_OPENAI_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.ALL_AVAILABLE_OPENAI_MODELS),\n/* harmony export */   ALL_OPENAI_EMBEDDING_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.ALL_OPENAI_EMBEDDING_MODELS),\n/* harmony export */   GPT35_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.GPT35_MODELS),\n/* harmony export */   GPT4_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.GPT4_MODELS),\n/* harmony export */   O1_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.O1_MODELS),\n/* harmony export */   O3_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.O3_MODELS),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIAgent: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgent),\n/* harmony export */   OpenAIAgentWorker: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgentWorker),\n/* harmony export */   OpenAIContextAwareAgent: () => (/* binding */ OpenAIContextAwareAgent),\n/* harmony export */   OpenAIEmbedding: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbedding),\n/* harmony export */   openai: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.openai)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/openai */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js\");\n/* harmony import */ var _contextAwareMixin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contextAwareMixin.js */ \"(rsc)/./node_modules/llamaindex/dist/agent/contextAwareMixin.js\");\n\n\nconst OpenAIContextAwareAgent = (0,_contextAwareMixin_js__WEBPACK_IMPORTED_MODULE_1__.withContextAwareness)(_llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgent);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2FnZW50L29wZW5haS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFpRDtBQUNhO0FBQ3ZELGdDQUFnQywyRUFBb0IsQ0FBQywyREFBVztBQUNwQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvYWdlbnQvb3BlbmFpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wZW5BSUFnZW50IH0gZnJvbSBcIkBsbGFtYWluZGV4L29wZW5haVwiO1xuaW1wb3J0IHsgd2l0aENvbnRleHRBd2FyZW5lc3MgfSBmcm9tIFwiLi9jb250ZXh0QXdhcmVNaXhpbi5qc1wiO1xuZXhwb3J0IGNvbnN0IE9wZW5BSUNvbnRleHRBd2FyZUFnZW50ID0gd2l0aENvbnRleHRBd2FyZW5lc3MoT3BlbkFJQWdlbnQpO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L29wZW5haVwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/agent/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/agent/react.js":
/*!*****************************************************!*\
  !*** ./node_modules/llamaindex/dist/agent/react.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReACTAgentWorker: () => (/* binding */ ReACTAgentWorker),\n/* harmony export */   ReActAgent: () => (/* binding */ ReActAgent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/agent */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _internal_prompt_react_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/prompt/react.js */ \"(rsc)/./node_modules/llamaindex/dist/internal/prompt/react.js\");\n/* harmony import */ var _internal_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/utils.js */ \"(rsc)/./node_modules/llamaindex/dist/internal/utils.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n\n\n\n\n\n\nfunction reasonFormatter(reason) {\n    switch(reason.type){\n        case \"observation\":\n            return `Observation: ${(0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.stringifyJSONToMessageContent)(reason.observation)}`;\n        case \"action\":\n            return `Thought: ${reason.thought}\\nAction: ${reason.action}\\nInput: ${(0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.stringifyJSONToMessageContent)(reason.input)}`;\n        case \"response\":\n            {\n                return `Thought: ${reason.thought}\\nAnswer: ${(0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.extractText)(reason.response.message.content)}`;\n            }\n    }\n}\nfunction extractJsonStr(text) {\n    const pattern = /\\{.*\\}/s;\n    const match = text.match(pattern);\n    if (!match) {\n        throw new SyntaxError(`Could not extract json string from output: ${text}`);\n    }\n    return match[0];\n}\nfunction extractFinalResponse(inputText) {\n    const pattern = /\\s*Thought:(.*?)Answer:(.*?)$/s;\n    const match = inputText.match(pattern);\n    if (!match) {\n        throw new Error(`Could not extract final answer from input text: ${inputText}`);\n    }\n    const thought = match[1].trim();\n    const answer = match[2].trim();\n    return [\n        thought,\n        answer\n    ];\n}\nfunction extractToolUse(inputText) {\n    const pattern = /\\s*Thought: (.*?)\\nAction: ([a-zA-Z0-9_]+).*?\\.*[Input:]*.*?(\\{.*?\\})/s;\n    const match = inputText.match(pattern);\n    if (!match) {\n        throw new Error(`Could not extract tool use from input text: \"${inputText}\"`);\n    }\n    const thought = match[1].trim();\n    const action = match[2].trim();\n    const actionInput = match[3].trim();\n    return [\n        thought,\n        action,\n        actionInput\n    ];\n}\nfunction actionInputParser(jsonStr) {\n    const processedString = jsonStr.replace(/(?<!\\w)'|'(?!\\w)/g, '\"');\n    const pattern = /\"(\\w+)\":\\s*\"([^\"]*)\"/g;\n    const matches = [\n        ...processedString.matchAll(pattern)\n    ];\n    return Object.fromEntries(matches);\n}\nconst reACTOutputParser = async (output, onResolveType)=>{\n    let reason = null;\n    if ((0,_internal_utils_js__WEBPACK_IMPORTED_MODULE_4__.isAsyncIterable)(output)) {\n        const [peakStream, finalStream] = (0,_llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.createReadableStream)(output).tee();\n        const reader = peakStream.getReader();\n        let type = null;\n        let content = \"\";\n        for(;;){\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            content += value.delta;\n            if (content.includes(\"Action:\")) {\n                type = \"action\";\n            } else if (content.includes(\"Answer:\")) {\n                type = \"answer\";\n            }\n        }\n        if (type === null) {\n            // `Thought:` is always present at the beginning of the output.\n            type = \"thought\";\n        }\n        reader.releaseLock();\n        if (!type) {\n            throw new Error(\"Could not determine type of output\");\n        }\n        onResolveType(type, finalStream);\n        // step 2: do the parsing from content\n        switch(type){\n            case \"action\":\n                {\n                    // have to consume the stream to get the full content\n                    const response = await (0,_llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.consumeAsyncIterable)(peakStream, content);\n                    const [thought, action, input] = extractToolUse(response.content);\n                    const jsonStr = extractJsonStr(input);\n                    let json;\n                    try {\n                        json = JSON.parse(jsonStr);\n                    } catch (e) {\n                        json = actionInputParser(jsonStr);\n                    }\n                    reason = {\n                        type: \"action\",\n                        thought,\n                        action,\n                        input: json\n                    };\n                    break;\n                }\n            case \"thought\":\n                {\n                    const thought = \"(Implicit) I can answer without any more tools!\";\n                    const response = await (0,_llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.consumeAsyncIterable)(peakStream, content);\n                    reason = {\n                        type: \"response\",\n                        thought,\n                        response: {\n                            raw: peakStream,\n                            message: response\n                        }\n                    };\n                    break;\n                }\n            case \"answer\":\n                {\n                    const response = await (0,_llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.consumeAsyncIterable)(peakStream, content);\n                    const [thought, answer] = extractFinalResponse(response.content);\n                    reason = {\n                        type: \"response\",\n                        thought,\n                        response: {\n                            raw: response,\n                            message: {\n                                role: \"assistant\",\n                                content: answer\n                            }\n                        }\n                    };\n                    break;\n                }\n            default:\n                {\n                    throw new Error(`Invalid type: ${type}`);\n                }\n        }\n    } else {\n        const content = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.extractText)(output.message.content);\n        const type = content.includes(\"Answer:\") ? \"answer\" : content.includes(\"Action:\") ? \"action\" : \"thought\";\n        onResolveType(type, output);\n        // step 2: do the parsing from content\n        switch(type){\n            case \"action\":\n                {\n                    const [thought, action, input] = extractToolUse(content);\n                    const jsonStr = extractJsonStr(input);\n                    let json;\n                    try {\n                        json = JSON.parse(jsonStr);\n                    } catch (e) {\n                        json = actionInputParser(jsonStr);\n                    }\n                    reason = {\n                        type: \"action\",\n                        thought,\n                        action,\n                        input: json\n                    };\n                    break;\n                }\n            case \"thought\":\n                {\n                    const thought = \"(Implicit) I can answer without any more tools!\";\n                    reason = {\n                        type: \"response\",\n                        thought,\n                        response: {\n                            raw: output,\n                            message: {\n                                role: \"assistant\",\n                                content: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.extractText)(output.message.content)\n                            }\n                        }\n                    };\n                    break;\n                }\n            case \"answer\":\n                {\n                    const [thought, answer] = extractFinalResponse(content);\n                    reason = {\n                        type: \"response\",\n                        thought,\n                        response: {\n                            raw: output,\n                            message: {\n                                role: \"assistant\",\n                                content: answer\n                            }\n                        }\n                    };\n                    break;\n                }\n            default:\n                {\n                    throw new Error(`Invalid type: ${type}`);\n                }\n        }\n    }\n    if (reason === null) {\n        throw new TypeError(\"Reason is null\");\n    }\n    return reason;\n};\nconst chatFormatter = async (tools, messages, currentReasons)=>{\n    const header = (0,_internal_prompt_react_js__WEBPACK_IMPORTED_MODULE_3__.getReACTAgentSystemHeader)(tools);\n    const reasonMessages = [];\n    for (const reason of currentReasons){\n        const response = await reasonFormatter(reason);\n        reasonMessages.push({\n            role: reason.type === \"observation\" ? \"user\" : \"assistant\",\n            content: response\n        });\n    }\n    return [\n        {\n            role: \"system\",\n            content: header\n        },\n        ...messages,\n        ...reasonMessages\n    ];\n};\nclass ReACTAgentWorker extends _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.AgentWorker {\n    taskHandler = ReActAgent.taskHandler;\n}\nclass ReActAgent extends _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.AgentRunner {\n    constructor(params){\n        (0,_llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.validateAgentParams)(params);\n        super({\n            llm: params.llm ?? _Settings_js__WEBPACK_IMPORTED_MODULE_5__.Settings.llm,\n            chatHistory: params.chatHistory ?? [],\n            runner: new ReACTAgentWorker(),\n            systemPrompt: params.systemPrompt ?? null,\n            tools: \"tools\" in params ? params.tools : params.toolRetriever.retrieve.bind(params.toolRetriever),\n            verbose: params.verbose ?? false\n        });\n    }\n    createStore() {\n        return {\n            reasons: []\n        };\n    }\n    static taskHandler = async (step, enqueueOutput)=>{\n        const { llm, stream, getTools } = step.context;\n        const lastMessage = step.context.store.messages.at(-1).content;\n        const tools = await getTools(lastMessage);\n        const messages = await chatFormatter(tools, step.context.store.messages, step.context.store.reasons);\n        const response = await llm.chat({\n            // @ts-expect-error boolean\n            stream,\n            messages\n        });\n        const reason = await reACTOutputParser(response, (type, response)=>{\n            enqueueOutput({\n                taskStep: step,\n                output: response,\n                isLast: type !== \"action\"\n            });\n        });\n        step.context.logger.log(\"current reason: %O\", reason);\n        step.context.store.reasons = [\n            ...step.context.store.reasons,\n            reason\n        ];\n        if (reason.type === \"action\") {\n            const tool = tools.find((tool)=>tool.metadata.name === reason.action);\n            const toolOutput = await (0,_llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.callTool)(tool, {\n                id: (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_2__.randomUUID)(),\n                input: reason.input,\n                name: reason.action\n            }, step.context.logger);\n            step.context.store.reasons = [\n                ...step.context.store.reasons,\n                {\n                    type: \"observation\",\n                    observation: toolOutput.output\n                }\n            ];\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2FnZW50L3JlYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTZJO0FBQ3pEO0FBQ3ZDO0FBQzJCO0FBQ2pCO0FBQ2I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHFGQUE2QixxQkFBcUI7QUFDckY7QUFDQSwrQkFBK0IsZUFBZSxZQUFZLGNBQWMsV0FBVyxxRkFBNkIsZUFBZTtBQUMvSDtBQUNBO0FBQ0EsbUNBQW1DLGVBQWUsWUFBWSxtRUFBVyxrQ0FBa0M7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsSUFBSTtBQUMzQjtBQUNBO0FBQ0EsNEVBQTRFLEtBQUs7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsVUFBVTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsS0FBSztBQUN6RjtBQUNBO0FBQ0Esd0VBQXdFLFVBQVU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsbUVBQWU7QUFDdkIsMENBQTBDLDRFQUFvQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Qsb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsNEVBQW9CO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsNEVBQW9CO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyw0RUFBb0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsS0FBSztBQUMxRDtBQUNBO0FBQ0EsTUFBTTtBQUNOLHdCQUF3QixtRUFBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbUVBQVc7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxLQUFLO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvRkFBeUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQkFBK0IsK0RBQVc7QUFDakQ7QUFDQTtBQUNPLHlCQUF5QiwrREFBVztBQUMzQztBQUNBLFFBQVEsMkVBQW1CO0FBQzNCO0FBQ0EsK0JBQStCLGtEQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGdFQUFRO0FBQzdDLG9CQUFvQiwyREFBVTtBQUM5QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9hZ2VudC9yZWFjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZ2VudFJ1bm5lciwgQWdlbnRXb3JrZXIsIGNhbGxUb29sLCBjb25zdW1lQXN5bmNJdGVyYWJsZSwgY3JlYXRlUmVhZGFibGVTdHJlYW0sIHZhbGlkYXRlQWdlbnRQYXJhbXMgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9hZ2VudFwiO1xuaW1wb3J0IHsgZXh0cmFjdFRleHQsIHN0cmluZ2lmeUpTT05Ub01lc3NhZ2VDb250ZW50IH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tIFwiQGxsYW1haW5kZXgvZW52XCI7XG5pbXBvcnQgeyBnZXRSZUFDVEFnZW50U3lzdGVtSGVhZGVyIH0gZnJvbSBcIi4uL2ludGVybmFsL3Byb21wdC9yZWFjdC5qc1wiO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSBcIi4uL2ludGVybmFsL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuLi9TZXR0aW5ncy5qc1wiO1xuZnVuY3Rpb24gcmVhc29uRm9ybWF0dGVyKHJlYXNvbikge1xuICAgIHN3aXRjaChyZWFzb24udHlwZSl7XG4gICAgICAgIGNhc2UgXCJvYnNlcnZhdGlvblwiOlxuICAgICAgICAgICAgcmV0dXJuIGBPYnNlcnZhdGlvbjogJHtzdHJpbmdpZnlKU09OVG9NZXNzYWdlQ29udGVudChyZWFzb24ub2JzZXJ2YXRpb24pfWA7XG4gICAgICAgIGNhc2UgXCJhY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBgVGhvdWdodDogJHtyZWFzb24udGhvdWdodH1cXG5BY3Rpb246ICR7cmVhc29uLmFjdGlvbn1cXG5JbnB1dDogJHtzdHJpbmdpZnlKU09OVG9NZXNzYWdlQ29udGVudChyZWFzb24uaW5wdXQpfWA7XG4gICAgICAgIGNhc2UgXCJyZXNwb25zZVwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBgVGhvdWdodDogJHtyZWFzb24udGhvdWdodH1cXG5BbnN3ZXI6ICR7ZXh0cmFjdFRleHQocmVhc29uLnJlc3BvbnNlLm1lc3NhZ2UuY29udGVudCl9YDtcbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBleHRyYWN0SnNvblN0cih0ZXh0KSB7XG4gICAgY29uc3QgcGF0dGVybiA9IC9cXHsuKlxcfS9zO1xuICAgIGNvbnN0IG1hdGNoID0gdGV4dC5tYXRjaChwYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgQ291bGQgbm90IGV4dHJhY3QganNvbiBzdHJpbmcgZnJvbSBvdXRwdXQ6ICR7dGV4dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoWzBdO1xufVxuZnVuY3Rpb24gZXh0cmFjdEZpbmFsUmVzcG9uc2UoaW5wdXRUZXh0KSB7XG4gICAgY29uc3QgcGF0dGVybiA9IC9cXHMqVGhvdWdodDooLio/KUFuc3dlcjooLio/KSQvcztcbiAgICBjb25zdCBtYXRjaCA9IGlucHV0VGV4dC5tYXRjaChwYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGV4dHJhY3QgZmluYWwgYW5zd2VyIGZyb20gaW5wdXQgdGV4dDogJHtpbnB1dFRleHR9YCk7XG4gICAgfVxuICAgIGNvbnN0IHRob3VnaHQgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgY29uc3QgYW5zd2VyID0gbWF0Y2hbMl0udHJpbSgpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRob3VnaHQsXG4gICAgICAgIGFuc3dlclxuICAgIF07XG59XG5mdW5jdGlvbiBleHRyYWN0VG9vbFVzZShpbnB1dFRleHQpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gL1xccypUaG91Z2h0OiAoLio/KVxcbkFjdGlvbjogKFthLXpBLVowLTlfXSspLio/XFwuKltJbnB1dDpdKi4qPyhcXHsuKj9cXH0pL3M7XG4gICAgY29uc3QgbWF0Y2ggPSBpbnB1dFRleHQubWF0Y2gocGF0dGVybik7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBleHRyYWN0IHRvb2wgdXNlIGZyb20gaW5wdXQgdGV4dDogXCIke2lucHV0VGV4dH1cImApO1xuICAgIH1cbiAgICBjb25zdCB0aG91Z2h0ID0gbWF0Y2hbMV0udHJpbSgpO1xuICAgIGNvbnN0IGFjdGlvbiA9IG1hdGNoWzJdLnRyaW0oKTtcbiAgICBjb25zdCBhY3Rpb25JbnB1dCA9IG1hdGNoWzNdLnRyaW0oKTtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aG91Z2h0LFxuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGFjdGlvbklucHV0XG4gICAgXTtcbn1cbmZ1bmN0aW9uIGFjdGlvbklucHV0UGFyc2VyKGpzb25TdHIpIHtcbiAgICBjb25zdCBwcm9jZXNzZWRTdHJpbmcgPSBqc29uU3RyLnJlcGxhY2UoLyg/PCFcXHcpJ3wnKD8hXFx3KS9nLCAnXCInKTtcbiAgICBjb25zdCBwYXR0ZXJuID0gL1wiKFxcdyspXCI6XFxzKlwiKFteXCJdKilcIi9nO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBbXG4gICAgICAgIC4uLnByb2Nlc3NlZFN0cmluZy5tYXRjaEFsbChwYXR0ZXJuKVxuICAgIF07XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhtYXRjaGVzKTtcbn1cbmNvbnN0IHJlQUNUT3V0cHV0UGFyc2VyID0gYXN5bmMgKG91dHB1dCwgb25SZXNvbHZlVHlwZSk9PntcbiAgICBsZXQgcmVhc29uID0gbnVsbDtcbiAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKG91dHB1dCkpIHtcbiAgICAgICAgY29uc3QgW3BlYWtTdHJlYW0sIGZpbmFsU3RyZWFtXSA9IGNyZWF0ZVJlYWRhYmxlU3RyZWFtKG91dHB1dCkudGVlKCk7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IHBlYWtTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIGxldCB0eXBlID0gbnVsbDtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBcIlwiO1xuICAgICAgICBmb3IoOzspe1xuICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZW50ICs9IHZhbHVlLmRlbHRhO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoXCJBY3Rpb246XCIpKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IFwiYWN0aW9uXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQuaW5jbHVkZXMoXCJBbnN3ZXI6XCIpKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IFwiYW5zd2VyXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGBUaG91Z2h0OmAgaXMgYWx3YXlzIHByZXNlbnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgb3V0cHV0LlxuICAgICAgICAgICAgdHlwZSA9IFwidGhvdWdodFwiO1xuICAgICAgICB9XG4gICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgdHlwZSBvZiBvdXRwdXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgb25SZXNvbHZlVHlwZSh0eXBlLCBmaW5hbFN0cmVhbSk7XG4gICAgICAgIC8vIHN0ZXAgMjogZG8gdGhlIHBhcnNpbmcgZnJvbSBjb250ZW50XG4gICAgICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgICAgIGNhc2UgXCJhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gY29uc3VtZSB0aGUgc3RyZWFtIHRvIGdldCB0aGUgZnVsbCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29uc3VtZUFzeW5jSXRlcmFibGUocGVha1N0cmVhbSwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0aG91Z2h0LCBhY3Rpb24sIGlucHV0XSA9IGV4dHJhY3RUb29sVXNlKHJlc3BvbnNlLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uU3RyID0gZXh0cmFjdEpzb25TdHIoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQganNvbjtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHIpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uID0gYWN0aW9uSW5wdXRQYXJzZXIoanNvblN0cik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVhc29uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDoganNvblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidGhvdWdodFwiOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhvdWdodCA9IFwiKEltcGxpY2l0KSBJIGNhbiBhbnN3ZXIgd2l0aG91dCBhbnkgbW9yZSB0b29scyFcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb25zdW1lQXN5bmNJdGVyYWJsZShwZWFrU3RyZWFtLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiBwZWFrU3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJhbnN3ZXJcIjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29uc3VtZUFzeW5jSXRlcmFibGUocGVha1N0cmVhbSwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0aG91Z2h0LCBhbnN3ZXJdID0gZXh0cmFjdEZpbmFsUmVzcG9uc2UocmVzcG9uc2UuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdzogcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiBcImFzc2lzdGFudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBhbnN3ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBleHRyYWN0VGV4dChvdXRwdXQubWVzc2FnZS5jb250ZW50KTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNvbnRlbnQuaW5jbHVkZXMoXCJBbnN3ZXI6XCIpID8gXCJhbnN3ZXJcIiA6IGNvbnRlbnQuaW5jbHVkZXMoXCJBY3Rpb246XCIpID8gXCJhY3Rpb25cIiA6IFwidGhvdWdodFwiO1xuICAgICAgICBvblJlc29sdmVUeXBlKHR5cGUsIG91dHB1dCk7XG4gICAgICAgIC8vIHN0ZXAgMjogZG8gdGhlIHBhcnNpbmcgZnJvbSBjb250ZW50XG4gICAgICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgICAgIGNhc2UgXCJhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt0aG91Z2h0LCBhY3Rpb24sIGlucHV0XSA9IGV4dHJhY3RUb29sVXNlKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uU3RyID0gZXh0cmFjdEpzb25TdHIoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQganNvbjtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHIpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uID0gYWN0aW9uSW5wdXRQYXJzZXIoanNvblN0cik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVhc29uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDoganNvblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidGhvdWdodFwiOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhvdWdodCA9IFwiKEltcGxpY2l0KSBJIGNhbiBhbnN3ZXIgd2l0aG91dCBhbnkgbW9yZSB0b29scyFcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiBvdXRwdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiBcImFzc2lzdGFudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBleHRyYWN0VGV4dChvdXRwdXQubWVzc2FnZS5jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImFuc3dlclwiOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3Rob3VnaHQsIGFuc3dlcl0gPSBleHRyYWN0RmluYWxSZXNwb25zZShjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiBvdXRwdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiBcImFzc2lzdGFudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBhbnN3ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVhc29uID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJSZWFzb24gaXMgbnVsbFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYXNvbjtcbn07XG5jb25zdCBjaGF0Rm9ybWF0dGVyID0gYXN5bmMgKHRvb2xzLCBtZXNzYWdlcywgY3VycmVudFJlYXNvbnMpPT57XG4gICAgY29uc3QgaGVhZGVyID0gZ2V0UmVBQ1RBZ2VudFN5c3RlbUhlYWRlcih0b29scyk7XG4gICAgY29uc3QgcmVhc29uTWVzc2FnZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlYXNvbiBvZiBjdXJyZW50UmVhc29ucyl7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVhc29uRm9ybWF0dGVyKHJlYXNvbik7XG4gICAgICAgIHJlYXNvbk1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgcm9sZTogcmVhc29uLnR5cGUgPT09IFwib2JzZXJ2YXRpb25cIiA/IFwidXNlclwiIDogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgICByb2xlOiBcInN5c3RlbVwiLFxuICAgICAgICAgICAgY29udGVudDogaGVhZGVyXG4gICAgICAgIH0sXG4gICAgICAgIC4uLm1lc3NhZ2VzLFxuICAgICAgICAuLi5yZWFzb25NZXNzYWdlc1xuICAgIF07XG59O1xuZXhwb3J0IGNsYXNzIFJlQUNUQWdlbnRXb3JrZXIgZXh0ZW5kcyBBZ2VudFdvcmtlciB7XG4gICAgdGFza0hhbmRsZXIgPSBSZUFjdEFnZW50LnRhc2tIYW5kbGVyO1xufVxuZXhwb3J0IGNsYXNzIFJlQWN0QWdlbnQgZXh0ZW5kcyBBZ2VudFJ1bm5lciB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICAgICAgdmFsaWRhdGVBZ2VudFBhcmFtcyhwYXJhbXMpO1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBsbG06IHBhcmFtcy5sbG0gPz8gU2V0dGluZ3MubGxtLFxuICAgICAgICAgICAgY2hhdEhpc3Rvcnk6IHBhcmFtcy5jaGF0SGlzdG9yeSA/PyBbXSxcbiAgICAgICAgICAgIHJ1bm5lcjogbmV3IFJlQUNUQWdlbnRXb3JrZXIoKSxcbiAgICAgICAgICAgIHN5c3RlbVByb21wdDogcGFyYW1zLnN5c3RlbVByb21wdCA/PyBudWxsLFxuICAgICAgICAgICAgdG9vbHM6IFwidG9vbHNcIiBpbiBwYXJhbXMgPyBwYXJhbXMudG9vbHMgOiBwYXJhbXMudG9vbFJldHJpZXZlci5yZXRyaWV2ZS5iaW5kKHBhcmFtcy50b29sUmV0cmlldmVyKSxcbiAgICAgICAgICAgIHZlcmJvc2U6IHBhcmFtcy52ZXJib3NlID8/IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjcmVhdGVTdG9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlYXNvbnM6IFtdXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyB0YXNrSGFuZGxlciA9IGFzeW5jIChzdGVwLCBlbnF1ZXVlT3V0cHV0KT0+e1xuICAgICAgICBjb25zdCB7IGxsbSwgc3RyZWFtLCBnZXRUb29scyB9ID0gc3RlcC5jb250ZXh0O1xuICAgICAgICBjb25zdCBsYXN0TWVzc2FnZSA9IHN0ZXAuY29udGV4dC5zdG9yZS5tZXNzYWdlcy5hdCgtMSkuY29udGVudDtcbiAgICAgICAgY29uc3QgdG9vbHMgPSBhd2FpdCBnZXRUb29scyhsYXN0TWVzc2FnZSk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgY2hhdEZvcm1hdHRlcih0b29scywgc3RlcC5jb250ZXh0LnN0b3JlLm1lc3NhZ2VzLCBzdGVwLmNvbnRleHQuc3RvcmUucmVhc29ucyk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbGxtLmNoYXQoe1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBib29sZWFuXG4gICAgICAgICAgICBzdHJlYW0sXG4gICAgICAgICAgICBtZXNzYWdlc1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVhc29uID0gYXdhaXQgcmVBQ1RPdXRwdXRQYXJzZXIocmVzcG9uc2UsICh0eXBlLCByZXNwb25zZSk9PntcbiAgICAgICAgICAgIGVucXVldWVPdXRwdXQoe1xuICAgICAgICAgICAgICAgIHRhc2tTdGVwOiBzdGVwLFxuICAgICAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgaXNMYXN0OiB0eXBlICE9PSBcImFjdGlvblwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0ZXAuY29udGV4dC5sb2dnZXIubG9nKFwiY3VycmVudCByZWFzb246ICVPXCIsIHJlYXNvbik7XG4gICAgICAgIHN0ZXAuY29udGV4dC5zdG9yZS5yZWFzb25zID0gW1xuICAgICAgICAgICAgLi4uc3RlcC5jb250ZXh0LnN0b3JlLnJlYXNvbnMsXG4gICAgICAgICAgICByZWFzb25cbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHJlYXNvbi50eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCB0b29sID0gdG9vbHMuZmluZCgodG9vbCk9PnRvb2wubWV0YWRhdGEubmFtZSA9PT0gcmVhc29uLmFjdGlvbik7XG4gICAgICAgICAgICBjb25zdCB0b29sT3V0cHV0ID0gYXdhaXQgY2FsbFRvb2wodG9vbCwge1xuICAgICAgICAgICAgICAgIGlkOiByYW5kb21VVUlEKCksXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHJlYXNvbi5pbnB1dCxcbiAgICAgICAgICAgICAgICBuYW1lOiByZWFzb24uYWN0aW9uXG4gICAgICAgICAgICB9LCBzdGVwLmNvbnRleHQubG9nZ2VyKTtcbiAgICAgICAgICAgIHN0ZXAuY29udGV4dC5zdG9yZS5yZWFzb25zID0gW1xuICAgICAgICAgICAgICAgIC4uLnN0ZXAuY29udGV4dC5zdG9yZS5yZWFzb25zLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvYnNlcnZhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhdGlvbjogdG9vbE91dHB1dC5vdXRwdXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/agent/react.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/cloud/LLamaCloudFileService.js":
/*!*********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/cloud/LLamaCloudFileService.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLamaCloudFileService: () => (/* binding */ LLamaCloudFileService)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/cloud/api */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/utils.js\");\n\n\nclass LLamaCloudFileService {\n    /**\n   * Get list of projects, each project contains a list of pipelines\n   */ static async getAllProjectsWithPipelines() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.initService)();\n        try {\n            const { data: projects } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.listProjectsApiV1ProjectsGet)({\n                throwOnError: true\n            });\n            const { data: pipelines } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.searchPipelinesApiV1PipelinesGet)({\n                throwOnError: true\n            });\n            return projects.map((project)=>({\n                    ...project,\n                    pipelines: pipelines.filter((p)=>p.project_id === project.id)\n                }));\n        } catch (error) {\n            console.error(\"Error listing projects and pipelines:\", error);\n            return [];\n        }\n    }\n    /**\n   * Upload a file to a pipeline in LlamaCloud\n   */ static async addFileToPipeline(projectId, pipelineId, uploadFile, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    customMetadata = {}) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.initService)();\n        const { data: file } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.uploadFileApiV1FilesPost)({\n            query: {\n                project_id: projectId\n            },\n            body: {\n                upload_file: uploadFile\n            },\n            throwOnError: true\n        });\n        const files = [\n            {\n                file_id: file.id,\n                custom_metadata: {\n                    file_id: file.id,\n                    ...customMetadata\n                }\n            }\n        ];\n        await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.addFilesToPipelineApiV1PipelinesPipelineIdFilesPut)({\n            path: {\n                pipeline_id: pipelineId\n            },\n            body: files\n        });\n        // Wait 2s for the file to be processed\n        const maxAttempts = 20;\n        let attempt = 0;\n        while(attempt < maxAttempts){\n            const { data: result } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet)({\n                path: {\n                    pipeline_id: pipelineId,\n                    file_id: file.id\n                },\n                throwOnError: true\n            });\n            if (result.status === \"ERROR\") {\n                throw new Error(`File processing failed: ${JSON.stringify(result)}`);\n            }\n            if (result.status === \"SUCCESS\") {\n                // File is ingested - return the file id\n                return file.id;\n            }\n            attempt += 1;\n            await new Promise((resolve)=>setTimeout(resolve, 100)); // Sleep for 100ms\n        }\n        throw new Error(`File processing did not complete after ${maxAttempts} attempts. Check your LlamaCloud index at https://cloud.llamaindex.ai/project/${projectId}/deploy/${pipelineId} for more details.`);\n    }\n    /**\n   * Get download URL for a file in LlamaCloud\n   */ static async getFileUrl(pipelineId, filename) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.initService)();\n        const { data: allPipelineFiles } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.listPipelineFilesApiV1PipelinesPipelineIdFilesGet)({\n            path: {\n                pipeline_id: pipelineId\n            },\n            throwOnError: true\n        });\n        const file = allPipelineFiles.find((file)=>file.name === filename);\n        if (!file?.file_id) return null;\n        const { data: fileContent } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.readFileContentApiV1FilesIdContentGet)({\n            path: {\n                id: file.file_id\n            },\n            query: {\n                project_id: file.project_id\n            },\n            throwOnError: true\n        });\n        return fileContent.url;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2Nsb3VkL0xMYW1hQ2xvdWRGaWxlU2VydmljZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa1Y7QUFDelM7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFXO0FBQ25CO0FBQ0Esb0JBQW9CLGlCQUFpQixRQUFRLG1GQUE0QjtBQUN6RTtBQUNBLGFBQWE7QUFDYixvQkFBb0Isa0JBQWtCLFFBQVEsdUZBQWdDO0FBQzlFO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsUUFBUSxzREFBVztBQUNuQixnQkFBZ0IsYUFBYSxRQUFRLCtFQUF3QjtBQUM3RDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5R0FBa0Q7QUFDaEU7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixlQUFlLFFBQVEsd0hBQWlFO0FBQzVHO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBLDJEQUEyRCx1QkFBdUI7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0Esa0VBQWtFLGFBQWEsK0VBQStFLFVBQVUsVUFBVSxZQUFZO0FBQzlMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBVztBQUNuQixnQkFBZ0IseUJBQXlCLFFBQVEsd0dBQWlEO0FBQ2xHO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0IsUUFBUSw0RkFBcUM7QUFDakY7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvY2xvdWQvTExhbWFDbG91ZEZpbGVTZXJ2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZEZpbGVzVG9QaXBlbGluZUFwaVYxUGlwZWxpbmVzUGlwZWxpbmVJZEZpbGVzUHV0LCBnZXRQaXBlbGluZUZpbGVTdGF0dXNBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRGaWxlc0ZpbGVJZFN0YXR1c0dldCwgbGlzdFBpcGVsaW5lRmlsZXNBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRGaWxlc0dldCwgbGlzdFByb2plY3RzQXBpVjFQcm9qZWN0c0dldCwgcmVhZEZpbGVDb250ZW50QXBpVjFGaWxlc0lkQ29udGVudEdldCwgc2VhcmNoUGlwZWxpbmVzQXBpVjFQaXBlbGluZXNHZXQsIHVwbG9hZEZpbGVBcGlWMUZpbGVzUG9zdCB9IGZyb20gXCJAbGxhbWFpbmRleC9jbG91ZC9hcGlcIjtcbmltcG9ydCB7IGluaXRTZXJ2aWNlIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmV4cG9ydCBjbGFzcyBMTGFtYUNsb3VkRmlsZVNlcnZpY2Uge1xuICAgIC8qKlxuICAgKiBHZXQgbGlzdCBvZiBwcm9qZWN0cywgZWFjaCBwcm9qZWN0IGNvbnRhaW5zIGEgbGlzdCBvZiBwaXBlbGluZXNcbiAgICovIHN0YXRpYyBhc3luYyBnZXRBbGxQcm9qZWN0c1dpdGhQaXBlbGluZXMoKSB7XG4gICAgICAgIGluaXRTZXJ2aWNlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGE6IHByb2plY3RzIH0gPSBhd2FpdCBsaXN0UHJvamVjdHNBcGlWMVByb2plY3RzR2V0KHtcbiAgICAgICAgICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBwaXBlbGluZXMgfSA9IGF3YWl0IHNlYXJjaFBpcGVsaW5lc0FwaVYxUGlwZWxpbmVzR2V0KHtcbiAgICAgICAgICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHByb2plY3RzLm1hcCgocHJvamVjdCk9Pih7XG4gICAgICAgICAgICAgICAgICAgIC4uLnByb2plY3QsXG4gICAgICAgICAgICAgICAgICAgIHBpcGVsaW5lczogcGlwZWxpbmVzLmZpbHRlcigocCk9PnAucHJvamVjdF9pZCA9PT0gcHJvamVjdC5pZClcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbGlzdGluZyBwcm9qZWN0cyBhbmQgcGlwZWxpbmVzOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAqIFVwbG9hZCBhIGZpbGUgdG8gYSBwaXBlbGluZSBpbiBMbGFtYUNsb3VkXG4gICAqLyBzdGF0aWMgYXN5bmMgYWRkRmlsZVRvUGlwZWxpbmUocHJvamVjdElkLCBwaXBlbGluZUlkLCB1cGxvYWRGaWxlLCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGN1c3RvbU1ldGFkYXRhID0ge30pIHtcbiAgICAgICAgaW5pdFNlcnZpY2UoKTtcbiAgICAgICAgY29uc3QgeyBkYXRhOiBmaWxlIH0gPSBhd2FpdCB1cGxvYWRGaWxlQXBpVjFGaWxlc1Bvc3Qoe1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0X2lkOiBwcm9qZWN0SWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgdXBsb2FkX2ZpbGU6IHVwbG9hZEZpbGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpbGVfaWQ6IGZpbGUuaWQsXG4gICAgICAgICAgICAgICAgY3VzdG9tX21ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVfaWQ6IGZpbGUuaWQsXG4gICAgICAgICAgICAgICAgICAgIC4uLmN1c3RvbU1ldGFkYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICBhd2FpdCBhZGRGaWxlc1RvUGlwZWxpbmVBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRGaWxlc1B1dCh7XG4gICAgICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgICAgICAgcGlwZWxpbmVfaWQ6IHBpcGVsaW5lSWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBmaWxlc1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2FpdCAycyBmb3IgdGhlIGZpbGUgdG8gYmUgcHJvY2Vzc2VkXG4gICAgICAgIGNvbnN0IG1heEF0dGVtcHRzID0gMjA7XG4gICAgICAgIGxldCBhdHRlbXB0ID0gMDtcbiAgICAgICAgd2hpbGUoYXR0ZW1wdCA8IG1heEF0dGVtcHRzKXtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogcmVzdWx0IH0gPSBhd2FpdCBnZXRQaXBlbGluZUZpbGVTdGF0dXNBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRGaWxlc0ZpbGVJZFN0YXR1c0dldCh7XG4gICAgICAgICAgICAgICAgcGF0aDoge1xuICAgICAgICAgICAgICAgICAgICBwaXBlbGluZV9pZDogcGlwZWxpbmVJZCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZV9pZDogZmlsZS5pZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGhyb3dPbkVycm9yOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcIkVSUk9SXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGUgcHJvY2Vzc2luZyBmYWlsZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgIC8vIEZpbGUgaXMgaW5nZXN0ZWQgLSByZXR1cm4gdGhlIGZpbGUgaWRcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dGVtcHQgKz0gMTtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+c2V0VGltZW91dChyZXNvbHZlLCAxMDApKTsgLy8gU2xlZXAgZm9yIDEwMG1zXG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIHByb2Nlc3NpbmcgZGlkIG5vdCBjb21wbGV0ZSBhZnRlciAke21heEF0dGVtcHRzfSBhdHRlbXB0cy4gQ2hlY2sgeW91ciBMbGFtYUNsb3VkIGluZGV4IGF0IGh0dHBzOi8vY2xvdWQubGxhbWFpbmRleC5haS9wcm9qZWN0LyR7cHJvamVjdElkfS9kZXBsb3kvJHtwaXBlbGluZUlkfSBmb3IgbW9yZSBkZXRhaWxzLmApO1xuICAgIH1cbiAgICAvKipcbiAgICogR2V0IGRvd25sb2FkIFVSTCBmb3IgYSBmaWxlIGluIExsYW1hQ2xvdWRcbiAgICovIHN0YXRpYyBhc3luYyBnZXRGaWxlVXJsKHBpcGVsaW5lSWQsIGZpbGVuYW1lKSB7XG4gICAgICAgIGluaXRTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogYWxsUGlwZWxpbmVGaWxlcyB9ID0gYXdhaXQgbGlzdFBpcGVsaW5lRmlsZXNBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRGaWxlc0dldCh7XG4gICAgICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgICAgICAgcGlwZWxpbmVfaWQ6IHBpcGVsaW5lSWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBhbGxQaXBlbGluZUZpbGVzLmZpbmQoKGZpbGUpPT5maWxlLm5hbWUgPT09IGZpbGVuYW1lKTtcbiAgICAgICAgaWYgKCFmaWxlPy5maWxlX2lkKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgeyBkYXRhOiBmaWxlQ29udGVudCB9ID0gYXdhaXQgcmVhZEZpbGVDb250ZW50QXBpVjFGaWxlc0lkQ29udGVudEdldCh7XG4gICAgICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGZpbGUuZmlsZV9pZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgcHJvamVjdF9pZDogZmlsZS5wcm9qZWN0X2lkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhyb3dPbkVycm9yOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZUNvbnRlbnQudXJsO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/cloud/LLamaCloudFileService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudIndex.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/cloud/LlamaCloudIndex.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LlamaCloudIndex: () => (/* binding */ LlamaCloudIndex)\n/* harmony export */ });\n/* harmony import */ var _engines_query_RetrieverQueryEngine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engines/query/RetrieverQueryEngine.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/RetrieverQueryEngine.js\");\n/* harmony import */ var _LlamaCloudRetriever_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LlamaCloudRetriever.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudRetriever.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/utils.js\");\n/* harmony import */ var _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/cloud/api */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n\n\n\n\n\n\nclass LlamaCloudIndex {\n    params;\n    constructor(params){\n        this.params = params;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.initService)(this.params);\n    }\n    async waitForPipelineIngestion(verbose = _Settings_js__WEBPACK_IMPORTED_MODULE_5__.Settings.debug, raiseOnError = false) {\n        const pipelineId = await this.getPipelineId();\n        if (verbose) {\n            console.log(\"Waiting for pipeline ingestion: \");\n        }\n        while(true){\n            const { data: pipelineStatus } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.getPipelineStatusApiV1PipelinesPipelineIdStatusGet)({\n                path: {\n                    pipeline_id: pipelineId\n                },\n                throwOnError: true\n            });\n            if (pipelineStatus.status === \"SUCCESS\") {\n                if (verbose) {\n                    console.log(\"Pipeline ingestion completed successfully\");\n                }\n                break;\n            }\n            if (pipelineStatus.status === \"ERROR\") {\n                if (verbose) {\n                    console.error(\"Pipeline ingestion failed\");\n                }\n                if (raiseOnError) {\n                    throw new Error(\"Pipeline ingestion failed\");\n                }\n            }\n            if (verbose) {\n                process.stdout.write(\".\");\n            }\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n    }\n    async waitForDocumentIngestion(docIds, verbose = _Settings_js__WEBPACK_IMPORTED_MODULE_5__.Settings.debug, raiseOnError = false) {\n        const pipelineId = await this.getPipelineId();\n        if (verbose) {\n            console.log(\"Loading data: \");\n        }\n        const pendingDocs = new Set(docIds);\n        while(pendingDocs.size){\n            const docsToRemove = new Set();\n            for (const doc of pendingDocs){\n                const { data: { status } } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet)({\n                    path: {\n                        pipeline_id: pipelineId,\n                        document_id: doc\n                    },\n                    throwOnError: true\n                });\n                if (status === \"NOT_STARTED\" || status === \"IN_PROGRESS\") {\n                    continue;\n                }\n                if (status === \"ERROR\") {\n                    if (verbose) {\n                        console.error(`Document ingestion failed for ${doc}`);\n                    }\n                    if (raiseOnError) {\n                        throw new Error(`Document ingestion failed for ${doc}`);\n                    }\n                }\n                docsToRemove.add(doc);\n            }\n            for (const doc of docsToRemove){\n                pendingDocs.delete(doc);\n            }\n            if (pendingDocs.size) {\n                if (verbose) {\n                    process.stdout.write(\".\");\n                }\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n            }\n        }\n        if (verbose) {\n            console.log(\"Done!\");\n        }\n        await this.waitForPipelineIngestion(verbose, raiseOnError);\n    }\n    async getPipelineId(name, projectName, organizationId) {\n        return await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getPipelineId)(name ?? this.params.name, projectName ?? this.params.projectName, organizationId ?? this.params.organizationId);\n    }\n    async getProjectId(projectName, organizationId) {\n        return await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getProjectId)(projectName ?? this.params.projectName, organizationId ?? this.params.organizationId);\n    }\n    /**\n   * Adds documents to the given index parameters. If the index does not exist, it will be created.\n   *\n   * @param params - An object containing the following properties:\n   *   - documents: An array of Document objects to be added to the index.\n   *   - verbose: Optional boolean to enable verbose logging.\n   *   - Additional properties from CloudConstructorParams.\n   * @returns A Promise that resolves to a new LlamaCloudIndex instance.\n   */ static async fromDocuments(params, config) {\n        const index = new LlamaCloudIndex({\n            ...params\n        });\n        await index.ensureIndex({\n            ...config,\n            verbose: params.verbose ?? false\n        });\n        await index.addDocuments(params.documents, params.verbose);\n        return index;\n    }\n    async addDocuments(documents, verbose) {\n        const apiUrl = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAppBaseUrl)();\n        const projectId = await this.getProjectId();\n        const pipelineId = await this.getPipelineId();\n        await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut)({\n            path: {\n                pipeline_id: pipelineId\n            },\n            body: documents.map((doc)=>({\n                    metadata: doc.metadata,\n                    text: doc.text,\n                    excluded_embed_metadata_keys: doc.excludedEmbedMetadataKeys,\n                    excluded_llm_metadata_keys: doc.excludedEmbedMetadataKeys,\n                    id: doc.id_\n                }))\n        });\n        while(true){\n            const { data: pipelineStatus } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.getPipelineStatusApiV1PipelinesPipelineIdStatusGet)({\n                path: {\n                    pipeline_id: pipelineId\n                },\n                throwOnError: true\n            });\n            if (pipelineStatus.status === \"SUCCESS\") {\n                console.info(\"Documents ingested successfully, pipeline is ready to use\");\n                break;\n            }\n            if (pipelineStatus.status === \"ERROR\") {\n                console.error(`Some documents failed to ingest, check your pipeline logs at ${apiUrl}/project/${projectId}/deploy/${pipelineId}`);\n                throw new Error(\"Some documents failed to ingest\");\n            }\n            if (pipelineStatus.status === \"PARTIAL_SUCCESS\") {\n                console.info(`Documents ingestion partially succeeded, to check a more complete status check your pipeline at ${apiUrl}/project/${projectId}/deploy/${pipelineId}`);\n                break;\n            }\n            if (verbose) {\n                process.stdout.write(\".\");\n            }\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n        if (verbose) {\n            console.info(`Ingestion completed, find your index at ${apiUrl}/project/${projectId}/deploy/${pipelineId}`);\n        }\n    }\n    asRetriever(params = {}) {\n        return new _LlamaCloudRetriever_js__WEBPACK_IMPORTED_MODULE_1__.LlamaCloudRetriever({\n            ...this.params,\n            ...params\n        });\n    }\n    asQueryEngine(params) {\n        const retriever = new _LlamaCloudRetriever_js__WEBPACK_IMPORTED_MODULE_1__.LlamaCloudRetriever({\n            ...this.params,\n            ...params\n        });\n        return new _engines_query_RetrieverQueryEngine_js__WEBPACK_IMPORTED_MODULE_0__.RetrieverQueryEngine(retriever, params?.responseSynthesizer, params?.nodePostprocessors);\n    }\n    async insert(document) {\n        const pipelineId = await this.getPipelineId();\n        await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost)({\n            path: {\n                pipeline_id: pipelineId\n            },\n            body: [\n                {\n                    metadata: document.metadata,\n                    text: document.text,\n                    excluded_embed_metadata_keys: document.excludedLlmMetadataKeys,\n                    excluded_llm_metadata_keys: document.excludedEmbedMetadataKeys,\n                    id: document.id_\n                }\n            ]\n        });\n        await this.waitForDocumentIngestion([\n            document.id_\n        ]);\n    }\n    async delete(document) {\n        const pipelineId = await this.getPipelineId();\n        await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete)({\n            path: {\n                pipeline_id: pipelineId,\n                document_id: document.id_\n            }\n        });\n        await this.waitForPipelineIngestion();\n    }\n    async refreshDoc(document) {\n        const pipelineId = await this.getPipelineId();\n        await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut)({\n            path: {\n                pipeline_id: pipelineId\n            },\n            body: [\n                {\n                    metadata: document.metadata,\n                    text: document.text,\n                    excluded_embed_metadata_keys: document.excludedLlmMetadataKeys,\n                    excluded_llm_metadata_keys: document.excludedEmbedMetadataKeys,\n                    id: document.id_\n                }\n            ]\n        });\n        await this.waitForDocumentIngestion([\n            document.id_\n        ]);\n    }\n    async ensureIndex(config) {\n        const projectId = await this.getProjectId();\n        const { data: pipelines } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.searchPipelinesApiV1PipelinesGet)({\n            query: {\n                project_id: projectId,\n                pipeline_name: this.params.name\n            },\n            throwOnError: true\n        });\n        if (pipelines.length === 0) {\n            // no pipeline found, create a new one\n            let embeddingConfig = config?.embedding;\n            if (!embeddingConfig) {\n                // no embedding config provided, use OpenAI as default\n                const openAIApiKey = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_4__.getEnv)(\"OPENAI_API_KEY\");\n                const embeddingModel = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_4__.getEnv)(\"EMBEDDING_MODEL\");\n                if (!openAIApiKey || !embeddingModel) {\n                    throw new Error(\"No embedding configuration provided. Fallback to OpenAI embedding model. OPENAI_API_KEY and EMBEDDING_MODEL environment variables must be set.\");\n                }\n                embeddingConfig = {\n                    type: \"OPENAI_EMBEDDING\",\n                    component: {\n                        api_key: openAIApiKey,\n                        model_name: embeddingModel\n                    }\n                };\n            }\n            let transformConfig = config?.transform;\n            if (!transformConfig) {\n                transformConfig = {\n                    mode: \"auto\",\n                    chunk_size: 1024,\n                    chunk_overlap: 200\n                };\n            }\n            const { data: pipeline } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_3__.upsertPipelineApiV1PipelinesPut)({\n                query: {\n                    project_id: projectId\n                },\n                body: {\n                    name: this.params.name,\n                    embedding_config: embeddingConfig,\n                    transform_config: transformConfig\n                },\n                throwOnError: true\n            });\n            if (config?.verbose) {\n                console.log(`Created pipeline ${pipeline.id} with name ${pipeline.name}`);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudIndex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudRetriever.js":
/*!*******************************************************************!*\
  !*** ./node_modules/llamaindex/dist/cloud/LlamaCloudRetriever.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LlamaCloudRetriever: () => (/* binding */ LlamaCloudRetriever)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/cloud/api */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/retriever */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/utils.js\");\n\n\n\n\n\n\nclass LlamaCloudRetriever extends _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_2__.BaseRetriever {\n    clientParams;\n    retrieveParams;\n    organizationId;\n    projectName = _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PROJECT_NAME;\n    pipelineName;\n    resultNodesToNodeWithScore(nodes) {\n        return nodes.map((node)=>{\n            const textNode = (0,_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_3__.jsonToNode)(node.node, _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_3__.ObjectType.TEXT);\n            textNode.metadata = {\n                ...textNode.metadata,\n                ...node.node.extra_info\n            };\n            return {\n                // Currently LlamaCloud only supports text nodes\n                node: textNode,\n                score: node.score ?? undefined\n            };\n        });\n    }\n    // LlamaCloud expects null values for filters, but LlamaIndexTS uses undefined for empty values\n    // This function converts the undefined values to null\n    convertFilter(filters) {\n        if (!filters) return null;\n        const processFilter = (filter)=>{\n            if (\"filters\" in filter) {\n                // type MetadataFilters\n                return {\n                    ...filter,\n                    filters: filter.filters.map(processFilter)\n                };\n            }\n            return {\n                ...filter,\n                value: filter.value ?? null\n            };\n        };\n        return {\n            ...filters,\n            filters: filters.filters.map(processFilter)\n        };\n    }\n    constructor(params){\n        super();\n        this.clientParams = {\n            apiKey: params.apiKey,\n            baseUrl: params.baseUrl\n        };\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.initService)(this.clientParams);\n        this.retrieveParams = params;\n        this.pipelineName = params.name;\n        if (params.projectName) {\n            this.projectName = params.projectName;\n        }\n        if (params.organizationId) {\n            this.organizationId = params.organizationId;\n        }\n    }\n    async _retrieve(query) {\n        const pipelineId = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.getPipelineId)(this.pipelineName, this.projectName, this.organizationId);\n        const filters = this.convertFilter(this.retrieveParams.filters);\n        const { data: results } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.runSearchApiV1PipelinesPipelineIdRetrievePost)({\n            throwOnError: true,\n            path: {\n                pipeline_id: pipelineId\n            },\n            body: {\n                ...this.retrieveParams,\n                query: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(query),\n                search_filters: filters,\n                dense_similarity_top_k: this.retrieveParams.similarityTopK\n            }\n        });\n        return this.resultNodesToNodeWithScore(results.retrieval_nodes);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2Nsb3VkL0xsYW1hQ2xvdWRSZXRyaWV2ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFzRjtBQUN2QjtBQUNKO0FBQ007QUFDWjtBQUNHO0FBQ2pELGtDQUFrQyxxRUFBYTtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseUVBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixtRUFBVSxZQUFZLCtEQUFVO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx3REFBYTtBQUM5QztBQUNBLGdCQUFnQixnQkFBZ0IsUUFBUSxvR0FBNkM7QUFDckY7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSx1QkFBdUIsbUVBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvY2xvdWQvTGxhbWFDbG91ZFJldHJpZXZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBydW5TZWFyY2hBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRSZXRyaWV2ZVBvc3QgfSBmcm9tIFwiQGxsYW1haW5kZXgvY2xvdWQvYXBpXCI7XG5pbXBvcnQgeyBERUZBVUxUX1BST0pFQ1RfTkFNRSB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL2dsb2JhbFwiO1xuaW1wb3J0IHsgQmFzZVJldHJpZXZlciB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3JldHJpZXZlclwiO1xuaW1wb3J0IHsganNvblRvTm9kZSwgT2JqZWN0VHlwZSB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3NjaGVtYVwiO1xuaW1wb3J0IHsgZXh0cmFjdFRleHQgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS91dGlsc1wiO1xuaW1wb3J0IHsgZ2V0UGlwZWxpbmVJZCwgaW5pdFNlcnZpY2UgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuZXhwb3J0IGNsYXNzIExsYW1hQ2xvdWRSZXRyaWV2ZXIgZXh0ZW5kcyBCYXNlUmV0cmlldmVyIHtcbiAgICBjbGllbnRQYXJhbXM7XG4gICAgcmV0cmlldmVQYXJhbXM7XG4gICAgb3JnYW5pemF0aW9uSWQ7XG4gICAgcHJvamVjdE5hbWUgPSBERUZBVUxUX1BST0pFQ1RfTkFNRTtcbiAgICBwaXBlbGluZU5hbWU7XG4gICAgcmVzdWx0Tm9kZXNUb05vZGVXaXRoU2NvcmUobm9kZXMpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVzLm1hcCgobm9kZSk9PntcbiAgICAgICAgICAgIGNvbnN0IHRleHROb2RlID0ganNvblRvTm9kZShub2RlLm5vZGUsIE9iamVjdFR5cGUuVEVYVCk7XG4gICAgICAgICAgICB0ZXh0Tm9kZS5tZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAuLi50ZXh0Tm9kZS5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAuLi5ub2RlLm5vZGUuZXh0cmFfaW5mb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudGx5IExsYW1hQ2xvdWQgb25seSBzdXBwb3J0cyB0ZXh0IG5vZGVzXG4gICAgICAgICAgICAgICAgbm9kZTogdGV4dE5vZGUsXG4gICAgICAgICAgICAgICAgc2NvcmU6IG5vZGUuc2NvcmUgPz8gdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gTGxhbWFDbG91ZCBleHBlY3RzIG51bGwgdmFsdWVzIGZvciBmaWx0ZXJzLCBidXQgTGxhbWFJbmRleFRTIHVzZXMgdW5kZWZpbmVkIGZvciBlbXB0eSB2YWx1ZXNcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIHRoZSB1bmRlZmluZWQgdmFsdWVzIHRvIG51bGxcbiAgICBjb252ZXJ0RmlsdGVyKGZpbHRlcnMpIHtcbiAgICAgICAgaWYgKCFmaWx0ZXJzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcHJvY2Vzc0ZpbHRlciA9IChmaWx0ZXIpPT57XG4gICAgICAgICAgICBpZiAoXCJmaWx0ZXJzXCIgaW4gZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gdHlwZSBNZXRhZGF0YUZpbHRlcnNcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5maWx0ZXIsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnM6IGZpbHRlci5maWx0ZXJzLm1hcChwcm9jZXNzRmlsdGVyKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmZpbHRlcixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZmlsdGVyLnZhbHVlID8/IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5maWx0ZXJzLFxuICAgICAgICAgICAgZmlsdGVyczogZmlsdGVycy5maWx0ZXJzLm1hcChwcm9jZXNzRmlsdGVyKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNsaWVudFBhcmFtcyA9IHtcbiAgICAgICAgICAgIGFwaUtleTogcGFyYW1zLmFwaUtleSxcbiAgICAgICAgICAgIGJhc2VVcmw6IHBhcmFtcy5iYXNlVXJsXG4gICAgICAgIH07XG4gICAgICAgIGluaXRTZXJ2aWNlKHRoaXMuY2xpZW50UGFyYW1zKTtcbiAgICAgICAgdGhpcy5yZXRyaWV2ZVBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5waXBlbGluZU5hbWUgPSBwYXJhbXMubmFtZTtcbiAgICAgICAgaWYgKHBhcmFtcy5wcm9qZWN0TmFtZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0TmFtZSA9IHBhcmFtcy5wcm9qZWN0TmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLm9yZ2FuaXphdGlvbklkKSB7XG4gICAgICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gcGFyYW1zLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9yZXRyaWV2ZShxdWVyeSkge1xuICAgICAgICBjb25zdCBwaXBlbGluZUlkID0gYXdhaXQgZ2V0UGlwZWxpbmVJZCh0aGlzLnBpcGVsaW5lTmFtZSwgdGhpcy5wcm9qZWN0TmFtZSwgdGhpcy5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLmNvbnZlcnRGaWx0ZXIodGhpcy5yZXRyaWV2ZVBhcmFtcy5maWx0ZXJzKTtcbiAgICAgICAgY29uc3QgeyBkYXRhOiByZXN1bHRzIH0gPSBhd2FpdCBydW5TZWFyY2hBcGlWMVBpcGVsaW5lc1BpcGVsaW5lSWRSZXRyaWV2ZVBvc3Qoe1xuICAgICAgICAgICAgdGhyb3dPbkVycm9yOiB0cnVlLFxuICAgICAgICAgICAgcGF0aDoge1xuICAgICAgICAgICAgICAgIHBpcGVsaW5lX2lkOiBwaXBlbGluZUlkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMucmV0cmlldmVQYXJhbXMsXG4gICAgICAgICAgICAgICAgcXVlcnk6IGV4dHJhY3RUZXh0KHF1ZXJ5KSxcbiAgICAgICAgICAgICAgICBzZWFyY2hfZmlsdGVyczogZmlsdGVycyxcbiAgICAgICAgICAgICAgICBkZW5zZV9zaW1pbGFyaXR5X3RvcF9rOiB0aGlzLnJldHJpZXZlUGFyYW1zLnNpbWlsYXJpdHlUb3BLXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHROb2Rlc1RvTm9kZVdpdGhTY29yZShyZXN1bHRzLnJldHJpZXZhbF9ub2Rlcyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudRetriever.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/cloud/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/llamaindex/dist/cloud/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLamaCloudFileService: () => (/* reexport safe */ _LLamaCloudFileService_js__WEBPACK_IMPORTED_MODULE_0__.LLamaCloudFileService),\n/* harmony export */   LlamaCloudIndex: () => (/* reexport safe */ _LlamaCloudIndex_js__WEBPACK_IMPORTED_MODULE_1__.LlamaCloudIndex),\n/* harmony export */   LlamaCloudRetriever: () => (/* reexport safe */ _LlamaCloudRetriever_js__WEBPACK_IMPORTED_MODULE_2__.LlamaCloudRetriever)\n/* harmony export */ });\n/* harmony import */ var _LLamaCloudFileService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LLamaCloudFileService.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/LLamaCloudFileService.js\");\n/* harmony import */ var _LlamaCloudIndex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LlamaCloudIndex.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudIndex.js\");\n/* harmony import */ var _LlamaCloudRetriever_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LlamaCloudRetriever.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/LlamaCloudRetriever.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2Nsb3VkL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFtRTtBQUNaO0FBQ1EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2Nsb3VkL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IExMYW1hQ2xvdWRGaWxlU2VydmljZSB9IGZyb20gXCIuL0xMYW1hQ2xvdWRGaWxlU2VydmljZS5qc1wiO1xuZXhwb3J0IHsgTGxhbWFDbG91ZEluZGV4IH0gZnJvbSBcIi4vTGxhbWFDbG91ZEluZGV4LmpzXCI7XG5leHBvcnQgeyBMbGFtYUNsb3VkUmV0cmlldmVyIH0gZnJvbSBcIi4vTGxhbWFDbG91ZFJldHJpZXZlci5qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/cloud/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/cloud/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/llamaindex/dist/cloud/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAppBaseUrl: () => (/* binding */ getAppBaseUrl),\n/* harmony export */   getPipelineId: () => (/* binding */ getPipelineId),\n/* harmony export */   getProjectId: () => (/* binding */ getProjectId),\n/* harmony export */   initService: () => (/* binding */ initService)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/cloud/api */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n\n\n\nfunction getBaseUrl(baseUrl) {\n    return baseUrl ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_2__.getEnv)(\"LLAMA_CLOUD_BASE_URL\") ?? _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_BASE_URL;\n}\nfunction getAppBaseUrl() {\n    return _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.client.getConfig().baseUrl?.replace(/api\\./, \"\") ?? \"\";\n}\n// fixme: refactor this to init at the top level or module level\nlet initOnce = false;\nfunction initService({ apiKey, baseUrl } = {}) {\n    if (initOnce) {\n        return;\n    }\n    initOnce = true;\n    _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.client.setConfig({\n        baseUrl: getBaseUrl(baseUrl),\n        throwOnError: true\n    });\n    const token = apiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_2__.getEnv)(\"LLAMA_CLOUD_API_KEY\");\n    _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.client.interceptors.request.use((request)=>{\n        request.headers.set(\"Authorization\", `Bearer ${token}`);\n        return request;\n    });\n    _llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.client.interceptors.error.use((error)=>{\n        throw new Error(`LlamaCloud API request failed. Error details: ${JSON.stringify(error)}`);\n    });\n    if (!token) {\n        throw new Error(\"API Key is required for LlamaCloudIndex. Please pass the apiKey parameter\");\n    }\n}\nasync function getProjectId(projectName, organizationId) {\n    const { data: projects } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.listProjectsApiV1ProjectsGet)({\n        query: {\n            project_name: projectName,\n            organization_id: organizationId ?? null\n        },\n        throwOnError: true\n    });\n    if (projects.length === 0) {\n        throw new Error(`Unknown project name ${projectName}. Please confirm a managed project with this name exists.`);\n    } else if (projects.length > 1) {\n        throw new Error(`Multiple projects found with name ${projectName}. Please specify organization_id.`);\n    }\n    const project = projects[0];\n    if (!project.id) {\n        throw new Error(`No project found with name ${projectName}`);\n    }\n    return project.id;\n}\nasync function getPipelineId(name, projectName, organizationId) {\n    const { data: pipelines } = await (0,_llamaindex_cloud_api__WEBPACK_IMPORTED_MODULE_0__.searchPipelinesApiV1PipelinesGet)({\n        query: {\n            project_id: await getProjectId(projectName, organizationId),\n            pipeline_name: name\n        },\n        throwOnError: true\n    });\n    if (pipelines.length === 0 || !pipelines[0].id) {\n        throw new Error(`No pipeline found with name ${name} in project ${projectName}`);\n    }\n    return pipelines[0].id;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2Nsb3VkL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBK0c7QUFDcEQ7QUFDbEI7QUFDekM7QUFDQSxzQkFBc0IsdURBQU0sNEJBQTRCLHFFQUFnQjtBQUN4RTtBQUNPO0FBQ1AsV0FBVyx5REFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDTyx1QkFBdUIsa0JBQWtCLElBQUk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlEQUFNO0FBQ1Y7QUFDQTtBQUNBLEtBQUs7QUFDTCw0QkFBNEIsdURBQU07QUFDbEMsSUFBSSx5REFBTTtBQUNWLHVEQUF1RCxNQUFNO0FBQzdEO0FBQ0EsS0FBSztBQUNMLElBQUkseURBQU07QUFDVix5RUFBeUUsc0JBQXNCO0FBQy9GLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxpQkFBaUIsUUFBUSxtRkFBNEI7QUFDakU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0RBQWdELFlBQVk7QUFDNUQsTUFBTTtBQUNOLDZEQUE2RCxZQUFZO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxZQUFZO0FBQ2xFO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxrQkFBa0IsUUFBUSx1RkFBZ0M7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsdURBQXVELE1BQU0sYUFBYSxZQUFZO0FBQ3RGO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvY2xvdWQvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xpZW50LCBsaXN0UHJvamVjdHNBcGlWMVByb2plY3RzR2V0LCBzZWFyY2hQaXBlbGluZXNBcGlWMVBpcGVsaW5lc0dldCB9IGZyb20gXCJAbGxhbWFpbmRleC9jbG91ZC9hcGlcIjtcbmltcG9ydCB7IERFRkFVTFRfQkFTRV9VUkwgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9nbG9iYWxcIjtcbmltcG9ydCB7IGdldEVudiB9IGZyb20gXCJAbGxhbWFpbmRleC9lbnZcIjtcbmZ1bmN0aW9uIGdldEJhc2VVcmwoYmFzZVVybCkge1xuICAgIHJldHVybiBiYXNlVXJsID8/IGdldEVudihcIkxMQU1BX0NMT1VEX0JBU0VfVVJMXCIpID8/IERFRkFVTFRfQkFTRV9VUkw7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwQmFzZVVybCgpIHtcbiAgICByZXR1cm4gY2xpZW50LmdldENvbmZpZygpLmJhc2VVcmw/LnJlcGxhY2UoL2FwaVxcLi8sIFwiXCIpID8/IFwiXCI7XG59XG4vLyBmaXhtZTogcmVmYWN0b3IgdGhpcyB0byBpbml0IGF0IHRoZSB0b3AgbGV2ZWwgb3IgbW9kdWxlIGxldmVsXG5sZXQgaW5pdE9uY2UgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBpbml0U2VydmljZSh7IGFwaUtleSwgYmFzZVVybCB9ID0ge30pIHtcbiAgICBpZiAoaW5pdE9uY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbml0T25jZSA9IHRydWU7XG4gICAgY2xpZW50LnNldENvbmZpZyh7XG4gICAgICAgIGJhc2VVcmw6IGdldEJhc2VVcmwoYmFzZVVybCksXG4gICAgICAgIHRocm93T25FcnJvcjogdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IHRva2VuID0gYXBpS2V5ID8/IGdldEVudihcIkxMQU1BX0NMT1VEX0FQSV9LRVlcIik7XG4gICAgY2xpZW50LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZSgocmVxdWVzdCk9PntcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYEJlYXJlciAke3Rva2VufWApO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9KTtcbiAgICBjbGllbnQuaW50ZXJjZXB0b3JzLmVycm9yLnVzZSgoZXJyb3IpPT57XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTGxhbWFDbG91ZCBBUEkgcmVxdWVzdCBmYWlsZWQuIEVycm9yIGRldGFpbHM6ICR7SlNPTi5zdHJpbmdpZnkoZXJyb3IpfWApO1xuICAgIH0pO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQVBJIEtleSBpcyByZXF1aXJlZCBmb3IgTGxhbWFDbG91ZEluZGV4LiBQbGVhc2UgcGFzcyB0aGUgYXBpS2V5IHBhcmFtZXRlclwiKTtcbiAgICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHJvamVjdElkKHByb2plY3ROYW1lLCBvcmdhbml6YXRpb25JZCkge1xuICAgIGNvbnN0IHsgZGF0YTogcHJvamVjdHMgfSA9IGF3YWl0IGxpc3RQcm9qZWN0c0FwaVYxUHJvamVjdHNHZXQoe1xuICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgcHJvamVjdF9uYW1lOiBwcm9qZWN0TmFtZSxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbl9pZDogb3JnYW5pemF0aW9uSWQgPz8gbnVsbFxuICAgICAgICB9LFxuICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICB9KTtcbiAgICBpZiAocHJvamVjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwcm9qZWN0IG5hbWUgJHtwcm9qZWN0TmFtZX0uIFBsZWFzZSBjb25maXJtIGEgbWFuYWdlZCBwcm9qZWN0IHdpdGggdGhpcyBuYW1lIGV4aXN0cy5gKTtcbiAgICB9IGVsc2UgaWYgKHByb2plY3RzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNdWx0aXBsZSBwcm9qZWN0cyBmb3VuZCB3aXRoIG5hbWUgJHtwcm9qZWN0TmFtZX0uIFBsZWFzZSBzcGVjaWZ5IG9yZ2FuaXphdGlvbl9pZC5gKTtcbiAgICB9XG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RzWzBdO1xuICAgIGlmICghcHJvamVjdC5pZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHByb2plY3QgZm91bmQgd2l0aCBuYW1lICR7cHJvamVjdE5hbWV9YCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9qZWN0LmlkO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBpcGVsaW5lSWQobmFtZSwgcHJvamVjdE5hbWUsIG9yZ2FuaXphdGlvbklkKSB7XG4gICAgY29uc3QgeyBkYXRhOiBwaXBlbGluZXMgfSA9IGF3YWl0IHNlYXJjaFBpcGVsaW5lc0FwaVYxUGlwZWxpbmVzR2V0KHtcbiAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgIHByb2plY3RfaWQ6IGF3YWl0IGdldFByb2plY3RJZChwcm9qZWN0TmFtZSwgb3JnYW5pemF0aW9uSWQpLFxuICAgICAgICAgICAgcGlwZWxpbmVfbmFtZTogbmFtZVxuICAgICAgICB9LFxuICAgICAgICB0aHJvd09uRXJyb3I6IHRydWVcbiAgICB9KTtcbiAgICBpZiAocGlwZWxpbmVzLmxlbmd0aCA9PT0gMCB8fCAhcGlwZWxpbmVzWzBdLmlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcGlwZWxpbmUgZm91bmQgd2l0aCBuYW1lICR7bmFtZX0gaW4gcHJvamVjdCAke3Byb2plY3ROYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZWxpbmVzWzBdLmlkO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/cloud/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/engines/chat/CondenseQuestionChatEngine.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/engines/chat/CondenseQuestionChatEngine.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CondenseQuestionChatEngine: () => (/* binding */ CondenseQuestionChatEngine)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/chat-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js\");\n/* harmony import */ var _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/decorator */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/memory */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js\");\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto;\n\n\n\n\n\n\n/**\n * CondenseQuestionChatEngine is used in conjunction with a Index (for example VectorStoreIndex).\n * It does two steps on taking a user's chat message: first, it condenses the chat message\n * with the previous chat history into a question with more context.\n * Then, it queries the underlying Index using the new question with context and returns\n * the response.\n * CondenseQuestionChatEngine performs well when the input is primarily questions about the\n * underlying data. It performs less well when the chat messages are not questions about the\n * data, or are very referential to previous context.\n */ class CondenseQuestionChatEngine extends _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__.BaseChatEngine {\n    static{\n        ({ e: [_initProto] } = _apply_decs_2203_r(this, [\n            [\n                _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_1__.wrapEventCaller,\n                2,\n                \"chat\"\n            ]\n        ], []));\n    }\n    queryEngine;\n    memory;\n    llm;\n    condenseMessagePrompt;\n    get chatHistory() {\n        return this.memory.getMessages();\n    }\n    constructor(init){\n        super(), _initProto(this);\n        this.queryEngine = init.queryEngine;\n        this.memory = new _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_2__.ChatMemoryBuffer({\n            chatHistory: init?.chatHistory\n        });\n        this.llm = _Settings_js__WEBPACK_IMPORTED_MODULE_5__.Settings.llm;\n        this.condenseMessagePrompt = init?.condenseMessagePrompt ?? _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_3__.defaultCondenseQuestionPrompt;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _getPrompts() {\n        return {\n            condenseMessagePrompt: this.condenseMessagePrompt\n        };\n    }\n    _updatePrompts(promptsDict) {\n        if (promptsDict.condenseMessagePrompt) {\n            this.condenseMessagePrompt = promptsDict.condenseMessagePrompt;\n        }\n    }\n    async condenseQuestion(chatHistory, question) {\n        const chatHistoryStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.messagesToHistory)(await chatHistory.getMessages());\n        return this.llm.complete({\n            prompt: this.condenseMessagePrompt.format({\n                question: question,\n                chatHistory: chatHistoryStr\n            })\n        });\n    }\n    async chat(params) {\n        const { message, stream } = params;\n        const chatHistory = params.chatHistory ? new _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_2__.ChatMemoryBuffer({\n            chatHistory: params.chatHistory instanceof _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_2__.BaseMemory ? await params.chatHistory.getMessages() : params.chatHistory\n        }) : this.memory;\n        const condensedQuestion = (await this.condenseQuestion(chatHistory, (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(message))).text;\n        chatHistory.put({\n            content: message,\n            role: \"user\"\n        });\n        if (stream) {\n            const stream = await this.queryEngine.query({\n                query: condensedQuestion,\n                stream: true\n            });\n            return (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.streamReducer)({\n                stream,\n                initialValue: \"\",\n                reducer: (accumulator, part)=>accumulator += (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(part.message.content),\n                finished: (accumulator)=>{\n                    chatHistory.put({\n                        content: accumulator,\n                        role: \"assistant\"\n                    });\n                }\n            });\n        }\n        const response = await this.queryEngine.query({\n            query: condensedQuestion\n        });\n        chatHistory.put({\n            content: response.message.content,\n            role: \"assistant\"\n        });\n        return response;\n    }\n    reset() {\n        this.memory.reset();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/engines/chat/CondenseQuestionChatEngine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/engines/chat/index.js":
/*!************************************************************!*\
  !*** ./node_modules/llamaindex/dist/engines/chat/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatEngine: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__.BaseChatEngine),\n/* harmony export */   CondenseQuestionChatEngine: () => (/* reexport safe */ _CondenseQuestionChatEngine_js__WEBPACK_IMPORTED_MODULE_1__.CondenseQuestionChatEngine),\n/* harmony export */   ContextChatEngine: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__.ContextChatEngine),\n/* harmony export */   DefaultContextGenerator: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__.DefaultContextGenerator),\n/* harmony export */   SimpleChatEngine: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__.SimpleChatEngine)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/chat-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js\");\n/* harmony import */ var _CondenseQuestionChatEngine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CondenseQuestionChatEngine.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/chat/CondenseQuestionChatEngine.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2VuZ2luZXMvY2hhdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTZDO0FBQ2dDIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9lbmdpbmVzL2NoYXQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvY2hhdC1lbmdpbmVcIjtcbmV4cG9ydCB7IENvbmRlbnNlUXVlc3Rpb25DaGF0RW5naW5lIH0gZnJvbSBcIi4vQ29uZGVuc2VRdWVzdGlvbkNoYXRFbmdpbmUuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/engines/chat/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/engines/query/RetrieverQueryEngine.js":
/*!****************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/engines/query/RetrieverQueryEngine.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetrieverQueryEngine: () => (/* reexport safe */ _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_0__.RetrieverQueryEngine)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/query-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js\");\n/**\n * todo: this file should be removed in the major release\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2VuZ2luZXMvcXVlcnkvUmV0cmlldmVyUXVlcnlFbmdpbmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0EsSUFBeUUiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2VuZ2luZXMvcXVlcnkvUmV0cmlldmVyUXVlcnlFbmdpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB0b2RvOiB0aGlzIGZpbGUgc2hvdWxkIGJlIHJlbW92ZWQgaW4gdGhlIG1ham9yIHJlbGVhc2VcbiAqLyBleHBvcnQgeyBSZXRyaWV2ZXJRdWVyeUVuZ2luZSB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3F1ZXJ5LWVuZ2luZVwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/engines/query/RetrieverQueryEngine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/engines/query/RouterQueryEngine.js":
/*!*************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/engines/query/RouterQueryEngine.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterQueryEngine: () => (/* binding */ RouterQueryEngine)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/query-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js\");\n/* harmony import */ var _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/response-synthesizers */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _selectors_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../selectors/index.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n\n\n\n\n\nasync function combineResponses(summarizer, responses, queryBundle, verbose = false) {\n    if (verbose) {\n        console.log(\"Combining responses from multiple query engines.\");\n    }\n    const sourceNodes = [];\n    for (const response of responses){\n        if (response?.sourceNodes) {\n            sourceNodes.push(...response.sourceNodes);\n        }\n    }\n    return await summarizer.synthesize({\n        query: queryBundle,\n        nodes: sourceNodes\n    });\n}\n/**\n * A query engine that uses multiple query engines and selects the best one.\n */ class RouterQueryEngine extends _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_0__.BaseQueryEngine {\n    selector;\n    queryEngines;\n    metadatas;\n    summarizer;\n    verbose;\n    constructor(init){\n        super();\n        this.selector = init.selector;\n        this.queryEngines = init.queryEngineTools.map((tool)=>tool.queryEngine);\n        this.metadatas = init.queryEngineTools.map((tool)=>({\n                description: tool.description\n            }));\n        this.summarizer = init.summarizer || (0,_llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_1__.getResponseSynthesizer)(\"tree_summarize\");\n        this.verbose = init.verbose ?? false;\n    }\n    async _query(strOrQueryBundle, stream) {\n        const response = await this.queryRoute(typeof strOrQueryBundle === \"string\" ? {\n            query: strOrQueryBundle\n        } : strOrQueryBundle);\n        if (stream) {\n            throw new Error(\"Streaming is not supported yet.\");\n        }\n        return response;\n    }\n    _getPrompts() {\n        return {};\n    }\n    _updatePrompts() {}\n    _getPromptModules() {\n        return {\n            selector: this.selector,\n            summarizer: this.summarizer\n        };\n    }\n    static fromDefaults(init) {\n        return new RouterQueryEngine({\n            selector: init.selector ?? new _selectors_index_js__WEBPACK_IMPORTED_MODULE_3__.LLMSingleSelector({\n                llm: _Settings_js__WEBPACK_IMPORTED_MODULE_4__.Settings.llm\n            }),\n            queryEngineTools: init.queryEngineTools,\n            summarizer: init.summarizer,\n            verbose: init.verbose\n        });\n    }\n    async queryRoute(query) {\n        const result = await this.selector.select(this.metadatas, query);\n        if (result.selections.length > 1) {\n            const responses = [];\n            for(let i = 0; i < result.selections.length; i++){\n                const engineInd = result.selections[i];\n                const logStr = `Selecting query engine ${engineInd.index}: ${result.selections[i].index}.`;\n                if (this.verbose) {\n                    console.log(logStr + \"\\n\");\n                }\n                const selectedQueryEngine = this.queryEngines[engineInd.index];\n                responses.push(await selectedQueryEngine.query({\n                    query,\n                    stream: false\n                }));\n            }\n            if (responses.length > 1) {\n                const finalResponse = await combineResponses(this.summarizer, responses, query, this.verbose);\n                return finalResponse;\n            } else {\n                return responses[0];\n            }\n        } else {\n            let selectedQueryEngine;\n            try {\n                selectedQueryEngine = this.queryEngines[result.selections[0].index];\n                const logStr = `Selecting query engine ${result.selections[0].index}: ${result.selections[0].reason}`;\n                if (this.verbose) {\n                    console.log(logStr + \"\\n\");\n                }\n            } catch (e) {\n                throw new Error(\"Failed to select query engine\");\n            }\n            if (!selectedQueryEngine) {\n                throw new Error(\"Selected query engine is null\");\n            }\n            const finalResponse = await selectedQueryEngine.query({\n                query: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(query)\n            });\n            // add selected result\n            finalResponse.metadata = finalResponse.metadata || {};\n            finalResponse.metadata[\"selectorResult\"] = result;\n            return finalResponse;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2VuZ2luZXMvcXVlcnkvUm91dGVyUXVlcnlFbmdpbmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdFO0FBQ2dCO0FBQzNCO0FBQ1E7QUFDaEI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBVyxnQ0FBZ0MsMEVBQWU7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiw2Q0FBNkMsOEZBQXNCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxrRUFBaUI7QUFDNUQscUJBQXFCLGtEQUFRO0FBQzdCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw4QkFBOEI7QUFDekQ7QUFDQSx5REFBeUQsZ0JBQWdCLElBQUksMkJBQTJCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EseURBQXlELDJCQUEyQixJQUFJLDRCQUE0QjtBQUNwSDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1FQUFXO0FBQ2xDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZW5naW5lcy9xdWVyeS9Sb3V0ZXJRdWVyeUVuZ2luZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlUXVlcnlFbmdpbmUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9xdWVyeS1lbmdpbmVcIjtcbmltcG9ydCB7IGdldFJlc3BvbnNlU3ludGhlc2l6ZXIgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9yZXNwb25zZS1zeW50aGVzaXplcnNcIjtcbmltcG9ydCB7IGV4dHJhY3RUZXh0IH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IExMTVNpbmdsZVNlbGVjdG9yIH0gZnJvbSBcIi4uLy4uL3NlbGVjdG9ycy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi4vLi4vU2V0dGluZ3MuanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGNvbWJpbmVSZXNwb25zZXMoc3VtbWFyaXplciwgcmVzcG9uc2VzLCBxdWVyeUJ1bmRsZSwgdmVyYm9zZSA9IGZhbHNlKSB7XG4gICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDb21iaW5pbmcgcmVzcG9uc2VzIGZyb20gbXVsdGlwbGUgcXVlcnkgZW5naW5lcy5cIik7XG4gICAgfVxuICAgIGNvbnN0IHNvdXJjZU5vZGVzID0gW107XG4gICAgZm9yIChjb25zdCByZXNwb25zZSBvZiByZXNwb25zZXMpe1xuICAgICAgICBpZiAocmVzcG9uc2U/LnNvdXJjZU5vZGVzKSB7XG4gICAgICAgICAgICBzb3VyY2VOb2Rlcy5wdXNoKC4uLnJlc3BvbnNlLnNvdXJjZU5vZGVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgc3VtbWFyaXplci5zeW50aGVzaXplKHtcbiAgICAgICAgcXVlcnk6IHF1ZXJ5QnVuZGxlLFxuICAgICAgICBub2Rlczogc291cmNlTm9kZXNcbiAgICB9KTtcbn1cbi8qKlxuICogQSBxdWVyeSBlbmdpbmUgdGhhdCB1c2VzIG11bHRpcGxlIHF1ZXJ5IGVuZ2luZXMgYW5kIHNlbGVjdHMgdGhlIGJlc3Qgb25lLlxuICovIGV4cG9ydCBjbGFzcyBSb3V0ZXJRdWVyeUVuZ2luZSBleHRlbmRzIEJhc2VRdWVyeUVuZ2luZSB7XG4gICAgc2VsZWN0b3I7XG4gICAgcXVlcnlFbmdpbmVzO1xuICAgIG1ldGFkYXRhcztcbiAgICBzdW1tYXJpemVyO1xuICAgIHZlcmJvc2U7XG4gICAgY29uc3RydWN0b3IoaW5pdCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBpbml0LnNlbGVjdG9yO1xuICAgICAgICB0aGlzLnF1ZXJ5RW5naW5lcyA9IGluaXQucXVlcnlFbmdpbmVUb29scy5tYXAoKHRvb2wpPT50b29sLnF1ZXJ5RW5naW5lKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YXMgPSBpbml0LnF1ZXJ5RW5naW5lVG9vbHMubWFwKCh0b29sKT0+KHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvblxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnN1bW1hcml6ZXIgPSBpbml0LnN1bW1hcml6ZXIgfHwgZ2V0UmVzcG9uc2VTeW50aGVzaXplcihcInRyZWVfc3VtbWFyaXplXCIpO1xuICAgICAgICB0aGlzLnZlcmJvc2UgPSBpbml0LnZlcmJvc2UgPz8gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIF9xdWVyeShzdHJPclF1ZXJ5QnVuZGxlLCBzdHJlYW0pIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnF1ZXJ5Um91dGUodHlwZW9mIHN0ck9yUXVlcnlCdW5kbGUgPT09IFwic3RyaW5nXCIgPyB7XG4gICAgICAgICAgICBxdWVyeTogc3RyT3JRdWVyeUJ1bmRsZVxuICAgICAgICB9IDogc3RyT3JRdWVyeUJ1bmRsZSk7XG4gICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmVhbWluZyBpcyBub3Qgc3VwcG9ydGVkIHlldC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBfZ2V0UHJvbXB0cygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBfdXBkYXRlUHJvbXB0cygpIHt9XG4gICAgX2dldFByb21wdE1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWxlY3RvcjogdGhpcy5zZWxlY3RvcixcbiAgICAgICAgICAgIHN1bW1hcml6ZXI6IHRoaXMuc3VtbWFyaXplclxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbURlZmF1bHRzKGluaXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSb3V0ZXJRdWVyeUVuZ2luZSh7XG4gICAgICAgICAgICBzZWxlY3RvcjogaW5pdC5zZWxlY3RvciA/PyBuZXcgTExNU2luZ2xlU2VsZWN0b3Ioe1xuICAgICAgICAgICAgICAgIGxsbTogU2V0dGluZ3MubGxtXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHF1ZXJ5RW5naW5lVG9vbHM6IGluaXQucXVlcnlFbmdpbmVUb29scyxcbiAgICAgICAgICAgIHN1bW1hcml6ZXI6IGluaXQuc3VtbWFyaXplcixcbiAgICAgICAgICAgIHZlcmJvc2U6IGluaXQudmVyYm9zZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgcXVlcnlSb3V0ZShxdWVyeSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbGVjdG9yLnNlbGVjdCh0aGlzLm1ldGFkYXRhcywgcXVlcnkpO1xuICAgICAgICBpZiAocmVzdWx0LnNlbGVjdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VzID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcmVzdWx0LnNlbGVjdGlvbnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZ2luZUluZCA9IHJlc3VsdC5zZWxlY3Rpb25zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ1N0ciA9IGBTZWxlY3RpbmcgcXVlcnkgZW5naW5lICR7ZW5naW5lSW5kLmluZGV4fTogJHtyZXN1bHQuc2VsZWN0aW9uc1tpXS5pbmRleH0uYDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvZ1N0ciArIFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFF1ZXJ5RW5naW5lID0gdGhpcy5xdWVyeUVuZ2luZXNbZW5naW5lSW5kLmluZGV4XTtcbiAgICAgICAgICAgICAgICByZXNwb25zZXMucHVzaChhd2FpdCBzZWxlY3RlZFF1ZXJ5RW5naW5lLnF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5hbFJlc3BvbnNlID0gYXdhaXQgY29tYmluZVJlc3BvbnNlcyh0aGlzLnN1bW1hcml6ZXIsIHJlc3BvbnNlcywgcXVlcnksIHRoaXMudmVyYm9zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbmFsUmVzcG9uc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRRdWVyeUVuZ2luZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRRdWVyeUVuZ2luZSA9IHRoaXMucXVlcnlFbmdpbmVzW3Jlc3VsdC5zZWxlY3Rpb25zWzBdLmluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dTdHIgPSBgU2VsZWN0aW5nIHF1ZXJ5IGVuZ2luZSAke3Jlc3VsdC5zZWxlY3Rpb25zWzBdLmluZGV4fTogJHtyZXN1bHQuc2VsZWN0aW9uc1swXS5yZWFzb259YDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvZ1N0ciArIFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gc2VsZWN0IHF1ZXJ5IGVuZ2luZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWRRdWVyeUVuZ2luZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlbGVjdGVkIHF1ZXJ5IGVuZ2luZSBpcyBudWxsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmluYWxSZXNwb25zZSA9IGF3YWl0IHNlbGVjdGVkUXVlcnlFbmdpbmUucXVlcnkoe1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBleHRyYWN0VGV4dChxdWVyeSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gYWRkIHNlbGVjdGVkIHJlc3VsdFxuICAgICAgICAgICAgZmluYWxSZXNwb25zZS5tZXRhZGF0YSA9IGZpbmFsUmVzcG9uc2UubWV0YWRhdGEgfHwge307XG4gICAgICAgICAgICBmaW5hbFJlc3BvbnNlLm1ldGFkYXRhW1wic2VsZWN0b3JSZXN1bHRcIl0gPSByZXN1bHQ7XG4gICAgICAgICAgICByZXR1cm4gZmluYWxSZXNwb25zZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/engines/query/RouterQueryEngine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/engines/query/SubQuestionQueryEngine.js":
/*!******************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/engines/query/SubQuestionQueryEngine.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SubQuestionQueryEngine: () => (/* binding */ SubQuestionQueryEngine)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/response-synthesizers */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _QuestionGenerator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../QuestionGenerator.js */ \"(rsc)/./node_modules/llamaindex/dist/QuestionGenerator.js\");\n/* harmony import */ var _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/query-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js\");\n\n\n\n\n/**\n * SubQuestionQueryEngine decomposes a question into subquestions and then\n */ class SubQuestionQueryEngine extends _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_3__.BaseQueryEngine {\n    responseSynthesizer;\n    questionGen;\n    queryEngines;\n    metadatas;\n    constructor(init){\n        super();\n        this.questionGen = init.questionGen;\n        this.responseSynthesizer = init.responseSynthesizer ?? (0,_llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_0__.getResponseSynthesizer)(\"compact\");\n        this.queryEngines = init.queryEngineTools;\n        this.metadatas = init.queryEngineTools.map((tool)=>tool.metadata);\n    }\n    async _query(strOrQueryBundle, stream) {\n        let query;\n        if (typeof strOrQueryBundle === \"string\") {\n            query = {\n                query: strOrQueryBundle\n            };\n        } else {\n            query = strOrQueryBundle;\n        }\n        const subQuestions = await this.questionGen.generate(this.metadatas, strOrQueryBundle);\n        const subQNodes = await Promise.all(subQuestions.map((subQ)=>this.querySubQ(subQ)));\n        const nodesWithScore = subQNodes.filter((node)=>node !== null);\n        if (stream) {\n            return this.responseSynthesizer.synthesize({\n                query,\n                nodes: nodesWithScore\n            }, true);\n        }\n        return this.responseSynthesizer.synthesize({\n            query,\n            nodes: nodesWithScore\n        }, false);\n    }\n    _getPrompts() {\n        return {};\n    }\n    _updatePrompts() {}\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _getPromptModules() {\n        return {\n            questionGen: this.questionGen,\n            responseSynthesizer: this.responseSynthesizer\n        };\n    }\n    static fromDefaults(init) {\n        const questionGen = init.questionGen ?? new _QuestionGenerator_js__WEBPACK_IMPORTED_MODULE_2__.LLMQuestionGenerator();\n        const responseSynthesizer = init.responseSynthesizer ?? (0,_llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_0__.getResponseSynthesizer)(\"compact\");\n        return new SubQuestionQueryEngine({\n            questionGen,\n            responseSynthesizer,\n            queryEngineTools: init.queryEngineTools\n        });\n    }\n    async querySubQ(subQ) {\n        try {\n            const question = subQ.subQuestion;\n            const queryEngine = this.queryEngines.find((tool)=>tool.metadata.name === subQ.toolName);\n            if (!queryEngine) {\n                return null;\n            }\n            const responseValue = await queryEngine?.call?.({\n                query: question\n            });\n            if (responseValue == null) {\n                return null;\n            }\n            const nodeText = `Sub question: ${question}\\nResponse: ${typeof responseValue === \"string\" ? responseValue : JSON.stringify(responseValue)}`;\n            const node = new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode({\n                text: nodeText\n            });\n            return {\n                node,\n                score: 0\n            };\n        } catch (error) {\n            return null;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2VuZ2luZXMvcXVlcnkvU3ViUXVlc3Rpb25RdWVyeUVuZ2luZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRjtBQUM3QjtBQUNlO0FBQ0Y7QUFDaEU7QUFDQTtBQUNBLElBQVcscUNBQXFDLDBFQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELDhGQUFzQjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHVFQUFvQjtBQUN4RSxnRUFBZ0UsOEZBQXNCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxTQUFTLGNBQWMsa0ZBQWtGO0FBQ3ZKLDZCQUE2Qiw2REFBUTtBQUNyQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZW5naW5lcy9xdWVyeS9TdWJRdWVzdGlvblF1ZXJ5RW5naW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFJlc3BvbnNlU3ludGhlc2l6ZXIgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9yZXNwb25zZS1zeW50aGVzaXplcnNcIjtcbmltcG9ydCB7IFRleHROb2RlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc2NoZW1hXCI7XG5pbXBvcnQgeyBMTE1RdWVzdGlvbkdlbmVyYXRvciB9IGZyb20gXCIuLi8uLi9RdWVzdGlvbkdlbmVyYXRvci5qc1wiO1xuaW1wb3J0IHsgQmFzZVF1ZXJ5RW5naW5lIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvcXVlcnktZW5naW5lXCI7XG4vKipcbiAqIFN1YlF1ZXN0aW9uUXVlcnlFbmdpbmUgZGVjb21wb3NlcyBhIHF1ZXN0aW9uIGludG8gc3VicXVlc3Rpb25zIGFuZCB0aGVuXG4gKi8gZXhwb3J0IGNsYXNzIFN1YlF1ZXN0aW9uUXVlcnlFbmdpbmUgZXh0ZW5kcyBCYXNlUXVlcnlFbmdpbmUge1xuICAgIHJlc3BvbnNlU3ludGhlc2l6ZXI7XG4gICAgcXVlc3Rpb25HZW47XG4gICAgcXVlcnlFbmdpbmVzO1xuICAgIG1ldGFkYXRhcztcbiAgICBjb25zdHJ1Y3Rvcihpbml0KXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5xdWVzdGlvbkdlbiA9IGluaXQucXVlc3Rpb25HZW47XG4gICAgICAgIHRoaXMucmVzcG9uc2VTeW50aGVzaXplciA9IGluaXQucmVzcG9uc2VTeW50aGVzaXplciA/PyBnZXRSZXNwb25zZVN5bnRoZXNpemVyKFwiY29tcGFjdFwiKTtcbiAgICAgICAgdGhpcy5xdWVyeUVuZ2luZXMgPSBpbml0LnF1ZXJ5RW5naW5lVG9vbHM7XG4gICAgICAgIHRoaXMubWV0YWRhdGFzID0gaW5pdC5xdWVyeUVuZ2luZVRvb2xzLm1hcCgodG9vbCk9PnRvb2wubWV0YWRhdGEpO1xuICAgIH1cbiAgICBhc3luYyBfcXVlcnkoc3RyT3JRdWVyeUJ1bmRsZSwgc3RyZWFtKSB7XG4gICAgICAgIGxldCBxdWVyeTtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHJPclF1ZXJ5QnVuZGxlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBxdWVyeSA9IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogc3RyT3JRdWVyeUJ1bmRsZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gc3RyT3JRdWVyeUJ1bmRsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJRdWVzdGlvbnMgPSBhd2FpdCB0aGlzLnF1ZXN0aW9uR2VuLmdlbmVyYXRlKHRoaXMubWV0YWRhdGFzLCBzdHJPclF1ZXJ5QnVuZGxlKTtcbiAgICAgICAgY29uc3Qgc3ViUU5vZGVzID0gYXdhaXQgUHJvbWlzZS5hbGwoc3ViUXVlc3Rpb25zLm1hcCgoc3ViUSk9PnRoaXMucXVlcnlTdWJRKHN1YlEpKSk7XG4gICAgICAgIGNvbnN0IG5vZGVzV2l0aFNjb3JlID0gc3ViUU5vZGVzLmZpbHRlcigobm9kZSk9Pm5vZGUgIT09IG51bGwpO1xuICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZVN5bnRoZXNpemVyLnN5bnRoZXNpemUoe1xuICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgIG5vZGVzOiBub2Rlc1dpdGhTY29yZVxuICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VTeW50aGVzaXplci5zeW50aGVzaXplKHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgbm9kZXM6IG5vZGVzV2l0aFNjb3JlXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG4gICAgX2dldFByb21wdHMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgX3VwZGF0ZVByb21wdHMoKSB7fVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgX2dldFByb21wdE1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBxdWVzdGlvbkdlbjogdGhpcy5xdWVzdGlvbkdlbixcbiAgICAgICAgICAgIHJlc3BvbnNlU3ludGhlc2l6ZXI6IHRoaXMucmVzcG9uc2VTeW50aGVzaXplclxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbURlZmF1bHRzKGluaXQpIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb25HZW4gPSBpbml0LnF1ZXN0aW9uR2VuID8/IG5ldyBMTE1RdWVzdGlvbkdlbmVyYXRvcigpO1xuICAgICAgICBjb25zdCByZXNwb25zZVN5bnRoZXNpemVyID0gaW5pdC5yZXNwb25zZVN5bnRoZXNpemVyID8/IGdldFJlc3BvbnNlU3ludGhlc2l6ZXIoXCJjb21wYWN0XCIpO1xuICAgICAgICByZXR1cm4gbmV3IFN1YlF1ZXN0aW9uUXVlcnlFbmdpbmUoe1xuICAgICAgICAgICAgcXVlc3Rpb25HZW4sXG4gICAgICAgICAgICByZXNwb25zZVN5bnRoZXNpemVyLFxuICAgICAgICAgICAgcXVlcnlFbmdpbmVUb29sczogaW5pdC5xdWVyeUVuZ2luZVRvb2xzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBxdWVyeVN1YlEoc3ViUSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcXVlc3Rpb24gPSBzdWJRLnN1YlF1ZXN0aW9uO1xuICAgICAgICAgICAgY29uc3QgcXVlcnlFbmdpbmUgPSB0aGlzLnF1ZXJ5RW5naW5lcy5maW5kKCh0b29sKT0+dG9vbC5tZXRhZGF0YS5uYW1lID09PSBzdWJRLnRvb2xOYW1lKTtcbiAgICAgICAgICAgIGlmICghcXVlcnlFbmdpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlVmFsdWUgPSBhd2FpdCBxdWVyeUVuZ2luZT8uY2FsbD8uKHtcbiAgICAgICAgICAgICAgICBxdWVyeTogcXVlc3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm9kZVRleHQgPSBgU3ViIHF1ZXN0aW9uOiAke3F1ZXN0aW9ufVxcblJlc3BvbnNlOiAke3R5cGVvZiByZXNwb25zZVZhbHVlID09PSBcInN0cmluZ1wiID8gcmVzcG9uc2VWYWx1ZSA6IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlVmFsdWUpfWA7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IFRleHROb2RlKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBub2RlVGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgICAgc2NvcmU6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/engines/query/SubQuestionQueryEngine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/engines/query/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/llamaindex/dist/engines/query/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetrieverQueryEngine: () => (/* reexport safe */ _RetrieverQueryEngine_js__WEBPACK_IMPORTED_MODULE_0__.RetrieverQueryEngine),\n/* harmony export */   RouterQueryEngine: () => (/* reexport safe */ _RouterQueryEngine_js__WEBPACK_IMPORTED_MODULE_1__.RouterQueryEngine),\n/* harmony export */   SubQuestionQueryEngine: () => (/* reexport safe */ _SubQuestionQueryEngine_js__WEBPACK_IMPORTED_MODULE_2__.SubQuestionQueryEngine)\n/* harmony export */ });\n/* harmony import */ var _RetrieverQueryEngine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RetrieverQueryEngine.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/RetrieverQueryEngine.js\");\n/* harmony import */ var _RouterQueryEngine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RouterQueryEngine.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/RouterQueryEngine.js\");\n/* harmony import */ var _SubQuestionQueryEngine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SubQuestionQueryEngine.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/SubQuestionQueryEngine.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2VuZ2luZXMvcXVlcnkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBDO0FBQ0g7QUFDSyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZW5naW5lcy9xdWVyeS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9SZXRyaWV2ZXJRdWVyeUVuZ2luZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUm91dGVyUXVlcnlFbmdpbmUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1N1YlF1ZXN0aW9uUXVlcnlFbmdpbmUuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/engines/query/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/evaluation/Correctness.js":
/*!****************************************************************!*\
  !*** ./node_modules/llamaindex/dist/evaluation/Correctness.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CorrectnessEvaluator: () => (/* binding */ CorrectnessEvaluator)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/prompts.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/utils.js\");\n\n\n\n\n\n\n/** Correctness Evaluator */ class CorrectnessEvaluator extends _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptMixin {\n    scoreThreshold;\n    parserFunction;\n    llm;\n    correctnessPrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultCorrectnessSystemPrompt;\n    constructor(params){\n        super();\n        this.llm = _Settings_js__WEBPACK_IMPORTED_MODULE_3__.Settings.llm;\n        this.correctnessPrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultCorrectnessSystemPrompt;\n        this.scoreThreshold = params?.scoreThreshold ?? 4.0;\n        this.parserFunction = params?.parserFunction ?? _utils_js__WEBPACK_IMPORTED_MODULE_5__.defaultEvaluationParser;\n    }\n    _getPrompts() {\n        return {\n            correctnessPrompt: this.correctnessPrompt\n        };\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _updatePrompts(prompts) {\n        if (\"correctnessPrompt\" in prompts) {\n            this.correctnessPrompt = prompts[\"correctnessPrompt\"];\n        }\n    }\n    /**\n   *\n   * @param query Query to evaluate\n   * @param response  Response to evaluate\n   * @param contexts Array of contexts\n   * @param reference  Reference response\n   */ async evaluate({ query, response, contexts, reference }) {\n        if (query === null || response === null) {\n            throw new Error(\"query, and response must be provided\");\n        }\n        const messages = [\n            {\n                role: \"system\",\n                content: this.correctnessPrompt.format()\n            },\n            {\n                role: \"user\",\n                content: _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultUserPrompt.format({\n                    query: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(query),\n                    generatedAnswer: response,\n                    referenceAnswer: reference || \"(NO REFERENCE ANSWER SUPPLIED)\"\n                })\n            }\n        ];\n        const evalResponse = await this.llm.chat({\n            messages\n        });\n        const [score, reasoning] = this.parserFunction((0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(evalResponse.message.content));\n        return {\n            query: query,\n            response: response,\n            passing: score >= this.scoreThreshold || score === null,\n            score: score,\n            feedback: reasoning\n        };\n    }\n    /**\n   * @param query Query to evaluate\n   * @param response  Response to evaluate\n   */ async evaluateResponse({ query, response }) {\n        const responseStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(response?.message.content);\n        const contexts = [];\n        if (response) {\n            for (const node of response.sourceNodes || []){\n                contexts.push(node.node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL));\n            }\n        }\n        return this.evaluate({\n            query,\n            response: responseStr,\n            contexts\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vQ29ycmVjdG5lc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1RDtBQUNBO0FBQ0Y7QUFDWDtBQUN1QztBQUM1QjtBQUNyRCw2QkFBb0MsbUNBQW1DLGlFQUFXO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1RUFBOEI7QUFDdEQ7QUFDQTtBQUNBLG1CQUFtQixrREFBUTtBQUMzQixpQ0FBaUMsdUVBQThCO0FBQy9EO0FBQ0Esd0RBQXdELDhEQUF1QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EseUJBQXlCLDBEQUFpQjtBQUMxQywyQkFBMkIsbUVBQVc7QUFDdEM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx1REFBdUQsbUVBQVc7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQsNEJBQTRCLG1FQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxpRUFBWTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZXZhbHVhdGlvbi9Db3JyZWN0bmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRNaXhpbiB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IE1ldGFkYXRhTW9kZSB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3NjaGVtYVwiO1xuaW1wb3J0IHsgZXh0cmFjdFRleHQgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS91dGlsc1wiO1xuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi4vU2V0dGluZ3MuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRDb3JyZWN0bmVzc1N5c3RlbVByb21wdCwgZGVmYXVsdFVzZXJQcm9tcHQgfSBmcm9tIFwiLi9wcm9tcHRzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0RXZhbHVhdGlvblBhcnNlciB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG4vKiogQ29ycmVjdG5lc3MgRXZhbHVhdG9yICovIGV4cG9ydCBjbGFzcyBDb3JyZWN0bmVzc0V2YWx1YXRvciBleHRlbmRzIFByb21wdE1peGluIHtcbiAgICBzY29yZVRocmVzaG9sZDtcbiAgICBwYXJzZXJGdW5jdGlvbjtcbiAgICBsbG07XG4gICAgY29ycmVjdG5lc3NQcm9tcHQgPSBkZWZhdWx0Q29ycmVjdG5lc3NTeXN0ZW1Qcm9tcHQ7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5sbG0gPSBTZXR0aW5ncy5sbG07XG4gICAgICAgIHRoaXMuY29ycmVjdG5lc3NQcm9tcHQgPSBkZWZhdWx0Q29ycmVjdG5lc3NTeXN0ZW1Qcm9tcHQ7XG4gICAgICAgIHRoaXMuc2NvcmVUaHJlc2hvbGQgPSBwYXJhbXM/LnNjb3JlVGhyZXNob2xkID8/IDQuMDtcbiAgICAgICAgdGhpcy5wYXJzZXJGdW5jdGlvbiA9IHBhcmFtcz8ucGFyc2VyRnVuY3Rpb24gPz8gZGVmYXVsdEV2YWx1YXRpb25QYXJzZXI7XG4gICAgfVxuICAgIF9nZXRQcm9tcHRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29ycmVjdG5lc3NQcm9tcHQ6IHRoaXMuY29ycmVjdG5lc3NQcm9tcHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2dldFByb21wdE1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgX3VwZGF0ZVByb21wdHMocHJvbXB0cykge1xuICAgICAgICBpZiAoXCJjb3JyZWN0bmVzc1Byb21wdFwiIGluIHByb21wdHMpIHtcbiAgICAgICAgICAgIHRoaXMuY29ycmVjdG5lc3NQcm9tcHQgPSBwcm9tcHRzW1wiY29ycmVjdG5lc3NQcm9tcHRcIl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBxdWVyeSBRdWVyeSB0byBldmFsdWF0ZVxuICAgKiBAcGFyYW0gcmVzcG9uc2UgIFJlc3BvbnNlIHRvIGV2YWx1YXRlXG4gICAqIEBwYXJhbSBjb250ZXh0cyBBcnJheSBvZiBjb250ZXh0c1xuICAgKiBAcGFyYW0gcmVmZXJlbmNlICBSZWZlcmVuY2UgcmVzcG9uc2VcbiAgICovIGFzeW5jIGV2YWx1YXRlKHsgcXVlcnksIHJlc3BvbnNlLCBjb250ZXh0cywgcmVmZXJlbmNlIH0pIHtcbiAgICAgICAgaWYgKHF1ZXJ5ID09PSBudWxsIHx8IHJlc3BvbnNlID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJxdWVyeSwgYW5kIHJlc3BvbnNlIG11c3QgYmUgcHJvdmlkZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcm9sZTogXCJzeXN0ZW1cIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLmNvcnJlY3RuZXNzUHJvbXB0LmZvcm1hdCgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJvbGU6IFwidXNlclwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRlZmF1bHRVc2VyUHJvbXB0LmZvcm1hdCh7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBleHRyYWN0VGV4dChxdWVyeSksXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZEFuc3dlcjogcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZUFuc3dlcjogcmVmZXJlbmNlIHx8IFwiKE5PIFJFRkVSRU5DRSBBTlNXRVIgU1VQUExJRUQpXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBldmFsUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmxsbS5jaGF0KHtcbiAgICAgICAgICAgIG1lc3NhZ2VzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBbc2NvcmUsIHJlYXNvbmluZ10gPSB0aGlzLnBhcnNlckZ1bmN0aW9uKGV4dHJhY3RUZXh0KGV2YWxSZXNwb25zZS5tZXNzYWdlLmNvbnRlbnQpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZSxcbiAgICAgICAgICAgIHBhc3Npbmc6IHNjb3JlID49IHRoaXMuc2NvcmVUaHJlc2hvbGQgfHwgc2NvcmUgPT09IG51bGwsXG4gICAgICAgICAgICBzY29yZTogc2NvcmUsXG4gICAgICAgICAgICBmZWVkYmFjazogcmVhc29uaW5nXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgKiBAcGFyYW0gcXVlcnkgUXVlcnkgdG8gZXZhbHVhdGVcbiAgICogQHBhcmFtIHJlc3BvbnNlICBSZXNwb25zZSB0byBldmFsdWF0ZVxuICAgKi8gYXN5bmMgZXZhbHVhdGVSZXNwb25zZSh7IHF1ZXJ5LCByZXNwb25zZSB9KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlU3RyID0gZXh0cmFjdFRleHQocmVzcG9uc2U/Lm1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHRzID0gW107XG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIHJlc3BvbnNlLnNvdXJjZU5vZGVzIHx8IFtdKXtcbiAgICAgICAgICAgICAgICBjb250ZXh0cy5wdXNoKG5vZGUubm9kZS5nZXRDb250ZW50KE1ldGFkYXRhTW9kZS5BTEwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZSh7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVN0cixcbiAgICAgICAgICAgIGNvbnRleHRzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/evaluation/Correctness.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/evaluation/Faithfulness.js":
/*!*****************************************************************!*\
  !*** ./node_modules/llamaindex/dist/evaluation/Faithfulness.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FaithfulnessEvaluator: () => (/* binding */ FaithfulnessEvaluator)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _indices_summary_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../indices/summary/index.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/summary/index.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/prompts.js\");\n\n\n\n\n\nclass FaithfulnessEvaluator extends _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptMixin {\n    raiseError;\n    evalTemplate;\n    refineTemplate;\n    constructor(params){\n        super();\n        this.raiseError = params?.raiseError ?? false;\n        this.evalTemplate = params?.faithfulnessSystemPrompt ?? _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultFaithfulnessTextQaPrompt;\n        this.refineTemplate = params?.faithFulnessRefinePrompt ?? _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultFaithfulnessRefinePrompt;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _getPrompts() {\n        return {\n            faithfulnessSystemPrompt: this.evalTemplate,\n            faithFulnessRefinePrompt: this.refineTemplate\n        };\n    }\n    _updatePrompts(promptsDict) {\n        if (promptsDict.faithfulnessSystemPrompt) {\n            this.evalTemplate = promptsDict.faithfulnessSystemPrompt;\n        }\n        if (promptsDict.faithFulnessRefinePrompt) {\n            this.refineTemplate = promptsDict.faithFulnessRefinePrompt;\n        }\n    }\n    /**\n   * @param query Query to evaluate\n   * @param response  Response to evaluate\n   * @param contexts Array of contexts\n   * @param reference  Reference response\n   * @param sleepTimeInSeconds  Sleep time in seconds\n   */ async evaluate({ query, response, contexts = [], reference, sleepTimeInSeconds = 0 }) {\n        if (query === null || response === null) {\n            throw new Error(\"query, and response must be provided\");\n        }\n        await new Promise((resolve)=>setTimeout(resolve, sleepTimeInSeconds * 1000));\n        const docs = contexts?.map((context)=>new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.Document({\n                text: context\n            }));\n        const index = await _indices_summary_index_js__WEBPACK_IMPORTED_MODULE_3__.SummaryIndex.fromDocuments(docs, {});\n        const queryEngine = index.asQueryEngine();\n        queryEngine.updatePrompts({\n            \"responseSynthesizer:textQATemplate\": this.evalTemplate,\n            \"responseSynthesizer:refineTemplate\": this.refineTemplate\n        });\n        const responseObj = await queryEngine.query({\n            query: {\n                query: response\n            },\n            stream: false\n        });\n        const rawResponseTxt = responseObj.toString();\n        let passing;\n        if (rawResponseTxt.toLowerCase().includes(\"yes\")) {\n            passing = true;\n        } else {\n            passing = false;\n            if (this.raiseError) {\n                throw new Error(\"The response is invalid\");\n            }\n        }\n        return {\n            query,\n            contexts,\n            response,\n            passing,\n            score: passing ? 1.0 : 0.0,\n            feedback: rawResponseTxt\n        };\n    }\n    /**\n   * @param query Query to evaluate\n   * @param response  Response to evaluate\n   */ async evaluateResponse({ query, response }) {\n        const responseStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(response?.message.content);\n        const contexts = [];\n        if (response) {\n            for (const node of response.sourceNodes || []){\n                contexts.push(node.node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL));\n            }\n        }\n        return this.evaluate({\n            query,\n            response: responseStr,\n            contexts\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vRmFpdGhmdWxuZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1RDtBQUNVO0FBQ1o7QUFDTTtBQUNxQztBQUN6RixvQ0FBb0MsaUVBQVc7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLHdFQUErQjtBQUMvRixrRUFBa0Usd0VBQStCO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1FQUFtRTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCw2REFBUTtBQUMxRDtBQUNBLGFBQWE7QUFDYiw0QkFBNEIsbUVBQVksdUJBQXVCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRCw0QkFBNEIsbUVBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGlFQUFZO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9ldmFsdWF0aW9uL0ZhaXRoZnVsbmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRNaXhpbiB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IERvY3VtZW50LCBNZXRhZGF0YU1vZGUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zY2hlbWFcIjtcbmltcG9ydCB7IGV4dHJhY3RUZXh0IH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IFN1bW1hcnlJbmRleCB9IGZyb20gXCIuLi9pbmRpY2VzL3N1bW1hcnkvaW5kZXguanNcIjtcbmltcG9ydCB7IGRlZmF1bHRGYWl0aGZ1bG5lc3NSZWZpbmVQcm9tcHQsIGRlZmF1bHRGYWl0aGZ1bG5lc3NUZXh0UWFQcm9tcHQgfSBmcm9tIFwiLi9wcm9tcHRzLmpzXCI7XG5leHBvcnQgY2xhc3MgRmFpdGhmdWxuZXNzRXZhbHVhdG9yIGV4dGVuZHMgUHJvbXB0TWl4aW4ge1xuICAgIHJhaXNlRXJyb3I7XG4gICAgZXZhbFRlbXBsYXRlO1xuICAgIHJlZmluZVRlbXBsYXRlO1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmFpc2VFcnJvciA9IHBhcmFtcz8ucmFpc2VFcnJvciA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy5ldmFsVGVtcGxhdGUgPSBwYXJhbXM/LmZhaXRoZnVsbmVzc1N5c3RlbVByb21wdCA/PyBkZWZhdWx0RmFpdGhmdWxuZXNzVGV4dFFhUHJvbXB0O1xuICAgICAgICB0aGlzLnJlZmluZVRlbXBsYXRlID0gcGFyYW1zPy5mYWl0aEZ1bG5lc3NSZWZpbmVQcm9tcHQgPz8gZGVmYXVsdEZhaXRoZnVsbmVzc1JlZmluZVByb21wdDtcbiAgICB9XG4gICAgX2dldFByb21wdE1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBfZ2V0UHJvbXB0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZhaXRoZnVsbmVzc1N5c3RlbVByb21wdDogdGhpcy5ldmFsVGVtcGxhdGUsXG4gICAgICAgICAgICBmYWl0aEZ1bG5lc3NSZWZpbmVQcm9tcHQ6IHRoaXMucmVmaW5lVGVtcGxhdGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3VwZGF0ZVByb21wdHMocHJvbXB0c0RpY3QpIHtcbiAgICAgICAgaWYgKHByb21wdHNEaWN0LmZhaXRoZnVsbmVzc1N5c3RlbVByb21wdCkge1xuICAgICAgICAgICAgdGhpcy5ldmFsVGVtcGxhdGUgPSBwcm9tcHRzRGljdC5mYWl0aGZ1bG5lc3NTeXN0ZW1Qcm9tcHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb21wdHNEaWN0LmZhaXRoRnVsbmVzc1JlZmluZVByb21wdCkge1xuICAgICAgICAgICAgdGhpcy5yZWZpbmVUZW1wbGF0ZSA9IHByb21wdHNEaWN0LmZhaXRoRnVsbmVzc1JlZmluZVByb21wdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICogQHBhcmFtIHF1ZXJ5IFF1ZXJ5IHRvIGV2YWx1YXRlXG4gICAqIEBwYXJhbSByZXNwb25zZSAgUmVzcG9uc2UgdG8gZXZhbHVhdGVcbiAgICogQHBhcmFtIGNvbnRleHRzIEFycmF5IG9mIGNvbnRleHRzXG4gICAqIEBwYXJhbSByZWZlcmVuY2UgIFJlZmVyZW5jZSByZXNwb25zZVxuICAgKiBAcGFyYW0gc2xlZXBUaW1lSW5TZWNvbmRzICBTbGVlcCB0aW1lIGluIHNlY29uZHNcbiAgICovIGFzeW5jIGV2YWx1YXRlKHsgcXVlcnksIHJlc3BvbnNlLCBjb250ZXh0cyA9IFtdLCByZWZlcmVuY2UsIHNsZWVwVGltZUluU2Vjb25kcyA9IDAgfSkge1xuICAgICAgICBpZiAocXVlcnkgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInF1ZXJ5LCBhbmQgcmVzcG9uc2UgbXVzdCBiZSBwcm92aWRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PnNldFRpbWVvdXQocmVzb2x2ZSwgc2xlZXBUaW1lSW5TZWNvbmRzICogMTAwMCkpO1xuICAgICAgICBjb25zdCBkb2NzID0gY29udGV4dHM/Lm1hcCgoY29udGV4dCk9Pm5ldyBEb2N1bWVudCh7XG4gICAgICAgICAgICAgICAgdGV4dDogY29udGV4dFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGF3YWl0IFN1bW1hcnlJbmRleC5mcm9tRG9jdW1lbnRzKGRvY3MsIHt9KTtcbiAgICAgICAgY29uc3QgcXVlcnlFbmdpbmUgPSBpbmRleC5hc1F1ZXJ5RW5naW5lKCk7XG4gICAgICAgIHF1ZXJ5RW5naW5lLnVwZGF0ZVByb21wdHMoe1xuICAgICAgICAgICAgXCJyZXNwb25zZVN5bnRoZXNpemVyOnRleHRRQVRlbXBsYXRlXCI6IHRoaXMuZXZhbFRlbXBsYXRlLFxuICAgICAgICAgICAgXCJyZXNwb25zZVN5bnRoZXNpemVyOnJlZmluZVRlbXBsYXRlXCI6IHRoaXMucmVmaW5lVGVtcGxhdGVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlT2JqID0gYXdhaXQgcXVlcnlFbmdpbmUucXVlcnkoe1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogcmVzcG9uc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJlYW06IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByYXdSZXNwb25zZVR4dCA9IHJlc3BvbnNlT2JqLnRvU3RyaW5nKCk7XG4gICAgICAgIGxldCBwYXNzaW5nO1xuICAgICAgICBpZiAocmF3UmVzcG9uc2VUeHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInllc1wiKSkge1xuICAgICAgICAgICAgcGFzc2luZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5yYWlzZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlc3BvbnNlIGlzIGludmFsaWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgY29udGV4dHMsXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHBhc3NpbmcsXG4gICAgICAgICAgICBzY29yZTogcGFzc2luZyA/IDEuMCA6IDAuMCxcbiAgICAgICAgICAgIGZlZWRiYWNrOiByYXdSZXNwb25zZVR4dFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICogQHBhcmFtIHF1ZXJ5IFF1ZXJ5IHRvIGV2YWx1YXRlXG4gICAqIEBwYXJhbSByZXNwb25zZSAgUmVzcG9uc2UgdG8gZXZhbHVhdGVcbiAgICovIGFzeW5jIGV2YWx1YXRlUmVzcG9uc2UoeyBxdWVyeSwgcmVzcG9uc2UgfSkge1xuICAgICAgICBjb25zdCByZXNwb25zZVN0ciA9IGV4dHJhY3RUZXh0KHJlc3BvbnNlPy5tZXNzYWdlLmNvbnRlbnQpO1xuICAgICAgICBjb25zdCBjb250ZXh0cyA9IFtdO1xuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiByZXNwb25zZS5zb3VyY2VOb2RlcyB8fCBbXSl7XG4gICAgICAgICAgICAgICAgY29udGV4dHMucHVzaChub2RlLm5vZGUuZ2V0Q29udGVudChNZXRhZGF0YU1vZGUuQUxMKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZXZhbHVhdGUoe1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2VTdHIsXG4gICAgICAgICAgICBjb250ZXh0c1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/evaluation/Faithfulness.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/evaluation/Relevancy.js":
/*!**************************************************************!*\
  !*** ./node_modules/llamaindex/dist/evaluation/Relevancy.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RelevancyEvaluator: () => (/* binding */ RelevancyEvaluator)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _indices_summary_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../indices/summary/index.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/summary/index.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/prompts.js\");\n\n\n\n\n\nclass RelevancyEvaluator extends _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptMixin {\n    raiseError;\n    evalTemplate;\n    refineTemplate;\n    constructor(params){\n        super();\n        this.raiseError = params?.raiseError ?? false;\n        this.evalTemplate = params?.evalTemplate ?? _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultRelevancyEvalPrompt;\n        this.refineTemplate = params?.refineTemplate ?? _prompts_js__WEBPACK_IMPORTED_MODULE_4__.defaultRelevancyRefinePrompt;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _getPrompts() {\n        return {\n            evalTemplate: this.evalTemplate,\n            refineTemplate: this.refineTemplate\n        };\n    }\n    _updatePrompts(prompts) {\n        if (\"evalTemplate\" in prompts) {\n            this.evalTemplate = prompts[\"evalTemplate\"];\n        }\n        if (\"refineTemplate\" in prompts) {\n            this.refineTemplate = prompts[\"refineTemplate\"];\n        }\n    }\n    async evaluate({ query, response, contexts = [], sleepTimeInSeconds = 0 }) {\n        if (query === null || response === null) {\n            throw new Error(\"query, contexts, and response must be provided\");\n        }\n        await new Promise((resolve)=>setTimeout(resolve, sleepTimeInSeconds * 1000));\n        const docs = contexts?.map((context)=>new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.Document({\n                text: context\n            }));\n        const index = await _indices_summary_index_js__WEBPACK_IMPORTED_MODULE_3__.SummaryIndex.fromDocuments(docs, {});\n        const queryResponse = `Question: ${(0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(query)}\\nResponse: ${response}`;\n        const queryEngine = index.asQueryEngine();\n        queryEngine.updatePrompts({\n            \"responseSynthesizer:textQATemplate\": this.evalTemplate,\n            \"responseSynthesizer:refineTemplate\": this.refineTemplate\n        });\n        const responseObj = await queryEngine.query({\n            query: queryResponse\n        });\n        const rawResponseTxt = responseObj.toString();\n        let passing;\n        if (rawResponseTxt.toLowerCase().includes(\"yes\")) {\n            passing = true;\n        } else {\n            passing = false;\n            if (this.raiseError) {\n                throw new Error(\"The response is invalid\");\n            }\n        }\n        return {\n            query,\n            contexts,\n            response,\n            passing,\n            score: passing ? 1.0 : 0.0,\n            feedback: rawResponseTxt\n        };\n    }\n    /**\n   * @param query Query to evaluate\n   * @param response  Response to evaluate\n   */ async evaluateResponse({ query, response }) {\n        const responseStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_2__.extractText)(response?.message.content);\n        const contexts = [];\n        if (response) {\n            for (const node of response.sourceNodes || []){\n                contexts.push(node.node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL));\n            }\n        }\n        return this.evaluate({\n            query,\n            response: responseStr,\n            contexts\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vUmVsZXZhbmN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1RDtBQUNVO0FBQ1o7QUFDTTtBQUM2QjtBQUNqRixpQ0FBaUMsaUVBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELG1FQUEwQjtBQUM5RSx3REFBd0QscUVBQTRCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3REFBd0Q7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsNkRBQVE7QUFDMUQ7QUFDQSxhQUFhO0FBQ2IsNEJBQTRCLG1FQUFZLHVCQUF1QjtBQUMvRCwyQ0FBMkMsbUVBQVcsUUFBUSxjQUFjLFNBQVM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRCw0QkFBNEIsbUVBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGlFQUFZO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9ldmFsdWF0aW9uL1JlbGV2YW5jeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRNaXhpbiB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IERvY3VtZW50LCBNZXRhZGF0YU1vZGUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zY2hlbWFcIjtcbmltcG9ydCB7IGV4dHJhY3RUZXh0IH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IFN1bW1hcnlJbmRleCB9IGZyb20gXCIuLi9pbmRpY2VzL3N1bW1hcnkvaW5kZXguanNcIjtcbmltcG9ydCB7IGRlZmF1bHRSZWxldmFuY3lFdmFsUHJvbXB0LCBkZWZhdWx0UmVsZXZhbmN5UmVmaW5lUHJvbXB0IH0gZnJvbSBcIi4vcHJvbXB0cy5qc1wiO1xuZXhwb3J0IGNsYXNzIFJlbGV2YW5jeUV2YWx1YXRvciBleHRlbmRzIFByb21wdE1peGluIHtcbiAgICByYWlzZUVycm9yO1xuICAgIGV2YWxUZW1wbGF0ZTtcbiAgICByZWZpbmVUZW1wbGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhaXNlRXJyb3IgPSBwYXJhbXM/LnJhaXNlRXJyb3IgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZhbFRlbXBsYXRlID0gcGFyYW1zPy5ldmFsVGVtcGxhdGUgPz8gZGVmYXVsdFJlbGV2YW5jeUV2YWxQcm9tcHQ7XG4gICAgICAgIHRoaXMucmVmaW5lVGVtcGxhdGUgPSBwYXJhbXM/LnJlZmluZVRlbXBsYXRlID8/IGRlZmF1bHRSZWxldmFuY3lSZWZpbmVQcm9tcHQ7XG4gICAgfVxuICAgIF9nZXRQcm9tcHRNb2R1bGVzKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIF9nZXRQcm9tcHRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXZhbFRlbXBsYXRlOiB0aGlzLmV2YWxUZW1wbGF0ZSxcbiAgICAgICAgICAgIHJlZmluZVRlbXBsYXRlOiB0aGlzLnJlZmluZVRlbXBsYXRlXG4gICAgICAgIH07XG4gICAgfVxuICAgIF91cGRhdGVQcm9tcHRzKHByb21wdHMpIHtcbiAgICAgICAgaWYgKFwiZXZhbFRlbXBsYXRlXCIgaW4gcHJvbXB0cykge1xuICAgICAgICAgICAgdGhpcy5ldmFsVGVtcGxhdGUgPSBwcm9tcHRzW1wiZXZhbFRlbXBsYXRlXCJdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInJlZmluZVRlbXBsYXRlXCIgaW4gcHJvbXB0cykge1xuICAgICAgICAgICAgdGhpcy5yZWZpbmVUZW1wbGF0ZSA9IHByb21wdHNbXCJyZWZpbmVUZW1wbGF0ZVwiXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBldmFsdWF0ZSh7IHF1ZXJ5LCByZXNwb25zZSwgY29udGV4dHMgPSBbXSwgc2xlZXBUaW1lSW5TZWNvbmRzID0gMCB9KSB7XG4gICAgICAgIGlmIChxdWVyeSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicXVlcnksIGNvbnRleHRzLCBhbmQgcmVzcG9uc2UgbXVzdCBiZSBwcm92aWRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PnNldFRpbWVvdXQocmVzb2x2ZSwgc2xlZXBUaW1lSW5TZWNvbmRzICogMTAwMCkpO1xuICAgICAgICBjb25zdCBkb2NzID0gY29udGV4dHM/Lm1hcCgoY29udGV4dCk9Pm5ldyBEb2N1bWVudCh7XG4gICAgICAgICAgICAgICAgdGV4dDogY29udGV4dFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGF3YWl0IFN1bW1hcnlJbmRleC5mcm9tRG9jdW1lbnRzKGRvY3MsIHt9KTtcbiAgICAgICAgY29uc3QgcXVlcnlSZXNwb25zZSA9IGBRdWVzdGlvbjogJHtleHRyYWN0VGV4dChxdWVyeSl9XFxuUmVzcG9uc2U6ICR7cmVzcG9uc2V9YDtcbiAgICAgICAgY29uc3QgcXVlcnlFbmdpbmUgPSBpbmRleC5hc1F1ZXJ5RW5naW5lKCk7XG4gICAgICAgIHF1ZXJ5RW5naW5lLnVwZGF0ZVByb21wdHMoe1xuICAgICAgICAgICAgXCJyZXNwb25zZVN5bnRoZXNpemVyOnRleHRRQVRlbXBsYXRlXCI6IHRoaXMuZXZhbFRlbXBsYXRlLFxuICAgICAgICAgICAgXCJyZXNwb25zZVN5bnRoZXNpemVyOnJlZmluZVRlbXBsYXRlXCI6IHRoaXMucmVmaW5lVGVtcGxhdGVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlT2JqID0gYXdhaXQgcXVlcnlFbmdpbmUucXVlcnkoe1xuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5UmVzcG9uc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJhd1Jlc3BvbnNlVHh0ID0gcmVzcG9uc2VPYmoudG9TdHJpbmcoKTtcbiAgICAgICAgbGV0IHBhc3Npbmc7XG4gICAgICAgIGlmIChyYXdSZXNwb25zZVR4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwieWVzXCIpKSB7XG4gICAgICAgICAgICBwYXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJhaXNlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVzcG9uc2UgaXMgaW52YWxpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICBjb250ZXh0cyxcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgcGFzc2luZyxcbiAgICAgICAgICAgIHNjb3JlOiBwYXNzaW5nID8gMS4wIDogMC4wLFxuICAgICAgICAgICAgZmVlZGJhY2s6IHJhd1Jlc3BvbnNlVHh0XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgKiBAcGFyYW0gcXVlcnkgUXVlcnkgdG8gZXZhbHVhdGVcbiAgICogQHBhcmFtIHJlc3BvbnNlICBSZXNwb25zZSB0byBldmFsdWF0ZVxuICAgKi8gYXN5bmMgZXZhbHVhdGVSZXNwb25zZSh7IHF1ZXJ5LCByZXNwb25zZSB9KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlU3RyID0gZXh0cmFjdFRleHQocmVzcG9uc2U/Lm1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHRzID0gW107XG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIHJlc3BvbnNlLnNvdXJjZU5vZGVzIHx8IFtdKXtcbiAgICAgICAgICAgICAgICBjb250ZXh0cy5wdXNoKG5vZGUubm9kZS5nZXRDb250ZW50KE1ldGFkYXRhTW9kZS5BTEwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZSh7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZVN0cixcbiAgICAgICAgICAgIGNvbnRleHRzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/evaluation/Relevancy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/evaluation/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/llamaindex/dist/evaluation/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CorrectnessEvaluator: () => (/* reexport safe */ _Correctness_js__WEBPACK_IMPORTED_MODULE_0__.CorrectnessEvaluator),\n/* harmony export */   FaithfulnessEvaluator: () => (/* reexport safe */ _Faithfulness_js__WEBPACK_IMPORTED_MODULE_1__.FaithfulnessEvaluator),\n/* harmony export */   RelevancyEvaluator: () => (/* reexport safe */ _Relevancy_js__WEBPACK_IMPORTED_MODULE_3__.RelevancyEvaluator),\n/* harmony export */   defaultCorrectnessSystemPrompt: () => (/* reexport safe */ _prompts_js__WEBPACK_IMPORTED_MODULE_2__.defaultCorrectnessSystemPrompt),\n/* harmony export */   defaultEvaluationParser: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.defaultEvaluationParser),\n/* harmony export */   defaultFaithfulnessRefinePrompt: () => (/* reexport safe */ _prompts_js__WEBPACK_IMPORTED_MODULE_2__.defaultFaithfulnessRefinePrompt),\n/* harmony export */   defaultFaithfulnessTextQaPrompt: () => (/* reexport safe */ _prompts_js__WEBPACK_IMPORTED_MODULE_2__.defaultFaithfulnessTextQaPrompt),\n/* harmony export */   defaultRelevancyEvalPrompt: () => (/* reexport safe */ _prompts_js__WEBPACK_IMPORTED_MODULE_2__.defaultRelevancyEvalPrompt),\n/* harmony export */   defaultRelevancyRefinePrompt: () => (/* reexport safe */ _prompts_js__WEBPACK_IMPORTED_MODULE_2__.defaultRelevancyRefinePrompt),\n/* harmony export */   defaultUserPrompt: () => (/* reexport safe */ _prompts_js__WEBPACK_IMPORTED_MODULE_2__.defaultUserPrompt)\n/* harmony export */ });\n/* harmony import */ var _Correctness_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Correctness.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/Correctness.js\");\n/* harmony import */ var _Faithfulness_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Faithfulness.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/Faithfulness.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/prompts.js\");\n/* harmony import */ var _Relevancy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Relevancy.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/Relevancy.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/utils.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ0M7QUFDTDtBQUNFO0FBQ0oiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vQ29ycmVjdG5lc3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0ZhaXRoZnVsbmVzcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcHJvbXB0cy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUmVsZXZhbmN5LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy5qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/evaluation/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/evaluation/prompts.js":
/*!************************************************************!*\
  !*** ./node_modules/llamaindex/dist/evaluation/prompts.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCorrectnessSystemPrompt: () => (/* binding */ defaultCorrectnessSystemPrompt),\n/* harmony export */   defaultFaithfulnessRefinePrompt: () => (/* binding */ defaultFaithfulnessRefinePrompt),\n/* harmony export */   defaultFaithfulnessTextQaPrompt: () => (/* binding */ defaultFaithfulnessTextQaPrompt),\n/* harmony export */   defaultRelevancyEvalPrompt: () => (/* binding */ defaultRelevancyEvalPrompt),\n/* harmony export */   defaultRelevancyRefinePrompt: () => (/* binding */ defaultRelevancyRefinePrompt),\n/* harmony export */   defaultUserPrompt: () => (/* binding */ defaultUserPrompt)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n\nconst defaultUserPrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"query\",\n        \"referenceAnswer\",\n        \"generatedAnswer\"\n    ],\n    template: `\n## User Query\n{query}\n\n## Reference Answer\n{referenceAnswer}\n\n## Generated Answer\n{generatedAnswer}\n`\n});\nconst defaultCorrectnessSystemPrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template: `You are an expert evaluation system for a question answering chatbot.\n\nYou are given the following information:\n- a user query, and\n- a generated answer\n\nYou may also be given a reference answer to use for reference in your evaluation.\n\nYour job is to judge the relevance and correctness of the generated answer.\nOutput a single score that represents a holistic evaluation.\nYou must return your response in a line with only the score.\nDo not return answers in any other format.\nOn a separate line provide your reasoning for the score as well.\n\nFollow these guidelines for scoring:\n- Your score has to be between 1 and 5, where 1 is the worst and 5 is the best.\n- If the generated answer is not relevant to the user query,\nyou should give a score of 1.\n- If the generated answer is relevant but contains mistakes,\nyou should give a score between 2 and 3.\n- If the generated answer is relevant and fully correct,\nyou should give a score between 4 and 5.\n\nExample Response:\n4.0\nThe generated answer has the exact same metrics as the reference answer\nbut it is not as concise.\n`\n});\nconst defaultFaithfulnessRefinePrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"query\",\n        \"existingAnswer\",\n        \"context\"\n    ],\n    template: `\nWe want to understand if the following information is present\nin the context information: {query}\nWe have provided an existing YES/NO answer: {existingAnswer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nIf the existing answer was already YES, still answer YES.\nIf the information is present in the new context, answer YES.\nOtherwise answer NO.\n`\n});\nconst defaultFaithfulnessTextQaPrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\"\n    ],\n    template: `\nPlease tell if a given piece of information\nis supported by the context.\nYou need to answer with either YES or NO.\nAnswer YES if any of the context supports the information, even\nif most of the context is unrelated.\nSome examples are provided below.\n\nInformation: Apple pie is generally double-crusted.\nContext: An apple pie is a fruit pie in which the principal filling\ningredient is apples.\nApple pie is often served with whipped cream, ice cream\n('apple pie à la mode'), custard or cheddar cheese.\nIt is generally double-crusted, with pastry both above\nand below the filling; the upper crust may be solid or\nlatticed (woven of crosswise strips).\nAnswer: YES\nInformation: Apple pies tastes bad.\nContext: An apple pie is a fruit pie in which the principal filling\ningredient is apples.\nApple pie is often served with whipped cream, ice cream\n('apple pie à la mode'), custard or cheddar cheese.\nIt is generally double-crusted, with pastry both above\nand below the filling; the upper crust may be solid or\nlatticed (woven of crosswise strips).\nAnswer: NO\nInformation: {query}\nContext: {context}\nAnswer:\n`\n});\nconst defaultRelevancyEvalPrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\"\n    ],\n    template: `Your task is to evaluate if the response for the query is in line with the context information provided.\nYou have two options to answer. Either YES/ NO.\nAnswer - YES, if the response for the query is in line with context information otherwise NO.\nQuery and Response: {query}\nContext: {context}\nAnswer: `\n});\nconst defaultRelevancyRefinePrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"query\",\n        \"existingAnswer\",\n        \"contextMsg\"\n    ],\n    template: `We want to understand if the following query and response is\nin line with the context information: \n{query}\nWe have provided an existing YES/NO answer: \n{existingAnswer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{contextMsg}\n------------\nIf the existing answer was already YES, still answer YES.\nIf the information is present in the new context, answer YES.\nOtherwise answer NO.\n`\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTBEO0FBQ25ELDhCQUE4QixvRUFBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxDQUFDOztBQUVEO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNNLDJDQUEyQyxvRUFBYztBQUNoRTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ00sNENBQTRDLG9FQUFjO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSw0Q0FBNEMsb0VBQWM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsY0FBYztBQUNkLFVBQVU7QUFDVjtBQUNBO0FBQ0EsQ0FBQztBQUNNLHVDQUF1QyxvRUFBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixVQUFVO0FBQ1Y7QUFDQSxDQUFDO0FBQ00seUNBQXlDLG9FQUFjO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZXZhbHVhdGlvbi9wcm9tcHRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb21wdFRlbXBsYXRlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvcHJvbXB0c1wiO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRVc2VyUHJvbXB0ID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZVZhcnM6IFtcbiAgICAgICAgXCJxdWVyeVwiLFxuICAgICAgICBcInJlZmVyZW5jZUFuc3dlclwiLFxuICAgICAgICBcImdlbmVyYXRlZEFuc3dlclwiXG4gICAgXSxcbiAgICB0ZW1wbGF0ZTogYFxuIyMgVXNlciBRdWVyeVxue3F1ZXJ5fVxuXG4jIyBSZWZlcmVuY2UgQW5zd2VyXG57cmVmZXJlbmNlQW5zd2VyfVxuXG4jIyBHZW5lcmF0ZWQgQW5zd2VyXG57Z2VuZXJhdGVkQW5zd2VyfVxuYFxufSk7XG5leHBvcnQgY29uc3QgZGVmYXVsdENvcnJlY3RuZXNzU3lzdGVtUHJvbXB0ID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZTogYFlvdSBhcmUgYW4gZXhwZXJ0IGV2YWx1YXRpb24gc3lzdGVtIGZvciBhIHF1ZXN0aW9uIGFuc3dlcmluZyBjaGF0Ym90LlxuXG5Zb3UgYXJlIGdpdmVuIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb246XG4tIGEgdXNlciBxdWVyeSwgYW5kXG4tIGEgZ2VuZXJhdGVkIGFuc3dlclxuXG5Zb3UgbWF5IGFsc28gYmUgZ2l2ZW4gYSByZWZlcmVuY2UgYW5zd2VyIHRvIHVzZSBmb3IgcmVmZXJlbmNlIGluIHlvdXIgZXZhbHVhdGlvbi5cblxuWW91ciBqb2IgaXMgdG8ganVkZ2UgdGhlIHJlbGV2YW5jZSBhbmQgY29ycmVjdG5lc3Mgb2YgdGhlIGdlbmVyYXRlZCBhbnN3ZXIuXG5PdXRwdXQgYSBzaW5nbGUgc2NvcmUgdGhhdCByZXByZXNlbnRzIGEgaG9saXN0aWMgZXZhbHVhdGlvbi5cbllvdSBtdXN0IHJldHVybiB5b3VyIHJlc3BvbnNlIGluIGEgbGluZSB3aXRoIG9ubHkgdGhlIHNjb3JlLlxuRG8gbm90IHJldHVybiBhbnN3ZXJzIGluIGFueSBvdGhlciBmb3JtYXQuXG5PbiBhIHNlcGFyYXRlIGxpbmUgcHJvdmlkZSB5b3VyIHJlYXNvbmluZyBmb3IgdGhlIHNjb3JlIGFzIHdlbGwuXG5cbkZvbGxvdyB0aGVzZSBndWlkZWxpbmVzIGZvciBzY29yaW5nOlxuLSBZb3VyIHNjb3JlIGhhcyB0byBiZSBiZXR3ZWVuIDEgYW5kIDUsIHdoZXJlIDEgaXMgdGhlIHdvcnN0IGFuZCA1IGlzIHRoZSBiZXN0LlxuLSBJZiB0aGUgZ2VuZXJhdGVkIGFuc3dlciBpcyBub3QgcmVsZXZhbnQgdG8gdGhlIHVzZXIgcXVlcnksXG55b3Ugc2hvdWxkIGdpdmUgYSBzY29yZSBvZiAxLlxuLSBJZiB0aGUgZ2VuZXJhdGVkIGFuc3dlciBpcyByZWxldmFudCBidXQgY29udGFpbnMgbWlzdGFrZXMsXG55b3Ugc2hvdWxkIGdpdmUgYSBzY29yZSBiZXR3ZWVuIDIgYW5kIDMuXG4tIElmIHRoZSBnZW5lcmF0ZWQgYW5zd2VyIGlzIHJlbGV2YW50IGFuZCBmdWxseSBjb3JyZWN0LFxueW91IHNob3VsZCBnaXZlIGEgc2NvcmUgYmV0d2VlbiA0IGFuZCA1LlxuXG5FeGFtcGxlIFJlc3BvbnNlOlxuNC4wXG5UaGUgZ2VuZXJhdGVkIGFuc3dlciBoYXMgdGhlIGV4YWN0IHNhbWUgbWV0cmljcyBhcyB0aGUgcmVmZXJlbmNlIGFuc3dlclxuYnV0IGl0IGlzIG5vdCBhcyBjb25jaXNlLlxuYFxufSk7XG5leHBvcnQgY29uc3QgZGVmYXVsdEZhaXRoZnVsbmVzc1JlZmluZVByb21wdCA9IG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgdGVtcGxhdGVWYXJzOiBbXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJleGlzdGluZ0Fuc3dlclwiLFxuICAgICAgICBcImNvbnRleHRcIlxuICAgIF0sXG4gICAgdGVtcGxhdGU6IGBcbldlIHdhbnQgdG8gdW5kZXJzdGFuZCBpZiB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uIGlzIHByZXNlbnRcbmluIHRoZSBjb250ZXh0IGluZm9ybWF0aW9uOiB7cXVlcnl9XG5XZSBoYXZlIHByb3ZpZGVkIGFuIGV4aXN0aW5nIFlFUy9OTyBhbnN3ZXI6IHtleGlzdGluZ0Fuc3dlcn1cbldlIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIHJlZmluZSB0aGUgZXhpc3RpbmcgYW5zd2VyXG4ob25seSBpZiBuZWVkZWQpIHdpdGggc29tZSBtb3JlIGNvbnRleHQgYmVsb3cuXG4tLS0tLS0tLS0tLS1cbntjb250ZXh0fVxuLS0tLS0tLS0tLS0tXG5JZiB0aGUgZXhpc3RpbmcgYW5zd2VyIHdhcyBhbHJlYWR5IFlFUywgc3RpbGwgYW5zd2VyIFlFUy5cbklmIHRoZSBpbmZvcm1hdGlvbiBpcyBwcmVzZW50IGluIHRoZSBuZXcgY29udGV4dCwgYW5zd2VyIFlFUy5cbk90aGVyd2lzZSBhbnN3ZXIgTk8uXG5gXG59KTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0RmFpdGhmdWxuZXNzVGV4dFFhUHJvbXB0ID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZVZhcnM6IFtcbiAgICAgICAgXCJjb250ZXh0XCIsXG4gICAgICAgIFwicXVlcnlcIlxuICAgIF0sXG4gICAgdGVtcGxhdGU6IGBcblBsZWFzZSB0ZWxsIGlmIGEgZ2l2ZW4gcGllY2Ugb2YgaW5mb3JtYXRpb25cbmlzIHN1cHBvcnRlZCBieSB0aGUgY29udGV4dC5cbllvdSBuZWVkIHRvIGFuc3dlciB3aXRoIGVpdGhlciBZRVMgb3IgTk8uXG5BbnN3ZXIgWUVTIGlmIGFueSBvZiB0aGUgY29udGV4dCBzdXBwb3J0cyB0aGUgaW5mb3JtYXRpb24sIGV2ZW5cbmlmIG1vc3Qgb2YgdGhlIGNvbnRleHQgaXMgdW5yZWxhdGVkLlxuU29tZSBleGFtcGxlcyBhcmUgcHJvdmlkZWQgYmVsb3cuXG5cbkluZm9ybWF0aW9uOiBBcHBsZSBwaWUgaXMgZ2VuZXJhbGx5IGRvdWJsZS1jcnVzdGVkLlxuQ29udGV4dDogQW4gYXBwbGUgcGllIGlzIGEgZnJ1aXQgcGllIGluIHdoaWNoIHRoZSBwcmluY2lwYWwgZmlsbGluZ1xuaW5ncmVkaWVudCBpcyBhcHBsZXMuXG5BcHBsZSBwaWUgaXMgb2Z0ZW4gc2VydmVkIHdpdGggd2hpcHBlZCBjcmVhbSwgaWNlIGNyZWFtXG4oJ2FwcGxlIHBpZSDDoCBsYSBtb2RlJyksIGN1c3RhcmQgb3IgY2hlZGRhciBjaGVlc2UuXG5JdCBpcyBnZW5lcmFsbHkgZG91YmxlLWNydXN0ZWQsIHdpdGggcGFzdHJ5IGJvdGggYWJvdmVcbmFuZCBiZWxvdyB0aGUgZmlsbGluZzsgdGhlIHVwcGVyIGNydXN0IG1heSBiZSBzb2xpZCBvclxubGF0dGljZWQgKHdvdmVuIG9mIGNyb3Nzd2lzZSBzdHJpcHMpLlxuQW5zd2VyOiBZRVNcbkluZm9ybWF0aW9uOiBBcHBsZSBwaWVzIHRhc3RlcyBiYWQuXG5Db250ZXh0OiBBbiBhcHBsZSBwaWUgaXMgYSBmcnVpdCBwaWUgaW4gd2hpY2ggdGhlIHByaW5jaXBhbCBmaWxsaW5nXG5pbmdyZWRpZW50IGlzIGFwcGxlcy5cbkFwcGxlIHBpZSBpcyBvZnRlbiBzZXJ2ZWQgd2l0aCB3aGlwcGVkIGNyZWFtLCBpY2UgY3JlYW1cbignYXBwbGUgcGllIMOgIGxhIG1vZGUnKSwgY3VzdGFyZCBvciBjaGVkZGFyIGNoZWVzZS5cbkl0IGlzIGdlbmVyYWxseSBkb3VibGUtY3J1c3RlZCwgd2l0aCBwYXN0cnkgYm90aCBhYm92ZVxuYW5kIGJlbG93IHRoZSBmaWxsaW5nOyB0aGUgdXBwZXIgY3J1c3QgbWF5IGJlIHNvbGlkIG9yXG5sYXR0aWNlZCAod292ZW4gb2YgY3Jvc3N3aXNlIHN0cmlwcykuXG5BbnN3ZXI6IE5PXG5JbmZvcm1hdGlvbjoge3F1ZXJ5fVxuQ29udGV4dDoge2NvbnRleHR9XG5BbnN3ZXI6XG5gXG59KTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0UmVsZXZhbmN5RXZhbFByb21wdCA9IG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgdGVtcGxhdGVWYXJzOiBbXG4gICAgICAgIFwiY29udGV4dFwiLFxuICAgICAgICBcInF1ZXJ5XCJcbiAgICBdLFxuICAgIHRlbXBsYXRlOiBgWW91ciB0YXNrIGlzIHRvIGV2YWx1YXRlIGlmIHRoZSByZXNwb25zZSBmb3IgdGhlIHF1ZXJ5IGlzIGluIGxpbmUgd2l0aCB0aGUgY29udGV4dCBpbmZvcm1hdGlvbiBwcm92aWRlZC5cbllvdSBoYXZlIHR3byBvcHRpb25zIHRvIGFuc3dlci4gRWl0aGVyIFlFUy8gTk8uXG5BbnN3ZXIgLSBZRVMsIGlmIHRoZSByZXNwb25zZSBmb3IgdGhlIHF1ZXJ5IGlzIGluIGxpbmUgd2l0aCBjb250ZXh0IGluZm9ybWF0aW9uIG90aGVyd2lzZSBOTy5cblF1ZXJ5IGFuZCBSZXNwb25zZToge3F1ZXJ5fVxuQ29udGV4dDoge2NvbnRleHR9XG5BbnN3ZXI6IGBcbn0pO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRSZWxldmFuY3lSZWZpbmVQcm9tcHQgPSBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIHRlbXBsYXRlVmFyczogW1xuICAgICAgICBcInF1ZXJ5XCIsXG4gICAgICAgIFwiZXhpc3RpbmdBbnN3ZXJcIixcbiAgICAgICAgXCJjb250ZXh0TXNnXCJcbiAgICBdLFxuICAgIHRlbXBsYXRlOiBgV2Ugd2FudCB0byB1bmRlcnN0YW5kIGlmIHRoZSBmb2xsb3dpbmcgcXVlcnkgYW5kIHJlc3BvbnNlIGlzXG5pbiBsaW5lIHdpdGggdGhlIGNvbnRleHQgaW5mb3JtYXRpb246IFxue3F1ZXJ5fVxuV2UgaGF2ZSBwcm92aWRlZCBhbiBleGlzdGluZyBZRVMvTk8gYW5zd2VyOiBcbntleGlzdGluZ0Fuc3dlcn1cbldlIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIHJlZmluZSB0aGUgZXhpc3RpbmcgYW5zd2VyXG4ob25seSBpZiBuZWVkZWQpIHdpdGggc29tZSBtb3JlIGNvbnRleHQgYmVsb3cuXG4tLS0tLS0tLS0tLS1cbntjb250ZXh0TXNnfVxuLS0tLS0tLS0tLS0tXG5JZiB0aGUgZXhpc3RpbmcgYW5zd2VyIHdhcyBhbHJlYWR5IFlFUywgc3RpbGwgYW5zd2VyIFlFUy5cbklmIHRoZSBpbmZvcm1hdGlvbiBpcyBwcmVzZW50IGluIHRoZSBuZXcgY29udGV4dCwgYW5zd2VyIFlFUy5cbk90aGVyd2lzZSBhbnN3ZXIgTk8uXG5gXG59KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/evaluation/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/evaluation/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/llamaindex/dist/evaluation/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultEvaluationParser: () => (/* binding */ defaultEvaluationParser)\n/* harmony export */ });\nconst defaultEvaluationParser = (evalResponse)=>{\n    const [scoreStr, reasoningStr] = evalResponse.split(\"\\n\");\n    const score = parseFloat(scoreStr);\n    const reasoning = reasoningStr.trim();\n    return [\n        score,\n        reasoning\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V2YWx1YXRpb24vdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZXZhbHVhdGlvbi91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZGVmYXVsdEV2YWx1YXRpb25QYXJzZXIgPSAoZXZhbFJlc3BvbnNlKT0+e1xuICAgIGNvbnN0IFtzY29yZVN0ciwgcmVhc29uaW5nU3RyXSA9IGV2YWxSZXNwb25zZS5zcGxpdChcIlxcblwiKTtcbiAgICBjb25zdCBzY29yZSA9IHBhcnNlRmxvYXQoc2NvcmVTdHIpO1xuICAgIGNvbnN0IHJlYXNvbmluZyA9IHJlYXNvbmluZ1N0ci50cmltKCk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgc2NvcmUsXG4gICAgICAgIHJlYXNvbmluZ1xuICAgIF07XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/evaluation/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/extractors/MetadataExtractors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/extractors/MetadataExtractors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeywordExtractor: () => (/* binding */ KeywordExtractor),\n/* harmony export */   QuestionsAnsweredExtractor: () => (/* binding */ QuestionsAnsweredExtractor),\n/* harmony export */   SummaryExtractor: () => (/* binding */ SummaryExtractor),\n/* harmony export */   TitleExtractor: () => (/* binding */ TitleExtractor)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/openai */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/llamaindex/dist/extractors/types.js\");\n\n\n\n\nconst STRIP_REGEX = /(\\r\\n|\\n|\\r)/gm;\n/**\n * Extract keywords from a list of nodes.\n */ class KeywordExtractor extends _types_js__WEBPACK_IMPORTED_MODULE_3__.BaseExtractor {\n    /**\n   * LLM instance.\n   * @type {LLM}\n   */ llm;\n    /**\n   * Number of keywords to extract.\n   * @type {number}\n   * @default 5\n   */ keywords = 5;\n    /**\n   * The prompt template to use for the question extractor.\n   * @type {string}\n   */ promptTemplate;\n    /**\n   * Constructor for the KeywordExtractor class.\n   * @param {LLM} llm LLM instance.\n   * @param {number} keywords Number of keywords to extract.\n   * @throws {Error} If keywords is less than 1.\n   */ constructor(options){\n        if (options?.keywords && options.keywords < 1) throw new Error(\"Keywords must be greater than 0\");\n        super();\n        this.llm = options?.llm ?? new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI();\n        this.keywords = options?.keywords ?? 5;\n        this.promptTemplate = options?.promptTemplate ? new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            templateVars: [\n                \"context\",\n                \"maxKeywords\"\n            ],\n            template: options.promptTemplate\n        }) : _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultKeywordExtractPrompt;\n    }\n    /**\n   *\n   * @param node Node to extract keywords from.\n   * @returns Keywords extracted from the node.\n   */ async extractKeywordsFromNodes(node) {\n        if (this.isTextNodeOnly && !(node instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode)) {\n            return {};\n        }\n        const completion = await this.llm.complete({\n            prompt: this.promptTemplate.format({\n                context: node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL),\n                maxKeywords: this.keywords.toString()\n            })\n        });\n        return {\n            excerptKeywords: completion.text\n        };\n    }\n    /**\n   *\n   * @param nodes Nodes to extract keywords from.\n   * @returns Keywords extracted from the nodes.\n   */ async extract(nodes) {\n        const results = await Promise.all(nodes.map((node)=>this.extractKeywordsFromNodes(node)));\n        return results;\n    }\n}\n/**\n * Extract title from a list of nodes.\n */ class TitleExtractor extends _types_js__WEBPACK_IMPORTED_MODULE_3__.BaseExtractor {\n    /**\n   * LLM instance.\n   * @type {LLM}\n   */ llm;\n    /**\n   * Can work for mixture of text and non-text nodes\n   * @type {boolean}\n   * @default false\n   */ isTextNodeOnly = false;\n    /**\n   * Number of nodes to extrct titles from.\n   * @type {number}\n   * @default 5\n   */ nodes = 5;\n    /**\n   * The prompt template to use for the title extractor.\n   * @type {string}\n   */ nodeTemplate;\n    /**\n   * The prompt template to merge title with..\n   * @type {string}\n   */ combineTemplate;\n    /**\n   * Constructor for the TitleExtractor class.\n   * @param {LLM} llm LLM instance.\n   * @param {number} nodes Number of nodes to extract titles from.\n   * @param {TitleExtractorPrompt} nodeTemplate The prompt template to use for the title extractor.\n   * @param {string} combineTemplate The prompt template to merge title with..\n   */ constructor(options){\n        super();\n        this.llm = options?.llm ?? new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI();\n        this.nodes = options?.nodes ?? 5;\n        this.nodeTemplate = options?.nodeTemplate ? new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            templateVars: [\n                \"context\"\n            ],\n            template: options.nodeTemplate\n        }) : _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultTitleExtractorPromptTemplate;\n        this.combineTemplate = options?.combineTemplate ? new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            templateVars: [\n                \"context\"\n            ],\n            template: options.combineTemplate\n        }) : _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultTitleCombinePromptTemplate;\n    }\n    /**\n   * Extract titles from a list of nodes.\n   * @param {BaseNode[]} nodes Nodes to extract titles from.\n   * @returns {Promise<BaseNode<ExtractTitle>[]>} Titles extracted from the nodes.\n   */ async extract(nodes) {\n        const nodesToExtractTitle = this.filterNodes(nodes);\n        if (!nodesToExtractTitle.length) {\n            return [];\n        }\n        const nodesByDocument = this.separateNodesByDocument(nodesToExtractTitle);\n        const titlesByDocument = await this.extractTitles(nodesByDocument);\n        return nodesToExtractTitle.map((node)=>{\n            return {\n                documentTitle: titlesByDocument[node.sourceNode?.nodeId ?? \"\"]\n            };\n        });\n    }\n    filterNodes(nodes) {\n        return nodes.filter((node)=>{\n            if (this.isTextNodeOnly && !(node instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode)) {\n                return false;\n            }\n            return true;\n        });\n    }\n    separateNodesByDocument(nodes) {\n        const nodesByDocument = {};\n        for (const node of nodes){\n            const parentNode = node.sourceNode?.nodeId;\n            if (!parentNode) {\n                continue;\n            }\n            if (!nodesByDocument[parentNode]) {\n                nodesByDocument[parentNode] = [];\n            }\n            nodesByDocument[parentNode].push(node);\n        }\n        return nodesByDocument;\n    }\n    async extractTitles(nodesByDocument) {\n        const titlesByDocument = {};\n        for (const [key, nodes] of Object.entries(nodesByDocument)){\n            const titleCandidates = await this.getTitlesCandidates(nodes);\n            const combinedTitles = titleCandidates.join(\", \");\n            const completion = await this.llm.complete({\n                prompt: this.combineTemplate.format({\n                    context: combinedTitles\n                })\n            });\n            titlesByDocument[key] = completion.text;\n        }\n        return titlesByDocument;\n    }\n    async getTitlesCandidates(nodes) {\n        const titleJobs = nodes.map(async (node)=>{\n            const completion = await this.llm.complete({\n                prompt: this.nodeTemplate.format({\n                    context: node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL)\n                })\n            });\n            return completion.text;\n        });\n        return await Promise.all(titleJobs);\n    }\n}\n/**\n * Extract questions from a list of nodes.\n */ class QuestionsAnsweredExtractor extends _types_js__WEBPACK_IMPORTED_MODULE_3__.BaseExtractor {\n    /**\n   * LLM instance.\n   * @type {LLM}\n   */ llm;\n    /**\n   * Number of questions to generate.\n   * @type {number}\n   * @default 5\n   */ questions = 5;\n    /**\n   * The prompt template to use for the question extractor.\n   * @type {string}\n   */ promptTemplate;\n    /**\n   * Wheter to use metadata for embeddings only\n   * @type {boolean}\n   * @default false\n   */ embeddingOnly = false;\n    /**\n   * Constructor for the QuestionsAnsweredExtractor class.\n   * @param {LLM} llm LLM instance.\n   * @param {number} questions Number of questions to generate.\n   * @param {TextQAPrompt} promptTemplate The prompt template to use for the question extractor.\n   * @param {boolean} embeddingOnly Wheter to use metadata for embeddings only.\n   */ constructor(options){\n        if (options?.questions && options.questions < 1) throw new Error(\"Questions must be greater than 0\");\n        super();\n        this.llm = options?.llm ?? new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI();\n        this.questions = options?.questions ?? 5;\n        this.promptTemplate = options?.promptTemplate ? new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            templateVars: [\n                \"numQuestions\",\n                \"context\"\n            ],\n            template: options.promptTemplate\n        }).partialFormat({\n            numQuestions: \"5\"\n        }) : _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultQuestionExtractPrompt;\n        this.embeddingOnly = options?.embeddingOnly ?? false;\n    }\n    /**\n   * Extract answered questions from a node.\n   * @param {BaseNode} node Node to extract questions from.\n   * @returns {Promise<Array<ExtractQuestion> | Array<{}>>} Questions extracted from the node.\n   */ async extractQuestionsFromNode(node) {\n        if (this.isTextNodeOnly && !(node instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode)) {\n            return {};\n        }\n        const contextStr = node.getContent(this.metadataMode);\n        const prompt = this.promptTemplate.format({\n            context: contextStr,\n            numQuestions: this.questions.toString()\n        });\n        const questions = await this.llm.complete({\n            prompt\n        });\n        return {\n            questionsThisExcerptCanAnswer: questions.text.replace(STRIP_REGEX, \"\")\n        };\n    }\n    /**\n   * Extract answered questions from a list of nodes.\n   * @param {BaseNode[]} nodes Nodes to extract questions from.\n   * @returns {Promise<Array<ExtractQuestion> | Array<{}>>} Questions extracted from the nodes.\n   */ async extract(nodes) {\n        const results = await Promise.all(nodes.map((node)=>this.extractQuestionsFromNode(node)));\n        return results;\n    }\n}\n/**\n * Extract summary from a list of nodes.\n */ class SummaryExtractor extends _types_js__WEBPACK_IMPORTED_MODULE_3__.BaseExtractor {\n    /**\n   * LLM instance.\n   * @type {LLM}\n   */ llm;\n    /**\n   * List of summaries to extract: 'self', 'prev', 'next'\n   * @type {string[]}\n   */ summaries;\n    /**\n   * The prompt template to use for the summary extractor.\n   * @type {string}\n   */ promptTemplate;\n    selfSummary;\n    prevSummary;\n    nextSummary;\n    constructor(options){\n        const summaries = options?.summaries ?? [\n            \"self\"\n        ];\n        if (summaries && !summaries.some((s)=>[\n                \"self\",\n                \"prev\",\n                \"next\"\n            ].includes(s))) throw new Error(\"Summaries must be one of 'self', 'prev', 'next'\");\n        super();\n        this.llm = options?.llm ?? new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI();\n        this.summaries = summaries;\n        this.promptTemplate = options?.promptTemplate ? new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            templateVars: [\n                \"context\"\n            ],\n            template: options.promptTemplate\n        }) : _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultSummaryPrompt;\n        this.selfSummary = summaries?.includes(\"self\") ?? false;\n        this.prevSummary = summaries?.includes(\"prev\") ?? false;\n        this.nextSummary = summaries?.includes(\"next\") ?? false;\n    }\n    /**\n   * Extract summary from a node.\n   * @param {BaseNode} node Node to extract summary from.\n   * @returns {Promise<string>} Summary extracted from the node.\n   */ async generateNodeSummary(node) {\n        if (this.isTextNodeOnly && !(node instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode)) {\n            return \"\";\n        }\n        const context = node.getContent(this.metadataMode);\n        const prompt = this.promptTemplate.format({\n            context\n        });\n        const summary = await this.llm.complete({\n            prompt\n        });\n        return summary.text.replace(STRIP_REGEX, \"\");\n    }\n    /**\n   * Extract summaries from a list of nodes.\n   * @param {BaseNode[]} nodes Nodes to extract summaries from.\n   * @returns {Promise<Array<ExtractSummary> | Arry<{}>>} Summaries extracted from the nodes.\n   */ async extract(nodes) {\n        if (!nodes.every((n)=>n instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode)) throw new Error(\"Only `TextNode` is allowed for `Summary` extractor\");\n        const nodeSummaries = await Promise.all(nodes.map((node)=>this.generateNodeSummary(node)));\n        const metadataList = nodes.map(()=>({}));\n        for(let i = 0; i < nodes.length; i++){\n            if (i > 0 && this.prevSummary && nodeSummaries[i - 1]) {\n                metadataList[i][\"prevSectionSummary\"] = nodeSummaries[i - 1];\n            }\n            if (i < nodes.length - 1 && this.nextSummary && nodeSummaries[i + 1]) {\n                metadataList[i][\"nextSectionSummary\"] = nodeSummaries[i + 1];\n            }\n            if (this.selfSummary && nodeSummaries[i]) {\n                metadataList[i][\"sectionSummary\"] = nodeSummaries[i];\n            }\n        }\n        return metadataList;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/extractors/MetadataExtractors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/extractors/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/llamaindex/dist/extractors/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseExtractor: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_1__.BaseExtractor),\n/* harmony export */   KeywordExtractor: () => (/* reexport safe */ _MetadataExtractors_js__WEBPACK_IMPORTED_MODULE_0__.KeywordExtractor),\n/* harmony export */   QuestionsAnsweredExtractor: () => (/* reexport safe */ _MetadataExtractors_js__WEBPACK_IMPORTED_MODULE_0__.QuestionsAnsweredExtractor),\n/* harmony export */   SummaryExtractor: () => (/* reexport safe */ _MetadataExtractors_js__WEBPACK_IMPORTED_MODULE_0__.SummaryExtractor),\n/* harmony export */   TitleExtractor: () => (/* reexport safe */ _MetadataExtractors_js__WEBPACK_IMPORTED_MODULE_0__.TitleExtractor)\n/* harmony export */ });\n/* harmony import */ var _MetadataExtractors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MetadataExtractors.js */ \"(rsc)/./node_modules/llamaindex/dist/extractors/MetadataExtractors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/llamaindex/dist/extractors/types.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V4dHJhY3RvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5SDtBQUM5RSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvZXh0cmFjdG9ycy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBLZXl3b3JkRXh0cmFjdG9yLCBRdWVzdGlvbnNBbnN3ZXJlZEV4dHJhY3RvciwgU3VtbWFyeUV4dHJhY3RvciwgVGl0bGVFeHRyYWN0b3IgfSBmcm9tIFwiLi9NZXRhZGF0YUV4dHJhY3RvcnMuanNcIjtcbmV4cG9ydCB7IEJhc2VFeHRyYWN0b3IgfSBmcm9tIFwiLi90eXBlcy5qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/extractors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/extractors/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/llamaindex/dist/extractors/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseExtractor: () => (/* binding */ BaseExtractor)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n/*\n * Abstract class for all extractors.\n */ class BaseExtractor extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TransformComponent {\n    isTextNodeOnly = true;\n    showProgress = true;\n    metadataMode = _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL;\n    disableTemplateRewrite = false;\n    inPlace = true;\n    numWorkers = 4;\n    constructor(){\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        super(async (nodes, options)=>{\n            return this.processNodes(nodes, options?.excludedEmbedMetadataKeys, options?.excludedLlmMetadataKeys);\n        });\n    }\n    /**\n   *\n   * @param nodes Nodes to extract metadata from.\n   * @param excludedEmbedMetadataKeys Metadata keys to exclude from the embedding.\n   * @param excludedLlmMetadataKeys Metadata keys to exclude from the LLM.\n   * @returns Metadata extracted from the nodes.\n   */ async processNodes(nodes, excludedEmbedMetadataKeys = undefined, excludedLlmMetadataKeys = undefined) {\n        let newNodes;\n        if (this.inPlace) {\n            newNodes = nodes;\n        } else {\n            newNodes = nodes.slice();\n        }\n        const curMetadataList = await this.extract(newNodes);\n        for(const idx in newNodes){\n            newNodes[idx].metadata = {\n                ...newNodes[idx].metadata,\n                ...curMetadataList[idx]\n            };\n        }\n        for(const idx in newNodes){\n            if (excludedEmbedMetadataKeys) {\n                newNodes[idx].excludedEmbedMetadataKeys.concat(excludedEmbedMetadataKeys);\n            }\n            if (excludedLlmMetadataKeys) {\n                newNodes[idx].excludedLlmMetadataKeys.concat(excludedLlmMetadataKeys);\n            }\n            if (!this.disableTemplateRewrite) {\n                if (newNodes[idx] instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode) {\n                    newNodes[idx] = new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode({\n                        ...newNodes[idx],\n                        textTemplate: _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.defaultNodeTextTemplate.format()\n                    });\n                }\n            }\n        }\n        return newNodes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2V4dHJhY3RvcnMvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1FO0FBQ2tCO0FBQ3JGO0FBQ0E7QUFDQSxJQUFXLDRCQUE0Qix1RUFBa0I7QUFDekQ7QUFDQTtBQUNBLG1CQUFtQixpRUFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsNkRBQVE7QUFDckQsd0NBQXdDLDZEQUFRO0FBQ2hEO0FBQ0Esc0NBQXNDLDZFQUF1QjtBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9leHRyYWN0b3JzL3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHROb2RlVGV4dFRlbXBsYXRlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvcHJvbXB0c1wiO1xuaW1wb3J0IHsgTWV0YWRhdGFNb2RlLCBUZXh0Tm9kZSwgVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc2NoZW1hXCI7XG4vKlxuICogQWJzdHJhY3QgY2xhc3MgZm9yIGFsbCBleHRyYWN0b3JzLlxuICovIGV4cG9ydCBjbGFzcyBCYXNlRXh0cmFjdG9yIGV4dGVuZHMgVHJhbnNmb3JtQ29tcG9uZW50IHtcbiAgICBpc1RleHROb2RlT25seSA9IHRydWU7XG4gICAgc2hvd1Byb2dyZXNzID0gdHJ1ZTtcbiAgICBtZXRhZGF0YU1vZGUgPSBNZXRhZGF0YU1vZGUuQUxMO1xuICAgIGRpc2FibGVUZW1wbGF0ZVJld3JpdGUgPSBmYWxzZTtcbiAgICBpblBsYWNlID0gdHJ1ZTtcbiAgICBudW1Xb3JrZXJzID0gNDtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBzdXBlcihhc3luYyAobm9kZXMsIG9wdGlvbnMpPT57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzTm9kZXMobm9kZXMsIG9wdGlvbnM/LmV4Y2x1ZGVkRW1iZWRNZXRhZGF0YUtleXMsIG9wdGlvbnM/LmV4Y2x1ZGVkTGxtTWV0YWRhdGFLZXlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gZXh0cmFjdCBtZXRhZGF0YSBmcm9tLlxuICAgKiBAcGFyYW0gZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5cyBNZXRhZGF0YSBrZXlzIHRvIGV4Y2x1ZGUgZnJvbSB0aGUgZW1iZWRkaW5nLlxuICAgKiBAcGFyYW0gZXhjbHVkZWRMbG1NZXRhZGF0YUtleXMgTWV0YWRhdGEga2V5cyB0byBleGNsdWRlIGZyb20gdGhlIExMTS5cbiAgICogQHJldHVybnMgTWV0YWRhdGEgZXh0cmFjdGVkIGZyb20gdGhlIG5vZGVzLlxuICAgKi8gYXN5bmMgcHJvY2Vzc05vZGVzKG5vZGVzLCBleGNsdWRlZEVtYmVkTWV0YWRhdGFLZXlzID0gdW5kZWZpbmVkLCBleGNsdWRlZExsbU1ldGFkYXRhS2V5cyA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgbmV3Tm9kZXM7XG4gICAgICAgIGlmICh0aGlzLmluUGxhY2UpIHtcbiAgICAgICAgICAgIG5ld05vZGVzID0gbm9kZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdOb2RlcyA9IG5vZGVzLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VyTWV0YWRhdGFMaXN0ID0gYXdhaXQgdGhpcy5leHRyYWN0KG5ld05vZGVzKTtcbiAgICAgICAgZm9yKGNvbnN0IGlkeCBpbiBuZXdOb2Rlcyl7XG4gICAgICAgICAgICBuZXdOb2Rlc1tpZHhdLm1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgIC4uLm5ld05vZGVzW2lkeF0ubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgLi4uY3VyTWV0YWRhdGFMaXN0W2lkeF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGNvbnN0IGlkeCBpbiBuZXdOb2Rlcyl7XG4gICAgICAgICAgICBpZiAoZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5cykge1xuICAgICAgICAgICAgICAgIG5ld05vZGVzW2lkeF0uZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5cy5jb25jYXQoZXhjbHVkZWRFbWJlZE1ldGFkYXRhS2V5cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhjbHVkZWRMbG1NZXRhZGF0YUtleXMpIHtcbiAgICAgICAgICAgICAgICBuZXdOb2Rlc1tpZHhdLmV4Y2x1ZGVkTGxtTWV0YWRhdGFLZXlzLmNvbmNhdChleGNsdWRlZExsbU1ldGFkYXRhS2V5cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZVRlbXBsYXRlUmV3cml0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdOb2Rlc1tpZHhdIGluc3RhbmNlb2YgVGV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZXNbaWR4XSA9IG5ldyBUZXh0Tm9kZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5uZXdOb2Rlc1tpZHhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFRlbXBsYXRlOiBkZWZhdWx0Tm9kZVRleHRUZW1wbGF0ZS5mb3JtYXQoKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld05vZGVzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/extractors/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/index.edge.js":
/*!****************************************************!*\
  !*** ./node_modules/llamaindex/dist/index.edge.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_AVAILABLE_OPENAI_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.ALL_AVAILABLE_OPENAI_MODELS),\n/* harmony export */   ALL_OPENAI_EMBEDDING_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.ALL_OPENAI_EMBEDDING_MODELS),\n/* harmony export */   AgentInput: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentInput),\n/* harmony export */   AgentOutput: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentOutput),\n/* harmony export */   AgentRunner: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.AgentRunner),\n/* harmony export */   AgentSetup: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentSetup),\n/* harmony export */   AgentStepEvent: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentStepEvent),\n/* harmony export */   AgentStream: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentStream),\n/* harmony export */   AgentToolCall: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentToolCall),\n/* harmony export */   AgentToolCallResult: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentToolCallResult),\n/* harmony export */   AgentWorker: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.AgentWorker),\n/* harmony export */   AgentWorkflow: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.AgentWorkflow),\n/* harmony export */   BaseChatEngine: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_4__.BaseChatEngine),\n/* harmony export */   BaseChatStore: () => (/* reexport safe */ _llamaindex_core_storage_chat_store__WEBPACK_IMPORTED_MODULE_17__.BaseChatStore),\n/* harmony export */   BaseDocumentStore: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.BaseDocumentStore),\n/* harmony export */   BaseEmbedding: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.BaseEmbedding),\n/* harmony export */   BaseExtractor: () => (/* reexport safe */ _extractors_index_js__WEBPACK_IMPORTED_MODULE_29__.BaseExtractor),\n/* harmony export */   BaseInMemoryKVStore: () => (/* reexport safe */ _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_20__.BaseInMemoryKVStore),\n/* harmony export */   BaseIndex: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.BaseIndex),\n/* harmony export */   BaseIndexStore: () => (/* reexport safe */ _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_19__.BaseIndexStore),\n/* harmony export */   BaseKVStore: () => (/* reexport safe */ _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_20__.BaseKVStore),\n/* harmony export */   BaseLLM: () => (/* reexport safe */ _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_9__.BaseLLM),\n/* harmony export */   BaseMemory: () => (/* reexport safe */ _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_10__.BaseMemory),\n/* harmony export */   BaseNode: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.BaseNode),\n/* harmony export */   BasePromptTemplate: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.BasePromptTemplate),\n/* harmony export */   BaseQueryEngine: () => (/* reexport safe */ _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_13__.BaseQueryEngine),\n/* harmony export */   BaseRetriever: () => (/* reexport safe */ _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_15__.BaseRetriever),\n/* harmony export */   BaseSelector: () => (/* reexport safe */ _selectors_index_js__WEBPACK_IMPORTED_MODULE_38__.BaseSelector),\n/* harmony export */   BaseSynthesizer: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.BaseSynthesizer),\n/* harmony export */   CallbackManager: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.CallbackManager),\n/* harmony export */   ChatMemoryBuffer: () => (/* reexport safe */ _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_10__.ChatMemoryBuffer),\n/* harmony export */   ChatSummaryMemoryBuffer: () => (/* reexport safe */ _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_10__.ChatSummaryMemoryBuffer),\n/* harmony export */   CodeSplitter: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.CodeSplitter),\n/* harmony export */   CompactAndRefine: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.CompactAndRefine),\n/* harmony export */   CondenseQuestionChatEngine: () => (/* reexport safe */ _engines_chat_index_js__WEBPACK_IMPORTED_MODULE_26__.CondenseQuestionChatEngine),\n/* harmony export */   ContextChatEngine: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_4__.ContextChatEngine),\n/* harmony export */   CorrectnessEvaluator: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.CorrectnessEvaluator),\n/* harmony export */   DEFAULT_BASE_URL: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_BASE_URL),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CHUNK_OVERLAP),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP_RATIO: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CHUNK_OVERLAP_RATIO),\n/* harmony export */   DEFAULT_CHUNK_SIZE: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CHUNK_SIZE),\n/* harmony export */   DEFAULT_COLLECTION: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_COLLECTION),\n/* harmony export */   DEFAULT_CONTEXT_WINDOW: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CONTEXT_WINDOW),\n/* harmony export */   DEFAULT_DOC_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_DOC_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_GRAPH_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_GRAPH_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_INDEX_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_INDEX_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_MAX_CHARS: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.DEFAULT_MAX_CHARS),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_NAMESPACE),\n/* harmony export */   DEFAULT_NUM_OUTPUTS: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_NUM_OUTPUTS),\n/* harmony export */   DEFAULT_PADDING: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_PADDING),\n/* harmony export */   DEFAULT_PERSIST_DIR: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_PERSIST_DIR),\n/* harmony export */   DEFAULT_PERSIST_PATH: () => (/* reexport safe */ _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_19__.DEFAULT_PERSIST_PATH),\n/* harmony export */   DEFAULT_PROJECT_NAME: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_PROJECT_NAME),\n/* harmony export */   DEFAULT_SIMILARITY_TOP_K: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_SIMILARITY_TOP_K),\n/* harmony export */   DEFAULT_VECTOR_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_VECTOR_STORE_PERSIST_FILENAME),\n/* harmony export */   DefaultContextGenerator: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_4__.DefaultContextGenerator),\n/* harmony export */   Document: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.Document),\n/* harmony export */   EngineResponse: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.EngineResponse),\n/* harmony export */   FaithfulnessEvaluator: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.FaithfulnessEvaluator),\n/* harmony export */   FileReader: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.FileReader),\n/* harmony export */   FunctionAgent: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.FunctionAgent),\n/* harmony export */   FunctionTool: () => (/* reexport safe */ _tools_index_js__WEBPACK_IMPORTED_MODULE_40__.FunctionTool),\n/* harmony export */   GPT35_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.GPT35_MODELS),\n/* harmony export */   GPT4_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.GPT4_MODELS),\n/* harmony export */   HTMLNodeParser: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.HTMLNodeParser),\n/* harmony export */   ImageDocument: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.ImageDocument),\n/* harmony export */   ImageNode: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.ImageNode),\n/* harmony export */   IndexDict: () => (/* reexport safe */ _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.IndexDict),\n/* harmony export */   IndexList: () => (/* reexport safe */ _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.IndexList),\n/* harmony export */   IndexNode: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.IndexNode),\n/* harmony export */   IndexStruct: () => (/* reexport safe */ _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.IndexStruct),\n/* harmony export */   IndexStructType: () => (/* reexport safe */ _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.IndexStructType),\n/* harmony export */   IngestionPipeline: () => (/* reexport safe */ _ingestion_index_js__WEBPACK_IMPORTED_MODULE_31__.IngestionPipeline),\n/* harmony export */   JinaAIReranker: () => (/* reexport safe */ _postprocessors_index_js__WEBPACK_IMPORTED_MODULE_36__.JinaAIReranker),\n/* harmony export */   KVDocumentStore: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.KVDocumentStore),\n/* harmony export */   KVIndexStore: () => (/* reexport safe */ _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_19__.KVIndexStore),\n/* harmony export */   KeywordExtractor: () => (/* reexport safe */ _extractors_index_js__WEBPACK_IMPORTED_MODULE_29__.KeywordExtractor),\n/* harmony export */   KeywordTable: () => (/* reexport safe */ _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.KeywordTable),\n/* harmony export */   KeywordTableIndex: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.KeywordTableIndex),\n/* harmony export */   KeywordTableLLMRetriever: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.KeywordTableLLMRetriever),\n/* harmony export */   KeywordTableRAKERetriever: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.KeywordTableRAKERetriever),\n/* harmony export */   KeywordTableRetrieverMode: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.KeywordTableRetrieverMode),\n/* harmony export */   KeywordTableSimpleRetriever: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.KeywordTableSimpleRetriever),\n/* harmony export */   LLMAgent: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.LLMAgent),\n/* harmony export */   LLMAgentWorker: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.LLMAgentWorker),\n/* harmony export */   LLMMultiSelector: () => (/* reexport safe */ _selectors_index_js__WEBPACK_IMPORTED_MODULE_38__.LLMMultiSelector),\n/* harmony export */   LLMQuestionGenerator: () => (/* reexport safe */ _QuestionGenerator_js__WEBPACK_IMPORTED_MODULE_37__.LLMQuestionGenerator),\n/* harmony export */   LLMSingleSelector: () => (/* reexport safe */ _selectors_index_js__WEBPACK_IMPORTED_MODULE_38__.LLMSingleSelector),\n/* harmony export */   LLamaCloudFileService: () => (/* reexport safe */ _cloud_index_js__WEBPACK_IMPORTED_MODULE_25__.LLamaCloudFileService),\n/* harmony export */   LlamaCloudIndex: () => (/* reexport safe */ _cloud_index_js__WEBPACK_IMPORTED_MODULE_25__.LlamaCloudIndex),\n/* harmony export */   LlamaCloudRetriever: () => (/* reexport safe */ _cloud_index_js__WEBPACK_IMPORTED_MODULE_25__.LlamaCloudRetriever),\n/* harmony export */   LlamaParseReader: () => (/* reexport safe */ _llamaindex_cloud_reader__WEBPACK_IMPORTED_MODULE_2__.LlamaParseReader),\n/* harmony export */   MarkdownNodeParser: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.MarkdownNodeParser),\n/* harmony export */   MetadataAwareTextSplitter: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.MetadataAwareTextSplitter),\n/* harmony export */   MetadataMode: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.MetadataMode),\n/* harmony export */   MetadataReplacementPostProcessor: () => (/* reexport safe */ _postprocessors_index_js__WEBPACK_IMPORTED_MODULE_36__.MetadataReplacementPostProcessor),\n/* harmony export */   MockLLM: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.MockLLM),\n/* harmony export */   ModalityType: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.ModalityType),\n/* harmony export */   MultiModal: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.MultiModal),\n/* harmony export */   MultiModalEmbedding: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.MultiModalEmbedding),\n/* harmony export */   NodeParser: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.NodeParser),\n/* harmony export */   NodeRelationship: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.NodeRelationship),\n/* harmony export */   O1_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.O1_MODELS),\n/* harmony export */   O3_MODELS: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.O3_MODELS),\n/* harmony export */   ObjectIndex: () => (/* reexport safe */ _objects_index_js__WEBPACK_IMPORTED_MODULE_34__.ObjectIndex),\n/* harmony export */   ObjectType: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.ObjectType),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIAgent: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgent),\n/* harmony export */   OpenAIAgentWorker: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgentWorker),\n/* harmony export */   OpenAIContextAwareAgent: () => (/* reexport safe */ _agent_index_js__WEBPACK_IMPORTED_MODULE_24__.OpenAIContextAwareAgent),\n/* harmony export */   OpenAIEmbedding: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbedding),\n/* harmony export */   PromptHelper: () => (/* reexport safe */ _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_8__.PromptHelper),\n/* harmony export */   PromptMixin: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.PromptMixin),\n/* harmony export */   PromptTemplate: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.PromptTemplate),\n/* harmony export */   QueryEngineTool: () => (/* reexport safe */ _tools_index_js__WEBPACK_IMPORTED_MODULE_40__.QueryEngineTool),\n/* harmony export */   QuestionsAnsweredExtractor: () => (/* reexport safe */ _extractors_index_js__WEBPACK_IMPORTED_MODULE_29__.QuestionsAnsweredExtractor),\n/* harmony export */   ReACTAgentWorker: () => (/* reexport safe */ _agent_index_js__WEBPACK_IMPORTED_MODULE_24__.ReACTAgentWorker),\n/* harmony export */   ReActAgent: () => (/* reexport safe */ _agent_index_js__WEBPACK_IMPORTED_MODULE_24__.ReActAgent),\n/* harmony export */   Refine: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.Refine),\n/* harmony export */   RelevancyEvaluator: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.RelevancyEvaluator),\n/* harmony export */   RetrieverQueryEngine: () => (/* reexport safe */ _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_13__.RetrieverQueryEngine),\n/* harmony export */   RouterQueryEngine: () => (/* reexport safe */ _engines_query_index_js__WEBPACK_IMPORTED_MODULE_27__.RouterQueryEngine),\n/* harmony export */   SentenceSplitter: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.SentenceSplitter),\n/* harmony export */   SentenceWindowNodeParser: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.SentenceWindowNodeParser),\n/* harmony export */   Settings: () => (/* reexport safe */ _Settings_js__WEBPACK_IMPORTED_MODULE_1__.Settings),\n/* harmony export */   SimilarityPostprocessor: () => (/* reexport safe */ _postprocessors_index_js__WEBPACK_IMPORTED_MODULE_36__.SimilarityPostprocessor),\n/* harmony export */   SimilarityType: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.SimilarityType),\n/* harmony export */   SimpleChatEngine: () => (/* reexport safe */ _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_4__.SimpleChatEngine),\n/* harmony export */   SimpleChatStore: () => (/* reexport safe */ _llamaindex_core_storage_chat_store__WEBPACK_IMPORTED_MODULE_17__.SimpleChatStore),\n/* harmony export */   SimpleIndexStore: () => (/* reexport safe */ _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_19__.SimpleIndexStore),\n/* harmony export */   SimpleKVStore: () => (/* reexport safe */ _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_20__.SimpleKVStore),\n/* harmony export */   SimpleNodeParser: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.SimpleNodeParser),\n/* harmony export */   SimpleToolNodeMapping: () => (/* reexport safe */ _objects_index_js__WEBPACK_IMPORTED_MODULE_34__.SimpleToolNodeMapping),\n/* harmony export */   StartEvent: () => (/* reexport safe */ _llamaindex_workflow__WEBPACK_IMPORTED_MODULE_22__.StartEvent),\n/* harmony export */   StopEvent: () => (/* reexport safe */ _llamaindex_workflow__WEBPACK_IMPORTED_MODULE_22__.StopEvent),\n/* harmony export */   SubQuestionOutputParser: () => (/* reexport safe */ _OutputParser_js__WEBPACK_IMPORTED_MODULE_35__.SubQuestionOutputParser),\n/* harmony export */   SubQuestionQueryEngine: () => (/* reexport safe */ _engines_query_index_js__WEBPACK_IMPORTED_MODULE_27__.SubQuestionQueryEngine),\n/* harmony export */   SummaryExtractor: () => (/* reexport safe */ _extractors_index_js__WEBPACK_IMPORTED_MODULE_29__.SummaryExtractor),\n/* harmony export */   SummaryIndex: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.SummaryIndex),\n/* harmony export */   SummaryIndexLLMRetriever: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.SummaryIndexLLMRetriever),\n/* harmony export */   SummaryIndexRetriever: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.SummaryIndexRetriever),\n/* harmony export */   SummaryRetrieverMode: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.SummaryRetrieverMode),\n/* harmony export */   TextNode: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.TextNode),\n/* harmony export */   TextSplitter: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.TextSplitter),\n/* harmony export */   TitleExtractor: () => (/* reexport safe */ _extractors_index_js__WEBPACK_IMPORTED_MODULE_29__.TitleExtractor),\n/* harmony export */   TokenTextSplitter: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.TokenTextSplitter),\n/* harmony export */   ToolCallLLM: () => (/* reexport safe */ _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_9__.ToolCallLLM),\n/* harmony export */   ToolCallsEvent: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.ToolCallsEvent),\n/* harmony export */   ToolResultsEvent: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.ToolResultsEvent),\n/* harmony export */   TransformComponent: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.TransformComponent),\n/* harmony export */   TreeSummarize: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.TreeSummarize),\n/* harmony export */   VectorIndexRetriever: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.VectorIndexRetriever),\n/* harmony export */   VectorStoreIndex: () => (/* reexport safe */ _indices_index_js__WEBPACK_IMPORTED_MODULE_30__.VectorStoreIndex),\n/* harmony export */   Workflow: () => (/* reexport safe */ _llamaindex_workflow__WEBPACK_IMPORTED_MODULE_22__.Workflow),\n/* harmony export */   WorkflowContext: () => (/* reexport safe */ _llamaindex_workflow__WEBPACK_IMPORTED_MODULE_22__.WorkflowContext),\n/* harmony export */   WorkflowEvent: () => (/* reexport safe */ _llamaindex_workflow__WEBPACK_IMPORTED_MODULE_22__.WorkflowEvent),\n/* harmony export */   addNodesToVectorStores: () => (/* reexport safe */ _ingestion_index_js__WEBPACK_IMPORTED_MODULE_31__.addNodesToVectorStores),\n/* harmony export */   agent: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.agent),\n/* harmony export */   anthropicSummaryPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.anthropicSummaryPrompt),\n/* harmony export */   anthropicTextQaPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.anthropicTextQaPrompt),\n/* harmony export */   anyFunctionSchema: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.anyFunctionSchema),\n/* harmony export */   baseToolSchema: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.baseToolSchema),\n/* harmony export */   baseToolWithCallSchema: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.baseToolWithCallSchema),\n/* harmony export */   batchEmbeddings: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.batchEmbeddings),\n/* harmony export */   buildNodeFromSplits: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.buildNodeFromSplits),\n/* harmony export */   callTool: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.callTool),\n/* harmony export */   consumeAsyncIterable: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.consumeAsyncIterable),\n/* harmony export */   createMessageContent: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.createMessageContent),\n/* harmony export */   createReadableStream: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.createReadableStream),\n/* harmony export */   defaultChoiceSelectPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultChoiceSelectPrompt),\n/* harmony export */   defaultCondenseQuestionPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultCondenseQuestionPrompt),\n/* harmony export */   defaultContextSystemPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultContextSystemPrompt),\n/* harmony export */   defaultCorrectnessSystemPrompt: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultCorrectnessSystemPrompt),\n/* harmony export */   defaultEvaluationParser: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultEvaluationParser),\n/* harmony export */   defaultFaithfulnessRefinePrompt: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultFaithfulnessRefinePrompt),\n/* harmony export */   defaultFaithfulnessTextQaPrompt: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultFaithfulnessTextQaPrompt),\n/* harmony export */   defaultKeywordExtractPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultKeywordExtractPrompt),\n/* harmony export */   defaultNodeTextTemplate: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultNodeTextTemplate),\n/* harmony export */   defaultQueryKeywordExtractPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultQueryKeywordExtractPrompt),\n/* harmony export */   defaultQuestionExtractPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultQuestionExtractPrompt),\n/* harmony export */   defaultRefinePrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultRefinePrompt),\n/* harmony export */   defaultRelevancyEvalPrompt: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultRelevancyEvalPrompt),\n/* harmony export */   defaultRelevancyRefinePrompt: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultRelevancyRefinePrompt),\n/* harmony export */   defaultSubQuestionPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultSubQuestionPrompt),\n/* harmony export */   defaultSummaryPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultSummaryPrompt),\n/* harmony export */   defaultTextQAPrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultTextQAPrompt),\n/* harmony export */   defaultTitleCombinePromptTemplate: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultTitleCombinePromptTemplate),\n/* harmony export */   defaultTitleExtractorPromptTemplate: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultTitleExtractorPromptTemplate),\n/* harmony export */   defaultTreeSummarizePrompt: () => (/* reexport safe */ _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__.defaultTreeSummarizePrompt),\n/* harmony export */   defaultUserPrompt: () => (/* reexport safe */ _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__.defaultUserPrompt),\n/* harmony export */   docToJson: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.docToJson),\n/* harmony export */   extractDataUrlComponents: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.extractDataUrlComponents),\n/* harmony export */   extractImage: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.extractImage),\n/* harmony export */   extractSingleText: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.extractSingleText),\n/* harmony export */   extractText: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.extractText),\n/* harmony export */   getBiggestPrompt: () => (/* reexport safe */ _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_8__.getBiggestPrompt),\n/* harmony export */   getResponseSynthesizer: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.getResponseSynthesizer),\n/* harmony export */   getSelectorFromContext: () => (/* reexport safe */ _selectors_index_js__WEBPACK_IMPORTED_MODULE_38__.getSelectorFromContext),\n/* harmony export */   getTopKEmbeddings: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.getTopKEmbeddings),\n/* harmony export */   getTopKMMREmbeddings: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.getTopKMMREmbeddings),\n/* harmony export */   imageToDataUrl: () => (/* reexport safe */ _internal_utils_js__WEBPACK_IMPORTED_MODULE_32__.imageToDataUrl),\n/* harmony export */   isAsyncIterable: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.isAsyncIterable),\n/* harmony export */   isIterable: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.isIterable),\n/* harmony export */   isPromise: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.isPromise),\n/* harmony export */   isValidDocJson: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.isValidDocJson),\n/* harmony export */   jsonSerializer: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.jsonSerializer),\n/* harmony export */   jsonToDoc: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.jsonToDoc),\n/* harmony export */   jsonToIndexStruct: () => (/* reexport safe */ _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.jsonToIndexStruct),\n/* harmony export */   jsonToNode: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.jsonToNode),\n/* harmony export */   messagesToHistory: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.messagesToHistory),\n/* harmony export */   multiAgent: () => (/* reexport safe */ _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__.multiAgent),\n/* harmony export */   noneSerializer: () => (/* reexport safe */ _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__.noneSerializer),\n/* harmony export */   objectEntries: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.objectEntries),\n/* harmony export */   openai: () => (/* reexport safe */ _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.openai),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _OutputParser_js__WEBPACK_IMPORTED_MODULE_35__.parseJsonMarkdown),\n/* harmony export */   prettifyError: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.prettifyError),\n/* harmony export */   responseModeSchema: () => (/* reexport safe */ _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__.responseModeSchema),\n/* harmony export */   runTransformations: () => (/* reexport safe */ _ingestion_index_js__WEBPACK_IMPORTED_MODULE_31__.runTransformations),\n/* harmony export */   sentenceSplitterSchema: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.sentenceSplitterSchema),\n/* harmony export */   sentenceWindowNodeParserSchema: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.sentenceWindowNodeParserSchema),\n/* harmony export */   similarity: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.similarity),\n/* harmony export */   splitByChar: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.splitByChar),\n/* harmony export */   splitByPhraseRegex: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.splitByPhraseRegex),\n/* harmony export */   splitByRegex: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.splitByRegex),\n/* harmony export */   splitBySentenceTokenizer: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.splitBySentenceTokenizer),\n/* harmony export */   splitBySep: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.splitBySep),\n/* harmony export */   splitNodesByType: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.splitNodesByType),\n/* harmony export */   stepTools: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.stepTools),\n/* harmony export */   stepToolsStreaming: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.stepToolsStreaming),\n/* harmony export */   storageContextFromDefaults: () => (/* reexport safe */ _storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_39__.storageContextFromDefaults),\n/* harmony export */   streamCallbacks: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.streamCallbacks),\n/* harmony export */   streamConverter: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.streamConverter),\n/* harmony export */   streamReducer: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.streamReducer),\n/* harmony export */   stringifyJSONToMessageContent: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.stringifyJSONToMessageContent),\n/* harmony export */   toToolDescriptions: () => (/* reexport safe */ _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__.toToolDescriptions),\n/* harmony export */   tool: () => (/* reexport safe */ _tools_index_js__WEBPACK_IMPORTED_MODULE_40__.tool),\n/* harmony export */   toolMetadataSchema: () => (/* reexport safe */ _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__.toolMetadataSchema),\n/* harmony export */   truncateMaxTokens: () => (/* reexport safe */ _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__.truncateMaxTokens),\n/* harmony export */   truncateText: () => (/* reexport safe */ _node_parser_js__WEBPACK_IMPORTED_MODULE_33__.truncateText),\n/* harmony export */   validateAgentParams: () => (/* reexport safe */ _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__.validateAgentParams)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/openai */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _llamaindex_cloud_reader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/cloud/reader */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/reader/dist/index.js\");\n/* harmony import */ var _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/agent */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js\");\n/* harmony import */ var _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/chat-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js\");\n/* harmony import */ var _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @llamaindex/core/data-structs */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js\");\n/* harmony import */ var _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @llamaindex/core/embeddings */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @llamaindex/core/indices */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js\");\n/* harmony import */ var _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @llamaindex/core/llms */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/llms/dist/index.js\");\n/* harmony import */ var _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @llamaindex/core/memory */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js\");\n/* harmony import */ var _llamaindex_core_postprocessor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @llamaindex/core/postprocessor */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/postprocessor/dist/index.js\");\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_query_engine__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @llamaindex/core/query-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js\");\n/* harmony import */ var _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @llamaindex/core/response-synthesizers */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\");\n/* harmony import */ var _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @llamaindex/core/retriever */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_chat_store__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @llamaindex/core/storage/chat-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/chat-store/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @llamaindex/core/storage/doc-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/doc-store/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @llamaindex/core/storage/index-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/index-store/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @llamaindex/core/storage/kv-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_workflow__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @llamaindex/workflow */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/index.js\");\n/* harmony import */ var _llamaindex_workflow_agent__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @llamaindex/workflow/agent */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/agent/index.js\");\n/* harmony import */ var _agent_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./agent/index.js */ \"(rsc)/./node_modules/llamaindex/dist/agent/index.js\");\n/* harmony import */ var _cloud_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./cloud/index.js */ \"(rsc)/./node_modules/llamaindex/dist/cloud/index.js\");\n/* harmony import */ var _engines_chat_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./engines/chat/index.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/chat/index.js\");\n/* harmony import */ var _engines_query_index_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./engines/query/index.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/index.js\");\n/* harmony import */ var _evaluation_index_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./evaluation/index.js */ \"(rsc)/./node_modules/llamaindex/dist/evaluation/index.js\");\n/* harmony import */ var _extractors_index_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./extractors/index.js */ \"(rsc)/./node_modules/llamaindex/dist/extractors/index.js\");\n/* harmony import */ var _indices_index_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./indices/index.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/index.js\");\n/* harmony import */ var _ingestion_index_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./ingestion/index.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/index.js\");\n/* harmony import */ var _internal_utils_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./internal/utils.js */ \"(rsc)/./node_modules/llamaindex/dist/internal/utils.js\");\n/* harmony import */ var _node_parser_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./node-parser.js */ \"(rsc)/./node_modules/llamaindex/dist/node-parser.js\");\n/* harmony import */ var _objects_index_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./objects/index.js */ \"(rsc)/./node_modules/llamaindex/dist/objects/index.js\");\n/* harmony import */ var _OutputParser_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./OutputParser.js */ \"(rsc)/./node_modules/llamaindex/dist/OutputParser.js\");\n/* harmony import */ var _postprocessors_index_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./postprocessors/index.js */ \"(rsc)/./node_modules/llamaindex/dist/postprocessors/index.js\");\n/* harmony import */ var _QuestionGenerator_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./QuestionGenerator.js */ \"(rsc)/./node_modules/llamaindex/dist/QuestionGenerator.js\");\n/* harmony import */ var _selectors_index_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./selectors/index.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/index.js\");\n/* harmony import */ var _storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./storage/StorageContext.js */ \"(rsc)/./node_modules/llamaindex/dist/storage/StorageContext.js\");\n/* harmony import */ var _tools_index_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./tools/index.js */ \"(rsc)/./node_modules/llamaindex/dist/tools/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/llamaindex/dist/types.js\");\n//#region initial setup for OpenAI\n\n\ntry {\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    _Settings_js__WEBPACK_IMPORTED_MODULE_1__.Settings.llm;\n    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n    _Settings_js__WEBPACK_IMPORTED_MODULE_1__.Settings.embedModel;\n} catch  {\n    _Settings_js__WEBPACK_IMPORTED_MODULE_1__.Settings.llm = new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI();\n    _Settings_js__WEBPACK_IMPORTED_MODULE_1__.Settings.embedModel = new _llamaindex_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbedding();\n}\n//#endregion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGV4LmVkZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDNkQ7QUFDcEI7QUFDekM7QUFDQTtBQUNBLElBQUksa0RBQVE7QUFDWjtBQUNBLElBQUksa0RBQVE7QUFDWixFQUFFO0FBQ0YsSUFBSSxrREFBUSxXQUFXLHNEQUFNO0FBQzdCLElBQUksa0RBQVEsa0JBQWtCLCtEQUFlO0FBQzdDO0FBQ0E7QUFDNEQ7QUFDckI7QUFDTTtBQUNDO0FBQ0Y7QUFDK1k7QUFDbFo7QUFDSDtBQUNFO0FBQ087QUFDTjtBQUNLO0FBQ1M7QUFDWjtBQUNIO0FBQ1k7QUFDRDtBQUNFO0FBQ0g7QUFDWDtBQUNKO0FBQ0U7QUFDTTtBQUNWO0FBQ0E7QUFDTztBQUNDO0FBQ0g7QUFDQTtBQUNIO0FBQ0U7QUFDZ0I7QUFDcEI7QUFDRTtBQUNEO0FBQ1E7QUFDSDtBQUNGO0FBQ087QUFDWDtBQUNOO0FBQ1AiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGV4LmVkZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8jcmVnaW9uIGluaXRpYWwgc2V0dXAgZm9yIE9wZW5BSVxuaW1wb3J0IHsgT3BlbkFJLCBPcGVuQUlFbWJlZGRpbmcgfSBmcm9tIFwiQGxsYW1haW5kZXgvb3BlbmFpXCI7XG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuL1NldHRpbmdzLmpzXCI7XG50cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgU2V0dGluZ3MubGxtO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgU2V0dGluZ3MuZW1iZWRNb2RlbDtcbn0gY2F0Y2ggIHtcbiAgICBTZXR0aW5ncy5sbG0gPSBuZXcgT3BlbkFJKCk7XG4gICAgU2V0dGluZ3MuZW1iZWRNb2RlbCA9IG5ldyBPcGVuQUlFbWJlZGRpbmcoKTtcbn1cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgTGxhbWFQYXJzZVJlYWRlciB9IGZyb20gXCJAbGxhbWFpbmRleC9jbG91ZC9yZWFkZXJcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL2FnZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9jaGF0LWVuZ2luZVwiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvZGF0YS1zdHJ1Y3RzXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9lbWJlZGRpbmdzXCI7XG5leHBvcnQgeyBDYWxsYmFja01hbmFnZXIsIERFRkFVTFRfQkFTRV9VUkwsIERFRkFVTFRfQ0hVTktfT1ZFUkxBUCwgREVGQVVMVF9DSFVOS19PVkVSTEFQX1JBVElPLCBERUZBVUxUX0NIVU5LX1NJWkUsIERFRkFVTFRfQ09MTEVDVElPTiwgREVGQVVMVF9DT05URVhUX1dJTkRPVywgREVGQVVMVF9ET0NfU1RPUkVfUEVSU0lTVF9GSUxFTkFNRSwgREVGQVVMVF9HUkFQSF9TVE9SRV9QRVJTSVNUX0ZJTEVOQU1FLCBERUZBVUxUX0lOREVYX1NUT1JFX1BFUlNJU1RfRklMRU5BTUUsIERFRkFVTFRfTkFNRVNQQUNFLCBERUZBVUxUX05VTV9PVVRQVVRTLCBERUZBVUxUX1BBRERJTkcsIERFRkFVTFRfUEVSU0lTVF9ESVIsIERFRkFVTFRfUFJPSkVDVF9OQU1FLCBERUZBVUxUX1ZFQ1RPUl9TVE9SRV9QRVJTSVNUX0ZJTEVOQU1FIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvZ2xvYmFsXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9pbmRpY2VzXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9sbG1zXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9tZW1vcnlcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Bvc3Rwcm9jZXNzb3JcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Byb21wdHNcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3F1ZXJ5LWVuZ2luZVwiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvcmVzcG9uc2Utc3ludGhlc2l6ZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9yZXRyaWV2ZXJcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3NjaGVtYVwiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc3RvcmFnZS9jaGF0LXN0b3JlXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2RvYy1zdG9yZVwiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc3RvcmFnZS9pbmRleC1zdG9yZVwiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc3RvcmFnZS9rdi1zdG9yZVwiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvdXRpbHNcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9vcGVuYWlcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC93b3JrZmxvd1wiO1xuZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L3dvcmtmbG93L2FnZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hZ2VudC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2xvdWQvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VuZ2luZXMvY2hhdC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZW5naW5lcy9xdWVyeS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXZhbHVhdGlvbi9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXh0cmFjdG9ycy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW5kaWNlcy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaW5nZXN0aW9uL2luZGV4LmpzXCI7XG5leHBvcnQgeyBpbWFnZVRvRGF0YVVybCB9IGZyb20gXCIuL2ludGVybmFsL3V0aWxzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ub2RlLXBhcnNlci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vb2JqZWN0cy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vT3V0cHV0UGFyc2VyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wb3N0cHJvY2Vzc29ycy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUXVlc3Rpb25HZW5lcmF0b3IuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NlbGVjdG9ycy9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3RvcmFnZS9TdG9yYWdlQ29udGV4dC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdG9vbHMvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgeyBTZXR0aW5ncyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/index.edge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/index.react-server.js":
/*!************************************************************!*\
  !*** ./node_modules/llamaindex/dist/index.react-server.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_AVAILABLE_OPENAI_MODELS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ALL_AVAILABLE_OPENAI_MODELS),\n/* harmony export */   ALL_OPENAI_EMBEDDING_MODELS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ALL_OPENAI_EMBEDDING_MODELS),\n/* harmony export */   AgentInput: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentInput),\n/* harmony export */   AgentOutput: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentOutput),\n/* harmony export */   AgentRunner: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentRunner),\n/* harmony export */   AgentSetup: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentSetup),\n/* harmony export */   AgentStepEvent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentStepEvent),\n/* harmony export */   AgentStream: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentStream),\n/* harmony export */   AgentToolCall: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentToolCall),\n/* harmony export */   AgentToolCallResult: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentToolCallResult),\n/* harmony export */   AgentWorker: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentWorker),\n/* harmony export */   AgentWorkflow: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.AgentWorkflow),\n/* harmony export */   BaseChatEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatEngine),\n/* harmony export */   BaseChatStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatStore),\n/* harmony export */   BaseDocumentStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentStore),\n/* harmony export */   BaseEmbedding: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseEmbedding),\n/* harmony export */   BaseExtractor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseExtractor),\n/* harmony export */   BaseInMemoryKVStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseInMemoryKVStore),\n/* harmony export */   BaseIndex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseIndex),\n/* harmony export */   BaseIndexStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseIndexStore),\n/* harmony export */   BaseKVStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseKVStore),\n/* harmony export */   BaseLLM: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLM),\n/* harmony export */   BaseMemory: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseMemory),\n/* harmony export */   BaseNode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseNode),\n/* harmony export */   BasePromptTemplate: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate),\n/* harmony export */   BaseQueryEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseQueryEngine),\n/* harmony export */   BaseRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseRetriever),\n/* harmony export */   BaseSelector: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseSelector),\n/* harmony export */   BaseSynthesizer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.BaseSynthesizer),\n/* harmony export */   CallbackManager: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager),\n/* harmony export */   ChatMemoryBuffer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ChatMemoryBuffer),\n/* harmony export */   ChatSummaryMemoryBuffer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ChatSummaryMemoryBuffer),\n/* harmony export */   CodeSplitter: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.CodeSplitter),\n/* harmony export */   CompactAndRefine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.CompactAndRefine),\n/* harmony export */   CondenseQuestionChatEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.CondenseQuestionChatEngine),\n/* harmony export */   ContextChatEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ContextChatEngine),\n/* harmony export */   CorrectnessEvaluator: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.CorrectnessEvaluator),\n/* harmony export */   DEFAULT_BASE_URL: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_BASE_URL),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_OVERLAP),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP_RATIO: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_OVERLAP_RATIO),\n/* harmony export */   DEFAULT_CHUNK_SIZE: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_SIZE),\n/* harmony export */   DEFAULT_COLLECTION: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_COLLECTION),\n/* harmony export */   DEFAULT_CONTEXT_WINDOW: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CONTEXT_WINDOW),\n/* harmony export */   DEFAULT_DOC_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_DOC_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_GRAPH_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GRAPH_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_INDEX_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_INDEX_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_MAX_CHARS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_MAX_CHARS),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NAMESPACE),\n/* harmony export */   DEFAULT_NUM_OUTPUTS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NUM_OUTPUTS),\n/* harmony export */   DEFAULT_PADDING: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PADDING),\n/* harmony export */   DEFAULT_PERSIST_DIR: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERSIST_DIR),\n/* harmony export */   DEFAULT_PERSIST_PATH: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERSIST_PATH),\n/* harmony export */   DEFAULT_PROJECT_NAME: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PROJECT_NAME),\n/* harmony export */   DEFAULT_SIMILARITY_TOP_K: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_SIMILARITY_TOP_K),\n/* harmony export */   DEFAULT_VECTOR_STORE_PERSIST_FILENAME: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_VECTOR_STORE_PERSIST_FILENAME),\n/* harmony export */   DefaultContextGenerator: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.DefaultContextGenerator),\n/* harmony export */   Document: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.Document),\n/* harmony export */   EngineResponse: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.EngineResponse),\n/* harmony export */   FaithfulnessEvaluator: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.FaithfulnessEvaluator),\n/* harmony export */   FileReader: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.FileReader),\n/* harmony export */   FunctionAgent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.FunctionAgent),\n/* harmony export */   FunctionTool: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.FunctionTool),\n/* harmony export */   GPT35_MODELS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.GPT35_MODELS),\n/* harmony export */   GPT4_MODELS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.GPT4_MODELS),\n/* harmony export */   HTMLNodeParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.HTMLNodeParser),\n/* harmony export */   ImageDocument: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ImageDocument),\n/* harmony export */   ImageNode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ImageNode),\n/* harmony export */   IndexDict: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.IndexDict),\n/* harmony export */   IndexList: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.IndexList),\n/* harmony export */   IndexNode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.IndexNode),\n/* harmony export */   IndexStruct: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.IndexStruct),\n/* harmony export */   IndexStructType: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.IndexStructType),\n/* harmony export */   IngestionPipeline: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.IngestionPipeline),\n/* harmony export */   JinaAIReranker: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.JinaAIReranker),\n/* harmony export */   KVDocumentStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KVDocumentStore),\n/* harmony export */   KVIndexStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KVIndexStore),\n/* harmony export */   KeywordExtractor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordExtractor),\n/* harmony export */   KeywordTable: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordTable),\n/* harmony export */   KeywordTableIndex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordTableIndex),\n/* harmony export */   KeywordTableLLMRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordTableLLMRetriever),\n/* harmony export */   KeywordTableRAKERetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordTableRAKERetriever),\n/* harmony export */   KeywordTableRetrieverMode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordTableRetrieverMode),\n/* harmony export */   KeywordTableSimpleRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.KeywordTableSimpleRetriever),\n/* harmony export */   LLMAgent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LLMAgent),\n/* harmony export */   LLMAgentWorker: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LLMAgentWorker),\n/* harmony export */   LLMMultiSelector: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LLMMultiSelector),\n/* harmony export */   LLMQuestionGenerator: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LLMQuestionGenerator),\n/* harmony export */   LLMSingleSelector: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LLMSingleSelector),\n/* harmony export */   LLamaCloudFileService: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LLamaCloudFileService),\n/* harmony export */   LlamaCloudIndex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LlamaCloudIndex),\n/* harmony export */   LlamaCloudRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LlamaCloudRetriever),\n/* harmony export */   LlamaParseReader: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.LlamaParseReader),\n/* harmony export */   MarkdownNodeParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MarkdownNodeParser),\n/* harmony export */   MetadataAwareTextSplitter: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MetadataAwareTextSplitter),\n/* harmony export */   MetadataMode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MetadataMode),\n/* harmony export */   MetadataReplacementPostProcessor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MetadataReplacementPostProcessor),\n/* harmony export */   MockLLM: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MockLLM),\n/* harmony export */   ModalityType: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ModalityType),\n/* harmony export */   MultiModal: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MultiModal),\n/* harmony export */   MultiModalEmbedding: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.MultiModalEmbedding),\n/* harmony export */   NodeParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.NodeParser),\n/* harmony export */   NodeRelationship: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.NodeRelationship),\n/* harmony export */   O1_MODELS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.O1_MODELS),\n/* harmony export */   O3_MODELS: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.O3_MODELS),\n/* harmony export */   ObjectIndex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ObjectIndex),\n/* harmony export */   ObjectType: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ObjectType),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIAgent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgent),\n/* harmony export */   OpenAIAgentWorker: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIAgentWorker),\n/* harmony export */   OpenAIContextAwareAgent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIContextAwareAgent),\n/* harmony export */   OpenAIEmbedding: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbedding),\n/* harmony export */   PromptHelper: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.PromptHelper),\n/* harmony export */   PromptMixin: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.PromptMixin),\n/* harmony export */   PromptTemplate: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate),\n/* harmony export */   QueryEngineTool: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.QueryEngineTool),\n/* harmony export */   QuestionsAnsweredExtractor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.QuestionsAnsweredExtractor),\n/* harmony export */   ReACTAgentWorker: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ReACTAgentWorker),\n/* harmony export */   ReActAgent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ReActAgent),\n/* harmony export */   Refine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.Refine),\n/* harmony export */   RelevancyEvaluator: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.RelevancyEvaluator),\n/* harmony export */   RetrieverQueryEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.RetrieverQueryEngine),\n/* harmony export */   RouterQueryEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.RouterQueryEngine),\n/* harmony export */   SentenceSplitter: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SentenceSplitter),\n/* harmony export */   SentenceWindowNodeParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SentenceWindowNodeParser),\n/* harmony export */   Settings: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.Settings),\n/* harmony export */   SimilarityPostprocessor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimilarityPostprocessor),\n/* harmony export */   SimilarityType: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimilarityType),\n/* harmony export */   SimpleChatEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimpleChatEngine),\n/* harmony export */   SimpleChatStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimpleChatStore),\n/* harmony export */   SimpleIndexStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimpleIndexStore),\n/* harmony export */   SimpleKVStore: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimpleKVStore),\n/* harmony export */   SimpleNodeParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimpleNodeParser),\n/* harmony export */   SimpleToolNodeMapping: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SimpleToolNodeMapping),\n/* harmony export */   StartEvent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.StartEvent),\n/* harmony export */   StopEvent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.StopEvent),\n/* harmony export */   SubQuestionOutputParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SubQuestionOutputParser),\n/* harmony export */   SubQuestionQueryEngine: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SubQuestionQueryEngine),\n/* harmony export */   SummaryExtractor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SummaryExtractor),\n/* harmony export */   SummaryIndex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SummaryIndex),\n/* harmony export */   SummaryIndexLLMRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SummaryIndexLLMRetriever),\n/* harmony export */   SummaryIndexRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SummaryIndexRetriever),\n/* harmony export */   SummaryRetrieverMode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.SummaryRetrieverMode),\n/* harmony export */   TextNode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.TextNode),\n/* harmony export */   TextSplitter: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.TextSplitter),\n/* harmony export */   TitleExtractor: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.TitleExtractor),\n/* harmony export */   TokenTextSplitter: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.TokenTextSplitter),\n/* harmony export */   ToolCallLLM: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ToolCallLLM),\n/* harmony export */   ToolCallsEvent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ToolCallsEvent),\n/* harmony export */   ToolResultsEvent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.ToolResultsEvent),\n/* harmony export */   TransformComponent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.TransformComponent),\n/* harmony export */   TreeSummarize: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.TreeSummarize),\n/* harmony export */   VectorIndexRetriever: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.VectorIndexRetriever),\n/* harmony export */   VectorStoreIndex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.VectorStoreIndex),\n/* harmony export */   Workflow: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.Workflow),\n/* harmony export */   WorkflowContext: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.WorkflowContext),\n/* harmony export */   WorkflowEvent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.WorkflowEvent),\n/* harmony export */   addNodesToVectorStores: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.addNodesToVectorStores),\n/* harmony export */   agent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.agent),\n/* harmony export */   anthropicSummaryPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.anthropicSummaryPrompt),\n/* harmony export */   anthropicTextQaPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.anthropicTextQaPrompt),\n/* harmony export */   anyFunctionSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.anyFunctionSchema),\n/* harmony export */   baseToolSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.baseToolSchema),\n/* harmony export */   baseToolWithCallSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.baseToolWithCallSchema),\n/* harmony export */   batchEmbeddings: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.batchEmbeddings),\n/* harmony export */   buildNodeFromSplits: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.buildNodeFromSplits),\n/* harmony export */   callTool: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.callTool),\n/* harmony export */   consumeAsyncIterable: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.consumeAsyncIterable),\n/* harmony export */   createMessageContent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.createMessageContent),\n/* harmony export */   createReadableStream: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.createReadableStream),\n/* harmony export */   defaultChoiceSelectPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultChoiceSelectPrompt),\n/* harmony export */   defaultCondenseQuestionPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultCondenseQuestionPrompt),\n/* harmony export */   defaultContextSystemPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultContextSystemPrompt),\n/* harmony export */   defaultCorrectnessSystemPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultCorrectnessSystemPrompt),\n/* harmony export */   defaultEvaluationParser: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultEvaluationParser),\n/* harmony export */   defaultFaithfulnessRefinePrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultFaithfulnessRefinePrompt),\n/* harmony export */   defaultFaithfulnessTextQaPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultFaithfulnessTextQaPrompt),\n/* harmony export */   defaultKeywordExtractPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultKeywordExtractPrompt),\n/* harmony export */   defaultNodeTextTemplate: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultNodeTextTemplate),\n/* harmony export */   defaultQueryKeywordExtractPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultQueryKeywordExtractPrompt),\n/* harmony export */   defaultQuestionExtractPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultQuestionExtractPrompt),\n/* harmony export */   defaultRefinePrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultRefinePrompt),\n/* harmony export */   defaultRelevancyEvalPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultRelevancyEvalPrompt),\n/* harmony export */   defaultRelevancyRefinePrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultRelevancyRefinePrompt),\n/* harmony export */   defaultSubQuestionPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultSubQuestionPrompt),\n/* harmony export */   defaultSummaryPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultSummaryPrompt),\n/* harmony export */   defaultTextQAPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultTextQAPrompt),\n/* harmony export */   defaultTitleCombinePromptTemplate: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultTitleCombinePromptTemplate),\n/* harmony export */   defaultTitleExtractorPromptTemplate: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultTitleExtractorPromptTemplate),\n/* harmony export */   defaultTreeSummarizePrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultTreeSummarizePrompt),\n/* harmony export */   defaultUserPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.defaultUserPrompt),\n/* harmony export */   docToJson: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.docToJson),\n/* harmony export */   extractDataUrlComponents: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.extractDataUrlComponents),\n/* harmony export */   extractImage: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.extractImage),\n/* harmony export */   extractSingleText: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.extractSingleText),\n/* harmony export */   extractText: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.extractText),\n/* harmony export */   getBiggestPrompt: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.getBiggestPrompt),\n/* harmony export */   getResponseSynthesizer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.getResponseSynthesizer),\n/* harmony export */   getSelectorFromContext: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.getSelectorFromContext),\n/* harmony export */   getTopKEmbeddings: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.getTopKEmbeddings),\n/* harmony export */   getTopKMMREmbeddings: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.getTopKMMREmbeddings),\n/* harmony export */   imageToDataUrl: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.imageToDataUrl),\n/* harmony export */   isAsyncIterable: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable),\n/* harmony export */   isIterable: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.isIterable),\n/* harmony export */   isPromise: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.isPromise),\n/* harmony export */   isValidDocJson: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.isValidDocJson),\n/* harmony export */   jsonSerializer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.jsonSerializer),\n/* harmony export */   jsonToDoc: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.jsonToDoc),\n/* harmony export */   jsonToIndexStruct: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.jsonToIndexStruct),\n/* harmony export */   jsonToNode: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.jsonToNode),\n/* harmony export */   messagesToHistory: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.messagesToHistory),\n/* harmony export */   multiAgent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.multiAgent),\n/* harmony export */   noneSerializer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.noneSerializer),\n/* harmony export */   objectEntries: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.objectEntries),\n/* harmony export */   openai: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.openai),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.parseJsonMarkdown),\n/* harmony export */   prettifyError: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.prettifyError),\n/* harmony export */   responseModeSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.responseModeSchema),\n/* harmony export */   runTransformations: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.runTransformations),\n/* harmony export */   sentenceSplitterSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.sentenceSplitterSchema),\n/* harmony export */   sentenceWindowNodeParserSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.sentenceWindowNodeParserSchema),\n/* harmony export */   similarity: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.similarity),\n/* harmony export */   splitByChar: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.splitByChar),\n/* harmony export */   splitByPhraseRegex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.splitByPhraseRegex),\n/* harmony export */   splitByRegex: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.splitByRegex),\n/* harmony export */   splitBySentenceTokenizer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.splitBySentenceTokenizer),\n/* harmony export */   splitBySep: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.splitBySep),\n/* harmony export */   splitNodesByType: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.splitNodesByType),\n/* harmony export */   stepTools: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.stepTools),\n/* harmony export */   stepToolsStreaming: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.stepToolsStreaming),\n/* harmony export */   storageContextFromDefaults: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.storageContextFromDefaults),\n/* harmony export */   streamCallbacks: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.streamCallbacks),\n/* harmony export */   streamConverter: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.streamConverter),\n/* harmony export */   streamReducer: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.streamReducer),\n/* harmony export */   stringifyJSONToMessageContent: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.stringifyJSONToMessageContent),\n/* harmony export */   toToolDescriptions: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.toToolDescriptions),\n/* harmony export */   tool: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.tool),\n/* harmony export */   toolMetadataSchema: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.toolMetadataSchema),\n/* harmony export */   truncateMaxTokens: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.truncateMaxTokens),\n/* harmony export */   truncateText: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.truncateText),\n/* harmony export */   validateAgentParams: () => (/* reexport safe */ _index_edge_js__WEBPACK_IMPORTED_MODULE_0__.validateAgentParams)\n/* harmony export */ });\n/* harmony import */ var _index_edge_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.edge.js */ \"(rsc)/./node_modules/llamaindex/dist/index.edge.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGV4LnJlYWN0LXNlcnZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdDIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9pbmRleC5yZWFjdC1zZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vaW5kZXguZWRnZS5qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/index.react-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/BaseIndex.js":
/*!***********************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/BaseIndex.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseIndex: () => (/* binding */ BaseIndex)\n/* harmony export */ });\n/* harmony import */ var _ingestion_IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ingestion/IngestionPipeline.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionPipeline.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _tools_QueryEngineTool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/QueryEngineTool.js */ \"(rsc)/./node_modules/llamaindex/dist/tools/QueryEngineTool.js\");\n\n\n\n/**\n * Indexes are the data structure that we store our nodes and embeddings in so\n * they can be retrieved for our queries.\n */ class BaseIndex {\n    storageContext;\n    docStore;\n    indexStore;\n    indexStruct;\n    constructor(init){\n        this.storageContext = init.storageContext;\n        this.docStore = init.docStore;\n        this.indexStore = init.indexStore;\n        this.indexStruct = init.indexStruct;\n    }\n    /**\n   * Returns a query tool by calling asQueryEngine.\n   * Either options or retriever can be passed, but not both.\n   * If options are provided, they are passed to generate a retriever.\n   */ asQueryTool(params) {\n        if (params.options) {\n            params.retriever = this.asRetriever(params.options);\n        }\n        return new _tools_QueryEngineTool_js__WEBPACK_IMPORTED_MODULE_2__.QueryEngineTool({\n            queryEngine: this.asQueryEngine(params),\n            metadata: params?.metadata,\n            includeSourceNodes: params?.includeSourceNodes ?? false\n        });\n    }\n    /**\n   * Insert a document into the index.\n   * @param document\n   */ async insert(document) {\n        const nodes = await (0,_ingestion_IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_0__.runTransformations)([\n            document\n        ], [\n            _Settings_js__WEBPACK_IMPORTED_MODULE_1__.Settings.nodeParser\n        ]);\n        await this.insertNodes(nodes);\n        await this.docStore.setDocumentHash(document.id_, document.hash);\n    }\n    /**\n   * Alias for asRetriever\n   * @param options\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    retriever(options) {\n        return this.asRetriever(options);\n    }\n    /**\n   * Alias for asQueryEngine\n   * @param options you can supply your own custom Retriever and ResponseSynthesizer\n   */ queryEngine(options) {\n        return this.asQueryEngine(options);\n    }\n    /**\n   * Alias for asQueryTool\n   * Either options or retriever can be passed, but not both.\n   * If options are provided, they are passed to generate a retriever.\n   */ queryTool(params) {\n        return this.asQueryTool(params);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGljZXMvQmFzZUluZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUU7QUFDN0I7QUFDb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsSUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzRUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtRkFBa0I7QUFDOUM7QUFDQTtBQUNBLFlBQVksa0RBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGljZXMvQmFzZUluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJ1blRyYW5zZm9ybWF0aW9ucyB9IGZyb20gXCIuLi9pbmdlc3Rpb24vSW5nZXN0aW9uUGlwZWxpbmUuanNcIjtcbmltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSBcIi4uL1NldHRpbmdzLmpzXCI7XG5pbXBvcnQgeyBRdWVyeUVuZ2luZVRvb2wgfSBmcm9tIFwiLi4vdG9vbHMvUXVlcnlFbmdpbmVUb29sLmpzXCI7XG4vKipcbiAqIEluZGV4ZXMgYXJlIHRoZSBkYXRhIHN0cnVjdHVyZSB0aGF0IHdlIHN0b3JlIG91ciBub2RlcyBhbmQgZW1iZWRkaW5ncyBpbiBzb1xuICogdGhleSBjYW4gYmUgcmV0cmlldmVkIGZvciBvdXIgcXVlcmllcy5cbiAqLyBleHBvcnQgY2xhc3MgQmFzZUluZGV4IHtcbiAgICBzdG9yYWdlQ29udGV4dDtcbiAgICBkb2NTdG9yZTtcbiAgICBpbmRleFN0b3JlO1xuICAgIGluZGV4U3RydWN0O1xuICAgIGNvbnN0cnVjdG9yKGluaXQpe1xuICAgICAgICB0aGlzLnN0b3JhZ2VDb250ZXh0ID0gaW5pdC5zdG9yYWdlQ29udGV4dDtcbiAgICAgICAgdGhpcy5kb2NTdG9yZSA9IGluaXQuZG9jU3RvcmU7XG4gICAgICAgIHRoaXMuaW5kZXhTdG9yZSA9IGluaXQuaW5kZXhTdG9yZTtcbiAgICAgICAgdGhpcy5pbmRleFN0cnVjdCA9IGluaXQuaW5kZXhTdHJ1Y3Q7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGEgcXVlcnkgdG9vbCBieSBjYWxsaW5nIGFzUXVlcnlFbmdpbmUuXG4gICAqIEVpdGhlciBvcHRpb25zIG9yIHJldHJpZXZlciBjYW4gYmUgcGFzc2VkLCBidXQgbm90IGJvdGguXG4gICAqIElmIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCB0aGV5IGFyZSBwYXNzZWQgdG8gZ2VuZXJhdGUgYSByZXRyaWV2ZXIuXG4gICAqLyBhc1F1ZXJ5VG9vbChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5vcHRpb25zKSB7XG4gICAgICAgICAgICBwYXJhbXMucmV0cmlldmVyID0gdGhpcy5hc1JldHJpZXZlcihwYXJhbXMub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUVuZ2luZVRvb2woe1xuICAgICAgICAgICAgcXVlcnlFbmdpbmU6IHRoaXMuYXNRdWVyeUVuZ2luZShwYXJhbXMpLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHBhcmFtcz8ubWV0YWRhdGEsXG4gICAgICAgICAgICBpbmNsdWRlU291cmNlTm9kZXM6IHBhcmFtcz8uaW5jbHVkZVNvdXJjZU5vZGVzID8/IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICogSW5zZXJ0IGEgZG9jdW1lbnQgaW50byB0aGUgaW5kZXguXG4gICAqIEBwYXJhbSBkb2N1bWVudFxuICAgKi8gYXN5bmMgaW5zZXJ0KGRvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gYXdhaXQgcnVuVHJhbnNmb3JtYXRpb25zKFtcbiAgICAgICAgICAgIGRvY3VtZW50XG4gICAgICAgIF0sIFtcbiAgICAgICAgICAgIFNldHRpbmdzLm5vZGVQYXJzZXJcbiAgICAgICAgXSk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5zZXJ0Tm9kZXMobm9kZXMpO1xuICAgICAgICBhd2FpdCB0aGlzLmRvY1N0b3JlLnNldERvY3VtZW50SGFzaChkb2N1bWVudC5pZF8sIGRvY3VtZW50Lmhhc2gpO1xuICAgIH1cbiAgICAvKipcbiAgICogQWxpYXMgZm9yIGFzUmV0cmlldmVyXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHJldHJpZXZlcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzUmV0cmlldmVyKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICogQWxpYXMgZm9yIGFzUXVlcnlFbmdpbmVcbiAgICogQHBhcmFtIG9wdGlvbnMgeW91IGNhbiBzdXBwbHkgeW91ciBvd24gY3VzdG9tIFJldHJpZXZlciBhbmQgUmVzcG9uc2VTeW50aGVzaXplclxuICAgKi8gcXVlcnlFbmdpbmUob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5hc1F1ZXJ5RW5naW5lKG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICogQWxpYXMgZm9yIGFzUXVlcnlUb29sXG4gICAqIEVpdGhlciBvcHRpb25zIG9yIHJldHJpZXZlciBjYW4gYmUgcGFzc2VkLCBidXQgbm90IGJvdGguXG4gICAqIElmIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCB0aGV5IGFyZSBwYXNzZWQgdG8gZ2VuZXJhdGUgYSByZXRyaWV2ZXIuXG4gICAqLyBxdWVyeVRvb2wocGFyYW1zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzUXVlcnlUb29sKHBhcmFtcyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/BaseIndex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseIndex: () => (/* reexport safe */ _BaseIndex_js__WEBPACK_IMPORTED_MODULE_1__.BaseIndex),\n/* harmony export */   KeywordTableIndex: () => (/* reexport safe */ _keyword_index_js__WEBPACK_IMPORTED_MODULE_2__.KeywordTableIndex),\n/* harmony export */   KeywordTableLLMRetriever: () => (/* reexport safe */ _keyword_index_js__WEBPACK_IMPORTED_MODULE_2__.KeywordTableLLMRetriever),\n/* harmony export */   KeywordTableRAKERetriever: () => (/* reexport safe */ _keyword_index_js__WEBPACK_IMPORTED_MODULE_2__.KeywordTableRAKERetriever),\n/* harmony export */   KeywordTableRetrieverMode: () => (/* reexport safe */ _keyword_index_js__WEBPACK_IMPORTED_MODULE_2__.KeywordTableRetrieverMode),\n/* harmony export */   KeywordTableSimpleRetriever: () => (/* reexport safe */ _keyword_index_js__WEBPACK_IMPORTED_MODULE_2__.KeywordTableSimpleRetriever),\n/* harmony export */   PromptHelper: () => (/* reexport safe */ _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_0__.PromptHelper),\n/* harmony export */   SummaryIndex: () => (/* reexport safe */ _summary_index_js__WEBPACK_IMPORTED_MODULE_3__.SummaryIndex),\n/* harmony export */   SummaryIndexLLMRetriever: () => (/* reexport safe */ _summary_index_js__WEBPACK_IMPORTED_MODULE_3__.SummaryIndexLLMRetriever),\n/* harmony export */   SummaryIndexRetriever: () => (/* reexport safe */ _summary_index_js__WEBPACK_IMPORTED_MODULE_3__.SummaryIndexRetriever),\n/* harmony export */   SummaryRetrieverMode: () => (/* reexport safe */ _summary_index_js__WEBPACK_IMPORTED_MODULE_3__.SummaryRetrieverMode),\n/* harmony export */   VectorIndexRetriever: () => (/* reexport safe */ _vectorStore_index_js__WEBPACK_IMPORTED_MODULE_4__.VectorIndexRetriever),\n/* harmony export */   VectorStoreIndex: () => (/* reexport safe */ _vectorStore_index_js__WEBPACK_IMPORTED_MODULE_4__.VectorStoreIndex),\n/* harmony export */   getBiggestPrompt: () => (/* reexport safe */ _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_0__.getBiggestPrompt)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_indices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/indices */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js\");\n/* harmony import */ var _BaseIndex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseIndex.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/BaseIndex.js\");\n/* harmony import */ var _keyword_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keyword/index.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/keyword/index.js\");\n/* harmony import */ var _summary_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./summary/index.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/summary/index.js\");\n/* harmony import */ var _vectorStore_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vectorStore/index.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/vectorStore/index.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGljZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QztBQUNWO0FBQ0k7QUFDQTtBQUNJIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9pbmRpY2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL2luZGljZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Jhc2VJbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4va2V5d29yZC9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3VtbWFyeS9pbmRleC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmVjdG9yU3RvcmUvaW5kZXguanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/keyword/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/keyword/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeywordTableIndex: () => (/* binding */ KeywordTableIndex),\n/* harmony export */   KeywordTableLLMRetriever: () => (/* binding */ KeywordTableLLMRetriever),\n/* harmony export */   KeywordTableRAKERetriever: () => (/* binding */ KeywordTableRAKERetriever),\n/* harmony export */   KeywordTableRetrieverMode: () => (/* binding */ KeywordTableRetrieverMode),\n/* harmony export */   KeywordTableSimpleRetriever: () => (/* binding */ KeywordTableSimpleRetriever)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _engines_query_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../engines/query/index.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/index.js\");\n/* harmony import */ var _storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../storage/StorageContext.js */ \"(rsc)/./node_modules/llamaindex/dist/storage/StorageContext.js\");\n/* harmony import */ var _BaseIndex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../BaseIndex.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/BaseIndex.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/keyword/utils.js\");\n/* harmony import */ var _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @llamaindex/core/data-structs */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js\");\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @llamaindex/core/retriever */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _engines_chat_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../engines/chat/index.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/chat/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar KeywordTableRetrieverMode = /*#__PURE__*/ function(KeywordTableRetrieverMode) {\n    KeywordTableRetrieverMode[\"DEFAULT\"] = \"DEFAULT\";\n    KeywordTableRetrieverMode[\"SIMPLE\"] = \"SIMPLE\";\n    KeywordTableRetrieverMode[\"RAKE\"] = \"RAKE\";\n    return KeywordTableRetrieverMode;\n}({});\n// Base Keyword Table Retriever\nclass BaseKeywordTableRetriever extends _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_7__.BaseRetriever {\n    index;\n    indexStruct;\n    docstore;\n    llm;\n    maxKeywordsPerQuery;\n    numChunksPerQuery;\n    keywordExtractTemplate;\n    queryKeywordExtractTemplate;\n    constructor({ index, keywordExtractTemplate, queryKeywordExtractTemplate, maxKeywordsPerQuery = 10, numChunksPerQuery = 10 }){\n        super();\n        this.index = index;\n        this.indexStruct = index.indexStruct;\n        this.docstore = index.docStore;\n        this.llm = _Settings_js__WEBPACK_IMPORTED_MODULE_9__.Settings.llm;\n        this.maxKeywordsPerQuery = maxKeywordsPerQuery;\n        this.numChunksPerQuery = numChunksPerQuery;\n        this.keywordExtractTemplate = keywordExtractTemplate || _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_6__.defaultKeywordExtractPrompt;\n        this.queryKeywordExtractTemplate = queryKeywordExtractTemplate || _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_6__.defaultQueryKeywordExtractPrompt;\n    }\n    async _retrieve(query) {\n        const keywords = await this.getKeywords((0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_8__.extractText)(query));\n        const chunkIndicesCount = {};\n        const filteredKeywords = keywords.filter((keyword)=>this.indexStruct.table.has(keyword));\n        for (const keyword of filteredKeywords){\n            for (const nodeId of this.indexStruct.table.get(keyword) || []){\n                chunkIndicesCount[nodeId] = (chunkIndicesCount[nodeId] ?? 0) + 1;\n            }\n        }\n        const sortedChunkIndices = Object.keys(chunkIndicesCount).sort((a, b)=>chunkIndicesCount[b] - chunkIndicesCount[a]).slice(0, this.numChunksPerQuery);\n        const sortedNodes = await this.docstore.getNodes(sortedChunkIndices);\n        return sortedNodes.map((node)=>({\n                node\n            }));\n    }\n}\n// Extracts keywords using LLMs.\nclass KeywordTableLLMRetriever extends BaseKeywordTableRetriever {\n    async getKeywords(query) {\n        const response = await this.llm.complete({\n            prompt: this.queryKeywordExtractTemplate.format({\n                question: query,\n                maxKeywords: `${this.maxKeywordsPerQuery}`\n            })\n        });\n        const keywords = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.extractKeywordsGivenResponse)(response.text, \"KEYWORDS:\");\n        return [\n            ...keywords\n        ];\n    }\n}\n// Extracts keywords using simple regex-based keyword extractor.\nclass KeywordTableSimpleRetriever extends BaseKeywordTableRetriever {\n    getKeywords(query) {\n        return Promise.resolve([\n            ...(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.simpleExtractKeywords)(query, this.maxKeywordsPerQuery)\n        ]);\n    }\n}\n// Extracts keywords using RAKE keyword extractor\nclass KeywordTableRAKERetriever extends BaseKeywordTableRetriever {\n    getKeywords(query) {\n        return Promise.resolve([\n            ...(0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.rakeExtractKeywords)(query, this.maxKeywordsPerQuery)\n        ]);\n    }\n}\nconst KeywordTableRetrieverMap = {\n    [\"DEFAULT\"]: KeywordTableLLMRetriever,\n    [\"SIMPLE\"]: KeywordTableSimpleRetriever,\n    [\"RAKE\"]: KeywordTableRAKERetriever\n};\n/**\n * The KeywordTableIndex, an index that extracts keywords from each Node and builds a mapping from each keyword to the corresponding Nodes of that keyword.\n */ class KeywordTableIndex extends _BaseIndex_js__WEBPACK_IMPORTED_MODULE_3__.BaseIndex {\n    constructor(init){\n        super(init);\n    }\n    static async init(options) {\n        const storageContext = options.storageContext ?? await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_2__.storageContextFromDefaults)({});\n        const { docStore, indexStore } = storageContext;\n        // Setup IndexStruct from storage\n        const indexStructs = await indexStore.getIndexStructs();\n        let indexStruct;\n        if (options.indexStruct && indexStructs.length > 0) {\n            throw new Error(\"Cannot initialize index with both indexStruct and indexStore\");\n        }\n        if (options.indexStruct) {\n            indexStruct = options.indexStruct;\n        } else if (indexStructs.length == 1) {\n            indexStruct = indexStructs[0];\n        } else if (indexStructs.length > 1 && options.indexId) {\n            indexStruct = await indexStore.getIndexStruct(options.indexId);\n        } else {\n            indexStruct = null;\n        }\n        // check indexStruct type\n        if (indexStruct && indexStruct.type !== _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.IndexStructType.KEYWORD_TABLE) {\n            throw new Error(\"Attempting to initialize KeywordTableIndex with non-keyword table indexStruct\");\n        }\n        if (indexStruct) {\n            if (options.nodes) {\n                throw new Error(\"Cannot initialize KeywordTableIndex with both nodes and indexStruct\");\n            }\n        } else {\n            if (!options.nodes) {\n                throw new Error(\"Cannot initialize KeywordTableIndex without nodes or indexStruct\");\n            }\n            indexStruct = await KeywordTableIndex.buildIndexFromNodes(options.nodes, storageContext.docStore);\n            await indexStore.addIndexStruct(indexStruct);\n        }\n        return new KeywordTableIndex({\n            storageContext,\n            docStore,\n            indexStore,\n            indexStruct\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    asRetriever(options) {\n        const { mode = \"DEFAULT\", ...otherOptions } = options ?? {};\n        const KeywordTableRetriever = KeywordTableRetrieverMap[mode];\n        if (KeywordTableRetriever) {\n            return new KeywordTableRetriever({\n                index: this,\n                ...otherOptions\n            });\n        }\n        throw new Error(`Unknown retriever mode: ${mode}`);\n    }\n    asQueryEngine(options) {\n        const { retriever, responseSynthesizer } = options ?? {};\n        return new _engines_query_index_js__WEBPACK_IMPORTED_MODULE_1__.RetrieverQueryEngine(retriever ?? this.asRetriever(), responseSynthesizer, options?.nodePostprocessors);\n    }\n    asChatEngine(options) {\n        const { retriever, ...contextChatEngineOptions } = options ?? {};\n        return new _engines_chat_index_js__WEBPACK_IMPORTED_MODULE_10__.ContextChatEngine({\n            retriever: retriever ?? this.asRetriever(),\n            ...contextChatEngineOptions\n        });\n    }\n    static async extractKeywords(text) {\n        const llm = _Settings_js__WEBPACK_IMPORTED_MODULE_9__.Settings.llm;\n        const response = await llm.complete({\n            prompt: _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_6__.defaultKeywordExtractPrompt.format({\n                context: text\n            })\n        });\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.extractKeywordsGivenResponse)(response.text, \"KEYWORDS:\");\n    }\n    /**\n   * High level API: split documents, get keywords, and build index.\n   * @param documents\n   * @param args\n   * @param args.storageContext\n   * @returns\n   */ static async fromDocuments(documents, args = {}) {\n        let { storageContext } = args;\n        storageContext = storageContext ?? await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_2__.storageContextFromDefaults)({});\n        const docStore = storageContext.docStore;\n        await docStore.addDocuments(documents, true);\n        for (const doc of documents){\n            await docStore.setDocumentHash(doc.id_, doc.hash);\n        }\n        const nodes = await _Settings_js__WEBPACK_IMPORTED_MODULE_9__.Settings.nodeParser.getNodesFromDocuments(documents);\n        const index = await KeywordTableIndex.init({\n            nodes,\n            storageContext\n        });\n        return index;\n    }\n    /**\n   * Get keywords for nodes and place them into the index.\n   * @param nodes\n   * @param docStore\n   * @returns\n   */ static async buildIndexFromNodes(nodes, docStore) {\n        const indexStruct = new _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_5__.KeywordTable();\n        await docStore.addDocuments(nodes, true);\n        for (const node of nodes){\n            const keywords = await KeywordTableIndex.extractKeywords(node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.LLM));\n            indexStruct.addNode([\n                ...keywords\n            ], node.id_);\n        }\n        return indexStruct;\n    }\n    async insertNodes(nodes) {\n        for (const node of nodes){\n            const keywords = await KeywordTableIndex.extractKeywords(node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.LLM));\n            this.indexStruct.addNode([\n                ...keywords\n            ], node.id_);\n        }\n    }\n    deleteNode(nodeId) {\n        const keywordsToDelete = new Set();\n        for (const [keyword, existingNodeIds] of Object.entries(this.indexStruct.table)){\n            const index = existingNodeIds.indexOf(nodeId);\n            if (index !== -1) {\n                existingNodeIds.splice(index, 1);\n                // Delete keywords that have zero nodes\n                if (existingNodeIds.length === 0) {\n                    keywordsToDelete.add(keyword);\n                }\n            }\n        }\n        this.indexStruct.deleteNode([\n            ...keywordsToDelete\n        ], nodeId);\n    }\n    async deleteNodes(nodeIds, deleteFromDocStore) {\n        nodeIds.forEach((nodeId)=>{\n            this.deleteNode(nodeId);\n        });\n        if (deleteFromDocStore) {\n            for (const nodeId of nodeIds){\n                await this.docStore.deleteDocument(nodeId, false);\n            }\n        }\n        await this.storageContext.indexStore.addIndexStruct(this.indexStruct);\n    }\n    async deleteRefDoc(refDocId, deleteFromDocStore) {\n        const refDocInfo = await this.docStore.getRefDocInfo(refDocId);\n        if (!refDocInfo) {\n            return;\n        }\n        await this.deleteNodes(refDocInfo.nodeIds, false);\n        if (deleteFromDocStore) {\n            await this.docStore.deleteRefDoc(refDocId, false);\n        }\n        return;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/keyword/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/keyword/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/keyword/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expandTokensWithSubtokens: () => (/* binding */ expandTokensWithSubtokens),\n/* harmony export */   extractKeywordsGivenResponse: () => (/* binding */ extractKeywordsGivenResponse),\n/* harmony export */   rakeExtractKeywords: () => (/* binding */ rakeExtractKeywords),\n/* harmony export */   simpleExtractKeywords: () => (/* binding */ simpleExtractKeywords)\n/* harmony export */ });\n/* harmony import */ var _internal_deps_rake_modified_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../internal/deps/rake-modified.js */ \"(rsc)/./node_modules/llamaindex/dist/internal/deps/rake-modified.js\");\n\n// Get subtokens from a list of tokens., filtering for stopwords.\nfunction expandTokensWithSubtokens(tokens) {\n    const results = new Set();\n    const regex = /\\w+/g;\n    for (const token of tokens){\n        results.add(token);\n        const subTokens = token.match(regex);\n        if (subTokens && subTokens.length > 1) {\n            for (const w of subTokens){\n                results.add(w);\n            }\n        }\n    }\n    return results;\n}\nfunction extractKeywordsGivenResponse(response, startToken = \"\", lowercase = true) {\n    const results = [];\n    response = response.trim();\n    if (response.startsWith(startToken)) {\n        response = response.substring(startToken.length);\n    }\n    const keywords = response.split(\",\");\n    for (const k of keywords){\n        let rk = k;\n        if (lowercase) {\n            rk = rk.toLowerCase();\n        }\n        results.push(rk.trim());\n    }\n    return expandTokensWithSubtokens(new Set(results));\n}\nfunction simpleExtractKeywords(textChunk, maxKeywords) {\n    const regex = /\\w+/g;\n    const tokens = [\n        ...textChunk.matchAll(regex)\n    ].map((token)=>token[0].toLowerCase().trim());\n    // Creating a frequency map\n    const valueCounts = {};\n    for (const token of tokens){\n        valueCounts[token] = (valueCounts[token] || 0) + 1;\n    }\n    // Sorting tokens by frequency\n    const sortedTokens = Object.keys(valueCounts).sort((a, b)=>valueCounts[b] - valueCounts[a]);\n    const keywords = maxKeywords ? sortedTokens.slice(0, maxKeywords) : sortedTokens;\n    return new Set(keywords);\n}\nfunction rakeExtractKeywords(textChunk, maxKeywords) {\n    const keywords = Object.keys((0,_internal_deps_rake_modified_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(textChunk));\n    const limitedKeywords = maxKeywords ? keywords.slice(0, maxKeywords) : keywords;\n    return new Set(limitedKeywords);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGljZXMva2V5d29yZC91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF3RDtBQUN4RDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUNBQWlDLDJFQUFJO0FBQ3JDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvaW5kaWNlcy9rZXl3b3JkL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByYWtlIGZyb20gXCIuLi8uLi9pbnRlcm5hbC9kZXBzL3Jha2UtbW9kaWZpZWQuanNcIjtcbi8vIEdldCBzdWJ0b2tlbnMgZnJvbSBhIGxpc3Qgb2YgdG9rZW5zLiwgZmlsdGVyaW5nIGZvciBzdG9wd29yZHMuXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kVG9rZW5zV2l0aFN1YnRva2Vucyh0b2tlbnMpIHtcbiAgICBjb25zdCByZXN1bHRzID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHJlZ2V4ID0gL1xcdysvZztcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucyl7XG4gICAgICAgIHJlc3VsdHMuYWRkKHRva2VuKTtcbiAgICAgICAgY29uc3Qgc3ViVG9rZW5zID0gdG9rZW4ubWF0Y2gocmVnZXgpO1xuICAgICAgICBpZiAoc3ViVG9rZW5zICYmIHN1YlRva2Vucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHcgb2Ygc3ViVG9rZW5zKXtcbiAgICAgICAgICAgICAgICByZXN1bHRzLmFkZCh3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0S2V5d29yZHNHaXZlblJlc3BvbnNlKHJlc3BvbnNlLCBzdGFydFRva2VuID0gXCJcIiwgbG93ZXJjYXNlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICByZXNwb25zZSA9IHJlc3BvbnNlLnRyaW0oKTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhcnRzV2l0aChzdGFydFRva2VuKSkge1xuICAgICAgICByZXNwb25zZSA9IHJlc3BvbnNlLnN1YnN0cmluZyhzdGFydFRva2VuLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGtleXdvcmRzID0gcmVzcG9uc2Uuc3BsaXQoXCIsXCIpO1xuICAgIGZvciAoY29uc3QgayBvZiBrZXl3b3Jkcyl7XG4gICAgICAgIGxldCByayA9IGs7XG4gICAgICAgIGlmIChsb3dlcmNhc2UpIHtcbiAgICAgICAgICAgIHJrID0gcmsudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRzLnB1c2gocmsudHJpbSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGFuZFRva2Vuc1dpdGhTdWJ0b2tlbnMobmV3IFNldChyZXN1bHRzKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlRXh0cmFjdEtleXdvcmRzKHRleHRDaHVuaywgbWF4S2V5d29yZHMpIHtcbiAgICBjb25zdCByZWdleCA9IC9cXHcrL2c7XG4gICAgY29uc3QgdG9rZW5zID0gW1xuICAgICAgICAuLi50ZXh0Q2h1bmsubWF0Y2hBbGwocmVnZXgpXG4gICAgXS5tYXAoKHRva2VuKT0+dG9rZW5bMF0udG9Mb3dlckNhc2UoKS50cmltKCkpO1xuICAgIC8vIENyZWF0aW5nIGEgZnJlcXVlbmN5IG1hcFxuICAgIGNvbnN0IHZhbHVlQ291bnRzID0ge307XG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpe1xuICAgICAgICB2YWx1ZUNvdW50c1t0b2tlbl0gPSAodmFsdWVDb3VudHNbdG9rZW5dIHx8IDApICsgMTtcbiAgICB9XG4gICAgLy8gU29ydGluZyB0b2tlbnMgYnkgZnJlcXVlbmN5XG4gICAgY29uc3Qgc29ydGVkVG9rZW5zID0gT2JqZWN0LmtleXModmFsdWVDb3VudHMpLnNvcnQoKGEsIGIpPT52YWx1ZUNvdW50c1tiXSAtIHZhbHVlQ291bnRzW2FdKTtcbiAgICBjb25zdCBrZXl3b3JkcyA9IG1heEtleXdvcmRzID8gc29ydGVkVG9rZW5zLnNsaWNlKDAsIG1heEtleXdvcmRzKSA6IHNvcnRlZFRva2VucztcbiAgICByZXR1cm4gbmV3IFNldChrZXl3b3Jkcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFrZUV4dHJhY3RLZXl3b3Jkcyh0ZXh0Q2h1bmssIG1heEtleXdvcmRzKSB7XG4gICAgY29uc3Qga2V5d29yZHMgPSBPYmplY3Qua2V5cyhyYWtlKHRleHRDaHVuaykpO1xuICAgIGNvbnN0IGxpbWl0ZWRLZXl3b3JkcyA9IG1heEtleXdvcmRzID8ga2V5d29yZHMuc2xpY2UoMCwgbWF4S2V5d29yZHMpIDoga2V5d29yZHM7XG4gICAgcmV0dXJuIG5ldyBTZXQobGltaXRlZEtleXdvcmRzKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/keyword/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/summary/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/summary/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SummaryIndex: () => (/* binding */ SummaryIndex),\n/* harmony export */   SummaryIndexLLMRetriever: () => (/* binding */ SummaryIndexLLMRetriever),\n/* harmony export */   SummaryIndexRetriever: () => (/* binding */ SummaryIndexRetriever),\n/* harmony export */   SummaryRetrieverMode: () => (/* binding */ SummaryRetrieverMode)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/data-structs */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js\");\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/response-synthesizers */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\");\n/* harmony import */ var _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/retriever */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ \"(rsc)/./node_modules/lodash/lodash.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _engines_chat_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../engines/chat/index.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/chat/index.js\");\n/* harmony import */ var _engines_query_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../engines/query/index.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/index.js\");\n/* harmony import */ var _storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../storage/StorageContext.js */ \"(rsc)/./node_modules/llamaindex/dist/storage/StorageContext.js\");\n/* harmony import */ var _BaseIndex_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../BaseIndex.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/BaseIndex.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/summary/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar SummaryRetrieverMode = /*#__PURE__*/ function(SummaryRetrieverMode) {\n    SummaryRetrieverMode[\"DEFAULT\"] = \"default\";\n    // EMBEDDING = \"embedding\",\n    SummaryRetrieverMode[\"LLM\"] = \"llm\";\n    return SummaryRetrieverMode;\n}({});\n/**\n * A SummaryIndex keeps nodes in a sequential order for use with summarization.\n */ class SummaryIndex extends _BaseIndex_js__WEBPACK_IMPORTED_MODULE_10__.BaseIndex {\n    constructor(init){\n        super(init);\n    }\n    static async init(options) {\n        const storageContext = options.storageContext ?? await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_9__.storageContextFromDefaults)({});\n        const { docStore, indexStore } = storageContext;\n        // Setup IndexStruct from storage\n        const indexStructs = await indexStore.getIndexStructs();\n        let indexStruct;\n        if (options.indexStruct && indexStructs.length > 0) {\n            throw new Error(\"Cannot initialize index with both indexStruct and indexStore\");\n        }\n        if (options.indexStruct) {\n            indexStruct = options.indexStruct;\n        } else if (indexStructs.length == 1) {\n            indexStruct = indexStructs[0].type === _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_0__.IndexStructType.LIST ? indexStructs[0] : null;\n        } else if (indexStructs.length > 1 && options.indexId) {\n            indexStruct = await indexStore.getIndexStruct(options.indexId);\n        } else {\n            indexStruct = null;\n        }\n        // check indexStruct type\n        if (indexStruct && indexStruct.type !== _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_0__.IndexStructType.LIST) {\n            throw new Error(\"Attempting to initialize SummaryIndex with non-list indexStruct\");\n        }\n        if (indexStruct) {\n            if (options.nodes) {\n                throw new Error(\"Cannot initialize SummaryIndex with both nodes and indexStruct\");\n            }\n        } else {\n            if (!options.nodes) {\n                throw new Error(\"Cannot initialize SummaryIndex without nodes or indexStruct\");\n            }\n            indexStruct = await SummaryIndex.buildIndexFromNodes(options.nodes, storageContext.docStore);\n            await indexStore.addIndexStruct(indexStruct);\n        }\n        return new SummaryIndex({\n            storageContext,\n            docStore,\n            indexStore,\n            indexStruct\n        });\n    }\n    static async fromDocuments(documents, args = {}) {\n        let { storageContext } = args;\n        storageContext = storageContext ?? await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_9__.storageContextFromDefaults)({});\n        const docStore = storageContext.docStore;\n        await docStore.addDocuments(documents, true);\n        for (const doc of documents){\n            await docStore.setDocumentHash(doc.id_, doc.hash);\n        }\n        const nodes = await _Settings_js__WEBPACK_IMPORTED_MODULE_6__.Settings.nodeParser.getNodesFromDocuments(documents);\n        const index = await SummaryIndex.init({\n            nodes,\n            storageContext\n        });\n        return index;\n    }\n    asRetriever(options) {\n        const { mode = \"default\" } = options ?? {};\n        switch(mode){\n            case \"default\":\n                return new SummaryIndexRetriever(this);\n            case \"llm\":\n                return new SummaryIndexLLMRetriever(this);\n            default:\n                throw new Error(`Unknown retriever mode: ${mode}`);\n        }\n    }\n    asQueryEngine(options) {\n        let { retriever, responseSynthesizer } = options ?? {};\n        if (!retriever) {\n            retriever = this.asRetriever();\n        }\n        if (!responseSynthesizer) {\n            responseSynthesizer = (0,_llamaindex_core_response_synthesizers__WEBPACK_IMPORTED_MODULE_2__.getResponseSynthesizer)(\"compact\");\n        }\n        return new _engines_query_index_js__WEBPACK_IMPORTED_MODULE_8__.RetrieverQueryEngine(retriever, responseSynthesizer, options?.nodePostprocessors);\n    }\n    asChatEngine(options) {\n        const { retriever, mode, ...contextChatEngineOptions } = options ?? {};\n        return new _engines_chat_index_js__WEBPACK_IMPORTED_MODULE_7__.ContextChatEngine({\n            retriever: retriever ?? this.asRetriever({\n                mode: mode ?? \"default\"\n            }),\n            ...contextChatEngineOptions\n        });\n    }\n    static async buildIndexFromNodes(nodes, docStore, indexStruct) {\n        indexStruct = indexStruct || new _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_0__.IndexList();\n        await docStore.addDocuments(nodes, true);\n        for (const node of nodes){\n            indexStruct.addNode(node);\n        }\n        return indexStruct;\n    }\n    async insertNodes(nodes) {\n        for (const node of nodes){\n            this.indexStruct.addNode(node);\n        }\n    }\n    async deleteRefDoc(refDocId, deleteFromDocStore) {\n        const refDocInfo = await this.docStore.getRefDocInfo(refDocId);\n        if (!refDocInfo) {\n            return;\n        }\n        await this.deleteNodes(refDocInfo.nodeIds, false);\n        if (deleteFromDocStore) {\n            await this.docStore.deleteRefDoc(refDocId, false);\n        }\n        return;\n    }\n    async deleteNodes(nodeIds, deleteFromDocStore) {\n        this.indexStruct.nodes = this.indexStruct.nodes.filter((existingNodeId)=>!nodeIds.includes(existingNodeId));\n        if (deleteFromDocStore) {\n            for (const nodeId of nodeIds){\n                await this.docStore.deleteDocument(nodeId, false);\n            }\n        }\n        await this.storageContext.indexStore.addIndexStruct(this.indexStruct);\n    }\n    async getRefDocInfo() {\n        const nodeDocIds = this.indexStruct.nodes;\n        const nodes = await this.docStore.getNodes(nodeDocIds);\n        const refDocInfoMap = {};\n        for (const node of nodes){\n            const refNode = node.sourceNode;\n            if (lodash__WEBPACK_IMPORTED_MODULE_5__.isNil(refNode)) {\n                continue;\n            }\n            const refDocInfo = await this.docStore.getRefDocInfo(refNode.nodeId);\n            if (lodash__WEBPACK_IMPORTED_MODULE_5__.isNil(refDocInfo)) {\n                continue;\n            }\n            refDocInfoMap[refNode.nodeId] = refDocInfo;\n        }\n        return refDocInfoMap;\n    }\n}\n/**\n * Simple retriever for SummaryIndex that returns all nodes\n */ class SummaryIndexRetriever extends _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_3__.BaseRetriever {\n    index;\n    constructor(index){\n        super();\n        this.index = index;\n    }\n    async _retrieve(queryBundle) {\n        const nodeIds = this.index.indexStruct.nodes;\n        const nodes = await this.index.docStore.getNodes(nodeIds);\n        return nodes.map((node)=>({\n                node: node,\n                score: 1\n            }));\n    }\n}\n/**\n * LLM retriever for SummaryIndex which lets you select the most relevant chunks.\n */ class SummaryIndexLLMRetriever extends _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_3__.BaseRetriever {\n    index;\n    choiceSelectPrompt;\n    choiceBatchSize;\n    formatNodeBatchFn;\n    parseChoiceSelectAnswerFn;\n    constructor(index, choiceSelectPrompt, choiceBatchSize = 10, formatNodeBatchFn, parseChoiceSelectAnswerFn){\n        super();\n        this.index = index;\n        this.choiceSelectPrompt = choiceSelectPrompt || _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_1__.defaultChoiceSelectPrompt;\n        this.choiceBatchSize = choiceBatchSize;\n        this.formatNodeBatchFn = formatNodeBatchFn || _utils_js__WEBPACK_IMPORTED_MODULE_11__.defaultFormatNodeBatchFn;\n        this.parseChoiceSelectAnswerFn = parseChoiceSelectAnswerFn || _utils_js__WEBPACK_IMPORTED_MODULE_11__.defaultParseChoiceSelectAnswerFn;\n    }\n    async _retrieve(query) {\n        const nodeIds = this.index.indexStruct.nodes;\n        const results = [];\n        for(let idx = 0; idx < nodeIds.length; idx += this.choiceBatchSize){\n            const nodeIdsBatch = nodeIds.slice(idx, idx + this.choiceBatchSize);\n            const nodesBatch = await this.index.docStore.getNodes(nodeIdsBatch);\n            const fmtBatchStr = this.formatNodeBatchFn(nodesBatch);\n            const input = {\n                context: fmtBatchStr,\n                query: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(query)\n            };\n            const llm = _Settings_js__WEBPACK_IMPORTED_MODULE_6__.Settings.llm;\n            const rawResponse = (await llm.complete({\n                prompt: this.choiceSelectPrompt.format(input)\n            })).text;\n            // parseResult is a map from doc number to relevance score\n            const parseResult = this.parseChoiceSelectAnswerFn(rawResponse, nodesBatch.length);\n            const choiceNodeIds = nodeIdsBatch.filter((nodeId, idx)=>{\n                return `${idx}` in parseResult;\n            });\n            const choiceNodes = await this.index.docStore.getNodes(choiceNodeIds);\n            const nodeWithScores = choiceNodes.map((node, i)=>({\n                    node: node,\n                    score: lodash__WEBPACK_IMPORTED_MODULE_5__.get(parseResult, `${i + 1}`, 1)\n                }));\n            results.push(...nodeWithScores);\n        }\n        return results;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/summary/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/summary/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/summary/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultFormatNodeBatchFn: () => (/* binding */ defaultFormatNodeBatchFn),\n/* harmony export */   defaultParseChoiceSelectAnswerFn: () => (/* binding */ defaultParseChoiceSelectAnswerFn)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"(rsc)/./node_modules/lodash/lodash.js\");\n\n\nconst defaultFormatNodeBatchFn = (summaryNodes)=>{\n    return summaryNodes.map((node, idx)=>{\n        return `\nDocument ${idx + 1}:\n${node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.LLM)}\n        `.trim();\n    }).join(\"\\n\\n\");\n};\nconst defaultParseChoiceSelectAnswerFn = (answer, numChoices, raiseErr = false)=>{\n    // split the line into the answer number and relevance score portions\n    const lineTokens = answer.split(\"\\n\").map((line)=>{\n        const lineTokens = line.split(\",\");\n        if (lineTokens.length !== 2) {\n            if (raiseErr) {\n                throw new Error(`Invalid answer line: ${line}. Answer line must be of the form: answer_num: <int>, answer_relevance: <float>`);\n            } else {\n                return null;\n            }\n        }\n        return lineTokens;\n    }).filter((lineTokens)=>!lodash__WEBPACK_IMPORTED_MODULE_1__.isNil(lineTokens));\n    // parse the answer number and relevance score\n    return lineTokens.reduce((parseResult, lineToken)=>{\n        try {\n            const docNum = parseInt(lineToken[0].split(\":\")[1].trim());\n            const answerRelevance = parseFloat(lineToken[1].split(\":\")[1].trim());\n            if (docNum < 1 || docNum > numChoices) {\n                if (raiseErr) {\n                    throw new Error(`Invalid answer number: ${docNum}. Answer number must be between 1 and ${numChoices}`);\n                }\n            } else {\n                parseResult[docNum] = answerRelevance;\n            }\n        } catch (e) {\n            if (raiseErr) {\n                throw e;\n            }\n        }\n        return parseResult;\n    }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGljZXMvc3VtbWFyeS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVEO0FBQ2hDO0FBQ2hCO0FBQ1A7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixFQUFFLGdCQUFnQixpRUFBWTtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxLQUFLO0FBQzdELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssd0JBQXdCLHlDQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELE9BQU8sd0NBQXdDLFdBQVc7QUFDeEg7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1QiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZGljZXMvc3VtbWFyeS91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YU1vZGUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zY2hlbWFcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0Rm9ybWF0Tm9kZUJhdGNoRm4gPSAoc3VtbWFyeU5vZGVzKT0+e1xuICAgIHJldHVybiBzdW1tYXJ5Tm9kZXMubWFwKChub2RlLCBpZHgpPT57XG4gICAgICAgIHJldHVybiBgXG5Eb2N1bWVudCAke2lkeCArIDF9OlxuJHtub2RlLmdldENvbnRlbnQoTWV0YWRhdGFNb2RlLkxMTSl9XG4gICAgICAgIGAudHJpbSgpO1xuICAgIH0pLmpvaW4oXCJcXG5cXG5cIik7XG59O1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRQYXJzZUNob2ljZVNlbGVjdEFuc3dlckZuID0gKGFuc3dlciwgbnVtQ2hvaWNlcywgcmFpc2VFcnIgPSBmYWxzZSk9PntcbiAgICAvLyBzcGxpdCB0aGUgbGluZSBpbnRvIHRoZSBhbnN3ZXIgbnVtYmVyIGFuZCByZWxldmFuY2Ugc2NvcmUgcG9ydGlvbnNcbiAgICBjb25zdCBsaW5lVG9rZW5zID0gYW5zd2VyLnNwbGl0KFwiXFxuXCIpLm1hcCgobGluZSk9PntcbiAgICAgICAgY29uc3QgbGluZVRva2VucyA9IGxpbmUuc3BsaXQoXCIsXCIpO1xuICAgICAgICBpZiAobGluZVRva2Vucy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgIGlmIChyYWlzZUVycikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhbnN3ZXIgbGluZTogJHtsaW5lfS4gQW5zd2VyIGxpbmUgbXVzdCBiZSBvZiB0aGUgZm9ybTogYW5zd2VyX251bTogPGludD4sIGFuc3dlcl9yZWxldmFuY2U6IDxmbG9hdD5gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmVUb2tlbnM7XG4gICAgfSkuZmlsdGVyKChsaW5lVG9rZW5zKT0+IV8uaXNOaWwobGluZVRva2VucykpO1xuICAgIC8vIHBhcnNlIHRoZSBhbnN3ZXIgbnVtYmVyIGFuZCByZWxldmFuY2Ugc2NvcmVcbiAgICByZXR1cm4gbGluZVRva2Vucy5yZWR1Y2UoKHBhcnNlUmVzdWx0LCBsaW5lVG9rZW4pPT57XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkb2NOdW0gPSBwYXJzZUludChsaW5lVG9rZW5bMF0uc3BsaXQoXCI6XCIpWzFdLnRyaW0oKSk7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXJSZWxldmFuY2UgPSBwYXJzZUZsb2F0KGxpbmVUb2tlblsxXS5zcGxpdChcIjpcIilbMV0udHJpbSgpKTtcbiAgICAgICAgICAgIGlmIChkb2NOdW0gPCAxIHx8IGRvY051bSA+IG51bUNob2ljZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFpc2VFcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFuc3dlciBudW1iZXI6ICR7ZG9jTnVtfS4gQW5zd2VyIG51bWJlciBtdXN0IGJlIGJldHdlZW4gMSBhbmQgJHtudW1DaG9pY2VzfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VSZXN1bHRbZG9jTnVtXSA9IGFuc3dlclJlbGV2YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKHJhaXNlRXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VSZXN1bHQ7XG4gICAgfSwge30pO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/summary/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/indices/vectorStore/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/llamaindex/dist/indices/vectorStore/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorIndexRetriever: () => (/* binding */ VectorIndexRetriever),\n/* harmony export */   VectorStoreIndex: () => (/* binding */ VectorStoreIndex)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/chat-engine */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js\");\n/* harmony import */ var _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/data-structs */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js\");\n/* harmony import */ var _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/embeddings */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js\");\n/* harmony import */ var _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/retriever */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @llamaindex/core/vector-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/vector-store/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _engines_query_RetrieverQueryEngine_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../engines/query/RetrieverQueryEngine.js */ \"(rsc)/./node_modules/llamaindex/dist/engines/query/RetrieverQueryEngine.js\");\n/* harmony import */ var _ingestion_IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../ingestion/IngestionPipeline.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionPipeline.js\");\n/* harmony import */ var _ingestion_strategies_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../ingestion/strategies/index.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/index.js\");\n/* harmony import */ var _storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../storage/StorageContext.js */ \"(rsc)/./node_modules/llamaindex/dist/storage/StorageContext.js\");\n/* harmony import */ var _BaseIndex_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../BaseIndex.js */ \"(rsc)/./node_modules/llamaindex/dist/indices/BaseIndex.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The VectorStoreIndex, an index that stores the nodes only according to their vector embeddings.\n */ class VectorStoreIndex extends _BaseIndex_js__WEBPACK_IMPORTED_MODULE_12__.BaseIndex {\n    indexStore;\n    embedModel;\n    vectorStores;\n    constructor(init){\n        super(init);\n        this.indexStore = init.indexStore;\n        this.vectorStores = init.vectorStores ?? init.storageContext.vectorStores;\n        this.embedModel = _Settings_js__WEBPACK_IMPORTED_MODULE_7__.Settings.embedModel;\n    }\n    /**\n   * The async init function creates a new VectorStoreIndex.\n   * @param options\n   * @returns\n   */ static async init(options) {\n        const storageContext = options.storageContext ?? await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_11__.storageContextFromDefaults)({});\n        const indexStore = storageContext.indexStore;\n        const docStore = storageContext.docStore;\n        let indexStruct = await VectorStoreIndex.setupIndexStructFromStorage(indexStore, options);\n        if (!options.nodes && !indexStruct) {\n            throw new Error(\"Cannot initialize VectorStoreIndex without nodes or indexStruct\");\n        }\n        indexStruct = indexStruct ?? new _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_1__.IndexDict();\n        const index = new this({\n            storageContext,\n            docStore,\n            indexStruct,\n            indexStore,\n            vectorStores: options.vectorStores\n        });\n        if (options.nodes) {\n            // If nodes are passed in, then we need to update the index\n            await index.buildIndexFromNodes(options.nodes, {\n                logProgress: options.logProgress\n            });\n        }\n        return index;\n    }\n    static async setupIndexStructFromStorage(indexStore, options) {\n        const indexStructs = await indexStore.getIndexStructs();\n        let indexStruct;\n        if (options.indexStruct && indexStructs.length > 0) {\n            throw new Error(\"Cannot initialize index with both indexStruct and indexStore\");\n        }\n        if (options.indexStruct) {\n            indexStruct = options.indexStruct;\n        } else if (indexStructs.length == 1) {\n            indexStruct = indexStructs[0].type === _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_1__.IndexStructType.SIMPLE_DICT ? indexStructs[0] : undefined;\n            indexStruct = indexStructs[0];\n        } else if (indexStructs.length > 1 && options.indexId) {\n            indexStruct = await indexStore.getIndexStruct(options.indexId);\n        }\n        // Check indexStruct type\n        if (indexStruct && indexStruct.type !== _llamaindex_core_data_structs__WEBPACK_IMPORTED_MODULE_1__.IndexStructType.SIMPLE_DICT) {\n            throw new Error(\"Attempting to initialize VectorStoreIndex with non-vector indexStruct\");\n        }\n        return indexStruct;\n    }\n    /**\n   * Calculates the embeddings for the given nodes.\n   *\n   * @param nodes - An array of BaseNode objects representing the nodes for which embeddings are to be calculated.\n   * @param {Object} [options] - An optional object containing additional parameters.\n   *   @param {boolean} [options.logProgress] - A boolean indicating whether to log progress to the console (useful for debugging).\n   */ async getNodeEmbeddingResults(nodes, options) {\n        const nodeMap = (0,_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.splitNodesByType)(nodes);\n        for(const type in nodeMap){\n            const nodes = nodeMap[type];\n            const embedModel = this.vectorStores[type]?.embedModel ?? this.embedModel;\n            if (embedModel && nodes) {\n                await embedModel(nodes, {\n                    logProgress: options?.logProgress\n                });\n            }\n        }\n        return nodes;\n    }\n    /**\n   * Get embeddings for nodes and place them into the index.\n   * @param nodes\n   * @returns\n   */ async buildIndexFromNodes(nodes, options) {\n        await this.insertNodes(nodes, options);\n    }\n    /**\n   * High level API: split documents, get embeddings, and build index.\n   * @param documents\n   * @param args\n   * @returns\n   */ static async fromDocuments(documents, args = {}) {\n        args.storageContext = args.storageContext ?? await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_11__.storageContextFromDefaults)({});\n        args.vectorStores = args.vectorStores ?? args.storageContext.vectorStores;\n        args.docStoreStrategy = args.docStoreStrategy ?? // set doc store strategy defaults to the same as for the IngestionPipeline\n        (args.vectorStores ? _ingestion_strategies_index_js__WEBPACK_IMPORTED_MODULE_10__.DocStoreStrategy.UPSERTS : _ingestion_strategies_index_js__WEBPACK_IMPORTED_MODULE_10__.DocStoreStrategy.DUPLICATES_ONLY);\n        const docStore = args.storageContext.docStore;\n        if (args.logProgress) {\n            console.log(\"Using node parser on documents...\");\n        }\n        // use doc store strategy to avoid duplicates\n        const vectorStores = Object.values(args.vectorStores ?? {});\n        const docStoreStrategy = (0,_ingestion_strategies_index_js__WEBPACK_IMPORTED_MODULE_10__.createDocStoreStrategy)(args.docStoreStrategy, docStore, vectorStores);\n        args.nodes = await (0,_ingestion_IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_9__.runTransformations)(documents, [\n            _Settings_js__WEBPACK_IMPORTED_MODULE_7__.Settings.nodeParser\n        ], {}, {\n            docStoreStrategy\n        });\n        if (args.logProgress) {\n            console.log(\"Finished parsing documents.\");\n        }\n        try {\n            return await this.init(args);\n        } catch (error) {\n            await docStoreStrategy.rollback(args.storageContext.docStore, args.nodes);\n            throw error;\n        }\n    }\n    static async fromVectorStores(vectorStores) {\n        if (!vectorStores[_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ModalityType.TEXT]?.storesText) {\n            throw new Error(\"Cannot initialize from a vector store that does not store text\");\n        }\n        const storageContext = await (0,_storage_StorageContext_js__WEBPACK_IMPORTED_MODULE_11__.storageContextFromDefaults)({\n            vectorStores\n        });\n        const index = await this.init({\n            nodes: [],\n            storageContext\n        });\n        return index;\n    }\n    static async fromVectorStore(vectorStore) {\n        return this.fromVectorStores({\n            [_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ModalityType.TEXT]: vectorStore\n        });\n    }\n    asRetriever(options) {\n        return new VectorIndexRetriever({\n            index: this,\n            ...options\n        });\n    }\n    /**\n   * Create a RetrieverQueryEngine.\n   * similarityTopK is only used if no existing retriever is provided.\n   */ asQueryEngine(options) {\n        const { retriever, responseSynthesizer, preFilters, nodePostprocessors, similarityTopK } = options ?? {};\n        return new _engines_query_RetrieverQueryEngine_js__WEBPACK_IMPORTED_MODULE_8__.RetrieverQueryEngine(retriever ?? this.asRetriever({\n            similarityTopK,\n            filters: preFilters\n        }), responseSynthesizer, nodePostprocessors);\n    }\n    /**\n   * Convert the index to a chat engine.\n   * @param options The options for creating the chat engine\n   * @returns A ContextChatEngine that uses the index's retriever to get context for each query\n   */ asChatEngine(options = {}) {\n        const { retriever, similarityTopK, preFilters, ...contextChatEngineOptions } = options;\n        return new _llamaindex_core_chat_engine__WEBPACK_IMPORTED_MODULE_0__.ContextChatEngine({\n            retriever: retriever ?? this.asRetriever({\n                similarityTopK,\n                filters: preFilters\n            }),\n            ...contextChatEngineOptions\n        });\n    }\n    async insertNodesToStore(newIds, nodes, vectorStore) {\n        // NOTE: if the vector store doesn't store text,\n        // we need to add the nodes to the index struct and document store\n        // NOTE: if the vector store keeps text,\n        // we only need to add image and index nodes\n        for(let i = 0; i < nodes.length; ++i){\n            const { type } = nodes[i];\n            if (!vectorStore.storesText || type === _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ObjectType.INDEX || type === _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ObjectType.IMAGE) {\n                const nodeWithoutEmbedding = nodes[i].clone();\n                nodeWithoutEmbedding.embedding = undefined;\n                this.indexStruct.addNode(nodeWithoutEmbedding, newIds[i]);\n                await this.docStore.addDocuments([\n                    nodeWithoutEmbedding\n                ], true);\n            }\n        }\n    }\n    async insertNodes(nodes, options) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        nodes = await this.getNodeEmbeddingResults(nodes, options);\n        await (0,_ingestion_IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_9__.addNodesToVectorStores)(nodes, this.vectorStores, this.insertNodesToStore.bind(this));\n        await this.indexStore.addIndexStruct(this.indexStruct);\n    }\n    async deleteRefDoc(refDocId, deleteFromDocStore = true) {\n        for (const vectorStore of Object.values(this.vectorStores)){\n            await this.deleteRefDocFromStore(vectorStore, refDocId);\n        }\n        if (deleteFromDocStore) {\n            await this.docStore.deleteDocument(refDocId, false);\n        }\n    }\n    async deleteRefDocFromStore(vectorStore, refDocId) {\n        await vectorStore.delete(refDocId);\n        if (!vectorStore.storesText) {\n            const refDocInfo = await this.docStore.getRefDocInfo(refDocId);\n            if (refDocInfo) {\n                for (const nodeId of refDocInfo.nodeIds){\n                    this.indexStruct.delete(nodeId);\n                    await vectorStore.delete(nodeId);\n                }\n            }\n            await this.indexStore.addIndexStruct(this.indexStruct);\n        }\n    }\n}\nclass VectorIndexRetriever extends _llamaindex_core_retriever__WEBPACK_IMPORTED_MODULE_3__.BaseRetriever {\n    index;\n    topK;\n    filters;\n    queryMode;\n    constructor(options){\n        super();\n        this.index = options.index;\n        this.queryMode = options.mode ?? _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_6__.VectorStoreQueryMode.DEFAULT;\n        if (\"topK\" in options && options.topK) {\n            this.topK = options.topK;\n        } else {\n            this.topK = {\n                [_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ModalityType.TEXT]: \"similarityTopK\" in options && options.similarityTopK ? options.similarityTopK : _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_SIMILARITY_TOP_K,\n                [_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ModalityType.IMAGE]: _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_SIMILARITY_TOP_K\n            };\n        }\n        this.filters = options.filters;\n    }\n    /**\n   * @deprecated, pass similarityTopK or topK in constructor instead or directly modify topK\n   */ set similarityTopK(similarityTopK) {\n        this.topK[_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ModalityType.TEXT] = similarityTopK;\n    }\n    async _retrieve(params) {\n        const { query } = params;\n        const vectorStores = this.index.vectorStores;\n        let nodesWithScores = [];\n        for(const type in vectorStores){\n            const vectorStore = vectorStores[type];\n            nodesWithScores = nodesWithScores.concat(await this.retrieveQuery(query, type, vectorStore));\n        }\n        return nodesWithScores;\n    }\n    async retrieveQuery(query, type, vectorStore, filters) {\n        // convert string message to multi-modal format\n        let queryStr = query;\n        if (typeof query === \"string\") {\n            queryStr = query;\n            query = [\n                {\n                    type: \"text\",\n                    text: queryStr\n                }\n            ];\n        } else {\n            queryStr = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_5__.extractText)(query);\n        }\n        // overwrite embed model if specified, otherwise use the one from the vector store\n        const embedModel = this.index.embedModel ?? vectorStore.embedModel;\n        let nodes = [];\n        // query each content item (e.g. text or image) separately\n        for (const item of query){\n            const queryEmbedding = await embedModel.getQueryEmbedding(item);\n            if (queryEmbedding) {\n                const result = await vectorStore.query({\n                    queryStr,\n                    queryEmbedding,\n                    mode: this.queryMode ?? _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_6__.VectorStoreQueryMode.DEFAULT,\n                    similarityTopK: this.topK[type],\n                    filters: this.filters ?? filters ?? undefined\n                });\n                nodes = nodes.concat(this.buildNodeListFromQueryResult(result));\n            }\n        }\n        return nodes;\n    }\n    buildNodeListFromQueryResult(result) {\n        const nodesWithScores = [];\n        for(let i = 0; i < result.ids.length; i++){\n            const nodeFromResult = result.nodes?.[i];\n            if (!this.index.indexStruct.nodesDict[result.ids[i]] && nodeFromResult) {\n                this.index.indexStruct.nodesDict[result.ids[i]] = nodeFromResult;\n            }\n            const node = this.index.indexStruct.nodesDict[result.ids[i]];\n            // XXX: Hack, if it's an image node, we reconstruct the image from the URL\n            // Alternative: Store image in doc store and retrieve it here\n            if (node instanceof _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_4__.ImageNode) {\n                node.image = node.getUrl();\n            }\n            nodesWithScores.push({\n                node: node,\n                score: result.similarities[i]\n            });\n        }\n        return nodesWithScores;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/indices/vectorStore/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionCache.js":
/*!******************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/IngestionCache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IngestionCache: () => (/* binding */ IngestionCache),\n/* harmony export */   getTransformationHash: () => (/* binding */ getTransformationHash)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/storage/doc-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/doc-store/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/storage/kv-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n\n\n\n\nconst transformToJSON = (obj)=>{\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const seen = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const replacer = (key, value)=>{\n        if (value != null && typeof value == \"object\") {\n            if (seen.indexOf(value) >= 0) {\n                return;\n            }\n            seen.push(value);\n        }\n        return value;\n    };\n    // this is a custom replacer function that will allow us to handle circular references\n    const jsonStr = JSON.stringify(obj, replacer);\n    return jsonStr;\n};\nfunction getTransformationHash(nodes, transform) {\n    const nodesStr = nodes.map((node)=>node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.ALL)).join(\"\");\n    const transformString = transformToJSON(transform);\n    const hash = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.createSHA256)();\n    hash.update(nodesStr + transformString + transform.id);\n    return hash.digest();\n}\nclass IngestionCache {\n    collection = \"llama_cache\";\n    cache;\n    nodesKey = \"nodes\";\n    constructor(collection){\n        if (collection) {\n            this.collection = collection;\n        }\n        this.cache = new _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__.SimpleKVStore();\n    }\n    async put(hash, nodes) {\n        const val = {\n            [this.nodesKey]: nodes.map((node)=>(0,_llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__.docToJson)(node, _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__.jsonSerializer))\n        };\n        await this.cache.put(hash, val, this.collection);\n    }\n    async get(hash) {\n        const json = await this.cache.get(hash, this.collection);\n        if (!json || !json[this.nodesKey] || !Array.isArray(json[this.nodesKey])) {\n            return undefined;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return json[this.nodesKey].map((doc)=>(0,_llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__.jsonToDoc)(doc, _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__.jsonSerializer));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9Jbmdlc3Rpb25DYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBdUQ7QUFDbUM7QUFDeEI7QUFDbkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsdURBQXVELGlFQUFZO0FBQ25FO0FBQ0EsaUJBQWlCLDZEQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNEVBQWE7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLDZFQUFTLE9BQU8sOEVBQWM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDZFQUFTLE1BQU0sOEVBQWM7QUFDM0U7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvaW5nZXN0aW9uL0luZ2VzdGlvbkNhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1ldGFkYXRhTW9kZSB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3NjaGVtYVwiO1xuaW1wb3J0IHsgZG9jVG9Kc29uLCBqc29uU2VyaWFsaXplciwganNvblRvRG9jIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc3RvcmFnZS9kb2Mtc3RvcmVcIjtcbmltcG9ydCB7IFNpbXBsZUtWU3RvcmUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2t2LXN0b3JlXCI7XG5pbXBvcnQgeyBjcmVhdGVTSEEyNTYgfSBmcm9tIFwiQGxsYW1haW5kZXgvZW52XCI7XG5jb25zdCB0cmFuc2Zvcm1Ub0pTT04gPSAob2JqKT0+e1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3Qgc2VlbiA9IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcmVwbGFjZXIgPSAoa2V5LCB2YWx1ZSk9PntcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChzZWVuLmluZGV4T2YodmFsdWUpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWVuLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIC8vIHRoaXMgaXMgYSBjdXN0b20gcmVwbGFjZXIgZnVuY3Rpb24gdGhhdCB3aWxsIGFsbG93IHVzIHRvIGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgY29uc3QganNvblN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaiwgcmVwbGFjZXIpO1xuICAgIHJldHVybiBqc29uU3RyO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1hdGlvbkhhc2gobm9kZXMsIHRyYW5zZm9ybSkge1xuICAgIGNvbnN0IG5vZGVzU3RyID0gbm9kZXMubWFwKChub2RlKT0+bm9kZS5nZXRDb250ZW50KE1ldGFkYXRhTW9kZS5BTEwpKS5qb2luKFwiXCIpO1xuICAgIGNvbnN0IHRyYW5zZm9ybVN0cmluZyA9IHRyYW5zZm9ybVRvSlNPTih0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVTSEEyNTYoKTtcbiAgICBoYXNoLnVwZGF0ZShub2Rlc1N0ciArIHRyYW5zZm9ybVN0cmluZyArIHRyYW5zZm9ybS5pZCk7XG4gICAgcmV0dXJuIGhhc2guZGlnZXN0KCk7XG59XG5leHBvcnQgY2xhc3MgSW5nZXN0aW9uQ2FjaGUge1xuICAgIGNvbGxlY3Rpb24gPSBcImxsYW1hX2NhY2hlXCI7XG4gICAgY2FjaGU7XG4gICAgbm9kZXNLZXkgPSBcIm5vZGVzXCI7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbil7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgU2ltcGxlS1ZTdG9yZSgpO1xuICAgIH1cbiAgICBhc3luYyBwdXQoaGFzaCwgbm9kZXMpIHtcbiAgICAgICAgY29uc3QgdmFsID0ge1xuICAgICAgICAgICAgW3RoaXMubm9kZXNLZXldOiBub2Rlcy5tYXAoKG5vZGUpPT5kb2NUb0pzb24obm9kZSwganNvblNlcmlhbGl6ZXIpKVxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLmNhY2hlLnB1dChoYXNoLCB2YWwsIHRoaXMuY29sbGVjdGlvbik7XG4gICAgfVxuICAgIGFzeW5jIGdldChoYXNoKSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCB0aGlzLmNhY2hlLmdldChoYXNoLCB0aGlzLmNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWpzb24gfHwgIWpzb25bdGhpcy5ub2Rlc0tleV0gfHwgIUFycmF5LmlzQXJyYXkoanNvblt0aGlzLm5vZGVzS2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIGpzb25bdGhpcy5ub2Rlc0tleV0ubWFwKChkb2MpPT5qc29uVG9Eb2MoZG9jLCBqc29uU2VyaWFsaXplcikpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionPipeline.js":
/*!*********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/IngestionPipeline.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IngestionPipeline: () => (/* binding */ IngestionPipeline),\n/* harmony export */   addNodesToVectorStores: () => (/* binding */ addNodesToVectorStores),\n/* harmony export */   runTransformations: () => (/* binding */ runTransformations)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _IngestionCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IngestionCache.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionCache.js\");\n/* harmony import */ var _strategies_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strategies/index.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/index.js\");\n\n\n\nasync function runTransformations(nodesToRun, transformations, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransformOptions = {}, { inPlace = true, cache, docStoreStrategy } = {}) {\n    let nodes = nodesToRun;\n    if (!inPlace) {\n        nodes = [\n            ...nodesToRun\n        ];\n    }\n    if (docStoreStrategy) {\n        nodes = await docStoreStrategy(nodes);\n    }\n    for (const transform of transformations){\n        if (cache) {\n            const hash = (0,_IngestionCache_js__WEBPACK_IMPORTED_MODULE_1__.getTransformationHash)(nodes, transform);\n            const cachedNodes = await cache.get(hash);\n            if (cachedNodes) {\n                nodes = cachedNodes;\n            } else {\n                nodes = await transform(nodes, transformOptions);\n                await cache.put(hash, nodes);\n            }\n        } else {\n            nodes = await transform(nodes, transformOptions);\n        }\n    }\n    return nodes;\n}\nclass IngestionPipeline {\n    transformations = [];\n    documents;\n    reader;\n    vectorStore;\n    vectorStores;\n    docStore;\n    docStoreStrategy = _strategies_index_js__WEBPACK_IMPORTED_MODULE_2__.DocStoreStrategy.UPSERTS;\n    cache;\n    disableCache = false;\n    _docStoreStrategy;\n    constructor(init){\n        Object.assign(this, init);\n        if (!this.docStore) {\n            this.docStoreStrategy = _strategies_index_js__WEBPACK_IMPORTED_MODULE_2__.DocStoreStrategy.NONE;\n        }\n        this.vectorStores = this.vectorStores ?? (this.vectorStore ? {\n            [_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.ModalityType.TEXT]: this.vectorStore\n        } : undefined);\n        this._docStoreStrategy = (0,_strategies_index_js__WEBPACK_IMPORTED_MODULE_2__.createDocStoreStrategy)(this.docStoreStrategy, this.docStore, this.vectorStores ? Object.values(this.vectorStores) : undefined);\n        if (!this.disableCache) {\n            this.cache = new _IngestionCache_js__WEBPACK_IMPORTED_MODULE_1__.IngestionCache();\n        }\n    }\n    async prepareInput(documents, nodes) {\n        const inputNodes = [];\n        if (documents) {\n            inputNodes.push(documents);\n        }\n        if (nodes) {\n            inputNodes.push(nodes);\n        }\n        if (this.documents) {\n            inputNodes.push(this.documents);\n        }\n        if (this.reader) {\n            // fixme: empty parameter might cause error\n            inputNodes.push(await this.reader.loadData());\n        }\n        return inputNodes.flat();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async run(args = {}, transformOptions) {\n        args.cache = args.cache ?? this.cache;\n        args.docStoreStrategy = args.docStoreStrategy ?? this._docStoreStrategy;\n        const inputNodes = await this.prepareInput(args.documents, args.nodes);\n        const nodes = await runTransformations(inputNodes, this.transformations, transformOptions, args);\n        if (this.vectorStores) {\n            const nodesToAdd = nodes.filter((node)=>node.embedding);\n            await addNodesToVectorStores(nodesToAdd, this.vectorStores);\n        }\n        return nodes;\n    }\n}\nasync function addNodesToVectorStores(nodes, vectorStores, nodesAdded) {\n    const nodeMap = (0,_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.splitNodesByType)(nodes);\n    for(const type in nodeMap){\n        const nodes = nodeMap[type];\n        if (nodes) {\n            const vectorStore = vectorStores[type];\n            if (!vectorStore) {\n                throw new Error(`Cannot insert nodes of type ${type} without assigned vector store`);\n            }\n            const newIds = await vectorStore.add(nodes);\n            if (nodesAdded) {\n                await nodesAdded(newIds, nodes, vectorStore);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9Jbmdlc3Rpb25QaXBlbGluZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBeUU7QUFDRztBQUNLO0FBQzFFO0FBQ1AscUJBQXFCLElBQUksMENBQTBDLElBQUk7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix5RUFBcUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0VBQWdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxrRUFBZ0I7QUFDcEQ7QUFDQTtBQUNBLGFBQWEsaUVBQVk7QUFDekIsVUFBVTtBQUNWLGlDQUFpQyw0RUFBc0I7QUFDdkQ7QUFDQSw2QkFBNkIsOERBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxvQkFBb0IseUVBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsTUFBTTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9pbmdlc3Rpb24vSW5nZXN0aW9uUGlwZWxpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kYWxpdHlUeXBlLCBzcGxpdE5vZGVzQnlUeXBlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc2NoZW1hXCI7XG5pbXBvcnQgeyBJbmdlc3Rpb25DYWNoZSwgZ2V0VHJhbnNmb3JtYXRpb25IYXNoIH0gZnJvbSBcIi4vSW5nZXN0aW9uQ2FjaGUuanNcIjtcbmltcG9ydCB7IERvY1N0b3JlU3RyYXRlZ3ksIGNyZWF0ZURvY1N0b3JlU3RyYXRlZ3kgfSBmcm9tIFwiLi9zdHJhdGVnaWVzL2luZGV4LmpzXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuVHJhbnNmb3JtYXRpb25zKG5vZGVzVG9SdW4sIHRyYW5zZm9ybWF0aW9ucywgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnRyYW5zZm9ybU9wdGlvbnMgPSB7fSwgeyBpblBsYWNlID0gdHJ1ZSwgY2FjaGUsIGRvY1N0b3JlU3RyYXRlZ3kgfSA9IHt9KSB7XG4gICAgbGV0IG5vZGVzID0gbm9kZXNUb1J1bjtcbiAgICBpZiAoIWluUGxhY2UpIHtcbiAgICAgICAgbm9kZXMgPSBbXG4gICAgICAgICAgICAuLi5ub2Rlc1RvUnVuXG4gICAgICAgIF07XG4gICAgfVxuICAgIGlmIChkb2NTdG9yZVN0cmF0ZWd5KSB7XG4gICAgICAgIG5vZGVzID0gYXdhaXQgZG9jU3RvcmVTdHJhdGVneShub2Rlcyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgdHJhbnNmb3JtIG9mIHRyYW5zZm9ybWF0aW9ucyl7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGdldFRyYW5zZm9ybWF0aW9uSGFzaChub2RlcywgdHJhbnNmb3JtKTtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZE5vZGVzID0gYXdhaXQgY2FjaGUuZ2V0KGhhc2gpO1xuICAgICAgICAgICAgaWYgKGNhY2hlZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMgPSBjYWNoZWROb2RlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZXMgPSBhd2FpdCB0cmFuc2Zvcm0obm9kZXMsIHRyYW5zZm9ybU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGNhY2hlLnB1dChoYXNoLCBub2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlcyA9IGF3YWl0IHRyYW5zZm9ybShub2RlcywgdHJhbnNmb3JtT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0IGNsYXNzIEluZ2VzdGlvblBpcGVsaW5lIHtcbiAgICB0cmFuc2Zvcm1hdGlvbnMgPSBbXTtcbiAgICBkb2N1bWVudHM7XG4gICAgcmVhZGVyO1xuICAgIHZlY3RvclN0b3JlO1xuICAgIHZlY3RvclN0b3JlcztcbiAgICBkb2NTdG9yZTtcbiAgICBkb2NTdG9yZVN0cmF0ZWd5ID0gRG9jU3RvcmVTdHJhdGVneS5VUFNFUlRTO1xuICAgIGNhY2hlO1xuICAgIGRpc2FibGVDYWNoZSA9IGZhbHNlO1xuICAgIF9kb2NTdG9yZVN0cmF0ZWd5O1xuICAgIGNvbnN0cnVjdG9yKGluaXQpe1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGluaXQpO1xuICAgICAgICBpZiAoIXRoaXMuZG9jU3RvcmUpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jU3RvcmVTdHJhdGVneSA9IERvY1N0b3JlU3RyYXRlZ3kuTk9ORTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZlY3RvclN0b3JlcyA9IHRoaXMudmVjdG9yU3RvcmVzID8/ICh0aGlzLnZlY3RvclN0b3JlID8ge1xuICAgICAgICAgICAgW01vZGFsaXR5VHlwZS5URVhUXTogdGhpcy52ZWN0b3JTdG9yZVxuICAgICAgICB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5fZG9jU3RvcmVTdHJhdGVneSA9IGNyZWF0ZURvY1N0b3JlU3RyYXRlZ3kodGhpcy5kb2NTdG9yZVN0cmF0ZWd5LCB0aGlzLmRvY1N0b3JlLCB0aGlzLnZlY3RvclN0b3JlcyA/IE9iamVjdC52YWx1ZXModGhpcy52ZWN0b3JTdG9yZXMpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVDYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBJbmdlc3Rpb25DYWNoZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHByZXBhcmVJbnB1dChkb2N1bWVudHMsIG5vZGVzKSB7XG4gICAgICAgIGNvbnN0IGlucHV0Tm9kZXMgPSBbXTtcbiAgICAgICAgaWYgKGRvY3VtZW50cykge1xuICAgICAgICAgICAgaW5wdXROb2Rlcy5wdXNoKGRvY3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVzKSB7XG4gICAgICAgICAgICBpbnB1dE5vZGVzLnB1c2gobm9kZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50cykge1xuICAgICAgICAgICAgaW5wdXROb2Rlcy5wdXNoKHRoaXMuZG9jdW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZWFkZXIpIHtcbiAgICAgICAgICAgIC8vIGZpeG1lOiBlbXB0eSBwYXJhbWV0ZXIgbWlnaHQgY2F1c2UgZXJyb3JcbiAgICAgICAgICAgIGlucHV0Tm9kZXMucHVzaChhd2FpdCB0aGlzLnJlYWRlci5sb2FkRGF0YSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXROb2Rlcy5mbGF0KCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgYXN5bmMgcnVuKGFyZ3MgPSB7fSwgdHJhbnNmb3JtT3B0aW9ucykge1xuICAgICAgICBhcmdzLmNhY2hlID0gYXJncy5jYWNoZSA/PyB0aGlzLmNhY2hlO1xuICAgICAgICBhcmdzLmRvY1N0b3JlU3RyYXRlZ3kgPSBhcmdzLmRvY1N0b3JlU3RyYXRlZ3kgPz8gdGhpcy5fZG9jU3RvcmVTdHJhdGVneTtcbiAgICAgICAgY29uc3QgaW5wdXROb2RlcyA9IGF3YWl0IHRoaXMucHJlcGFyZUlucHV0KGFyZ3MuZG9jdW1lbnRzLCBhcmdzLm5vZGVzKTtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBhd2FpdCBydW5UcmFuc2Zvcm1hdGlvbnMoaW5wdXROb2RlcywgdGhpcy50cmFuc2Zvcm1hdGlvbnMsIHRyYW5zZm9ybU9wdGlvbnMsIGFyZ3MpO1xuICAgICAgICBpZiAodGhpcy52ZWN0b3JTdG9yZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzVG9BZGQgPSBub2Rlcy5maWx0ZXIoKG5vZGUpPT5ub2RlLmVtYmVkZGluZyk7XG4gICAgICAgICAgICBhd2FpdCBhZGROb2Rlc1RvVmVjdG9yU3RvcmVzKG5vZGVzVG9BZGQsIHRoaXMudmVjdG9yU3RvcmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE5vZGVzVG9WZWN0b3JTdG9yZXMobm9kZXMsIHZlY3RvclN0b3Jlcywgbm9kZXNBZGRlZCkge1xuICAgIGNvbnN0IG5vZGVNYXAgPSBzcGxpdE5vZGVzQnlUeXBlKG5vZGVzKTtcbiAgICBmb3IoY29uc3QgdHlwZSBpbiBub2RlTWFwKXtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBub2RlTWFwW3R5cGVdO1xuICAgICAgICBpZiAobm9kZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHZlY3RvclN0b3JlID0gdmVjdG9yU3RvcmVzW3R5cGVdO1xuICAgICAgICAgICAgaWYgKCF2ZWN0b3JTdG9yZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGluc2VydCBub2RlcyBvZiB0eXBlICR7dHlwZX0gd2l0aG91dCBhc3NpZ25lZCB2ZWN0b3Igc3RvcmVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5ld0lkcyA9IGF3YWl0IHZlY3RvclN0b3JlLmFkZChub2Rlcyk7XG4gICAgICAgICAgICBpZiAobm9kZXNBZGRlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG5vZGVzQWRkZWQobmV3SWRzLCBub2RlcywgdmVjdG9yU3RvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionPipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IngestionPipeline: () => (/* reexport safe */ _IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_0__.IngestionPipeline),\n/* harmony export */   addNodesToVectorStores: () => (/* reexport safe */ _IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_0__.addNodesToVectorStores),\n/* harmony export */   runTransformations: () => (/* reexport safe */ _IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_0__.runTransformations)\n/* harmony export */ });\n/* harmony import */ var _IngestionPipeline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IngestionPipeline.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/IngestionPipeline.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9pbmdlc3Rpb24vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vSW5nZXN0aW9uUGlwZWxpbmUuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/DuplicatesStrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/strategies/DuplicatesStrategy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DuplicatesStrategy: () => (/* binding */ DuplicatesStrategy)\n/* harmony export */ });\n/* harmony import */ var _rollback_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rollback.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/rollback.js\");\n\n/**\n * Handle doc store duplicates by checking all hashes.\n */ class DuplicatesStrategy extends _rollback_js__WEBPACK_IMPORTED_MODULE_0__.RollbackableTransformComponent {\n    docStore;\n    constructor(docStore){\n        super(async (nodes)=>{\n            const hashes = await this.docStore.getAllDocumentHashes();\n            const currentHashes = new Set();\n            const nodesToRun = [];\n            for (const node of nodes){\n                if (!(node.hash in hashes) && !currentHashes.has(node.hash)) {\n                    await this.docStore.setDocumentHash(node.id_, node.hash);\n                    nodesToRun.push(node);\n                    currentHashes.add(node.hash);\n                }\n            }\n            await this.docStore.addDocuments(nodesToRun, true);\n            return nodesToRun;\n        });\n        this.docStore = docStore;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL0R1cGxpY2F0ZXNTdHJhdGVneS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDtBQUMvRDtBQUNBO0FBQ0EsSUFBVyxpQ0FBaUMsd0VBQThCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL0R1cGxpY2F0ZXNTdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb2xsYmFja2FibGVUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tIFwiLi9yb2xsYmFjay5qc1wiO1xuLyoqXG4gKiBIYW5kbGUgZG9jIHN0b3JlIGR1cGxpY2F0ZXMgYnkgY2hlY2tpbmcgYWxsIGhhc2hlcy5cbiAqLyBleHBvcnQgY2xhc3MgRHVwbGljYXRlc1N0cmF0ZWd5IGV4dGVuZHMgUm9sbGJhY2thYmxlVHJhbnNmb3JtQ29tcG9uZW50IHtcbiAgICBkb2NTdG9yZTtcbiAgICBjb25zdHJ1Y3Rvcihkb2NTdG9yZSl7XG4gICAgICAgIHN1cGVyKGFzeW5jIChub2Rlcyk9PntcbiAgICAgICAgICAgIGNvbnN0IGhhc2hlcyA9IGF3YWl0IHRoaXMuZG9jU3RvcmUuZ2V0QWxsRG9jdW1lbnRIYXNoZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRIYXNoZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBjb25zdCBub2Rlc1RvUnVuID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpe1xuICAgICAgICAgICAgICAgIGlmICghKG5vZGUuaGFzaCBpbiBoYXNoZXMpICYmICFjdXJyZW50SGFzaGVzLmhhcyhub2RlLmhhc2gpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZG9jU3RvcmUuc2V0RG9jdW1lbnRIYXNoKG5vZGUuaWRfLCBub2RlLmhhc2gpO1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1RvUnVuLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIYXNoZXMuYWRkKG5vZGUuaGFzaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5kb2NTdG9yZS5hZGREb2N1bWVudHMobm9kZXNUb1J1biwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXNUb1J1bjtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9jU3RvcmUgPSBkb2NTdG9yZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/DuplicatesStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/UpsertsAndDeleteStrategy.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/strategies/UpsertsAndDeleteStrategy.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UpsertsAndDeleteStrategy: () => (/* binding */ UpsertsAndDeleteStrategy)\n/* harmony export */ });\n/* harmony import */ var _classify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classify.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/classify.js\");\n/* harmony import */ var _rollback_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rollback.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/rollback.js\");\n\n\n/**\n * Handle docstore upserts by checking hashes and ids.\n * Identify missing docs and delete them from docstore and vector store\n */ class UpsertsAndDeleteStrategy extends _rollback_js__WEBPACK_IMPORTED_MODULE_1__.RollbackableTransformComponent {\n    docStore;\n    vectorStores;\n    constructor(docStore, vectorStores){\n        super(async (nodes)=>{\n            const { dedupedNodes, missingDocs, unusedDocs } = await (0,_classify_js__WEBPACK_IMPORTED_MODULE_0__.classify)(this.docStore, nodes);\n            // remove unused docs\n            for (const refDocId of unusedDocs){\n                await this.docStore.deleteRefDoc(refDocId, false);\n                if (this.vectorStores) {\n                    for (const vectorStore of this.vectorStores){\n                        await vectorStore.delete(refDocId);\n                    }\n                }\n            }\n            // remove missing docs\n            for (const docId of missingDocs){\n                await this.docStore.deleteDocument(docId, true);\n                if (this.vectorStores) {\n                    for (const vectorStore of this.vectorStores){\n                        await vectorStore.delete(docId);\n                    }\n                }\n            }\n            await this.docStore.addDocuments(dedupedNodes, true);\n            return dedupedNodes;\n        });\n        this.docStore = docStore;\n        this.vectorStores = vectorStores;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL1Vwc2VydHNBbmREZWxldGVTdHJhdGVneS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDc0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsSUFBVyx1Q0FBdUMsd0VBQThCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdDQUF3QyxRQUFRLHNEQUFRO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL1Vwc2VydHNBbmREZWxldGVTdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbGFzc2lmeSB9IGZyb20gXCIuL2NsYXNzaWZ5LmpzXCI7XG5pbXBvcnQgeyBSb2xsYmFja2FibGVUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tIFwiLi9yb2xsYmFjay5qc1wiO1xuLyoqXG4gKiBIYW5kbGUgZG9jc3RvcmUgdXBzZXJ0cyBieSBjaGVja2luZyBoYXNoZXMgYW5kIGlkcy5cbiAqIElkZW50aWZ5IG1pc3NpbmcgZG9jcyBhbmQgZGVsZXRlIHRoZW0gZnJvbSBkb2NzdG9yZSBhbmQgdmVjdG9yIHN0b3JlXG4gKi8gZXhwb3J0IGNsYXNzIFVwc2VydHNBbmREZWxldGVTdHJhdGVneSBleHRlbmRzIFJvbGxiYWNrYWJsZVRyYW5zZm9ybUNvbXBvbmVudCB7XG4gICAgZG9jU3RvcmU7XG4gICAgdmVjdG9yU3RvcmVzO1xuICAgIGNvbnN0cnVjdG9yKGRvY1N0b3JlLCB2ZWN0b3JTdG9yZXMpe1xuICAgICAgICBzdXBlcihhc3luYyAobm9kZXMpPT57XG4gICAgICAgICAgICBjb25zdCB7IGRlZHVwZWROb2RlcywgbWlzc2luZ0RvY3MsIHVudXNlZERvY3MgfSA9IGF3YWl0IGNsYXNzaWZ5KHRoaXMuZG9jU3RvcmUsIG5vZGVzKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB1bnVzZWQgZG9jc1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWZEb2NJZCBvZiB1bnVzZWREb2NzKXtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRvY1N0b3JlLmRlbGV0ZVJlZkRvYyhyZWZEb2NJZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlY3RvclN0b3Jlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZlY3RvclN0b3JlIG9mIHRoaXMudmVjdG9yU3RvcmVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHZlY3RvclN0b3JlLmRlbGV0ZShyZWZEb2NJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZW1vdmUgbWlzc2luZyBkb2NzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRvY0lkIG9mIG1pc3NpbmdEb2NzKXtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRvY1N0b3JlLmRlbGV0ZURvY3VtZW50KGRvY0lkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52ZWN0b3JTdG9yZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB2ZWN0b3JTdG9yZSBvZiB0aGlzLnZlY3RvclN0b3Jlcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB2ZWN0b3JTdG9yZS5kZWxldGUoZG9jSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5kb2NTdG9yZS5hZGREb2N1bWVudHMoZGVkdXBlZE5vZGVzLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBkZWR1cGVkTm9kZXM7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRvY1N0b3JlID0gZG9jU3RvcmU7XG4gICAgICAgIHRoaXMudmVjdG9yU3RvcmVzID0gdmVjdG9yU3RvcmVzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/UpsertsAndDeleteStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/UpsertsStrategy.js":
/*!******************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/strategies/UpsertsStrategy.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UpsertsStrategy: () => (/* binding */ UpsertsStrategy)\n/* harmony export */ });\n/* harmony import */ var _classify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classify.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/classify.js\");\n/* harmony import */ var _rollback_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rollback.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/rollback.js\");\n\n\n/**\n * Handles doc store upserts by checking hashes and ids.\n */ class UpsertsStrategy extends _rollback_js__WEBPACK_IMPORTED_MODULE_1__.RollbackableTransformComponent {\n    docStore;\n    vectorStores;\n    constructor(docStore, vectorStores){\n        super(async (nodes)=>{\n            const { dedupedNodes, unusedDocs } = await (0,_classify_js__WEBPACK_IMPORTED_MODULE_0__.classify)(this.docStore, nodes);\n            // remove unused docs\n            for (const refDocId of unusedDocs){\n                await this.docStore.deleteRefDoc(refDocId, false);\n                if (this.vectorStores) {\n                    for (const vectorStore of this.vectorStores){\n                        await vectorStore.delete(refDocId);\n                    }\n                }\n            }\n            // add non-duplicate docs\n            await this.docStore.addDocuments(dedupedNodes, true);\n            return dedupedNodes;\n        });\n        this.docStore = docStore;\n        this.vectorStores = vectorStores;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL1Vwc2VydHNTdHJhdGVneS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDc0I7QUFDL0Q7QUFDQTtBQUNBLElBQVcsOEJBQThCLHdFQUE4QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyQkFBMkIsUUFBUSxzREFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL1Vwc2VydHNTdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbGFzc2lmeSB9IGZyb20gXCIuL2NsYXNzaWZ5LmpzXCI7XG5pbXBvcnQgeyBSb2xsYmFja2FibGVUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tIFwiLi9yb2xsYmFjay5qc1wiO1xuLyoqXG4gKiBIYW5kbGVzIGRvYyBzdG9yZSB1cHNlcnRzIGJ5IGNoZWNraW5nIGhhc2hlcyBhbmQgaWRzLlxuICovIGV4cG9ydCBjbGFzcyBVcHNlcnRzU3RyYXRlZ3kgZXh0ZW5kcyBSb2xsYmFja2FibGVUcmFuc2Zvcm1Db21wb25lbnQge1xuICAgIGRvY1N0b3JlO1xuICAgIHZlY3RvclN0b3JlcztcbiAgICBjb25zdHJ1Y3Rvcihkb2NTdG9yZSwgdmVjdG9yU3RvcmVzKXtcbiAgICAgICAgc3VwZXIoYXN5bmMgKG5vZGVzKT0+e1xuICAgICAgICAgICAgY29uc3QgeyBkZWR1cGVkTm9kZXMsIHVudXNlZERvY3MgfSA9IGF3YWl0IGNsYXNzaWZ5KHRoaXMuZG9jU3RvcmUsIG5vZGVzKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB1bnVzZWQgZG9jc1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWZEb2NJZCBvZiB1bnVzZWREb2NzKXtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRvY1N0b3JlLmRlbGV0ZVJlZkRvYyhyZWZEb2NJZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlY3RvclN0b3Jlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZlY3RvclN0b3JlIG9mIHRoaXMudmVjdG9yU3RvcmVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHZlY3RvclN0b3JlLmRlbGV0ZShyZWZEb2NJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhZGQgbm9uLWR1cGxpY2F0ZSBkb2NzXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRvY1N0b3JlLmFkZERvY3VtZW50cyhkZWR1cGVkTm9kZXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZHVwZWROb2RlcztcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZG9jU3RvcmUgPSBkb2NTdG9yZTtcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZXMgPSB2ZWN0b3JTdG9yZXM7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/UpsertsStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/classify.js":
/*!***********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/strategies/classify.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classify: () => (/* binding */ classify)\n/* harmony export */ });\nasync function classify(docStore, nodes) {\n    const existingDocIds = Object.values(await docStore.getAllDocumentHashes());\n    const docIdsFromNodes = new Set();\n    const dedupedNodes = [];\n    const unusedDocs = [];\n    for (const node of nodes){\n        const refDocId = node.sourceNode?.nodeId || node.id_;\n        docIdsFromNodes.add(refDocId);\n        const existingHash = await docStore.getDocumentHash(refDocId);\n        if (!existingHash) {\n            // document doesn't exist, so add it\n            dedupedNodes.push(node);\n        } else if (existingHash && existingHash !== node.hash) {\n            // document exists but hash is different, so mark doc as unused and add node as deduped\n            unusedDocs.push(refDocId);\n            dedupedNodes.push(node);\n        }\n    // otherwise, document exists and hash is the same, so do nothing\n    }\n    const missingDocs = existingDocIds.filter((id)=>!docIdsFromNodes.has(id));\n    return {\n        dedupedNodes,\n        missingDocs,\n        unusedDocs\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL2NsYXNzaWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL2NsYXNzaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGFzc2lmeShkb2NTdG9yZSwgbm9kZXMpIHtcbiAgICBjb25zdCBleGlzdGluZ0RvY0lkcyA9IE9iamVjdC52YWx1ZXMoYXdhaXQgZG9jU3RvcmUuZ2V0QWxsRG9jdW1lbnRIYXNoZXMoKSk7XG4gICAgY29uc3QgZG9jSWRzRnJvbU5vZGVzID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRlZHVwZWROb2RlcyA9IFtdO1xuICAgIGNvbnN0IHVudXNlZERvY3MgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpe1xuICAgICAgICBjb25zdCByZWZEb2NJZCA9IG5vZGUuc291cmNlTm9kZT8ubm9kZUlkIHx8IG5vZGUuaWRfO1xuICAgICAgICBkb2NJZHNGcm9tTm9kZXMuYWRkKHJlZkRvY0lkKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdIYXNoID0gYXdhaXQgZG9jU3RvcmUuZ2V0RG9jdW1lbnRIYXNoKHJlZkRvY0lkKTtcbiAgICAgICAgaWYgKCFleGlzdGluZ0hhc2gpIHtcbiAgICAgICAgICAgIC8vIGRvY3VtZW50IGRvZXNuJ3QgZXhpc3QsIHNvIGFkZCBpdFxuICAgICAgICAgICAgZGVkdXBlZE5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdIYXNoICYmIGV4aXN0aW5nSGFzaCAhPT0gbm9kZS5oYXNoKSB7XG4gICAgICAgICAgICAvLyBkb2N1bWVudCBleGlzdHMgYnV0IGhhc2ggaXMgZGlmZmVyZW50LCBzbyBtYXJrIGRvYyBhcyB1bnVzZWQgYW5kIGFkZCBub2RlIGFzIGRlZHVwZWRcbiAgICAgICAgICAgIHVudXNlZERvY3MucHVzaChyZWZEb2NJZCk7XG4gICAgICAgICAgICBkZWR1cGVkTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgIC8vIG90aGVyd2lzZSwgZG9jdW1lbnQgZXhpc3RzIGFuZCBoYXNoIGlzIHRoZSBzYW1lLCBzbyBkbyBub3RoaW5nXG4gICAgfVxuICAgIGNvbnN0IG1pc3NpbmdEb2NzID0gZXhpc3RpbmdEb2NJZHMuZmlsdGVyKChpZCk9PiFkb2NJZHNGcm9tTm9kZXMuaGFzKGlkKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVkdXBlZE5vZGVzLFxuICAgICAgICBtaXNzaW5nRG9jcyxcbiAgICAgICAgdW51c2VkRG9jc1xuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/classify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/strategies/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocStoreStrategy: () => (/* binding */ DocStoreStrategy),\n/* harmony export */   createDocStoreStrategy: () => (/* binding */ createDocStoreStrategy)\n/* harmony export */ });\n/* harmony import */ var _DuplicatesStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DuplicatesStrategy.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/DuplicatesStrategy.js\");\n/* harmony import */ var _UpsertsAndDeleteStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UpsertsAndDeleteStrategy.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/UpsertsAndDeleteStrategy.js\");\n/* harmony import */ var _UpsertsStrategy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UpsertsStrategy.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/UpsertsStrategy.js\");\n/* harmony import */ var _rollback_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rollback.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/rollback.js\");\n\n\n\n\n/**\n * Document de-deduplication strategies work by comparing the hashes or ids stored in the document store.\n * They require a document store to be set which must be persisted across pipeline runs.\n */ var DocStoreStrategy = /*#__PURE__*/ function(DocStoreStrategy) {\n    // Use upserts to handle duplicates. Checks if the a document is already in the doc store based on its id. If it is not, or if the hash of the document is updated, it will update the document in the doc store and run the transformations.\n    DocStoreStrategy[\"UPSERTS\"] = \"upserts\";\n    // Only handle duplicates. Checks if the hash of a document is already in the doc store. Only then it will add the document to the doc store and run the transformations\n    DocStoreStrategy[\"DUPLICATES_ONLY\"] = \"duplicates_only\";\n    // Use upserts and delete to handle duplicates. Like the upsert strategy but it will also delete non-existing documents from the doc store\n    DocStoreStrategy[\"UPSERTS_AND_DELETE\"] = \"upserts_and_delete\";\n    DocStoreStrategy[\"NONE\"] = \"none\";\n    return DocStoreStrategy;\n}({});\nclass NoOpStrategy extends _rollback_js__WEBPACK_IMPORTED_MODULE_3__.RollbackableTransformComponent {\n    constructor(){\n        super(async (nodes)=>nodes);\n    }\n}\nfunction createDocStoreStrategy(docStoreStrategy, docStore, vectorStores = []) {\n    if (docStoreStrategy === \"none\") {\n        return new NoOpStrategy();\n    }\n    if (!docStore) {\n        throw new Error(\"docStore is required to create a doc store strategy.\");\n    }\n    if (vectorStores.length > 0) {\n        if (docStoreStrategy === \"upserts\") {\n            return new _UpsertsStrategy_js__WEBPACK_IMPORTED_MODULE_2__.UpsertsStrategy(docStore, vectorStores);\n        } else if (docStoreStrategy === \"upserts_and_delete\") {\n            return new _UpsertsAndDeleteStrategy_js__WEBPACK_IMPORTED_MODULE_1__.UpsertsAndDeleteStrategy(docStore, vectorStores);\n        } else if (docStoreStrategy === \"duplicates_only\") {\n            return new _DuplicatesStrategy_js__WEBPACK_IMPORTED_MODULE_0__.DuplicatesStrategy(docStore);\n        } else {\n            throw new Error(`Invalid docstore strategy: ${docStoreStrategy}`);\n        }\n    } else {\n        if (docStoreStrategy === \"upserts\") {\n            console.warn(\"Docstore strategy set to upserts, but no vector store. Switching to duplicates_only strategy.\");\n        } else if (docStoreStrategy === \"upserts_and_delete\") {\n            console.warn(\"Docstore strategy set to upserts and delete, but no vector store. Switching to duplicates_only strategy.\");\n        }\n        return new _DuplicatesStrategy_js__WEBPACK_IMPORTED_MODULE_0__.DuplicatesStrategy(docStore);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE2RDtBQUNZO0FBQ2xCO0FBQ1E7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsSUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUc7QUFDSiwyQkFBMkIsd0VBQThCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdFQUFlO0FBQ3RDLFVBQVU7QUFDVix1QkFBdUIsa0ZBQXdCO0FBQy9DLFVBQVU7QUFDVix1QkFBdUIsc0VBQWtCO0FBQ3pDLFVBQVU7QUFDViwwREFBMEQsaUJBQWlCO0FBQzNFO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLG1CQUFtQixzRUFBa0I7QUFDckM7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvaW5nZXN0aW9uL3N0cmF0ZWdpZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVwbGljYXRlc1N0cmF0ZWd5IH0gZnJvbSBcIi4vRHVwbGljYXRlc1N0cmF0ZWd5LmpzXCI7XG5pbXBvcnQgeyBVcHNlcnRzQW5kRGVsZXRlU3RyYXRlZ3kgfSBmcm9tIFwiLi9VcHNlcnRzQW5kRGVsZXRlU3RyYXRlZ3kuanNcIjtcbmltcG9ydCB7IFVwc2VydHNTdHJhdGVneSB9IGZyb20gXCIuL1Vwc2VydHNTdHJhdGVneS5qc1wiO1xuaW1wb3J0IHsgUm9sbGJhY2thYmxlVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSBcIi4vcm9sbGJhY2suanNcIjtcbi8qKlxuICogRG9jdW1lbnQgZGUtZGVkdXBsaWNhdGlvbiBzdHJhdGVnaWVzIHdvcmsgYnkgY29tcGFyaW5nIHRoZSBoYXNoZXMgb3IgaWRzIHN0b3JlZCBpbiB0aGUgZG9jdW1lbnQgc3RvcmUuXG4gKiBUaGV5IHJlcXVpcmUgYSBkb2N1bWVudCBzdG9yZSB0byBiZSBzZXQgd2hpY2ggbXVzdCBiZSBwZXJzaXN0ZWQgYWNyb3NzIHBpcGVsaW5lIHJ1bnMuXG4gKi8gZXhwb3J0IHZhciBEb2NTdG9yZVN0cmF0ZWd5ID0gLyojX19QVVJFX18qLyBmdW5jdGlvbihEb2NTdG9yZVN0cmF0ZWd5KSB7XG4gICAgLy8gVXNlIHVwc2VydHMgdG8gaGFuZGxlIGR1cGxpY2F0ZXMuIENoZWNrcyBpZiB0aGUgYSBkb2N1bWVudCBpcyBhbHJlYWR5IGluIHRoZSBkb2Mgc3RvcmUgYmFzZWQgb24gaXRzIGlkLiBJZiBpdCBpcyBub3QsIG9yIGlmIHRoZSBoYXNoIG9mIHRoZSBkb2N1bWVudCBpcyB1cGRhdGVkLCBpdCB3aWxsIHVwZGF0ZSB0aGUgZG9jdW1lbnQgaW4gdGhlIGRvYyBzdG9yZSBhbmQgcnVuIHRoZSB0cmFuc2Zvcm1hdGlvbnMuXG4gICAgRG9jU3RvcmVTdHJhdGVneVtcIlVQU0VSVFNcIl0gPSBcInVwc2VydHNcIjtcbiAgICAvLyBPbmx5IGhhbmRsZSBkdXBsaWNhdGVzLiBDaGVja3MgaWYgdGhlIGhhc2ggb2YgYSBkb2N1bWVudCBpcyBhbHJlYWR5IGluIHRoZSBkb2Mgc3RvcmUuIE9ubHkgdGhlbiBpdCB3aWxsIGFkZCB0aGUgZG9jdW1lbnQgdG8gdGhlIGRvYyBzdG9yZSBhbmQgcnVuIHRoZSB0cmFuc2Zvcm1hdGlvbnNcbiAgICBEb2NTdG9yZVN0cmF0ZWd5W1wiRFVQTElDQVRFU19PTkxZXCJdID0gXCJkdXBsaWNhdGVzX29ubHlcIjtcbiAgICAvLyBVc2UgdXBzZXJ0cyBhbmQgZGVsZXRlIHRvIGhhbmRsZSBkdXBsaWNhdGVzLiBMaWtlIHRoZSB1cHNlcnQgc3RyYXRlZ3kgYnV0IGl0IHdpbGwgYWxzbyBkZWxldGUgbm9uLWV4aXN0aW5nIGRvY3VtZW50cyBmcm9tIHRoZSBkb2Mgc3RvcmVcbiAgICBEb2NTdG9yZVN0cmF0ZWd5W1wiVVBTRVJUU19BTkRfREVMRVRFXCJdID0gXCJ1cHNlcnRzX2FuZF9kZWxldGVcIjtcbiAgICBEb2NTdG9yZVN0cmF0ZWd5W1wiTk9ORVwiXSA9IFwibm9uZVwiO1xuICAgIHJldHVybiBEb2NTdG9yZVN0cmF0ZWd5O1xufSh7fSk7XG5jbGFzcyBOb09wU3RyYXRlZ3kgZXh0ZW5kcyBSb2xsYmFja2FibGVUcmFuc2Zvcm1Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKGFzeW5jIChub2Rlcyk9Pm5vZGVzKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRG9jU3RvcmVTdHJhdGVneShkb2NTdG9yZVN0cmF0ZWd5LCBkb2NTdG9yZSwgdmVjdG9yU3RvcmVzID0gW10pIHtcbiAgICBpZiAoZG9jU3RvcmVTdHJhdGVneSA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb09wU3RyYXRlZ3koKTtcbiAgICB9XG4gICAgaWYgKCFkb2NTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkb2NTdG9yZSBpcyByZXF1aXJlZCB0byBjcmVhdGUgYSBkb2Mgc3RvcmUgc3RyYXRlZ3kuXCIpO1xuICAgIH1cbiAgICBpZiAodmVjdG9yU3RvcmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKGRvY1N0b3JlU3RyYXRlZ3kgPT09IFwidXBzZXJ0c1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVwc2VydHNTdHJhdGVneShkb2NTdG9yZSwgdmVjdG9yU3RvcmVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2NTdG9yZVN0cmF0ZWd5ID09PSBcInVwc2VydHNfYW5kX2RlbGV0ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVwc2VydHNBbmREZWxldGVTdHJhdGVneShkb2NTdG9yZSwgdmVjdG9yU3RvcmVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChkb2NTdG9yZVN0cmF0ZWd5ID09PSBcImR1cGxpY2F0ZXNfb25seVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IER1cGxpY2F0ZXNTdHJhdGVneShkb2NTdG9yZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZG9jc3RvcmUgc3RyYXRlZ3k6ICR7ZG9jU3RvcmVTdHJhdGVneX1gKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkb2NTdG9yZVN0cmF0ZWd5ID09PSBcInVwc2VydHNcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRG9jc3RvcmUgc3RyYXRlZ3kgc2V0IHRvIHVwc2VydHMsIGJ1dCBubyB2ZWN0b3Igc3RvcmUuIFN3aXRjaGluZyB0byBkdXBsaWNhdGVzX29ubHkgc3RyYXRlZ3kuXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGRvY1N0b3JlU3RyYXRlZ3kgPT09IFwidXBzZXJ0c19hbmRfZGVsZXRlXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRvY3N0b3JlIHN0cmF0ZWd5IHNldCB0byB1cHNlcnRzIGFuZCBkZWxldGUsIGJ1dCBubyB2ZWN0b3Igc3RvcmUuIFN3aXRjaGluZyB0byBkdXBsaWNhdGVzX29ubHkgc3RyYXRlZ3kuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRHVwbGljYXRlc1N0cmF0ZWd5KGRvY1N0b3JlKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/rollback.js":
/*!***********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/ingestion/strategies/rollback.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RollbackableTransformComponent: () => (/* binding */ RollbackableTransformComponent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _classify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classify.js */ \"(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/classify.js\");\n\n\nclass RollbackableTransformComponent extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.TransformComponent {\n    // Remove unused docs from the doc store. It is useful in case\n    // generating embeddings fails and we want to remove the unused docs\n    // TODO: override this in UpsertsStrategy if we want to revert removed docs also\n    async rollback(docStore, nodes) {\n        const { unusedDocs } = await (0,_classify_js__WEBPACK_IMPORTED_MODULE_1__.classify)(docStore, nodes);\n        for (const docId of unusedDocs){\n            await docStore.deleteDocument(docId, false);\n        }\n        docStore.persist();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL3JvbGxiYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDtBQUNwQjtBQUNsQyw2Q0FBNkMsdUVBQWtCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWEsUUFBUSxzREFBUTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2luZ2VzdGlvbi9zdHJhdGVnaWVzL3JvbGxiYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3NjaGVtYVwiO1xuaW1wb3J0IHsgY2xhc3NpZnkgfSBmcm9tIFwiLi9jbGFzc2lmeS5qc1wiO1xuZXhwb3J0IGNsYXNzIFJvbGxiYWNrYWJsZVRyYW5zZm9ybUNvbXBvbmVudCBleHRlbmRzIFRyYW5zZm9ybUNvbXBvbmVudCB7XG4gICAgLy8gUmVtb3ZlIHVudXNlZCBkb2NzIGZyb20gdGhlIGRvYyBzdG9yZS4gSXQgaXMgdXNlZnVsIGluIGNhc2VcbiAgICAvLyBnZW5lcmF0aW5nIGVtYmVkZGluZ3MgZmFpbHMgYW5kIHdlIHdhbnQgdG8gcmVtb3ZlIHRoZSB1bnVzZWQgZG9jc1xuICAgIC8vIFRPRE86IG92ZXJyaWRlIHRoaXMgaW4gVXBzZXJ0c1N0cmF0ZWd5IGlmIHdlIHdhbnQgdG8gcmV2ZXJ0IHJlbW92ZWQgZG9jcyBhbHNvXG4gICAgYXN5bmMgcm9sbGJhY2soZG9jU3RvcmUsIG5vZGVzKSB7XG4gICAgICAgIGNvbnN0IHsgdW51c2VkRG9jcyB9ID0gYXdhaXQgY2xhc3NpZnkoZG9jU3RvcmUsIG5vZGVzKTtcbiAgICAgICAgZm9yIChjb25zdCBkb2NJZCBvZiB1bnVzZWREb2NzKXtcbiAgICAgICAgICAgIGF3YWl0IGRvY1N0b3JlLmRlbGV0ZURvY3VtZW50KGRvY0lkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jU3RvcmUucGVyc2lzdCgpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/ingestion/strategies/rollback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/internal/deps/rake-modified.js":
/*!*********************************************************************!*\
  !*** ./node_modules/llamaindex/dist/internal/deps/rake-modified.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildStopWordRegex: () => (/* binding */ buildStopWordRegex),\n/* harmony export */   calculateWordScores: () => (/* binding */ calculateWordScores),\n/* harmony export */   countOccurances: () => (/* binding */ countOccurances),\n/* harmony export */   \"default\": () => (/* binding */ rake),\n/* harmony export */   generateCandidateKeywordScores: () => (/* binding */ generateCandidateKeywordScores),\n/* harmony export */   generateCandidateKeywords: () => (/* binding */ generateCandidateKeywords),\n/* harmony export */   isAcceptable: () => (/* binding */ isAcceptable),\n/* harmony export */   loadStopWords: () => (/* binding */ loadStopWords),\n/* harmony export */   separateWords: () => (/* binding */ separateWords),\n/* harmony export */   splitSentences: () => (/* binding */ splitSentences)\n/* harmony export */ });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"(rsc)/./node_modules/lodash/lodash.js\");\n// generate from \"tsup ./src/index.js --format esm\"\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\n// src/stopwords.js\nvar require_stopwords = __commonJS({\n    \"src/stopwords.js\" (exports, module) {\n        \"use strict\";\n        module.exports = {\n            stopwords: [\n                \"a\",\n                \"about\",\n                \"above\",\n                \"across\",\n                \"after\",\n                \"again\",\n                \"against\",\n                \"all\",\n                \"almost\",\n                \"alone\",\n                \"along\",\n                \"already\",\n                \"also\",\n                \"although\",\n                \"always\",\n                \"among\",\n                \"an\",\n                \"and\",\n                \"another\",\n                \"any\",\n                \"anybody\",\n                \"anyone\",\n                \"anything\",\n                \"anywhere\",\n                \"are\",\n                \"area\",\n                \"areas\",\n                \"around\",\n                \"as\",\n                \"ask\",\n                \"asked\",\n                \"asking\",\n                \"asks\",\n                \"at\",\n                \"away\",\n                \"b\",\n                \"back\",\n                \"backed\",\n                \"backing\",\n                \"backs\",\n                \"be\",\n                \"because\",\n                \"become\",\n                \"becomes\",\n                \"became\",\n                \"been\",\n                \"before\",\n                \"began\",\n                \"behind\",\n                \"being\",\n                \"beings\",\n                \"best\",\n                \"better\",\n                \"between\",\n                \"big\",\n                \"both\",\n                \"but\",\n                \"by\",\n                \"c\",\n                \"came\",\n                \"can\",\n                \"cannot\",\n                \"case\",\n                \"cases\",\n                \"certain\",\n                \"certainly\",\n                \"clear\",\n                \"clearly\",\n                \"come\",\n                \"contains\",\n                \"could\",\n                \"d\",\n                \"did\",\n                \"differ\",\n                \"different\",\n                \"differently\",\n                \"do\",\n                \"does\",\n                \"done\",\n                \"down\",\n                \"downed\",\n                \"downing\",\n                \"downs\",\n                \"during\",\n                \"e\",\n                \"each\",\n                \"early\",\n                \"either\",\n                \"end\",\n                \"ended\",\n                \"ending\",\n                \"ends\",\n                \"enough\",\n                \"even\",\n                \"evenly\",\n                \"ever\",\n                \"every\",\n                \"everybody\",\n                \"everyone\",\n                \"everything\",\n                \"everywhere\",\n                \"f\",\n                \"face\",\n                \"faces\",\n                \"fact\",\n                \"facts\",\n                \"far\",\n                \"felt\",\n                \"few\",\n                \"find\",\n                \"finds\",\n                \"first\",\n                \"for\",\n                \"four\",\n                \"from\",\n                \"full\",\n                \"fully\",\n                \"further\",\n                \"furthered\",\n                \"furthering\",\n                \"furthers\",\n                \"g\",\n                \"gave\",\n                \"general\",\n                \"generally\",\n                \"get\",\n                \"gets\",\n                \"give\",\n                \"given\",\n                \"gives\",\n                \"go\",\n                \"going\",\n                \"good\",\n                \"goods\",\n                \"got\",\n                \"great\",\n                \"greater\",\n                \"greatest\",\n                \"group\",\n                \"grouped\",\n                \"grouping\",\n                \"groups\",\n                \"h\",\n                \"had\",\n                \"has\",\n                \"have\",\n                \"having\",\n                \"he\",\n                \"her\",\n                \"herself\",\n                \"here\",\n                \"high\",\n                \"higher\",\n                \"highest\",\n                \"him\",\n                \"himself\",\n                \"his\",\n                \"how\",\n                \"however\",\n                \"i\",\n                \"if\",\n                \"important\",\n                \"in\",\n                \"interest\",\n                \"interested\",\n                \"interesting\",\n                \"interests\",\n                \"into\",\n                \"is\",\n                \"it\",\n                \"its\",\n                \"itself\",\n                \"j\",\n                \"just\",\n                \"k\",\n                \"keep\",\n                \"keeps\",\n                \"kind\",\n                \"knew\",\n                \"know\",\n                \"known\",\n                \"knows\",\n                \"l\",\n                \"large\",\n                \"largely\",\n                \"last\",\n                \"later\",\n                \"latest\",\n                \"least\",\n                \"less\",\n                \"let\",\n                \"lets\",\n                \"like\",\n                \"likely\",\n                \"long\",\n                \"longer\",\n                \"longest\",\n                \"m\",\n                \"made\",\n                \"make\",\n                \"making\",\n                \"man\",\n                \"many\",\n                \"may\",\n                \"me\",\n                \"member\",\n                \"members\",\n                \"men\",\n                \"might\",\n                \"more\",\n                \"most\",\n                \"mostly\",\n                \"mr\",\n                \"mrs\",\n                \"much\",\n                \"must\",\n                \"my\",\n                \"myself\",\n                \"n\",\n                \"necessary\",\n                \"need\",\n                \"needed\",\n                \"needing\",\n                \"needs\",\n                \"never\",\n                \"new\",\n                \"newer\",\n                \"newest\",\n                \"next\",\n                \"no\",\n                \"non\",\n                \"not\",\n                \"nobody\",\n                \"noone\",\n                \"nothing\",\n                \"now\",\n                \"nowhere\",\n                \"number\",\n                \"numbers\",\n                \"o\",\n                \"of\",\n                \"off\",\n                \"often\",\n                \"old\",\n                \"older\",\n                \"oldest\",\n                \"on\",\n                \"once\",\n                \"one\",\n                \"only\",\n                \"open\",\n                \"opened\",\n                \"opening\",\n                \"opens\",\n                \"or\",\n                \"order\",\n                \"ordered\",\n                \"ordering\",\n                \"orders\",\n                \"other\",\n                \"others\",\n                \"our\",\n                \"out\",\n                \"over\",\n                \"p\",\n                \"part\",\n                \"parted\",\n                \"parting\",\n                \"parts\",\n                \"per\",\n                \"perhaps\",\n                \"place\",\n                \"places\",\n                \"point\",\n                \"pointed\",\n                \"pointing\",\n                \"points\",\n                \"possible\",\n                \"present\",\n                \"presented\",\n                \"presenting\",\n                \"presents\",\n                \"problem\",\n                \"problems\",\n                \"put\",\n                \"puts\",\n                \"q\",\n                \"quite\",\n                \"r\",\n                \"rather\",\n                \"really\",\n                \"right\",\n                \"room\",\n                \"rooms\",\n                \"s\",\n                \"said\",\n                \"same\",\n                \"saw\",\n                \"say\",\n                \"says\",\n                \"second\",\n                \"seconds\",\n                \"see\",\n                \"sees\",\n                \"seem\",\n                \"seemed\",\n                \"seeming\",\n                \"seems\",\n                \"several\",\n                \"shall\",\n                \"she\",\n                \"should\",\n                \"show\",\n                \"showed\",\n                \"showing\",\n                \"shows\",\n                \"side\",\n                \"sides\",\n                \"since\",\n                \"small\",\n                \"smaller\",\n                \"smallest\",\n                \"so\",\n                \"some\",\n                \"somebody\",\n                \"someone\",\n                \"something\",\n                \"somewhere\",\n                \"state\",\n                \"states\",\n                \"still\",\n                \"such\",\n                \"sure\",\n                \"t\",\n                \"take\",\n                \"taken\",\n                \"than\",\n                \"that\",\n                \"the\",\n                \"their\",\n                \"them\",\n                \"then\",\n                \"there\",\n                \"therefore\",\n                \"these\",\n                \"they\",\n                \"thing\",\n                \"things\",\n                \"think\",\n                \"thinks\",\n                \"this\",\n                \"those\",\n                \"though\",\n                \"thought\",\n                \"thoughts\",\n                \"three\",\n                \"through\",\n                \"thus\",\n                \"to\",\n                \"today\",\n                \"together\",\n                \"too\",\n                \"took\",\n                \"toward\",\n                \"turn\",\n                \"turned\",\n                \"turning\",\n                \"turns\",\n                \"two\",\n                \"u\",\n                \"under\",\n                \"until\",\n                \"up\",\n                \"upon\",\n                \"us\",\n                \"use\",\n                \"uses\",\n                \"used\",\n                \"v\",\n                \"very\",\n                \"w\",\n                \"want\",\n                \"wanted\",\n                \"wanting\",\n                \"wants\",\n                \"was\",\n                \"way\",\n                \"ways\",\n                \"we\",\n                \"well\",\n                \"wells\",\n                \"went\",\n                \"were\",\n                \"what\",\n                \"when\",\n                \"where\",\n                \"whether\",\n                \"which\",\n                \"while\",\n                \"who\",\n                \"whole\",\n                \"whose\",\n                \"why\",\n                \"will\",\n                \"with\",\n                \"within\",\n                \"without\",\n                \"work\",\n                \"worked\",\n                \"working\",\n                \"works\",\n                \"would\",\n                \"y\",\n                \"year\",\n                \"years\",\n                \"yet\",\n                \"you\",\n                \"young\",\n                \"younger\",\n                \"youngest\",\n                \"your\",\n                \"yours\",\n                \"eoc\",\n                \"mu\",\n                \"sigma\",\n                \"mu sigma\",\n                \"musigma\",\n                \"client\",\n                \"clients\",\n                \"capabilities\",\n                \"capability\",\n                \"firm\",\n                \"firms\",\n                \"biggest\",\n                \"-\"\n            ]\n        };\n    }\n});\n// src/index.js\n\nconst { fromPairs, sortBy, toPairs } = lodash__WEBPACK_IMPORTED_MODULE_0__;\nvar stopwords = require_stopwords();\nfunction isNumber(str) {\n    return /\\d/.test(str);\n}\nfunction isAcceptable(phrase, minCharLength, maxWordsLength) {\n    if (phrase < minCharLength) {\n        return false;\n    }\n    let words = phrase.split(\" \");\n    if (words.length > maxWordsLength) {\n        return false;\n    }\n    let digits = 0;\n    let alpha = 0;\n    for(let i = 0; i < phrase.length; i++){\n        if (/\\d/.test(phrase[i])) digits += 1;\n        if (/[a-zA-Z]/.test(phrase[i])) alpha += 1;\n    }\n    if (alpha == 0) {\n        return false;\n    }\n    if (digits > alpha) {\n        return false;\n    }\n    return true;\n}\nfunction countOccurances(haystack, needle) {\n    return haystack.reduce((n, value)=>{\n        return n + (value === needle);\n    }, 0);\n}\nfunction generateCandidateKeywordScores(phraseList, wordScore, minKeywordFrequency = 1) {\n    let keywordCandidates = {};\n    phraseList.forEach((phrase)=>{\n        if (minKeywordFrequency > 1) {\n            if (countOccurances(phraseList, phrase) < minKeywordFrequency) {\n                return;\n            }\n        }\n        phrase in keywordCandidates || (keywordCandidates[phrase] = 0);\n        let wordList = separateWords(phrase, 0);\n        let candidateScore = 0;\n        wordList.forEach((word)=>{\n            candidateScore += wordScore[word];\n            keywordCandidates[phrase] = candidateScore;\n        });\n    });\n    return keywordCandidates;\n}\nfunction separateWords(text, minWordReturnSize) {\n    let wordDelimiters = /[^a-zA-Z0-9_\\+\\-/]/;\n    let words = [];\n    text.split(wordDelimiters).forEach((singleWord)=>{\n        let currentWord = singleWord.trim().toLowerCase();\n        if (currentWord.length > minWordReturnSize && currentWord != \"\" && !isNumber(currentWord)) {\n            words.push(currentWord);\n        }\n    });\n    return words;\n}\nfunction calculateWordScores(phraseList) {\n    let wordFrequency = {};\n    let wordDegree = {};\n    phraseList.forEach((phrase)=>{\n        let wordList = separateWords(phrase, 0);\n        let wordListLength = wordList.length;\n        let wordListDegree = wordListLength - 1;\n        wordList.forEach((word)=>{\n            word in wordFrequency || (wordFrequency[word] = 0);\n            wordFrequency[word] += 1;\n            word in wordDegree || (wordDegree[word] = 0);\n            wordDegree[word] += wordListDegree;\n        });\n    });\n    Object.keys(wordFrequency).forEach((item)=>{\n        wordDegree[item] = wordDegree[item] + wordFrequency[item];\n    });\n    let wordScore = {};\n    Object.keys(wordFrequency).forEach((item)=>{\n        item in wordScore || (wordScore[item] = 0);\n        wordScore[item] = wordDegree[item] / (wordFrequency[item] * 1);\n    });\n    return wordScore;\n}\nfunction generateCandidateKeywords(sentenceList, stopWordPattern, minCharLength = 1, maxWordsLength = 5) {\n    let phraseList = [];\n    sentenceList.forEach((sentence)=>{\n        let tmp = stopWordPattern[Symbol.replace](sentence, \"|\");\n        let phrases = tmp.split(\"|\");\n        phrases.forEach((ph)=>{\n            let phrase = ph.trim().toLowerCase();\n            if (phrase != \"\" && isAcceptable(phrase, minCharLength, maxWordsLength)) {\n                phraseList.push(phrase);\n            } else {}\n        });\n    });\n    return phraseList;\n}\nfunction buildStopWordRegex(path) {\n    let stopWordList = loadStopWords(path);\n    let stopWordRegexList = [];\n    stopWordList.forEach((word)=>{\n        if (/\\w+/.test(word)) {\n            let wordRegex = `\\\\b${word}\\\\b`;\n            stopWordRegexList.push(wordRegex);\n        }\n    });\n    let stopWordPattern = new RegExp(stopWordRegexList.join(\"|\"), \"ig\");\n    return stopWordPattern;\n}\nfunction splitSentences(text) {\n    let sentenceDelimiters = /[\\[\\]\\n.!?,;:\\t\\\\-\\\\\"\\\\(\\\\)\\\\\\'\\u2019\\u2013]/;\n    return text.split(sentenceDelimiters);\n}\nfunction loadStopWords(path) {\n    let contents = stopwords.stopwords;\n    return contents;\n}\nfunction rake(text, stopWordsPath, minCharLength = 3, maxWordsLength = 5, minKeywordFrequency = 1) {\n    let stopWordPattern = buildStopWordRegex(stopWordsPath);\n    let sentenceList = splitSentences(text);\n    let phraseList = generateCandidateKeywords(sentenceList, stopWordPattern, minCharLength, maxWordsLength);\n    let wordScores = calculateWordScores(phraseList);\n    let keywordCandidates = generateCandidateKeywordScores(phraseList, wordScores, minKeywordFrequency);\n    let sortedKeywords = fromPairs(sortBy(toPairs(keywordCandidates), (pair)=>pair[1]).reverse());\n    return sortedKeywords;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/internal/deps/rake-modified.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/internal/prompt/react.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/internal/prompt/react.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getReACTAgentSystemHeader: () => (/* binding */ getReACTAgentSystemHeader)\n/* harmony export */ });\nconst getReACTAgentSystemHeader = (tools)=>{\n    const description = tools.map((tool)=>`- ${tool.metadata.name}: ${tool.metadata.description} with schema: ${JSON.stringify(tool.metadata.parameters)}`).join(\"\\n\");\n    const names = tools.map((tool)=>tool.metadata.name).join(\", \");\n    return `You are designed to help with a variety of tasks, from answering questions to providing summaries to other types of analyses.\n\n## Tools\nYou have access to a wide variety of tools. You are responsible for using\nthe tools in any sequence you deem appropriate to complete the task at hand.\nThis may require breaking the task into subtasks and using different tools\nto complete each subtask.\n\nYou have access to the following tools:\n${description}\n\n## Output Format\nTo answer the question, please use the following format.\n\n\"\"\"\nThought: I need to use a tool to help me answer the question.\nAction: tool name (one of ${names}) if using a tool.\nAction Input: the input to the tool, in a JSON format representing the kwargs (e.g. {{\"input\": \"hello world\", \"num_beams\": 5}})\n\"\"\"\n\nPlease ALWAYS start with a Thought.\n\nPlease use a valid JSON format for the Action Input. Do NOT do this {{'input': 'hello world', 'num_beams': 5}}.\n\nIf this format is used, the user will respond in the following format:\n\n\"\"\"\"\nObservation: tool response\n\"\"\"\"\n\nYou should keep repeating the above format until you have enough information\nto answer the question without using any more tools. At that point, you MUST respond\nin the one of the following two formats:\n\n\"\"\"\"\nThought: I can answer without using any more tools.\nAnswer: [your answer here]\n\"\"\"\"\n\n\"\"\"\"\nThought: I cannot answer the question with the provided tools.\nAnswer: Sorry, I cannot answer your query.\n\"\"\"\"\n\n## Current Conversation\nBelow is the current conversation consisting of interleaving human and assistant messages.`;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2ludGVybmFsL3Byb21wdC9yZWFjdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUCwrQ0FBK0MsbUJBQW1CLElBQUksMkJBQTJCLGVBQWUseUNBQXlDO0FBQ3pKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCLE1BQU07QUFDbEMsc0ZBQXNGLHdDQUF3QztBQUM5SDs7QUFFQTs7QUFFQSxzRUFBc0Usd0NBQXdDOztBQUU5Rzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvaW50ZXJuYWwvcHJvbXB0L3JlYWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBnZXRSZUFDVEFnZW50U3lzdGVtSGVhZGVyID0gKHRvb2xzKT0+e1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdG9vbHMubWFwKCh0b29sKT0+YC0gJHt0b29sLm1ldGFkYXRhLm5hbWV9OiAke3Rvb2wubWV0YWRhdGEuZGVzY3JpcHRpb259IHdpdGggc2NoZW1hOiAke0pTT04uc3RyaW5naWZ5KHRvb2wubWV0YWRhdGEucGFyYW1ldGVycyl9YCkuam9pbihcIlxcblwiKTtcbiAgICBjb25zdCBuYW1lcyA9IHRvb2xzLm1hcCgodG9vbCk9PnRvb2wubWV0YWRhdGEubmFtZSkuam9pbihcIiwgXCIpO1xuICAgIHJldHVybiBgWW91IGFyZSBkZXNpZ25lZCB0byBoZWxwIHdpdGggYSB2YXJpZXR5IG9mIHRhc2tzLCBmcm9tIGFuc3dlcmluZyBxdWVzdGlvbnMgdG8gcHJvdmlkaW5nIHN1bW1hcmllcyB0byBvdGhlciB0eXBlcyBvZiBhbmFseXNlcy5cblxuIyMgVG9vbHNcbllvdSBoYXZlIGFjY2VzcyB0byBhIHdpZGUgdmFyaWV0eSBvZiB0b29scy4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgdXNpbmdcbnRoZSB0b29scyBpbiBhbnkgc2VxdWVuY2UgeW91IGRlZW0gYXBwcm9wcmlhdGUgdG8gY29tcGxldGUgdGhlIHRhc2sgYXQgaGFuZC5cblRoaXMgbWF5IHJlcXVpcmUgYnJlYWtpbmcgdGhlIHRhc2sgaW50byBzdWJ0YXNrcyBhbmQgdXNpbmcgZGlmZmVyZW50IHRvb2xzXG50byBjb21wbGV0ZSBlYWNoIHN1YnRhc2suXG5cbllvdSBoYXZlIGFjY2VzcyB0byB0aGUgZm9sbG93aW5nIHRvb2xzOlxuJHtkZXNjcmlwdGlvbn1cblxuIyMgT3V0cHV0IEZvcm1hdFxuVG8gYW5zd2VyIHRoZSBxdWVzdGlvbiwgcGxlYXNlIHVzZSB0aGUgZm9sbG93aW5nIGZvcm1hdC5cblxuXCJcIlwiXG5UaG91Z2h0OiBJIG5lZWQgdG8gdXNlIGEgdG9vbCB0byBoZWxwIG1lIGFuc3dlciB0aGUgcXVlc3Rpb24uXG5BY3Rpb246IHRvb2wgbmFtZSAob25lIG9mICR7bmFtZXN9KSBpZiB1c2luZyBhIHRvb2wuXG5BY3Rpb24gSW5wdXQ6IHRoZSBpbnB1dCB0byB0aGUgdG9vbCwgaW4gYSBKU09OIGZvcm1hdCByZXByZXNlbnRpbmcgdGhlIGt3YXJncyAoZS5nLiB7e1wiaW5wdXRcIjogXCJoZWxsbyB3b3JsZFwiLCBcIm51bV9iZWFtc1wiOiA1fX0pXG5cIlwiXCJcblxuUGxlYXNlIEFMV0FZUyBzdGFydCB3aXRoIGEgVGhvdWdodC5cblxuUGxlYXNlIHVzZSBhIHZhbGlkIEpTT04gZm9ybWF0IGZvciB0aGUgQWN0aW9uIElucHV0LiBEbyBOT1QgZG8gdGhpcyB7eydpbnB1dCc6ICdoZWxsbyB3b3JsZCcsICdudW1fYmVhbXMnOiA1fX0uXG5cbklmIHRoaXMgZm9ybWF0IGlzIHVzZWQsIHRoZSB1c2VyIHdpbGwgcmVzcG9uZCBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDpcblxuXCJcIlwiXCJcbk9ic2VydmF0aW9uOiB0b29sIHJlc3BvbnNlXG5cIlwiXCJcIlxuXG5Zb3Ugc2hvdWxkIGtlZXAgcmVwZWF0aW5nIHRoZSBhYm92ZSBmb3JtYXQgdW50aWwgeW91IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uXG50byBhbnN3ZXIgdGhlIHF1ZXN0aW9uIHdpdGhvdXQgdXNpbmcgYW55IG1vcmUgdG9vbHMuIEF0IHRoYXQgcG9pbnQsIHlvdSBNVVNUIHJlc3BvbmRcbmluIHRoZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gZm9ybWF0czpcblxuXCJcIlwiXCJcblRob3VnaHQ6IEkgY2FuIGFuc3dlciB3aXRob3V0IHVzaW5nIGFueSBtb3JlIHRvb2xzLlxuQW5zd2VyOiBbeW91ciBhbnN3ZXIgaGVyZV1cblwiXCJcIlwiXG5cblwiXCJcIlwiXG5UaG91Z2h0OiBJIGNhbm5vdCBhbnN3ZXIgdGhlIHF1ZXN0aW9uIHdpdGggdGhlIHByb3ZpZGVkIHRvb2xzLlxuQW5zd2VyOiBTb3JyeSwgSSBjYW5ub3QgYW5zd2VyIHlvdXIgcXVlcnkuXG5cIlwiXCJcIlxuXG4jIyBDdXJyZW50IENvbnZlcnNhdGlvblxuQmVsb3cgaXMgdGhlIGN1cnJlbnQgY29udmVyc2F0aW9uIGNvbnNpc3Rpbmcgb2YgaW50ZXJsZWF2aW5nIGh1bWFuIGFuZCBhc3Npc3RhbnQgbWVzc2FnZXMuYDtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/internal/prompt/react.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/internal/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/llamaindex/dist/internal/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imageToDataUrl: () => (/* binding */ imageToDataUrl),\n/* harmony export */   imageToString: () => (/* binding */ imageToString),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),\n/* harmony export */   stringToImage: () => (/* binding */ stringToImage)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! magic-bytes.js */ \"(rsc)/./node_modules/magic-bytes.js/dist/index.js\");\n\n\nconst isAsyncIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.asyncIterator in obj;\n};\nconst isReadableStream = (obj)=>{\n    return obj instanceof ReadableStream;\n};\nconst isIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.iterator in obj;\n};\nasync function blobToDataUrl(input) {\n    const buffer = Buffer.from(await input.arrayBuffer());\n    const mimes = (0,magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__.filetypemime)(buffer);\n    if (mimes.length < 1) {\n        throw new Error(\"Unsupported image type\");\n    }\n    return \"data:\" + mimes[0] + \";base64,\" + buffer.toString(\"base64\");\n}\nasync function imageToString(input) {\n    if (input instanceof Blob) {\n        // if the image is a Blob, convert it to a base64 data URL\n        return await blobToDataUrl(input);\n    } else if (typeof input === \"string\") {\n        return input;\n    } else if (input instanceof URL) {\n        return input.toString();\n    } else {\n        throw new Error(`Unsupported input type: ${typeof input}`);\n    }\n}\nfunction stringToImage(input) {\n    if (input.startsWith(\"data:\")) {\n        // if the input is a base64 data URL, convert it back to a Blob\n        const base64Data = input.split(\",\")[1];\n        const byteArray = Buffer.from(base64Data, \"base64\");\n        return new Blob([\n            byteArray\n        ]);\n    } else if (input.startsWith(\"http://\") || input.startsWith(\"https://\")) {\n        return new URL(input);\n    } else {\n        return input;\n    }\n}\nasync function imageToDataUrl(input) {\n    // first ensure, that the input is a Blob\n    if (input instanceof URL && input.protocol === \"file:\" || typeof input === \"string\") {\n        // string or file URL\n        const dataBuffer = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(input instanceof URL ? input.pathname : input);\n        input = new Blob([\n            dataBuffer\n        ]);\n    } else if (!(input instanceof Blob)) {\n        if (input instanceof URL) {\n            throw new Error(`Unsupported URL with protocol: ${input.protocol}`);\n        } else if (input instanceof Uint8Array) {\n            input = new Blob([\n                input\n            ]); // convert Uint8Array to Blob\n        } else {\n            throw new Error(`Unsupported input type: ${typeof input}`);\n        }\n    }\n    return await blobToDataUrl(input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2ludGVybmFsL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ1M7QUFDdkM7QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw0REFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTixtREFBbUQsYUFBYTtBQUNoRTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywrQ0FBRTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSw4REFBOEQsZUFBZTtBQUM3RSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixVQUFVO0FBQ1YsdURBQXVELGFBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L2ludGVybmFsL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSBcIkBsbGFtYWluZGV4L2VudlwiO1xuaW1wb3J0IHsgZmlsZXR5cGVtaW1lIH0gZnJvbSBcIm1hZ2ljLWJ5dGVzLmpzXCI7XG5leHBvcnQgY29uc3QgaXNBc3luY0l0ZXJhYmxlID0gKG9iaik9PntcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvciBpbiBvYmo7XG59O1xuZXhwb3J0IGNvbnN0IGlzUmVhZGFibGVTdHJlYW0gPSAob2JqKT0+e1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbTtcbn07XG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZSA9IChvYmopPT57XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIG9iajtcbn07XG5hc3luYyBmdW5jdGlvbiBibG9iVG9EYXRhVXJsKGlucHV0KSB7XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oYXdhaXQgaW5wdXQuYXJyYXlCdWZmZXIoKSk7XG4gICAgY29uc3QgbWltZXMgPSBmaWxldHlwZW1pbWUoYnVmZmVyKTtcbiAgICBpZiAobWltZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBpbWFnZSB0eXBlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gXCJkYXRhOlwiICsgbWltZXNbMF0gKyBcIjtiYXNlNjQsXCIgKyBidWZmZXIudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1hZ2VUb1N0cmluZyhpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgLy8gaWYgdGhlIGltYWdlIGlzIGEgQmxvYiwgY29udmVydCBpdCB0byBhIGJhc2U2NCBkYXRhIFVSTFxuICAgICAgICByZXR1cm4gYXdhaXQgYmxvYlRvRGF0YVVybChpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBpbnB1dCB0eXBlOiAke3R5cGVvZiBpbnB1dH1gKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9JbWFnZShpbnB1dCkge1xuICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFwiZGF0YTpcIikpIHtcbiAgICAgICAgLy8gaWYgdGhlIGlucHV0IGlzIGEgYmFzZTY0IGRhdGEgVVJMLCBjb252ZXJ0IGl0IGJhY2sgdG8gYSBCbG9iXG4gICAgICAgIGNvbnN0IGJhc2U2NERhdGEgPSBpbnB1dC5zcGxpdChcIixcIilbMV07XG4gICAgICAgIGNvbnN0IGJ5dGVBcnJheSA9IEJ1ZmZlci5mcm9tKGJhc2U2NERhdGEsIFwiYmFzZTY0XCIpO1xuICAgICAgICByZXR1cm4gbmV3IEJsb2IoW1xuICAgICAgICAgICAgYnl0ZUFycmF5XG4gICAgICAgIF0pO1xuICAgIH0gZWxzZSBpZiAoaW5wdXQuc3RhcnRzV2l0aChcImh0dHA6Ly9cIikgfHwgaW5wdXQuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVVJMKGlucHV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltYWdlVG9EYXRhVXJsKGlucHV0KSB7XG4gICAgLy8gZmlyc3QgZW5zdXJlLCB0aGF0IHRoZSBpbnB1dCBpcyBhIEJsb2JcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBVUkwgJiYgaW5wdXQucHJvdG9jb2wgPT09IFwiZmlsZTpcIiB8fCB0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gc3RyaW5nIG9yIGZpbGUgVVJMXG4gICAgICAgIGNvbnN0IGRhdGFCdWZmZXIgPSBhd2FpdCBmcy5yZWFkRmlsZShpbnB1dCBpbnN0YW5jZW9mIFVSTCA/IGlucHV0LnBhdGhuYW1lIDogaW5wdXQpO1xuICAgICAgICBpbnB1dCA9IG5ldyBCbG9iKFtcbiAgICAgICAgICAgIGRhdGFCdWZmZXJcbiAgICAgICAgXSk7XG4gICAgfSBlbHNlIGlmICghKGlucHV0IGluc3RhbmNlb2YgQmxvYikpIHtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIFVSTCB3aXRoIHByb3RvY29sOiAke2lucHV0LnByb3RvY29sfWApO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgaW5wdXQgPSBuZXcgQmxvYihbXG4gICAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgIF0pOyAvLyBjb252ZXJ0IFVpbnQ4QXJyYXkgdG8gQmxvYlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBpbnB1dCB0eXBlOiAke3R5cGVvZiBpbnB1dH1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgYmxvYlRvRGF0YVVybChpbnB1dCk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/internal/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/node-parser.js":
/*!*****************************************************!*\
  !*** ./node_modules/llamaindex/dist/node-parser.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeSplitter: () => (/* reexport safe */ _llamaindex_node_parser_code__WEBPACK_IMPORTED_MODULE_1__.CodeSplitter),\n/* harmony export */   DEFAULT_MAX_CHARS: () => (/* reexport safe */ _llamaindex_node_parser_code__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_CHARS),\n/* harmony export */   HTMLNodeParser: () => (/* reexport safe */ _llamaindex_node_parser_html__WEBPACK_IMPORTED_MODULE_2__.HTMLNodeParser),\n/* harmony export */   MarkdownNodeParser: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.MarkdownNodeParser),\n/* harmony export */   MetadataAwareTextSplitter: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.MetadataAwareTextSplitter),\n/* harmony export */   NodeParser: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.NodeParser),\n/* harmony export */   SentenceSplitter: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.SentenceSplitter),\n/* harmony export */   SentenceWindowNodeParser: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.SentenceWindowNodeParser),\n/* harmony export */   SimpleNodeParser: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.SimpleNodeParser),\n/* harmony export */   TextSplitter: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.TokenTextSplitter),\n/* harmony export */   splitByChar: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.splitByChar),\n/* harmony export */   splitByPhraseRegex: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.splitByPhraseRegex),\n/* harmony export */   splitByRegex: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.splitByRegex),\n/* harmony export */   splitBySentenceTokenizer: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.splitBySentenceTokenizer),\n/* harmony export */   splitBySep: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.splitBySep),\n/* harmony export */   truncateText: () => (/* reexport safe */ _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.truncateText)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/node-parser */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js\");\n/* harmony import */ var _llamaindex_node_parser_code__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/node-parser/code */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/node-parser/code/dist/index.js\");\n/* harmony import */ var _llamaindex_node_parser_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/node-parser/html */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/node-parser/html/dist/index.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L25vZGUtcGFyc2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3Qvbm9kZS1wYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvbm9kZS1wYXJzZXJcIjtcbmV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9ub2RlLXBhcnNlci9jb2RlXCI7XG5leHBvcnQgKiBmcm9tIFwiQGxsYW1haW5kZXgvbm9kZS1wYXJzZXIvaHRtbFwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/node-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/objects/base.js":
/*!******************************************************!*\
  !*** ./node_modules/llamaindex/dist/objects/base.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectIndex: () => (/* binding */ ObjectIndex),\n/* harmony export */   SimpleToolNodeMapping: () => (/* binding */ SimpleToolNodeMapping)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_objects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/objects */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/objects/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\nconst convertToolToNode = (tool)=>{\n    const nodeText = `\n    Tool name: ${tool.metadata.name}\n    Tool description: ${tool.metadata.description}\n  `;\n    return new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.TextNode({\n        text: nodeText,\n        metadata: {\n            name: tool.metadata.name\n        },\n        excludedEmbedMetadataKeys: [\n            \"name\"\n        ],\n        excludedLlmMetadataKeys: [\n            \"name\"\n        ]\n    });\n};\nclass SimpleToolNodeMapping extends _llamaindex_core_objects__WEBPACK_IMPORTED_MODULE_0__.BaseObjectNodeMapping {\n    _tools;\n    constructor(objs = []){\n        super();\n        this._tools = {};\n        for (const tool of objs){\n            this._tools[tool.metadata.name] = tool;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    objNodeMapping() {\n        return this._tools;\n    }\n    toNode(tool) {\n        return convertToolToNode(tool);\n    }\n    _addObj(tool) {\n        this._tools[tool.metadata.name] = tool;\n    }\n    _fromNode(node) {\n        if (!node.metadata) {\n            throw new Error(\"Metadata must be set\");\n        }\n        return this._tools[node.metadata.name];\n    }\n    persist(persistDir, objNodeMappingFilename) {\n    // Implement the persist method\n    }\n    toNodes(objs) {\n        return objs.map((obj)=>this.toNode(obj));\n    }\n    addObj(obj) {\n        this._addObj(obj);\n    }\n    fromNode(node) {\n        return this._fromNode(node);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromObjects(objs, ...args) {\n        return new SimpleToolNodeMapping(objs);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fromObjects(objs, ...args) {\n        return new SimpleToolNodeMapping(objs);\n    }\n}\nclass ObjectIndex {\n    _index;\n    _objectNodeMapping;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(index, objectNodeMapping){\n        this._index = index;\n        this._objectNodeMapping = objectNodeMapping;\n    }\n    static async fromObjects(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    objects, objectMapping, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    indexCls, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    indexKwargs) {\n        if (objectMapping === null) {\n            objectMapping = SimpleToolNodeMapping.fromObjects(objects, {});\n        }\n        const nodes = objectMapping.toNodes(objects);\n        const index = await indexCls.init({\n            nodes,\n            ...indexKwargs\n        });\n        return new ObjectIndex(index, objectMapping);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async insertObject(obj) {\n        this._objectNodeMapping.addObj(obj);\n        const node = this._objectNodeMapping.toNode(obj);\n        await this._index.insertNodes([\n            node\n        ]);\n    }\n    get tools() {\n        return this._objectNodeMapping.objNodeMapping();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async asRetriever(kwargs) {\n        return new _llamaindex_core_objects__WEBPACK_IMPORTED_MODULE_0__.ObjectRetriever(this._index.asRetriever(kwargs), this._objectNodeMapping);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    asNodeRetriever(kwargs) {\n        return this._index.asRetriever(kwargs);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L29iamVjdHMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtGO0FBQy9CO0FBQ25EO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsd0JBQXdCO0FBQ3hCO0FBQ0EsZUFBZSw2REFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ08sb0NBQW9DLDJFQUFxQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxRUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L29iamVjdHMvYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlT2JqZWN0Tm9kZU1hcHBpbmcsIE9iamVjdFJldHJpZXZlciB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL29iamVjdHNcIjtcbmltcG9ydCB7IFRleHROb2RlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc2NoZW1hXCI7XG5jb25zdCBjb252ZXJ0VG9vbFRvTm9kZSA9ICh0b29sKT0+e1xuICAgIGNvbnN0IG5vZGVUZXh0ID0gYFxuICAgIFRvb2wgbmFtZTogJHt0b29sLm1ldGFkYXRhLm5hbWV9XG4gICAgVG9vbCBkZXNjcmlwdGlvbjogJHt0b29sLm1ldGFkYXRhLmRlc2NyaXB0aW9ufVxuICBgO1xuICAgIHJldHVybiBuZXcgVGV4dE5vZGUoe1xuICAgICAgICB0ZXh0OiBub2RlVGV4dCxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIG5hbWU6IHRvb2wubWV0YWRhdGEubmFtZVxuICAgICAgICB9LFxuICAgICAgICBleGNsdWRlZEVtYmVkTWV0YWRhdGFLZXlzOiBbXG4gICAgICAgICAgICBcIm5hbWVcIlxuICAgICAgICBdLFxuICAgICAgICBleGNsdWRlZExsbU1ldGFkYXRhS2V5czogW1xuICAgICAgICAgICAgXCJuYW1lXCJcbiAgICAgICAgXVxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBTaW1wbGVUb29sTm9kZU1hcHBpbmcgZXh0ZW5kcyBCYXNlT2JqZWN0Tm9kZU1hcHBpbmcge1xuICAgIF90b29scztcbiAgICBjb25zdHJ1Y3RvcihvYmpzID0gW10pe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl90b29scyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHRvb2wgb2Ygb2Jqcyl7XG4gICAgICAgICAgICB0aGlzLl90b29sc1t0b29sLm1ldGFkYXRhLm5hbWVdID0gdG9vbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIG9iak5vZGVNYXBwaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9vbHM7XG4gICAgfVxuICAgIHRvTm9kZSh0b29sKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJ0VG9vbFRvTm9kZSh0b29sKTtcbiAgICB9XG4gICAgX2FkZE9iaih0b29sKSB7XG4gICAgICAgIHRoaXMuX3Rvb2xzW3Rvb2wubWV0YWRhdGEubmFtZV0gPSB0b29sO1xuICAgIH1cbiAgICBfZnJvbU5vZGUobm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIG11c3QgYmUgc2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90b29sc1tub2RlLm1ldGFkYXRhLm5hbWVdO1xuICAgIH1cbiAgICBwZXJzaXN0KHBlcnNpc3REaXIsIG9iak5vZGVNYXBwaW5nRmlsZW5hbWUpIHtcbiAgICAvLyBJbXBsZW1lbnQgdGhlIHBlcnNpc3QgbWV0aG9kXG4gICAgfVxuICAgIHRvTm9kZXMob2Jqcykge1xuICAgICAgICByZXR1cm4gb2Jqcy5tYXAoKG9iaik9PnRoaXMudG9Ob2RlKG9iaikpO1xuICAgIH1cbiAgICBhZGRPYmoob2JqKSB7XG4gICAgICAgIHRoaXMuX2FkZE9iaihvYmopO1xuICAgIH1cbiAgICBmcm9tTm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcm9tTm9kZShub2RlKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBzdGF0aWMgZnJvbU9iamVjdHMob2JqcywgLi4uYXJncykge1xuICAgICAgICByZXR1cm4gbmV3IFNpbXBsZVRvb2xOb2RlTWFwcGluZyhvYmpzKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBmcm9tT2JqZWN0cyhvYmpzLCAuLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2ltcGxlVG9vbE5vZGVNYXBwaW5nKG9ianMpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBPYmplY3RJbmRleCB7XG4gICAgX2luZGV4O1xuICAgIF9vYmplY3ROb2RlTWFwcGluZztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0cnVjdG9yKGluZGV4LCBvYmplY3ROb2RlTWFwcGluZyl7XG4gICAgICAgIHRoaXMuX2luZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuX29iamVjdE5vZGVNYXBwaW5nID0gb2JqZWN0Tm9kZU1hcHBpbmc7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBmcm9tT2JqZWN0cygvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIG9iamVjdHMsIG9iamVjdE1hcHBpbmcsIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgaW5kZXhDbHMsIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgaW5kZXhLd2FyZ3MpIHtcbiAgICAgICAgaWYgKG9iamVjdE1hcHBpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG9iamVjdE1hcHBpbmcgPSBTaW1wbGVUb29sTm9kZU1hcHBpbmcuZnJvbU9iamVjdHMob2JqZWN0cywge30pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vZGVzID0gb2JqZWN0TWFwcGluZy50b05vZGVzKG9iamVjdHMpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGF3YWl0IGluZGV4Q2xzLmluaXQoe1xuICAgICAgICAgICAgbm9kZXMsXG4gICAgICAgICAgICAuLi5pbmRleEt3YXJnc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RJbmRleChpbmRleCwgb2JqZWN0TWFwcGluZyk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgYXN5bmMgaW5zZXJ0T2JqZWN0KG9iaikge1xuICAgICAgICB0aGlzLl9vYmplY3ROb2RlTWFwcGluZy5hZGRPYmoob2JqKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX29iamVjdE5vZGVNYXBwaW5nLnRvTm9kZShvYmopO1xuICAgICAgICBhd2FpdCB0aGlzLl9pbmRleC5pbnNlcnROb2RlcyhbXG4gICAgICAgICAgICBub2RlXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBnZXQgdG9vbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3ROb2RlTWFwcGluZy5vYmpOb2RlTWFwcGluZygpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGFzeW5jIGFzUmV0cmlldmVyKGt3YXJncykge1xuICAgICAgICByZXR1cm4gbmV3IE9iamVjdFJldHJpZXZlcih0aGlzLl9pbmRleC5hc1JldHJpZXZlcihrd2FyZ3MpLCB0aGlzLl9vYmplY3ROb2RlTWFwcGluZyk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgYXNOb2RlUmV0cmlldmVyKGt3YXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXguYXNSZXRyaWV2ZXIoa3dhcmdzKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/objects/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/objects/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/llamaindex/dist/objects/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectIndex: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.ObjectIndex),\n/* harmony export */   SimpleToolNodeMapping: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.SimpleToolNodeMapping)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/llamaindex/dist/objects/base.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L29iamVjdHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBCIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9vYmplY3RzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Jhc2UuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/objects/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/outputParsers/selectors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/llamaindex/dist/outputParsers/selectors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SelectionOutputParser: () => (/* binding */ SelectionOutputParser)\n/* harmony export */ });\n/* harmony import */ var _OutputParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OutputParser.js */ \"(rsc)/./node_modules/llamaindex/dist/OutputParser.js\");\n\nconst formatStr = `The output should be ONLY JSON formatted as a JSON instance.\n\nHere is an example:\n[\n    {\n        \"choice\": 1,\n        \"reason\": \"<insert reason for choice>\"\n    },\n    ...\n]\n`;\n/*\n * An OutputParser is used to extract structured data from the raw output of the LLM.\n */ class SelectionOutputParser {\n    /**\n   *\n   * @param output\n   */ parse(output) {\n        let parsed;\n        try {\n            parsed = (0,_OutputParser_js__WEBPACK_IMPORTED_MODULE_0__.parseJsonMarkdown)(output);\n        } catch (e) {\n            try {\n                parsed = JSON.parse(output);\n            } catch (e) {\n                throw new Error(`Got invalid JSON object. Error: ${e}. Got JSON string: ${output}`);\n            }\n        }\n        return {\n            rawOutput: output,\n            parsedOutput: parsed\n        };\n    }\n    format(output) {\n        return output + \"\\n\\n\" + formatStr;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L291dHB1dFBhcnNlcnMvc2VsZWN0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUVBQWlCO0FBQ3RDLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkLG1FQUFtRSxFQUFFLHFCQUFxQixPQUFPO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L291dHB1dFBhcnNlcnMvc2VsZWN0b3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlSnNvbk1hcmtkb3duIH0gZnJvbSBcIi4uL091dHB1dFBhcnNlci5qc1wiO1xuY29uc3QgZm9ybWF0U3RyID0gYFRoZSBvdXRwdXQgc2hvdWxkIGJlIE9OTFkgSlNPTiBmb3JtYXR0ZWQgYXMgYSBKU09OIGluc3RhbmNlLlxuXG5IZXJlIGlzIGFuIGV4YW1wbGU6XG5bXG4gICAge1xuICAgICAgICBcImNob2ljZVwiOiAxLFxuICAgICAgICBcInJlYXNvblwiOiBcIjxpbnNlcnQgcmVhc29uIGZvciBjaG9pY2U+XCJcbiAgICB9LFxuICAgIC4uLlxuXVxuYDtcbi8qXG4gKiBBbiBPdXRwdXRQYXJzZXIgaXMgdXNlZCB0byBleHRyYWN0IHN0cnVjdHVyZWQgZGF0YSBmcm9tIHRoZSByYXcgb3V0cHV0IG9mIHRoZSBMTE0uXG4gKi8gZXhwb3J0IGNsYXNzIFNlbGVjdGlvbk91dHB1dFBhcnNlciB7XG4gICAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBvdXRwdXRcbiAgICovIHBhcnNlKG91dHB1dCkge1xuICAgICAgICBsZXQgcGFyc2VkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFyc2VkID0gcGFyc2VKc29uTWFya2Rvd24ob3V0cHV0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSBKU09OLnBhcnNlKG91dHB1dCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgaW52YWxpZCBKU09OIG9iamVjdC4gRXJyb3I6ICR7ZX0uIEdvdCBKU09OIHN0cmluZzogJHtvdXRwdXR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJhd091dHB1dDogb3V0cHV0LFxuICAgICAgICAgICAgcGFyc2VkT3V0cHV0OiBwYXJzZWRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9ybWF0KG91dHB1dCkge1xuICAgICAgICByZXR1cm4gb3V0cHV0ICsgXCJcXG5cXG5cIiArIGZvcm1hdFN0cjtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/outputParsers/selectors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/postprocessors/MetadataReplacementPostProcessor.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/postprocessors/MetadataReplacementPostProcessor.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetadataReplacementPostProcessor: () => (/* binding */ MetadataReplacementPostProcessor)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\nclass MetadataReplacementPostProcessor {\n    targetMetadataKey;\n    constructor(targetMetadataKey){\n        this.targetMetadataKey = targetMetadataKey;\n    }\n    async postprocessNodes(nodes) {\n        for (const n of nodes){\n            n.node.setContent(n.node.metadata[this.targetMetadataKey] ?? n.node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.NONE));\n        }\n        return nodes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Bvc3Rwcm9jZXNzb3JzL01ldGFkYXRhUmVwbGFjZW1lbnRQb3N0UHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ2hEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLGlFQUFZO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9wb3N0cHJvY2Vzc29ycy9NZXRhZGF0YVJlcGxhY2VtZW50UG9zdFByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YU1vZGUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zY2hlbWFcIjtcbmV4cG9ydCBjbGFzcyBNZXRhZGF0YVJlcGxhY2VtZW50UG9zdFByb2Nlc3NvciB7XG4gICAgdGFyZ2V0TWV0YWRhdGFLZXk7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0TWV0YWRhdGFLZXkpe1xuICAgICAgICB0aGlzLnRhcmdldE1ldGFkYXRhS2V5ID0gdGFyZ2V0TWV0YWRhdGFLZXk7XG4gICAgfVxuICAgIGFzeW5jIHBvc3Rwcm9jZXNzTm9kZXMobm9kZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIG5vZGVzKXtcbiAgICAgICAgICAgIG4ubm9kZS5zZXRDb250ZW50KG4ubm9kZS5tZXRhZGF0YVt0aGlzLnRhcmdldE1ldGFkYXRhS2V5XSA/PyBuLm5vZGUuZ2V0Q29udGVudChNZXRhZGF0YU1vZGUuTk9ORSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/postprocessors/MetadataReplacementPostProcessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/postprocessors/SimilarityPostprocessor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/postprocessors/SimilarityPostprocessor.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimilarityPostprocessor: () => (/* binding */ SimilarityPostprocessor)\n/* harmony export */ });\nclass SimilarityPostprocessor {\n    similarityCutoff;\n    constructor(options){\n        this.similarityCutoff = options?.similarityCutoff;\n    }\n    async postprocessNodes(nodes) {\n        if (this.similarityCutoff === undefined) return nodes;\n        const cutoff = this.similarityCutoff || 0;\n        return nodes.filter((node)=>node.score && node.score >= cutoff);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Bvc3Rwcm9jZXNzb3JzL1NpbWlsYXJpdHlQb3N0cHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9wb3N0cHJvY2Vzc29ycy9TaW1pbGFyaXR5UG9zdHByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgU2ltaWxhcml0eVBvc3Rwcm9jZXNzb3Ige1xuICAgIHNpbWlsYXJpdHlDdXRvZmY7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgICAgIHRoaXMuc2ltaWxhcml0eUN1dG9mZiA9IG9wdGlvbnM/LnNpbWlsYXJpdHlDdXRvZmY7XG4gICAgfVxuICAgIGFzeW5jIHBvc3Rwcm9jZXNzTm9kZXMobm9kZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuc2ltaWxhcml0eUN1dG9mZiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbm9kZXM7XG4gICAgICAgIGNvbnN0IGN1dG9mZiA9IHRoaXMuc2ltaWxhcml0eUN1dG9mZiB8fCAwO1xuICAgICAgICByZXR1cm4gbm9kZXMuZmlsdGVyKChub2RlKT0+bm9kZS5zY29yZSAmJiBub2RlLnNjb3JlID49IGN1dG9mZik7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/postprocessors/SimilarityPostprocessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/postprocessors/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/llamaindex/dist/postprocessors/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JinaAIReranker: () => (/* reexport safe */ _rerankers_index_js__WEBPACK_IMPORTED_MODULE_1__.JinaAIReranker),\n/* harmony export */   MetadataReplacementPostProcessor: () => (/* reexport safe */ _MetadataReplacementPostProcessor_js__WEBPACK_IMPORTED_MODULE_0__.MetadataReplacementPostProcessor),\n/* harmony export */   SimilarityPostprocessor: () => (/* reexport safe */ _SimilarityPostprocessor_js__WEBPACK_IMPORTED_MODULE_2__.SimilarityPostprocessor)\n/* harmony export */ });\n/* harmony import */ var _MetadataReplacementPostProcessor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MetadataReplacementPostProcessor.js */ \"(rsc)/./node_modules/llamaindex/dist/postprocessors/MetadataReplacementPostProcessor.js\");\n/* harmony import */ var _rerankers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rerankers/index.js */ \"(rsc)/./node_modules/llamaindex/dist/postprocessors/rerankers/index.js\");\n/* harmony import */ var _SimilarityPostprocessor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SimilarityPostprocessor.js */ \"(rsc)/./node_modules/llamaindex/dist/postprocessors/SimilarityPostprocessor.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Bvc3Rwcm9jZXNzb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNqQjtBQUNRIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9wb3N0cHJvY2Vzc29ycy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9NZXRhZGF0YVJlcGxhY2VtZW50UG9zdFByb2Nlc3Nvci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVyYW5rZXJzL2luZGV4LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TaW1pbGFyaXR5UG9zdHByb2Nlc3Nvci5qc1wiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/postprocessors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/postprocessors/rerankers/JinaAIReranker.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/postprocessors/rerankers/JinaAIReranker.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JinaAIReranker: () => (/* binding */ JinaAIReranker)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n\n\n\nclass JinaAIReranker {\n    model = \"jina-reranker-v1-base-en\";\n    topN;\n    apiKey = undefined;\n    constructor(init){\n        this.topN = init?.topN ?? 2;\n        this.model = init?.model ?? \"jina-reranker-v1-base-en\";\n        this.apiKey = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_2__.getEnv)(\"JINAAI_API_KEY\");\n        if (!this.apiKey) {\n            throw new Error(\"Set Jina AI API Key in JINAAI_API_KEY env variable. Get one for free or top up your key at https://jina.ai/reranker\");\n        }\n    }\n    async rerank(query, documents, topN = this.topN) {\n        const url = \"https://api.jina.ai/v1/rerank\";\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.apiKey}`\n        };\n        const data = {\n            model: this.model,\n            query: query,\n            documents: documents,\n            top_n: topN\n        };\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify(data)\n            });\n            const jsonData = await response.json();\n            return jsonData.results;\n        } catch (error) {\n            console.error(\"Error while reranking:\", error);\n            throw new Error(\"Failed to rerank documents due to an API error\");\n        }\n    }\n    async postprocessNodes(nodes, query) {\n        if (nodes.length === 0) {\n            return [];\n        }\n        if (query === undefined) {\n            throw new Error(\"JinaAIReranker requires a query\");\n        }\n        const documents = nodes.map((n)=>n.node.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.ALL));\n        const results = await this.rerank((0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_1__.extractText)(query), documents, this.topN);\n        const newNodes = [];\n        for (const result of results){\n            const node = nodes[result.index];\n            newNodes.push({\n                node: node.node,\n                score: result.relevance_score\n            });\n        }\n        return newNodes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Bvc3Rwcm9jZXNzb3JzL3JlcmFua2Vycy9KaW5hQUlSZXJhbmtlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVEO0FBQ0Y7QUFDWjtBQUNsQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1REFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFlBQVk7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxpRUFBWTtBQUN2RSwwQ0FBMEMsbUVBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9wb3N0cHJvY2Vzc29ycy9yZXJhbmtlcnMvSmluYUFJUmVyYW5rZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YWRhdGFNb2RlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc2NoZW1hXCI7XG5pbXBvcnQgeyBleHRyYWN0VGV4dCB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3V0aWxzXCI7XG5pbXBvcnQgeyBnZXRFbnYgfSBmcm9tIFwiQGxsYW1haW5kZXgvZW52XCI7XG5leHBvcnQgY2xhc3MgSmluYUFJUmVyYW5rZXIge1xuICAgIG1vZGVsID0gXCJqaW5hLXJlcmFua2VyLXYxLWJhc2UtZW5cIjtcbiAgICB0b3BOO1xuICAgIGFwaUtleSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdHJ1Y3Rvcihpbml0KXtcbiAgICAgICAgdGhpcy50b3BOID0gaW5pdD8udG9wTiA/PyAyO1xuICAgICAgICB0aGlzLm1vZGVsID0gaW5pdD8ubW9kZWwgPz8gXCJqaW5hLXJlcmFua2VyLXYxLWJhc2UtZW5cIjtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBnZXRFbnYoXCJKSU5BQUlfQVBJX0tFWVwiKTtcbiAgICAgICAgaWYgKCF0aGlzLmFwaUtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0IEppbmEgQUkgQVBJIEtleSBpbiBKSU5BQUlfQVBJX0tFWSBlbnYgdmFyaWFibGUuIEdldCBvbmUgZm9yIGZyZWUgb3IgdG9wIHVwIHlvdXIga2V5IGF0IGh0dHBzOi8vamluYS5haS9yZXJhbmtlclwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZXJhbmsocXVlcnksIGRvY3VtZW50cywgdG9wTiA9IHRoaXMudG9wTikge1xuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vYXBpLmppbmEuYWkvdjEvcmVyYW5rXCI7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmFwaUtleX1gXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIGRvY3VtZW50czogZG9jdW1lbnRzLFxuICAgICAgICAgICAgdG9wX246IHRvcE5cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGpzb25EYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGpzb25EYXRhLnJlc3VsdHM7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgcmVyYW5raW5nOlwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVyYW5rIGRvY3VtZW50cyBkdWUgdG8gYW4gQVBJIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHBvc3Rwcm9jZXNzTm9kZXMobm9kZXMsIHF1ZXJ5KSB7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSmluYUFJUmVyYW5rZXIgcmVxdWlyZXMgYSBxdWVyeVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb2N1bWVudHMgPSBub2Rlcy5tYXAoKG4pPT5uLm5vZGUuZ2V0Q29udGVudChNZXRhZGF0YU1vZGUuQUxMKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLnJlcmFuayhleHRyYWN0VGV4dChxdWVyeSksIGRvY3VtZW50cywgdGhpcy50b3BOKTtcbiAgICAgICAgY29uc3QgbmV3Tm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cyl7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbcmVzdWx0LmluZGV4XTtcbiAgICAgICAgICAgIG5ld05vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUubm9kZSxcbiAgICAgICAgICAgICAgICBzY29yZTogcmVzdWx0LnJlbGV2YW5jZV9zY29yZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld05vZGVzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/postprocessors/rerankers/JinaAIReranker.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/postprocessors/rerankers/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/postprocessors/rerankers/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JinaAIReranker: () => (/* reexport safe */ _JinaAIReranker_js__WEBPACK_IMPORTED_MODULE_0__.JinaAIReranker)\n/* harmony export */ });\n/* harmony import */ var _JinaAIReranker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JinaAIReranker.js */ \"(rsc)/./node_modules/llamaindex/dist/postprocessors/rerankers/JinaAIReranker.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Bvc3Rwcm9jZXNzb3JzL3JlcmFua2Vycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvcG9zdHByb2Nlc3NvcnMvcmVyYW5rZXJzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL0ppbmFBSVJlcmFua2VyLmpzXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/postprocessors/rerankers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/selectors/base.js":
/*!********************************************************!*\
  !*** ./node_modules/llamaindex/dist/selectors/base.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSelector: () => (/* binding */ BaseSelector)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n\nfunction wrapChoice(choice) {\n    if (typeof choice === \"string\") {\n        return {\n            description: choice\n        };\n    } else {\n        return choice;\n    }\n}\nclass BaseSelector extends _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptMixin {\n    async select(choices, query) {\n        const metadata = choices.map((choice)=>wrapChoice(choice));\n        return await this._select(metadata, query);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3NlbGVjdG9ycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ08sMkJBQTJCLGlFQUFXO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3NlbGVjdG9ycy9iYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb21wdE1peGluIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvcHJvbXB0c1wiO1xuZnVuY3Rpb24gd3JhcENob2ljZShjaG9pY2UpIHtcbiAgICBpZiAodHlwZW9mIGNob2ljZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IGNob2ljZVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaG9pY2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJhc2VTZWxlY3RvciBleHRlbmRzIFByb21wdE1peGluIHtcbiAgICBhc3luYyBzZWxlY3QoY2hvaWNlcywgcXVlcnkpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBjaG9pY2VzLm1hcCgoY2hvaWNlKT0+d3JhcENob2ljZShjaG9pY2UpKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3NlbGVjdChtZXRhZGF0YSwgcXVlcnkpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/selectors/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/selectors/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/llamaindex/dist/selectors/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSelector: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseSelector),\n/* harmony export */   LLMMultiSelector: () => (/* reexport safe */ _llmSelectors_js__WEBPACK_IMPORTED_MODULE_1__.LLMMultiSelector),\n/* harmony export */   LLMSingleSelector: () => (/* reexport safe */ _llmSelectors_js__WEBPACK_IMPORTED_MODULE_1__.LLMSingleSelector),\n/* harmony export */   getSelectorFromContext: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_2__.getSelectorFromContext)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/base.js\");\n/* harmony import */ var _llmSelectors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./llmSelectors.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/llmSelectors.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/utils.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3NlbGVjdG9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTBCO0FBQ1E7QUFDUCIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3Qvc2VsZWN0b3JzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xsbVNlbGVjdG9ycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHMuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/selectors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/selectors/llmSelectors.js":
/*!****************************************************************!*\
  !*** ./node_modules/llamaindex/dist/selectors/llmSelectors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMMultiSelector: () => (/* binding */ LLMMultiSelector),\n/* harmony export */   LLMSingleSelector: () => (/* binding */ LLMSingleSelector)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _outputParsers_selectors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../outputParsers/selectors.js */ \"(rsc)/./node_modules/llamaindex/dist/outputParsers/selectors.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/base.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/prompts.js\");\n\n\n\n\nfunction buildChoicesText(choices) {\n    const texts = [];\n    for (const [ind, choice] of choices.entries()){\n        let text = choice.description.split(\"\\n\").join(\" \");\n        text = `(${ind + 1}) ${text}`; // to one indexing\n        texts.push(text);\n    }\n    return texts.join(\"\");\n}\nfunction structuredOutputToSelectorResult(output) {\n    const structuredOutput = output;\n    const answers = structuredOutput.parsedOutput;\n    // adjust for zero indexing\n    const selections = answers.map((answer)=>{\n        return {\n            index: answer.choice - 1,\n            reason: answer.reason\n        };\n    });\n    return {\n        selections\n    };\n}\n/**\n * A selector that uses the LLM to select a single or multiple choices from a list of choices.\n */ class LLMMultiSelector extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseSelector {\n    llm;\n    prompt;\n    maxOutputs;\n    outputParser;\n    constructor(init){\n        super();\n        this.llm = init.llm;\n        this.prompt = init.prompt ?? _prompts_js__WEBPACK_IMPORTED_MODULE_3__.defaultMultiSelectPrompt;\n        this.maxOutputs = init.maxOutputs ?? 10;\n        this.outputParser = init.outputParser ?? new _outputParsers_selectors_js__WEBPACK_IMPORTED_MODULE_1__.SelectionOutputParser();\n    }\n    _getPrompts() {\n        return {\n            prompt: this.prompt\n        };\n    }\n    _updatePrompts(prompts) {\n        if (\"prompt\" in prompts) {\n            this.prompt = prompts.prompt;\n        }\n    }\n    _getPromptModules() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\n   * Selects a single choice from a list of choices.\n   * @param choices\n   * @param query\n   */ async _select(choices, query) {\n        const choicesText = buildChoicesText(choices);\n        const prompt = this.prompt.format({\n            contextList: choicesText,\n            query: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_0__.extractText)(query.query),\n            maxOutputs: `${this.maxOutputs}`,\n            numChoices: `${choicesText.length}`\n        });\n        const formattedPrompt = this.outputParser?.format(prompt);\n        const prediction = await this.llm.complete({\n            prompt: formattedPrompt\n        });\n        const parsed = this.outputParser?.parse(prediction.text);\n        if (!parsed) {\n            throw new Error(\"Parsed output is undefined\");\n        }\n        return structuredOutputToSelectorResult(parsed);\n    }\n    asQueryComponent() {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n/**\n * A selector that uses the LLM to select a single choice from a list of choices.\n */ class LLMSingleSelector extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseSelector {\n    llm;\n    prompt;\n    outputParser;\n    constructor(init){\n        super();\n        this.llm = init.llm;\n        this.prompt = init.prompt ?? _prompts_js__WEBPACK_IMPORTED_MODULE_3__.defaultSingleSelectPrompt;\n        this.outputParser = init.outputParser ?? new _outputParsers_selectors_js__WEBPACK_IMPORTED_MODULE_1__.SelectionOutputParser();\n    }\n    _getPrompts() {\n        return {\n            prompt: this.prompt\n        };\n    }\n    _updatePrompts(prompts) {\n        if (\"prompt\" in prompts) {\n            this.prompt = prompts.prompt;\n        }\n    }\n    /**\n   * Selects a single choice from a list of choices.\n   * @param choices\n   * @param query\n   */ async _select(choices, query) {\n        const choicesText = buildChoicesText(choices);\n        const prompt = this.prompt.format({\n            numChoices: `${choicesText.length}`,\n            context: choicesText,\n            query: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_0__.extractText)(query)\n        });\n        const formattedPrompt = this.outputParser.format(prompt);\n        const prediction = await this.llm.complete({\n            prompt: formattedPrompt\n        });\n        const parsed = this.outputParser?.parse(prediction.text);\n        if (!parsed) {\n            throw new Error(\"Parsed output is undefined\");\n        }\n        return structuredOutputToSelectorResult(parsed);\n    }\n    asQueryComponent() {\n        throw new Error(\"Method not implemented.\");\n    }\n    _getPromptModules() {\n        return {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3NlbGVjdG9ycy9sbG1TZWxlY3RvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXFEO0FBQ2lCO0FBQzdCO0FBQzBDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVEsSUFBSSxLQUFLLEdBQUc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBVywrQkFBK0Isa0RBQVk7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsaUVBQXdCO0FBQzdEO0FBQ0EscURBQXFELDhFQUFxQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtRUFBVztBQUM5QiwyQkFBMkIsZ0JBQWdCO0FBQzNDLDJCQUEyQixtQkFBbUI7QUFDOUMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFXLGdDQUFnQyxrREFBWTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsa0VBQXlCO0FBQzlELHFEQUFxRCw4RUFBcUI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG1CQUFtQjtBQUM5QztBQUNBLG1CQUFtQixtRUFBVztBQUM5QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9zZWxlY3RvcnMvbGxtU2VsZWN0b3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RUZXh0IH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IFNlbGVjdGlvbk91dHB1dFBhcnNlciB9IGZyb20gXCIuLi9vdXRwdXRQYXJzZXJzL3NlbGVjdG9ycy5qc1wiO1xuaW1wb3J0IHsgQmFzZVNlbGVjdG9yIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdE11bHRpU2VsZWN0UHJvbXB0LCBkZWZhdWx0U2luZ2xlU2VsZWN0UHJvbXB0IH0gZnJvbSBcIi4vcHJvbXB0cy5qc1wiO1xuZnVuY3Rpb24gYnVpbGRDaG9pY2VzVGV4dChjaG9pY2VzKSB7XG4gICAgY29uc3QgdGV4dHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtpbmQsIGNob2ljZV0gb2YgY2hvaWNlcy5lbnRyaWVzKCkpe1xuICAgICAgICBsZXQgdGV4dCA9IGNob2ljZS5kZXNjcmlwdGlvbi5zcGxpdChcIlxcblwiKS5qb2luKFwiIFwiKTtcbiAgICAgICAgdGV4dCA9IGAoJHtpbmQgKyAxfSkgJHt0ZXh0fWA7IC8vIHRvIG9uZSBpbmRleGluZ1xuICAgICAgICB0ZXh0cy5wdXNoKHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dHMuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHN0cnVjdHVyZWRPdXRwdXRUb1NlbGVjdG9yUmVzdWx0KG91dHB1dCkge1xuICAgIGNvbnN0IHN0cnVjdHVyZWRPdXRwdXQgPSBvdXRwdXQ7XG4gICAgY29uc3QgYW5zd2VycyA9IHN0cnVjdHVyZWRPdXRwdXQucGFyc2VkT3V0cHV0O1xuICAgIC8vIGFkanVzdCBmb3IgemVybyBpbmRleGluZ1xuICAgIGNvbnN0IHNlbGVjdGlvbnMgPSBhbnN3ZXJzLm1hcCgoYW5zd2VyKT0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXg6IGFuc3dlci5jaG9pY2UgLSAxLFxuICAgICAgICAgICAgcmVhc29uOiBhbnN3ZXIucmVhc29uXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0aW9uc1xuICAgIH07XG59XG4vKipcbiAqIEEgc2VsZWN0b3IgdGhhdCB1c2VzIHRoZSBMTE0gdG8gc2VsZWN0IGEgc2luZ2xlIG9yIG11bHRpcGxlIGNob2ljZXMgZnJvbSBhIGxpc3Qgb2YgY2hvaWNlcy5cbiAqLyBleHBvcnQgY2xhc3MgTExNTXVsdGlTZWxlY3RvciBleHRlbmRzIEJhc2VTZWxlY3RvciB7XG4gICAgbGxtO1xuICAgIHByb21wdDtcbiAgICBtYXhPdXRwdXRzO1xuICAgIG91dHB1dFBhcnNlcjtcbiAgICBjb25zdHJ1Y3Rvcihpbml0KXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5sbG0gPSBpbml0LmxsbTtcbiAgICAgICAgdGhpcy5wcm9tcHQgPSBpbml0LnByb21wdCA/PyBkZWZhdWx0TXVsdGlTZWxlY3RQcm9tcHQ7XG4gICAgICAgIHRoaXMubWF4T3V0cHV0cyA9IGluaXQubWF4T3V0cHV0cyA/PyAxMDtcbiAgICAgICAgdGhpcy5vdXRwdXRQYXJzZXIgPSBpbml0Lm91dHB1dFBhcnNlciA/PyBuZXcgU2VsZWN0aW9uT3V0cHV0UGFyc2VyKCk7XG4gICAgfVxuICAgIF9nZXRQcm9tcHRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvbXB0OiB0aGlzLnByb21wdFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfdXBkYXRlUHJvbXB0cyhwcm9tcHRzKSB7XG4gICAgICAgIGlmIChcInByb21wdFwiIGluIHByb21wdHMpIHtcbiAgICAgICAgICAgIHRoaXMucHJvbXB0ID0gcHJvbXB0cy5wcm9tcHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldFByb21wdE1vZHVsZXMoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICogU2VsZWN0cyBhIHNpbmdsZSBjaG9pY2UgZnJvbSBhIGxpc3Qgb2YgY2hvaWNlcy5cbiAgICogQHBhcmFtIGNob2ljZXNcbiAgICogQHBhcmFtIHF1ZXJ5XG4gICAqLyBhc3luYyBfc2VsZWN0KGNob2ljZXMsIHF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IGNob2ljZXNUZXh0ID0gYnVpbGRDaG9pY2VzVGV4dChjaG9pY2VzKTtcbiAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy5wcm9tcHQuZm9ybWF0KHtcbiAgICAgICAgICAgIGNvbnRleHRMaXN0OiBjaG9pY2VzVGV4dCxcbiAgICAgICAgICAgIHF1ZXJ5OiBleHRyYWN0VGV4dChxdWVyeS5xdWVyeSksXG4gICAgICAgICAgICBtYXhPdXRwdXRzOiBgJHt0aGlzLm1heE91dHB1dHN9YCxcbiAgICAgICAgICAgIG51bUNob2ljZXM6IGAke2Nob2ljZXNUZXh0Lmxlbmd0aH1gXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRQcm9tcHQgPSB0aGlzLm91dHB1dFBhcnNlcj8uZm9ybWF0KHByb21wdCk7XG4gICAgICAgIGNvbnN0IHByZWRpY3Rpb24gPSBhd2FpdCB0aGlzLmxsbS5jb21wbGV0ZSh7XG4gICAgICAgICAgICBwcm9tcHQ6IGZvcm1hdHRlZFByb21wdFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5vdXRwdXRQYXJzZXI/LnBhcnNlKHByZWRpY3Rpb24udGV4dCk7XG4gICAgICAgIGlmICghcGFyc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZWQgb3V0cHV0IGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RydWN0dXJlZE91dHB1dFRvU2VsZWN0b3JSZXN1bHQocGFyc2VkKTtcbiAgICB9XG4gICAgYXNRdWVyeUNvbXBvbmVudCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxufVxuLyoqXG4gKiBBIHNlbGVjdG9yIHRoYXQgdXNlcyB0aGUgTExNIHRvIHNlbGVjdCBhIHNpbmdsZSBjaG9pY2UgZnJvbSBhIGxpc3Qgb2YgY2hvaWNlcy5cbiAqLyBleHBvcnQgY2xhc3MgTExNU2luZ2xlU2VsZWN0b3IgZXh0ZW5kcyBCYXNlU2VsZWN0b3Ige1xuICAgIGxsbTtcbiAgICBwcm9tcHQ7XG4gICAgb3V0cHV0UGFyc2VyO1xuICAgIGNvbnN0cnVjdG9yKGluaXQpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxsbSA9IGluaXQubGxtO1xuICAgICAgICB0aGlzLnByb21wdCA9IGluaXQucHJvbXB0ID8/IGRlZmF1bHRTaW5nbGVTZWxlY3RQcm9tcHQ7XG4gICAgICAgIHRoaXMub3V0cHV0UGFyc2VyID0gaW5pdC5vdXRwdXRQYXJzZXIgPz8gbmV3IFNlbGVjdGlvbk91dHB1dFBhcnNlcigpO1xuICAgIH1cbiAgICBfZ2V0UHJvbXB0cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb21wdDogdGhpcy5wcm9tcHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX3VwZGF0ZVByb21wdHMocHJvbXB0cykge1xuICAgICAgICBpZiAoXCJwcm9tcHRcIiBpbiBwcm9tcHRzKSB7XG4gICAgICAgICAgICB0aGlzLnByb21wdCA9IHByb21wdHMucHJvbXB0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgKiBTZWxlY3RzIGEgc2luZ2xlIGNob2ljZSBmcm9tIGEgbGlzdCBvZiBjaG9pY2VzLlxuICAgKiBAcGFyYW0gY2hvaWNlc1xuICAgKiBAcGFyYW0gcXVlcnlcbiAgICovIGFzeW5jIF9zZWxlY3QoY2hvaWNlcywgcXVlcnkpIHtcbiAgICAgICAgY29uc3QgY2hvaWNlc1RleHQgPSBidWlsZENob2ljZXNUZXh0KGNob2ljZXMpO1xuICAgICAgICBjb25zdCBwcm9tcHQgPSB0aGlzLnByb21wdC5mb3JtYXQoe1xuICAgICAgICAgICAgbnVtQ2hvaWNlczogYCR7Y2hvaWNlc1RleHQubGVuZ3RofWAsXG4gICAgICAgICAgICBjb250ZXh0OiBjaG9pY2VzVGV4dCxcbiAgICAgICAgICAgIHF1ZXJ5OiBleHRyYWN0VGV4dChxdWVyeSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFByb21wdCA9IHRoaXMub3V0cHV0UGFyc2VyLmZvcm1hdChwcm9tcHQpO1xuICAgICAgICBjb25zdCBwcmVkaWN0aW9uID0gYXdhaXQgdGhpcy5sbG0uY29tcGxldGUoe1xuICAgICAgICAgICAgcHJvbXB0OiBmb3JtYXR0ZWRQcm9tcHRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMub3V0cHV0UGFyc2VyPy5wYXJzZShwcmVkaWN0aW9uLnRleHQpO1xuICAgICAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VkIG91dHB1dCBpcyB1bmRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRPdXRwdXRUb1NlbGVjdG9yUmVzdWx0KHBhcnNlZCk7XG4gICAgfVxuICAgIGFzUXVlcnlDb21wb25lbnQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICBfZ2V0UHJvbXB0TW9kdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/selectors/llmSelectors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/selectors/prompts.js":
/*!***********************************************************!*\
  !*** ./node_modules/llamaindex/dist/selectors/prompts.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultMultiSelectPrompt: () => (/* binding */ defaultMultiSelectPrompt),\n/* harmony export */   defaultSingleSelectPrompt: () => (/* binding */ defaultSingleSelectPrompt)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n\nconst defaultSingleSelectPrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\",\n        \"numChoices\"\n    ],\n    template: `Some choices are given below. It is provided in a numbered list (1 to {numChoices}), where each item in the list corresponds to a summary.\n---------------------\n{context}\n---------------------\nUsing only the choices above and not prior knowledge, return the choice that is most relevant to the question: '{query}'\n`\n});\nconst defaultMultiSelectPrompt = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    templateVars: [\n        \"contextList\",\n        \"query\",\n        \"maxOutputs\",\n        \"numChoices\"\n    ],\n    template: `Some choices are given below. It is provided in a numbered list (1 to {numChoices}), where each item in the list corresponds to a summary.\n---------------------\n{contextList}\n---------------------\nUsing only the choices above and not prior knowledge, return the top choices (no more than {maxOutputs}, but only select what is needed) that are most relevant to the question: '{query}'\n`\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3NlbGVjdG9ycy9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwRDtBQUNuRCxzQ0FBc0Msb0VBQWM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixXQUFXO0FBQ2pHO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsaUhBQWlILE1BQU07QUFDdkg7QUFDQSxDQUFDO0FBQ00scUNBQXFDLG9FQUFjO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixXQUFXO0FBQ2pHO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNEZBQTRGLFdBQVcsNEVBQTRFLE1BQU07QUFDekw7QUFDQSxDQUFDIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9zZWxlY3RvcnMvcHJvbXB0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Byb21wdHNcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0U2luZ2xlU2VsZWN0UHJvbXB0ID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZVZhcnM6IFtcbiAgICAgICAgXCJjb250ZXh0XCIsXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJudW1DaG9pY2VzXCJcbiAgICBdLFxuICAgIHRlbXBsYXRlOiBgU29tZSBjaG9pY2VzIGFyZSBnaXZlbiBiZWxvdy4gSXQgaXMgcHJvdmlkZWQgaW4gYSBudW1iZXJlZCBsaXN0ICgxIHRvIHtudW1DaG9pY2VzfSksIHdoZXJlIGVhY2ggaXRlbSBpbiB0aGUgbGlzdCBjb3JyZXNwb25kcyB0byBhIHN1bW1hcnkuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbntjb250ZXh0fVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5Vc2luZyBvbmx5IHRoZSBjaG9pY2VzIGFib3ZlIGFuZCBub3QgcHJpb3Iga25vd2xlZGdlLCByZXR1cm4gdGhlIGNob2ljZSB0aGF0IGlzIG1vc3QgcmVsZXZhbnQgdG8gdGhlIHF1ZXN0aW9uOiAne3F1ZXJ5fSdcbmBcbn0pO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRNdWx0aVNlbGVjdFByb21wdCA9IG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgdGVtcGxhdGVWYXJzOiBbXG4gICAgICAgIFwiY29udGV4dExpc3RcIixcbiAgICAgICAgXCJxdWVyeVwiLFxuICAgICAgICBcIm1heE91dHB1dHNcIixcbiAgICAgICAgXCJudW1DaG9pY2VzXCJcbiAgICBdLFxuICAgIHRlbXBsYXRlOiBgU29tZSBjaG9pY2VzIGFyZSBnaXZlbiBiZWxvdy4gSXQgaXMgcHJvdmlkZWQgaW4gYSBudW1iZXJlZCBsaXN0ICgxIHRvIHtudW1DaG9pY2VzfSksIHdoZXJlIGVhY2ggaXRlbSBpbiB0aGUgbGlzdCBjb3JyZXNwb25kcyB0byBhIHN1bW1hcnkuXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbntjb250ZXh0TGlzdH1cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuVXNpbmcgb25seSB0aGUgY2hvaWNlcyBhYm92ZSBhbmQgbm90IHByaW9yIGtub3dsZWRnZSwgcmV0dXJuIHRoZSB0b3AgY2hvaWNlcyAobm8gbW9yZSB0aGFuIHttYXhPdXRwdXRzfSwgYnV0IG9ubHkgc2VsZWN0IHdoYXQgaXMgbmVlZGVkKSB0aGF0IGFyZSBtb3N0IHJlbGV2YW50IHRvIHRoZSBxdWVzdGlvbjogJ3txdWVyeX0nXG5gXG59KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/selectors/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/selectors/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/llamaindex/dist/selectors/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSelectorFromContext: () => (/* binding */ getSelectorFromContext)\n/* harmony export */ });\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _llmSelectors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./llmSelectors.js */ \"(rsc)/./node_modules/llamaindex/dist/selectors/llmSelectors.js\");\n\n\nconst getSelectorFromContext = (isMulti = false)=>{\n    let selector = null;\n    const llm = _Settings_js__WEBPACK_IMPORTED_MODULE_0__.Settings.llm;\n    if (isMulti) {\n        selector = new _llmSelectors_js__WEBPACK_IMPORTED_MODULE_1__.LLMMultiSelector({\n            llm\n        });\n    } else {\n        selector = new _llmSelectors_js__WEBPACK_IMPORTED_MODULE_1__.LLMSingleSelector({\n            llm\n        });\n    }\n    if (selector === null) {\n        throw new Error(\"Selector is null\");\n    }\n    return selector;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3NlbGVjdG9ycy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7QUFDOEI7QUFDakU7QUFDUDtBQUNBLGdCQUFnQixrREFBUTtBQUN4QjtBQUNBLHVCQUF1Qiw4REFBZ0I7QUFDdkM7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOLHVCQUF1QiwrREFBaUI7QUFDeEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9zZWxlY3RvcnMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi4vU2V0dGluZ3MuanNcIjtcbmltcG9ydCB7IExMTU11bHRpU2VsZWN0b3IsIExMTVNpbmdsZVNlbGVjdG9yIH0gZnJvbSBcIi4vbGxtU2VsZWN0b3JzLmpzXCI7XG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0b3JGcm9tQ29udGV4dCA9IChpc011bHRpID0gZmFsc2UpPT57XG4gICAgbGV0IHNlbGVjdG9yID0gbnVsbDtcbiAgICBjb25zdCBsbG0gPSBTZXR0aW5ncy5sbG07XG4gICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBuZXcgTExNTXVsdGlTZWxlY3Rvcih7XG4gICAgICAgICAgICBsbG1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0b3IgPSBuZXcgTExNU2luZ2xlU2VsZWN0b3Ioe1xuICAgICAgICAgICAgbGxtXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VsZWN0b3IgaXMgbnVsbFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/selectors/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/storage/FileSystem.js":
/*!************************************************************!*\
  !*** ./node_modules/llamaindex/dist/storage/FileSystem.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   walk: () => (/* binding */ walk)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n// FS utility helpers\n\n/**\n * Checks if a file exists.\n * Analogous to the os.path.exists function from Python.\n * @param path The path to the file to check.\n * @returns A promise that resolves to true if the file exists, false otherwise.\n */ async function exists(path) {\n    try {\n        await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.access(path);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n/**\n * Recursively traverses a directory and yields all the paths to the files in it.\n * @param dirPath The path to the directory to traverse.\n */ async function* walk(dirPath) {\n    const entries = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readdir(dirPath);\n    for (const entry of entries){\n        const fullPath = `${dirPath}/${entry}`;\n        const stats = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.stat(fullPath);\n        if (stats.isDirectory()) {\n            yield* walk(fullPath);\n        } else {\n            yield fullPath;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3N0b3JhZ2UvRmlsZVN5c3RlbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBVztBQUNYO0FBQ0EsY0FBYywrQ0FBRTtBQUNoQjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFXO0FBQ1gsMEJBQTBCLCtDQUFFO0FBQzVCO0FBQ0EsNEJBQTRCLFFBQVEsR0FBRyxNQUFNO0FBQzdDLDRCQUE0QiwrQ0FBRTtBQUM5QjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9zdG9yYWdlL0ZpbGVTeXN0ZW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRlMgdXRpbGl0eSBoZWxwZXJzXG5pbXBvcnQgeyBmcyB9IGZyb20gXCJAbGxhbWFpbmRleC9lbnZcIjtcbi8qKlxuICogQ2hlY2tzIGlmIGEgZmlsZSBleGlzdHMuXG4gKiBBbmFsb2dvdXMgdG8gdGhlIG9zLnBhdGguZXhpc3RzIGZ1bmN0aW9uIGZyb20gUHl0aG9uLlxuICogQHBhcmFtIHBhdGggVGhlIHBhdGggdG8gdGhlIGZpbGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHRoZSBmaWxlIGV4aXN0cywgZmFsc2Ugb3RoZXJ3aXNlLlxuICovIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGlzdHMocGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGZzLmFjY2VzcyhwYXRoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZXMgYSBkaXJlY3RvcnkgYW5kIHlpZWxkcyBhbGwgdGhlIHBhdGhzIHRvIHRoZSBmaWxlcyBpbiBpdC5cbiAqIEBwYXJhbSBkaXJQYXRoIFRoZSBwYXRoIHRvIHRoZSBkaXJlY3RvcnkgdG8gdHJhdmVyc2UuXG4gKi8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiB3YWxrKGRpclBhdGgpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgZnMucmVhZGRpcihkaXJQYXRoKTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuICAgICAgICBjb25zdCBmdWxsUGF0aCA9IGAke2RpclBhdGh9LyR7ZW50cnl9YDtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBmcy5zdGF0KGZ1bGxQYXRoKTtcbiAgICAgICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIHlpZWxkKiB3YWxrKGZ1bGxQYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHlpZWxkIGZ1bGxQYXRoO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/storage/FileSystem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/storage/StorageContext.js":
/*!****************************************************************!*\
  !*** ./node_modules/llamaindex/dist/storage/StorageContext.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageContextFromDefaults: () => (/* binding */ storageContextFromDefaults)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/storage/index-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/index-store/dist/index.js\");\n/* harmony import */ var _Settings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Settings.js */ \"(rsc)/./node_modules/llamaindex/dist/Settings.js\");\n/* harmony import */ var _vector_store_SimpleVectorStore_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../vector-store/SimpleVectorStore.js */ \"(rsc)/./node_modules/llamaindex/dist/vector-store/SimpleVectorStore.js\");\n/* harmony import */ var _docStore_SimpleDocumentStore_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./docStore/SimpleDocumentStore.js */ \"(rsc)/./node_modules/llamaindex/dist/storage/docStore/SimpleDocumentStore.js\");\n\n\n\n\n\n\nasync function storageContextFromDefaults({ docStore, indexStore, vectorStore, vectorStores, persistDir }) {\n    vectorStores = vectorStores ?? {};\n    if (!persistDir) {\n        docStore = docStore ?? new _docStore_SimpleDocumentStore_js__WEBPACK_IMPORTED_MODULE_5__.SimpleDocumentStore();\n        indexStore = indexStore ?? new _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_2__.SimpleIndexStore();\n        if (!(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.ModalityType.TEXT in vectorStores)) {\n            vectorStores[_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.ModalityType.TEXT] = vectorStore ?? new _vector_store_SimpleVectorStore_js__WEBPACK_IMPORTED_MODULE_4__.SimpleVectorStore();\n        }\n    } else {\n        const embedModel = _Settings_js__WEBPACK_IMPORTED_MODULE_3__.Settings.embedModel;\n        docStore = docStore || await _docStore_SimpleDocumentStore_js__WEBPACK_IMPORTED_MODULE_5__.SimpleDocumentStore.fromPersistDir(persistDir, _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NAMESPACE);\n        indexStore = indexStore || await _llamaindex_core_storage_index_store__WEBPACK_IMPORTED_MODULE_2__.SimpleIndexStore.fromPersistDir(persistDir);\n        if (!(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.ObjectType.TEXT in vectorStores)) {\n            vectorStores[_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.ModalityType.TEXT] = vectorStore ?? await _vector_store_SimpleVectorStore_js__WEBPACK_IMPORTED_MODULE_4__.SimpleVectorStore.fromPersistDir(persistDir, embedModel);\n        }\n    }\n    return {\n        docStore,\n        indexStore,\n        vectorStores\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3N0b3JhZ2UvU3RvcmFnZUNvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0RDtBQUNPO0FBQ0s7QUFDOUI7QUFDK0I7QUFDRDtBQUNqRSw0Q0FBNEMsNkRBQTZEO0FBQ2hIO0FBQ0E7QUFDQSxtQ0FBbUMsaUZBQW1CO0FBQ3RELHVDQUF1QyxrRkFBZ0I7QUFDdkQsY0FBYyxpRUFBWTtBQUMxQix5QkFBeUIsaUVBQVksNEJBQTRCLGlGQUFpQjtBQUNsRjtBQUNBLE1BQU07QUFDTiwyQkFBMkIsa0RBQVE7QUFDbkMscUNBQXFDLGlGQUFtQiw0QkFBNEIsc0VBQWlCO0FBQ3JHLHlDQUF5QyxrRkFBZ0I7QUFDekQsY0FBYywrREFBVTtBQUN4Qix5QkFBeUIsaUVBQVksOEJBQThCLGlGQUFpQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvZGlzdC9zdG9yYWdlL1N0b3JhZ2VDb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFRkFVTFRfTkFNRVNQQUNFIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvZ2xvYmFsXCI7XG5pbXBvcnQgeyBNb2RhbGl0eVR5cGUsIE9iamVjdFR5cGUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zY2hlbWFcIjtcbmltcG9ydCB7IFNpbXBsZUluZGV4U3RvcmUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2luZGV4LXN0b3JlXCI7XG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuLi9TZXR0aW5ncy5qc1wiO1xuaW1wb3J0IHsgU2ltcGxlVmVjdG9yU3RvcmUgfSBmcm9tIFwiLi4vdmVjdG9yLXN0b3JlL1NpbXBsZVZlY3RvclN0b3JlLmpzXCI7XG5pbXBvcnQgeyBTaW1wbGVEb2N1bWVudFN0b3JlIH0gZnJvbSBcIi4vZG9jU3RvcmUvU2ltcGxlRG9jdW1lbnRTdG9yZS5qc1wiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3JhZ2VDb250ZXh0RnJvbURlZmF1bHRzKHsgZG9jU3RvcmUsIGluZGV4U3RvcmUsIHZlY3RvclN0b3JlLCB2ZWN0b3JTdG9yZXMsIHBlcnNpc3REaXIgfSkge1xuICAgIHZlY3RvclN0b3JlcyA9IHZlY3RvclN0b3JlcyA/PyB7fTtcbiAgICBpZiAoIXBlcnNpc3REaXIpIHtcbiAgICAgICAgZG9jU3RvcmUgPSBkb2NTdG9yZSA/PyBuZXcgU2ltcGxlRG9jdW1lbnRTdG9yZSgpO1xuICAgICAgICBpbmRleFN0b3JlID0gaW5kZXhTdG9yZSA/PyBuZXcgU2ltcGxlSW5kZXhTdG9yZSgpO1xuICAgICAgICBpZiAoIShNb2RhbGl0eVR5cGUuVEVYVCBpbiB2ZWN0b3JTdG9yZXMpKSB7XG4gICAgICAgICAgICB2ZWN0b3JTdG9yZXNbTW9kYWxpdHlUeXBlLlRFWFRdID0gdmVjdG9yU3RvcmUgPz8gbmV3IFNpbXBsZVZlY3RvclN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlbWJlZE1vZGVsID0gU2V0dGluZ3MuZW1iZWRNb2RlbDtcbiAgICAgICAgZG9jU3RvcmUgPSBkb2NTdG9yZSB8fCBhd2FpdCBTaW1wbGVEb2N1bWVudFN0b3JlLmZyb21QZXJzaXN0RGlyKHBlcnNpc3REaXIsIERFRkFVTFRfTkFNRVNQQUNFKTtcbiAgICAgICAgaW5kZXhTdG9yZSA9IGluZGV4U3RvcmUgfHwgYXdhaXQgU2ltcGxlSW5kZXhTdG9yZS5mcm9tUGVyc2lzdERpcihwZXJzaXN0RGlyKTtcbiAgICAgICAgaWYgKCEoT2JqZWN0VHlwZS5URVhUIGluIHZlY3RvclN0b3JlcykpIHtcbiAgICAgICAgICAgIHZlY3RvclN0b3Jlc1tNb2RhbGl0eVR5cGUuVEVYVF0gPSB2ZWN0b3JTdG9yZSA/PyBhd2FpdCBTaW1wbGVWZWN0b3JTdG9yZS5mcm9tUGVyc2lzdERpcihwZXJzaXN0RGlyLCBlbWJlZE1vZGVsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkb2NTdG9yZSxcbiAgICAgICAgaW5kZXhTdG9yZSxcbiAgICAgICAgdmVjdG9yU3RvcmVzXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/storage/StorageContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/storage/docStore/SimpleDocumentStore.js":
/*!******************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/storage/docStore/SimpleDocumentStore.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleDocumentStore: () => (/* binding */ SimpleDocumentStore)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/storage/doc-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/doc-store/dist/index.js\");\n/* harmony import */ var _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/storage/kv-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ \"(rsc)/./node_modules/lodash/lodash.js\");\n\n\n\n\n\nclass SimpleDocumentStore extends _llamaindex_core_storage_doc_store__WEBPACK_IMPORTED_MODULE_1__.KVDocumentStore {\n    kvStore;\n    constructor(kvStore, namespace){\n        kvStore = kvStore || new _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__.SimpleKVStore();\n        namespace = namespace || _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NAMESPACE;\n        super(kvStore, namespace);\n        this.kvStore = kvStore;\n    }\n    static async fromPersistDir(persistDir = _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERSIST_DIR, namespace) {\n        const persistPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.path.join(persistDir, _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_DOC_STORE_PERSIST_FILENAME);\n        return await SimpleDocumentStore.fromPersistPath(persistPath, namespace);\n    }\n    static async fromPersistPath(persistPath, namespace) {\n        const simpleKVStore = await _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__.SimpleKVStore.fromPersistPath(persistPath);\n        return new SimpleDocumentStore(simpleKVStore, namespace);\n    }\n    async persist(persistPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.path.join(_llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERSIST_DIR, _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_DOC_STORE_PERSIST_FILENAME)) {\n        if (lodash__WEBPACK_IMPORTED_MODULE_4__.isObject(this.kvStore) && this.kvStore instanceof _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__.BaseInMemoryKVStore) {\n            await this.kvStore.persist(persistPath);\n        }\n    }\n    static fromDict(saveDict, namespace) {\n        const simpleKVStore = _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__.SimpleKVStore.fromDict(saveDict);\n        return new SimpleDocumentStore(simpleKVStore, namespace);\n    }\n    toDict() {\n        if (lodash__WEBPACK_IMPORTED_MODULE_4__.isObject(this.kvStore) && this.kvStore instanceof _llamaindex_core_storage_kv_store__WEBPACK_IMPORTED_MODULE_2__.SimpleKVStore) {\n            return this.kvStore.toDict();\n        }\n        // If the kvstore is not a SimpleKVStore, you might want to throw an error or return a default value.\n        throw new Error(\"KVStore is not a SimpleKVStore\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3N0b3JhZ2UvZG9jU3RvcmUvU2ltcGxlRG9jdW1lbnRTdG9yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUg7QUFDaEQ7QUFDa0I7QUFDaEQ7QUFDaEI7QUFDaEIsa0NBQWtDLCtFQUFlO0FBQ3hEO0FBQ0E7QUFDQSxpQ0FBaUMsNEVBQWE7QUFDOUMsaUNBQWlDLHNFQUFpQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsd0VBQW1CO0FBQ2hFLDRCQUE0QixpREFBSSxrQkFBa0IsdUZBQWtDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyw0RUFBYTtBQUNqRDtBQUNBO0FBQ0EsZ0NBQWdDLGlEQUFJLE1BQU0sd0VBQW1CLEVBQUUsdUZBQWtDO0FBQ2pHLFlBQVksNENBQVUsMENBQTBDLGtGQUFtQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw0RUFBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQSxZQUFZLDRDQUFVLDBDQUEwQyw0RUFBYTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3N0b3JhZ2UvZG9jU3RvcmUvU2ltcGxlRG9jdW1lbnRTdG9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUZBVUxUX0RPQ19TVE9SRV9QRVJTSVNUX0ZJTEVOQU1FLCBERUZBVUxUX05BTUVTUEFDRSwgREVGQVVMVF9QRVJTSVNUX0RJUiB9IGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL2dsb2JhbFwiO1xuaW1wb3J0IHsgS1ZEb2N1bWVudFN0b3JlIH0gZnJvbSBcIkBsbGFtYWluZGV4L2NvcmUvc3RvcmFnZS9kb2Mtc3RvcmVcIjtcbmltcG9ydCB7IEJhc2VJbk1lbW9yeUtWU3RvcmUsIFNpbXBsZUtWU3RvcmUgfSBmcm9tIFwiQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2t2LXN0b3JlXCI7XG5pbXBvcnQgeyBwYXRoIH0gZnJvbSBcIkBsbGFtYWluZGV4L2VudlwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuZXhwb3J0IGNsYXNzIFNpbXBsZURvY3VtZW50U3RvcmUgZXh0ZW5kcyBLVkRvY3VtZW50U3RvcmUge1xuICAgIGt2U3RvcmU7XG4gICAgY29uc3RydWN0b3Ioa3ZTdG9yZSwgbmFtZXNwYWNlKXtcbiAgICAgICAga3ZTdG9yZSA9IGt2U3RvcmUgfHwgbmV3IFNpbXBsZUtWU3RvcmUoKTtcbiAgICAgICAgbmFtZXNwYWNlID0gbmFtZXNwYWNlIHx8IERFRkFVTFRfTkFNRVNQQUNFO1xuICAgICAgICBzdXBlcihrdlN0b3JlLCBuYW1lc3BhY2UpO1xuICAgICAgICB0aGlzLmt2U3RvcmUgPSBrdlN0b3JlO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVBlcnNpc3REaXIocGVyc2lzdERpciA9IERFRkFVTFRfUEVSU0lTVF9ESVIsIG5hbWVzcGFjZSkge1xuICAgICAgICBjb25zdCBwZXJzaXN0UGF0aCA9IHBhdGguam9pbihwZXJzaXN0RGlyLCBERUZBVUxUX0RPQ19TVE9SRV9QRVJTSVNUX0ZJTEVOQU1FKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IFNpbXBsZURvY3VtZW50U3RvcmUuZnJvbVBlcnNpc3RQYXRoKHBlcnNpc3RQYXRoLCBuYW1lc3BhY2UpO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVBlcnNpc3RQYXRoKHBlcnNpc3RQYXRoLCBuYW1lc3BhY2UpIHtcbiAgICAgICAgY29uc3Qgc2ltcGxlS1ZTdG9yZSA9IGF3YWl0IFNpbXBsZUtWU3RvcmUuZnJvbVBlcnNpc3RQYXRoKHBlcnNpc3RQYXRoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVEb2N1bWVudFN0b3JlKHNpbXBsZUtWU3RvcmUsIG5hbWVzcGFjZSk7XG4gICAgfVxuICAgIGFzeW5jIHBlcnNpc3QocGVyc2lzdFBhdGggPSBwYXRoLmpvaW4oREVGQVVMVF9QRVJTSVNUX0RJUiwgREVGQVVMVF9ET0NfU1RPUkVfUEVSU0lTVF9GSUxFTkFNRSkpIHtcbiAgICAgICAgaWYgKF8uaXNPYmplY3QodGhpcy5rdlN0b3JlKSAmJiB0aGlzLmt2U3RvcmUgaW5zdGFuY2VvZiBCYXNlSW5NZW1vcnlLVlN0b3JlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmt2U3RvcmUucGVyc2lzdChwZXJzaXN0UGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGZyb21EaWN0KHNhdmVEaWN0LCBuYW1lc3BhY2UpIHtcbiAgICAgICAgY29uc3Qgc2ltcGxlS1ZTdG9yZSA9IFNpbXBsZUtWU3RvcmUuZnJvbURpY3Qoc2F2ZURpY3QpO1xuICAgICAgICByZXR1cm4gbmV3IFNpbXBsZURvY3VtZW50U3RvcmUoc2ltcGxlS1ZTdG9yZSwgbmFtZXNwYWNlKTtcbiAgICB9XG4gICAgdG9EaWN0KCkge1xuICAgICAgICBpZiAoXy5pc09iamVjdCh0aGlzLmt2U3RvcmUpICYmIHRoaXMua3ZTdG9yZSBpbnN0YW5jZW9mIFNpbXBsZUtWU3RvcmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmt2U3RvcmUudG9EaWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGt2c3RvcmUgaXMgbm90IGEgU2ltcGxlS1ZTdG9yZSwgeW91IG1pZ2h0IHdhbnQgdG8gdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIGEgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiS1ZTdG9yZSBpcyBub3QgYSBTaW1wbGVLVlN0b3JlXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/storage/docStore/SimpleDocumentStore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/tools/QueryEngineTool.js":
/*!***************************************************************!*\
  !*** ./node_modules/llamaindex/dist/tools/QueryEngineTool.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryEngineTool: () => (/* binding */ QueryEngineTool)\n/* harmony export */ });\nconst DEFAULT_NAME = \"query_engine_tool\";\nconst DEFAULT_DESCRIPTION = \"Useful for running a natural language query against a knowledge base and get back a natural language response.\";\nconst DEFAULT_PARAMETERS = {\n    type: \"object\",\n    properties: {\n        query: {\n            type: \"string\",\n            description: \"The query to search for\"\n        }\n    },\n    required: [\n        \"query\"\n    ]\n};\nclass QueryEngineTool {\n    queryEngine;\n    metadata;\n    includeSourceNodes;\n    constructor({ queryEngine, metadata, includeSourceNodes }){\n        this.queryEngine = queryEngine;\n        this.metadata = {\n            name: metadata?.name ?? DEFAULT_NAME,\n            description: metadata?.description ?? DEFAULT_DESCRIPTION,\n            parameters: metadata?.parameters ?? DEFAULT_PARAMETERS\n        };\n        this.includeSourceNodes = includeSourceNodes ?? false;\n    }\n    async call({ query }) {\n        const response = await this.queryEngine.query({\n            query\n        });\n        if (!this.includeSourceNodes) {\n            return {\n                content: response.message.content\n            };\n        }\n        return {\n            content: response.message.content,\n            sourceNodes: response.sourceNodes\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Rvb2xzL1F1ZXJ5RW5naW5lVG9vbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkNBQTJDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Rvb2xzL1F1ZXJ5RW5naW5lVG9vbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX05BTUUgPSBcInF1ZXJ5X2VuZ2luZV90b29sXCI7XG5jb25zdCBERUZBVUxUX0RFU0NSSVBUSU9OID0gXCJVc2VmdWwgZm9yIHJ1bm5pbmcgYSBuYXR1cmFsIGxhbmd1YWdlIHF1ZXJ5IGFnYWluc3QgYSBrbm93bGVkZ2UgYmFzZSBhbmQgZ2V0IGJhY2sgYSBuYXR1cmFsIGxhbmd1YWdlIHJlc3BvbnNlLlwiO1xuY29uc3QgREVGQVVMVF9QQVJBTUVURVJTID0ge1xuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBxdWVyeSB0byBzZWFyY2ggZm9yXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVxdWlyZWQ6IFtcbiAgICAgICAgXCJxdWVyeVwiXG4gICAgXVxufTtcbmV4cG9ydCBjbGFzcyBRdWVyeUVuZ2luZVRvb2wge1xuICAgIHF1ZXJ5RW5naW5lO1xuICAgIG1ldGFkYXRhO1xuICAgIGluY2x1ZGVTb3VyY2VOb2RlcztcbiAgICBjb25zdHJ1Y3Rvcih7IHF1ZXJ5RW5naW5lLCBtZXRhZGF0YSwgaW5jbHVkZVNvdXJjZU5vZGVzIH0pe1xuICAgICAgICB0aGlzLnF1ZXJ5RW5naW5lID0gcXVlcnlFbmdpbmU7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSB7XG4gICAgICAgICAgICBuYW1lOiBtZXRhZGF0YT8ubmFtZSA/PyBERUZBVUxUX05BTUUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogbWV0YWRhdGE/LmRlc2NyaXB0aW9uID8/IERFRkFVTFRfREVTQ1JJUFRJT04sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBtZXRhZGF0YT8ucGFyYW1ldGVycyA/PyBERUZBVUxUX1BBUkFNRVRFUlNcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbmNsdWRlU291cmNlTm9kZXMgPSBpbmNsdWRlU291cmNlTm9kZXMgPz8gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIGNhbGwoeyBxdWVyeSB9KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5xdWVyeUVuZ2luZS5xdWVyeSh7XG4gICAgICAgICAgICBxdWVyeVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0aGlzLmluY2x1ZGVTb3VyY2VOb2Rlcykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiByZXNwb25zZS5tZXNzYWdlLmNvbnRlbnRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlLm1lc3NhZ2UuY29udGVudCxcbiAgICAgICAgICAgIHNvdXJjZU5vZGVzOiByZXNwb25zZS5zb3VyY2VOb2Rlc1xuICAgICAgICB9O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/tools/QueryEngineTool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/tools/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/llamaindex/dist/tools/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionTool: () => (/* reexport safe */ _llamaindex_core_tools__WEBPACK_IMPORTED_MODULE_0__.FunctionTool),\n/* harmony export */   QueryEngineTool: () => (/* reexport safe */ _QueryEngineTool_js__WEBPACK_IMPORTED_MODULE_1__.QueryEngineTool),\n/* harmony export */   tool: () => (/* reexport safe */ _llamaindex_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/tools */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/tools/dist/index.js\");\n/* harmony import */ var _QueryEngineTool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryEngineTool.js */ \"(rsc)/./node_modules/llamaindex/dist/tools/QueryEngineTool.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Rvb2xzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVDO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3Rvb2xzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAbGxhbWFpbmRleC9jb3JlL3Rvb2xzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9RdWVyeUVuZ2luZVRvb2wuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/tools/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/types.js":
/*!***********************************************!*\
  !*** ./node_modules/llamaindex/dist/types.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Top level types to avoid circular dependencies\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0EsSUFBZSIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L2Rpc3QvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUb3AgbGV2ZWwgdHlwZXMgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG4gKi8gZXhwb3J0IHsgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/dist/vector-store/SimpleVectorStore.js":
/*!************************************************************************!*\
  !*** ./node_modules/llamaindex/dist/vector-store/SimpleVectorStore.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleVectorStore: () => (/* binding */ SimpleVectorStore)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/embeddings */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/vector-store */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/vector-store/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _storage_FileSystem_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../storage/FileSystem.js */ \"(rsc)/./node_modules/llamaindex/dist/storage/FileSystem.js\");\n\n\n\n\n\nconst LEARNER_MODES = new Set([\n    _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.VectorStoreQueryMode.SVM,\n    _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.VectorStoreQueryMode.LINEAR_REGRESSION,\n    _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.VectorStoreQueryMode.LOGISTIC_REGRESSION\n]);\nconst MMR_MODE = _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.VectorStoreQueryMode.MMR;\n// Mapping of filter operators to metadata filter functions\nconst OPERATOR_TO_FILTER = {\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.EQ]: ({ key, value }, metadata)=>{\n        return metadata[key] === (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NE]: ({ key, value }, metadata)=>{\n        return metadata[key] !== (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IN]: ({ key, value }, metadata)=>{\n        return !!(0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parseArrayValue)(value).find((v)=>metadata[key] === v);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NIN]: ({ key, value }, metadata)=>{\n        return !(0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parseArrayValue)(value).find((v)=>metadata[key] === v);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.ANY]: ({ key, value }, metadata)=>{\n        if (!Array.isArray(metadata[key])) return false;\n        return (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parseArrayValue)(value).some((v)=>metadata[key].includes(v));\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.ALL]: ({ key, value }, metadata)=>{\n        if (!Array.isArray(metadata[key])) return false;\n        return (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parseArrayValue)(value).every((v)=>metadata[key].includes(v));\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.TEXT_MATCH]: ({ key, value }, metadata)=>{\n        return metadata[key].includes((0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value));\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.CONTAINS]: ({ key, value }, metadata)=>{\n        if (!Array.isArray(metadata[key])) return false;\n        return !!(0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parseArrayValue)(metadata[key]).find((v)=>v === value);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GT]: ({ key, value }, metadata)=>{\n        return metadata[key] > (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LT]: ({ key, value }, metadata)=>{\n        return metadata[key] < (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GTE]: ({ key, value }, metadata)=>{\n        return metadata[key] >= (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value);\n    },\n    [_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LTE]: ({ key, value }, metadata)=>{\n        return metadata[key] <= (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.parsePrimitiveValue)(value);\n    }\n};\n// Build a filter function based on the metadata and the preFilters\nconst buildFilterFn = (metadata, preFilters)=>{\n    if (!preFilters) return true;\n    if (!metadata) return false;\n    const { filters, condition } = preFilters;\n    const queryCondition = condition || \"and\"; // default to and\n    const itemFilterFn = (filter)=>{\n        if (filter.operator === _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IS_EMPTY) {\n            // for `is_empty` operator, return true if the metadata key is not present or the value is empty\n            const value = metadata[filter.key];\n            return value === undefined || value === null || value === \"\" || Array.isArray(value) && value.length === 0;\n        }\n        if (metadata[filter.key] === undefined) {\n            // for other operators, always return false if the metadata key is not present\n            return false;\n        }\n        const metadataLookupFn = OPERATOR_TO_FILTER[filter.operator];\n        if (!metadataLookupFn) throw new Error(`Unsupported operator: ${filter.operator}`);\n        return metadataLookupFn(filter, metadata);\n    };\n    if (queryCondition === \"and\") return filters.every(itemFilterFn);\n    return filters.some(itemFilterFn);\n};\nclass SimpleVectorStoreData {\n    embeddingDict = {};\n    textIdToRefDocId = {};\n    metadataDict = {};\n}\nclass SimpleVectorStore extends _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.BaseVectorStore {\n    storesText = false;\n    data;\n    persistPath;\n    constructor(init){\n        super(init);\n        this.data = init?.data || new SimpleVectorStoreData();\n    }\n    static async fromPersistDir(persistDir = _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PERSIST_DIR, embedModel) {\n        const persistPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.path.join(persistDir, \"vector_store.json\");\n        return await SimpleVectorStore.fromPersistPath(persistPath, embedModel);\n    }\n    client() {\n        return null;\n    }\n    async get(textId) {\n        return this.data.embeddingDict[textId];\n    }\n    async add(embeddingResults) {\n        for (const node of embeddingResults){\n            this.data.embeddingDict[node.id_] = node.getEmbedding();\n            if (!node.sourceNode) {\n                continue;\n            }\n            this.data.textIdToRefDocId[node.id_] = node.sourceNode?.nodeId;\n            // Add metadata to the metadataDict\n            const metadata = (0,_llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.nodeToMetadata)(node, true, undefined, false);\n            delete metadata[\"_node_content\"];\n            this.data.metadataDict[node.id_] = metadata;\n        }\n        if (this.persistPath) {\n            await this.persist(this.persistPath);\n        }\n        return embeddingResults.map((result)=>result.id_);\n    }\n    async delete(refDocId) {\n        const textIdsToDelete = Object.keys(this.data.textIdToRefDocId).filter((textId)=>this.data.textIdToRefDocId[textId] === refDocId);\n        for (const textId of textIdsToDelete){\n            delete this.data.embeddingDict[textId];\n            delete this.data.textIdToRefDocId[textId];\n            if (this.data.metadataDict) delete this.data.metadataDict[textId];\n        }\n        if (this.persistPath) {\n            await this.persist(this.persistPath);\n        }\n        return Promise.resolve();\n    }\n    async filterNodes(query) {\n        const items = Object.entries(this.data.embeddingDict);\n        const queryFilterFn = (nodeId)=>{\n            const metadata = this.data.metadataDict[nodeId];\n            return buildFilterFn(metadata, query.filters);\n        };\n        const nodeFilterFn = (nodeId)=>{\n            if (!query.docIds) return true;\n            const availableIds = new Set(query.docIds);\n            return availableIds.has(nodeId);\n        };\n        const queriedItems = items.filter((item)=>nodeFilterFn(item[0]) && queryFilterFn(item[0]));\n        const nodeIds = queriedItems.map((item)=>item[0]);\n        const embeddings = queriedItems.map((item)=>item[1]);\n        return {\n            nodeIds,\n            embeddings\n        };\n    }\n    async query(query) {\n        const { nodeIds, embeddings } = await this.filterNodes(query);\n        const queryEmbedding = query.queryEmbedding;\n        let topSimilarities, topIds;\n        if (LEARNER_MODES.has(query.mode)) {\n            // fixme: unfinished\n            throw new Error(\"Learner modes not implemented for SimpleVectorStore yet.\");\n        } else if (query.mode === MMR_MODE) {\n            const mmrThreshold = query.mmrThreshold;\n            [topSimilarities, topIds] = (0,_llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_0__.getTopKMMREmbeddings)(queryEmbedding, embeddings, null, query.similarityTopK, nodeIds, mmrThreshold);\n        } else if (query.mode === _llamaindex_core_vector_store__WEBPACK_IMPORTED_MODULE_2__.VectorStoreQueryMode.DEFAULT) {\n            [topSimilarities, topIds] = (0,_llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_0__.getTopKEmbeddings)(queryEmbedding, embeddings, query.similarityTopK, nodeIds);\n        } else {\n            throw new Error(`Invalid query mode: ${query.mode}`);\n        }\n        return Promise.resolve({\n            similarities: topSimilarities,\n            ids: topIds\n        });\n    }\n    async persist(persistPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.path.join(_llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PERSIST_DIR, \"vector_store.json\")) {\n        await SimpleVectorStore.persistData(persistPath, this.data);\n    }\n    static async persistData(persistPath, data) {\n        const dirPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.path.dirname(persistPath);\n        if (!await (0,_storage_FileSystem_js__WEBPACK_IMPORTED_MODULE_4__.exists)(dirPath)) {\n            await _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.fs.mkdir(dirPath);\n        }\n        await _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.fs.writeFile(persistPath, JSON.stringify(data));\n    }\n    static async fromPersistPath(persistPath, embeddingModel) {\n        const dirPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.path.dirname(persistPath);\n        if (!await (0,_storage_FileSystem_js__WEBPACK_IMPORTED_MODULE_4__.exists)(dirPath)) {\n            await _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.fs.mkdir(dirPath, {\n                recursive: true\n            });\n        }\n        let dataDict = {};\n        try {\n            const fileData = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.fs.readFile(persistPath);\n            dataDict = JSON.parse(fileData.toString());\n        } catch (e) {\n            console.error(`No valid data found at path: ${persistPath} starting new store.`);\n            // persist empty data, to ignore this error in the future\n            await SimpleVectorStore.persistData(persistPath, new SimpleVectorStoreData());\n        }\n        const data = new SimpleVectorStoreData();\n        // @ts-expect-error TS2322\n        data.embeddingDict = dataDict.embeddingDict ?? {};\n        // @ts-expect-error TS2322\n        data.textIdToRefDocId = dataDict.textIdToRefDocId ?? {};\n        // @ts-expect-error TS2322\n        data.metadataDict = dataDict.metadataDict ?? {};\n        const store = new SimpleVectorStore({\n            data,\n            embeddingModel\n        });\n        store.persistPath = persistPath;\n        return store;\n    }\n    static fromDict(saveDict, embeddingModel) {\n        const data = new SimpleVectorStoreData();\n        data.embeddingDict = saveDict.embeddingDict;\n        data.textIdToRefDocId = saveDict.textIdToRefDocId;\n        data.metadataDict = saveDict.metadataDict;\n        return new SimpleVectorStore({\n            data,\n            embeddingModel\n        });\n    }\n    toDict() {\n        return {\n            embeddingDict: this.data.embeddingDict,\n            textIdToRefDocId: this.data.textIdToRefDocId,\n            metadataDict: this.data.metadataDict\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/dist/vector-store/SimpleVectorStore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoxAuthMechanism: () => (/* binding */ BoxAuthMechanism),\n/* harmony export */   ChunkMode: () => (/* binding */ ChunkMode),\n/* harmony export */   CompositeRetrievalMode: () => (/* binding */ CompositeRetrievalMode),\n/* harmony export */   ConfigurableDataSinkNames: () => (/* binding */ ConfigurableDataSinkNames),\n/* harmony export */   ConfigurableDataSourceNames: () => (/* binding */ ConfigurableDataSourceNames),\n/* harmony export */   ConfigurableTransformationNames: () => (/* binding */ ConfigurableTransformationNames),\n/* harmony export */   EvalMetric: () => (/* binding */ EvalMetric),\n/* harmony export */   ExtractMode: () => (/* binding */ ExtractMode),\n/* harmony export */   ExtractState: () => (/* binding */ ExtractState),\n/* harmony export */   ExtractTarget: () => (/* binding */ ExtractTarget),\n/* harmony export */   FilterCondition: () => (/* binding */ FilterCondition),\n/* harmony export */   FilterOperator: () => (/* binding */ FilterOperator),\n/* harmony export */   JobNameMapping: () => (/* binding */ JobNameMapping),\n/* harmony export */   JobNames: () => (/* binding */ JobNames),\n/* harmony export */   LlamaParseSupportedFileExtensions: () => (/* binding */ LlamaParseSupportedFileExtensions),\n/* harmony export */   ManagedIngestionStatus: () => (/* binding */ ManagedIngestionStatus),\n/* harmony export */   MessageRole: () => (/* binding */ MessageRole),\n/* harmony export */   NodeRelationship: () => (/* binding */ NodeRelationship),\n/* harmony export */   ObjectType: () => (/* binding */ ObjectType),\n/* harmony export */   ParsePlanLevel: () => (/* binding */ ParsePlanLevel),\n/* harmony export */   ParserLanguages: () => (/* binding */ ParserLanguages),\n/* harmony export */   ParsingMode: () => (/* binding */ ParsingMode),\n/* harmony export */   PartitionNames: () => (/* binding */ PartitionNames),\n/* harmony export */   PipelineType: () => (/* binding */ PipelineType),\n/* harmony export */   Pooling: () => (/* binding */ Pooling),\n/* harmony export */   PydanticProgramMode: () => (/* binding */ PydanticProgramMode),\n/* harmony export */   ReportBlockDependency: () => (/* binding */ ReportBlockDependency),\n/* harmony export */   ReportEventType: () => (/* binding */ ReportEventType),\n/* harmony export */   ReportState: () => (/* binding */ ReportState),\n/* harmony export */   RetrievalMode: () => (/* binding */ RetrievalMode),\n/* harmony export */   SchemaRelaxMode: () => (/* binding */ SchemaRelaxMode),\n/* harmony export */   StatusEnum: () => (/* binding */ StatusEnum),\n/* harmony export */   StructMode: () => (/* binding */ StructMode),\n/* harmony export */   SupportedLLMModelNames: () => (/* binding */ SupportedLLMModelNames),\n/* harmony export */   TransformationCategoryNames: () => (/* binding */ TransformationCategoryNames),\n/* harmony export */   VertexEmbeddingMode: () => (/* binding */ VertexEmbeddingMode),\n/* harmony export */   addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut: () => (/* binding */ addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut),\n/* harmony export */   addFilesToPipelineApiV1PipelinesPipelineIdFilesPut: () => (/* binding */ addFilesToPipelineApiV1PipelinesPipelineIdFilesPut),\n/* harmony export */   addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut: () => (/* binding */ addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut),\n/* harmony export */   addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut: () => (/* binding */ addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut),\n/* harmony export */   assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut: () => (/* binding */ assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut),\n/* harmony export */   batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut: () => (/* binding */ batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut),\n/* harmony export */   cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost: () => (/* binding */ cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost),\n/* harmony export */   chatApiV1PipelinesPipelineIdChatPost: () => (/* binding */ chatApiV1PipelinesPipelineIdChatPost),\n/* harmony export */   chatWithChatAppApiV1AppsIdChatPost: () => (/* binding */ chatWithChatAppApiV1AppsIdChatPost),\n/* harmony export */   client: () => (/* binding */ client),\n/* harmony export */   copyPipelineApiV1PipelinesPipelineIdCopyPost: () => (/* binding */ copyPipelineApiV1PipelinesPipelineIdCopyPost),\n/* harmony export */   createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost: () => (/* binding */ createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost),\n/* harmony export */   createChatAppApiV1AppsPost: () => (/* binding */ createChatAppApiV1AppsPost),\n/* harmony export */   createCheckoutSessionApiV1BillingCheckoutSessionPost: () => (/* binding */ createCheckoutSessionApiV1BillingCheckoutSessionPost),\n/* harmony export */   createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost: () => (/* binding */ createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost),\n/* harmony export */   createDataSinkApiV1DataSinksPost: () => (/* binding */ createDataSinkApiV1DataSinksPost),\n/* harmony export */   createDataSourceApiV1DataSourcesPost: () => (/* binding */ createDataSourceApiV1DataSourcesPost),\n/* harmony export */   createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost: () => (/* binding */ createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost),\n/* harmony export */   createEvalDatasetForProjectApiV1ProjectsProjectIdEvalDatasetPost: () => (/* binding */ createEvalDatasetForProjectApiV1ProjectsProjectIdEvalDatasetPost),\n/* harmony export */   createExtractionAgentApiV1ExtractionExtractionAgentsPost: () => (/* binding */ createExtractionAgentApiV1ExtractionExtractionAgentsPost),\n/* harmony export */   createExtractionAgentApiV1Extractionv2ExtractionAgentsPost: () => (/* binding */ createExtractionAgentApiV1Extractionv2ExtractionAgentsPost),\n/* harmony export */   createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost: () => (/* binding */ createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost),\n/* harmony export */   createLocalEvalSetForProjectApiV1ProjectsProjectIdLocalevalsetPost: () => (/* binding */ createLocalEvalSetForProjectApiV1ProjectsProjectIdLocalevalsetPost),\n/* harmony export */   createOrganizationApiV1OrganizationsPost: () => (/* binding */ createOrganizationApiV1OrganizationsPost),\n/* harmony export */   createPipelineApiV1PipelinesPost: () => (/* binding */ createPipelineApiV1PipelinesPost),\n/* harmony export */   createProjectApiV1ProjectsPost: () => (/* binding */ createProjectApiV1ProjectsPost),\n/* harmony export */   createPromptMixinPromptsApiV1ProjectsProjectIdPromptsPost: () => (/* binding */ createPromptMixinPromptsApiV1ProjectsProjectIdPromptsPost),\n/* harmony export */   createQuestionApiV1EvalsDatasetsDatasetIdQuestionPost: () => (/* binding */ createQuestionApiV1EvalsDatasetsDatasetIdQuestionPost),\n/* harmony export */   createQuestionsApiV1EvalsDatasetsDatasetIdQuestionsPost: () => (/* binding */ createQuestionsApiV1EvalsDatasetsDatasetIdQuestionsPost),\n/* harmony export */   createReportApiV1ReportsPost: () => (/* binding */ createReportApiV1ReportsPost),\n/* harmony export */   createRetrieverApiV1RetrieversPost: () => (/* binding */ createRetrieverApiV1RetrieversPost),\n/* harmony export */   deleteApiKeyApiV1ApiKeysApiKeyIdDelete: () => (/* binding */ deleteApiKeyApiV1ApiKeysApiKeyIdDelete),\n/* harmony export */   deleteChatAppApiV1AppsIdDelete: () => (/* binding */ deleteChatAppApiV1AppsIdDelete),\n/* harmony export */   deleteDataSinkApiV1DataSinksDataSinkIdDelete: () => (/* binding */ deleteDataSinkApiV1DataSinksDataSinkIdDelete),\n/* harmony export */   deleteDataSourceApiV1DataSourcesDataSourceIdDelete: () => (/* binding */ deleteDataSourceApiV1DataSourcesDataSourceIdDelete),\n/* harmony export */   deleteDatasetApiV1EvalsDatasetsDatasetIdDelete: () => (/* binding */ deleteDatasetApiV1EvalsDatasetsDatasetIdDelete),\n/* harmony export */   deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete: () => (/* binding */ deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete),\n/* harmony export */   deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete: () => (/* binding */ deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete),\n/* harmony export */   deleteExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdDelete: () => (/* binding */ deleteExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdDelete),\n/* harmony export */   deleteExtractionRunApiV1ExtractionRunsRunIdDelete: () => (/* binding */ deleteExtractionRunApiV1ExtractionRunsRunIdDelete),\n/* harmony export */   deleteExtractionRunApiV1Extractionv2RunsRunIdDelete: () => (/* binding */ deleteExtractionRunApiV1Extractionv2RunsRunIdDelete),\n/* harmony export */   deleteFileApiV1FilesIdDelete: () => (/* binding */ deleteFileApiV1FilesIdDelete),\n/* harmony export */   deleteLocalEvalSetApiV1ProjectsProjectIdLocalevalsetLocalEvalSetIdDelete: () => (/* binding */ deleteLocalEvalSetApiV1ProjectsProjectIdLocalevalsetLocalEvalSetIdDelete),\n/* harmony export */   deleteOrganizationApiV1OrganizationsOrganizationIdDelete: () => (/* binding */ deleteOrganizationApiV1OrganizationsOrganizationIdDelete),\n/* harmony export */   deletePipelineApiV1PipelinesPipelineIdDelete: () => (/* binding */ deletePipelineApiV1PipelinesPipelineIdDelete),\n/* harmony export */   deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete: () => (/* binding */ deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete),\n/* harmony export */   deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete: () => (/* binding */ deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete),\n/* harmony export */   deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete: () => (/* binding */ deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete),\n/* harmony export */   deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete: () => (/* binding */ deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete),\n/* harmony export */   deleteProjectApiV1ProjectsProjectIdDelete: () => (/* binding */ deleteProjectApiV1ProjectsProjectIdDelete),\n/* harmony export */   deletePromptMixinPromptsApiV1ProjectsProjectIdPromptsPromptSetIdDelete: () => (/* binding */ deletePromptMixinPromptsApiV1ProjectsProjectIdPromptsPromptSetIdDelete),\n/* harmony export */   deleteQuestionApiV1EvalsQuestionsQuestionIdDelete: () => (/* binding */ deleteQuestionApiV1EvalsQuestionsQuestionIdDelete),\n/* harmony export */   deleteReportApiV1ReportsReportIdDelete: () => (/* binding */ deleteReportApiV1ReportsReportIdDelete),\n/* harmony export */   deleteRetrieverApiV1RetrieversRetrieverIdDelete: () => (/* binding */ deleteRetrieverApiV1RetrieversRetrieverIdDelete),\n/* harmony export */   downgradePlanApiV1BillingDowngradePlanPost: () => (/* binding */ downgradePlanApiV1BillingDowngradePlanPost),\n/* harmony export */   executeEvalDatasetApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecutePost: () => (/* binding */ executeEvalDatasetApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecutePost),\n/* harmony export */   generateKeyApiV1ApiKeysPost: () => (/* binding */ generateKeyApiV1ApiKeysPost),\n/* harmony export */   generatePresignedUrlApiParsingJobJobIdReadFilenameGet: () => (/* binding */ generatePresignedUrlApiParsingJobJobIdReadFilenameGet),\n/* harmony export */   generatePresignedUrlApiV1FilesPut: () => (/* binding */ generatePresignedUrlApiV1FilesPut),\n/* harmony export */   generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet: () => (/* binding */ generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet),\n/* harmony export */   getChatAppApiV1AppsIdGet: () => (/* binding */ getChatAppApiV1AppsIdGet),\n/* harmony export */   getChatAppsApiV1AppsGet: () => (/* binding */ getChatAppsApiV1AppsGet),\n/* harmony export */   getDataSinkApiV1DataSinksDataSinkIdGet: () => (/* binding */ getDataSinkApiV1DataSinksDataSinkIdGet),\n/* harmony export */   getDataSourceApiV1DataSourcesDataSourceIdGet: () => (/* binding */ getDataSourceApiV1DataSourcesDataSourceIdGet),\n/* harmony export */   getDatasetApiV1EvalsDatasetsDatasetIdGet: () => (/* binding */ getDatasetApiV1EvalsDatasetsDatasetIdGet),\n/* harmony export */   getDefaultOrganizationApiV1OrganizationsDefaultGet: () => (/* binding */ getDefaultOrganizationApiV1OrganizationsDefaultGet),\n/* harmony export */   getEvalDatasetExecutionApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteEvalDatasetExecutionIdGet: () => (/* binding */ getEvalDatasetExecutionApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteEvalDatasetExecutionIdGet),\n/* harmony export */   getEvalDatasetExecutionResultApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteResultGet: () => (/* binding */ getEvalDatasetExecutionResultApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteResultGet),\n/* harmony export */   getEvalDatasetExecutionsApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteGet: () => (/* binding */ getEvalDatasetExecutionsApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteGet),\n/* harmony export */   getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet: () => (/* binding */ getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet),\n/* harmony export */   getExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdGet: () => (/* binding */ getExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdGet),\n/* harmony export */   getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet: () => (/* binding */ getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet),\n/* harmony export */   getExtractionAgentByNameApiV1Extractionv2ExtractionAgentsByNameNameGet: () => (/* binding */ getExtractionAgentByNameApiV1Extractionv2ExtractionAgentsByNameNameGet),\n/* harmony export */   getFileApiV1FilesIdGet: () => (/* binding */ getFileApiV1FilesIdGet),\n/* harmony export */   getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet: () => (/* binding */ getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet),\n/* harmony export */   getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet: () => (/* binding */ getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet),\n/* harmony export */   getJobApiParsingJobJobIdGet: () => (/* binding */ getJobApiParsingJobJobIdGet),\n/* harmony export */   getJobApiV1ExtractionJobsJobIdGet: () => (/* binding */ getJobApiV1ExtractionJobsJobIdGet),\n/* harmony export */   getJobApiV1Extractionv2JobsJobIdGet: () => (/* binding */ getJobApiV1Extractionv2JobsJobIdGet),\n/* harmony export */   getJobApiV1ParsingJobJobIdGet: () => (/* binding */ getJobApiV1ParsingJobJobIdGet),\n/* harmony export */   getJobImageResultApiParsingJobJobIdResultImageNameGet: () => (/* binding */ getJobImageResultApiParsingJobJobIdResultImageNameGet),\n/* harmony export */   getJobImageResultApiV1ParsingJobJobIdResultImageNameGet: () => (/* binding */ getJobImageResultApiV1ParsingJobJobIdResultImageNameGet),\n/* harmony export */   getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet: () => (/* binding */ getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet),\n/* harmony export */   getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet: () => (/* binding */ getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet),\n/* harmony export */   getJobJsonResultApiParsingJobJobIdResultJsonGet: () => (/* binding */ getJobJsonResultApiParsingJobJobIdResultJsonGet),\n/* harmony export */   getJobJsonResultApiV1ParsingJobJobIdResultJsonGet: () => (/* binding */ getJobJsonResultApiV1ParsingJobJobIdResultJsonGet),\n/* harmony export */   getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet: () => (/* binding */ getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet),\n/* harmony export */   getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet: () => (/* binding */ getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet),\n/* harmony export */   getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet: () => (/* binding */ getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet),\n/* harmony export */   getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet: () => (/* binding */ getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet),\n/* harmony export */   getJobRawTextResultApiParsingJobJobIdResultPdfGet: () => (/* binding */ getJobRawTextResultApiParsingJobJobIdResultPdfGet),\n/* harmony export */   getJobRawTextResultApiParsingJobJobIdResultRawPdfGet: () => (/* binding */ getJobRawTextResultApiParsingJobJobIdResultRawPdfGet),\n/* harmony export */   getJobRawTextResultApiParsingJobJobIdResultRawTextGet: () => (/* binding */ getJobRawTextResultApiParsingJobJobIdResultRawTextGet),\n/* harmony export */   getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet: () => (/* binding */ getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet),\n/* harmony export */   getJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGet: () => (/* binding */ getJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGet),\n/* harmony export */   getJobRawTextResultApiV1ParsingJobJobIdResultRawTextGet: () => (/* binding */ getJobRawTextResultApiV1ParsingJobJobIdResultRawTextGet),\n/* harmony export */   getJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGet: () => (/* binding */ getJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGet),\n/* harmony export */   getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet: () => (/* binding */ getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet),\n/* harmony export */   getJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGet: () => (/* binding */ getJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGet),\n/* harmony export */   getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet: () => (/* binding */ getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet),\n/* harmony export */   getJobResultApiParsingJobJobIdResultMarkdownGet: () => (/* binding */ getJobResultApiParsingJobJobIdResultMarkdownGet),\n/* harmony export */   getJobResultApiV1ExtractionJobsJobIdResultGet: () => (/* binding */ getJobResultApiV1ExtractionJobsJobIdResultGet),\n/* harmony export */   getJobResultApiV1Extractionv2JobsJobIdResultGet: () => (/* binding */ getJobResultApiV1Extractionv2JobsJobIdResultGet),\n/* harmony export */   getJobResultApiV1ParsingJobJobIdResultMarkdownGet: () => (/* binding */ getJobResultApiV1ParsingJobJobIdResultMarkdownGet),\n/* harmony export */   getJobStructuredResultApiParsingJobJobIdResultStructuredGet: () => (/* binding */ getJobStructuredResultApiParsingJobJobIdResultStructuredGet),\n/* harmony export */   getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet: () => (/* binding */ getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet),\n/* harmony export */   getJobTextResultApiParsingJobJobIdResultTextGet: () => (/* binding */ getJobTextResultApiParsingJobJobIdResultTextGet),\n/* harmony export */   getJobTextResultApiV1ParsingJobJobIdResultTextGet: () => (/* binding */ getJobTextResultApiV1ParsingJobJobIdResultTextGet),\n/* harmony export */   getJobsApiV1JobsGet: () => (/* binding */ getJobsApiV1JobsGet),\n/* harmony export */   getOrganizationApiV1OrganizationsOrganizationIdGet: () => (/* binding */ getOrganizationApiV1OrganizationsOrganizationIdGet),\n/* harmony export */   getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet: () => (/* binding */ getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet),\n/* harmony export */   getParsingHistoryResultApiParsingHistoryGet: () => (/* binding */ getParsingHistoryResultApiParsingHistoryGet),\n/* harmony export */   getParsingHistoryResultApiV1ParsingHistoryGet: () => (/* binding */ getParsingHistoryResultApiV1ParsingHistoryGet),\n/* harmony export */   getParsingJobDetailsApiParsingJobJobIdDetailsGet: () => (/* binding */ getParsingJobDetailsApiParsingJobJobIdDetailsGet),\n/* harmony export */   getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet: () => (/* binding */ getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet),\n/* harmony export */   getPipelineApiV1PipelinesPipelineIdGet: () => (/* binding */ getPipelineApiV1PipelinesPipelineIdGet),\n/* harmony export */   getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet: () => (/* binding */ getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet),\n/* harmony export */   getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet: () => (/* binding */ getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet),\n/* harmony export */   getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet: () => (/* binding */ getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet),\n/* harmony export */   getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet: () => (/* binding */ getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet),\n/* harmony export */   getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet: () => (/* binding */ getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet),\n/* harmony export */   getPipelineStatusApiV1PipelinesPipelineIdStatusGet: () => (/* binding */ getPipelineStatusApiV1PipelinesPipelineIdStatusGet),\n/* harmony export */   getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet: () => (/* binding */ getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet),\n/* harmony export */   getProjectApiV1ProjectsProjectIdGet: () => (/* binding */ getProjectApiV1ProjectsProjectIdGet),\n/* harmony export */   getProjectUsageApiV1ProjectsProjectIdUsageGet: () => (/* binding */ getProjectUsageApiV1ProjectsProjectIdUsageGet),\n/* harmony export */   getQuestionApiV1EvalsQuestionsQuestionIdGet: () => (/* binding */ getQuestionApiV1EvalsQuestionsQuestionIdGet),\n/* harmony export */   getReportApiV1ReportsReportIdGet: () => (/* binding */ getReportApiV1ReportsReportIdGet),\n/* harmony export */   getReportEventsApiV1ReportsReportIdEventsGet: () => (/* binding */ getReportEventsApiV1ReportsReportIdEventsGet),\n/* harmony export */   getReportMetadataApiV1ReportsReportIdMetadataGet: () => (/* binding */ getReportMetadataApiV1ReportsReportIdMetadataGet),\n/* harmony export */   getReportPlanApiV1ReportsReportIdPlanGet: () => (/* binding */ getReportPlanApiV1ReportsReportIdPlanGet),\n/* harmony export */   getRetrieverApiV1RetrieversRetrieverIdGet: () => (/* binding */ getRetrieverApiV1RetrieversRetrieverIdGet),\n/* harmony export */   getRunApiV1ExtractionRunsRunIdGet: () => (/* binding */ getRunApiV1ExtractionRunsRunIdGet),\n/* harmony export */   getRunApiV1Extractionv2RunsRunIdGet: () => (/* binding */ getRunApiV1Extractionv2RunsRunIdGet),\n/* harmony export */   getRunByJobIdApiV1ExtractionRunsByJobJobIdGet: () => (/* binding */ getRunByJobIdApiV1ExtractionRunsByJobJobIdGet),\n/* harmony export */   getRunByJobIdApiV1Extractionv2RunsByJobJobIdGet: () => (/* binding */ getRunByJobIdApiV1Extractionv2RunsByJobJobIdGet),\n/* harmony export */   getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet: () => (/* binding */ getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet),\n/* harmony export */   getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet: () => (/* binding */ getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet),\n/* harmony export */   getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet: () => (/* binding */ getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet),\n/* harmony export */   importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut: () => (/* binding */ importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut),\n/* harmony export */   listDataSinkDefinitionsApiV1ComponentDefinitionDataSinksGet: () => (/* binding */ listDataSinkDefinitionsApiV1ComponentDefinitionDataSinksGet),\n/* harmony export */   listDataSinksApiV1DataSinksGet: () => (/* binding */ listDataSinksApiV1DataSinksGet),\n/* harmony export */   listDataSourceDefinitionsApiV1ComponentDefinitionDataSourcesGet: () => (/* binding */ listDataSourceDefinitionsApiV1ComponentDefinitionDataSourcesGet),\n/* harmony export */   listDataSourcesApiV1DataSourcesGet: () => (/* binding */ listDataSourcesApiV1DataSourcesGet),\n/* harmony export */   listDatasetsForProjectApiV1ProjectsProjectIdEvalDatasetGet: () => (/* binding */ listDatasetsForProjectApiV1ProjectsProjectIdEvalDatasetGet),\n/* harmony export */   listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet: () => (/* binding */ listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet),\n/* harmony export */   listExtractRunsApiV1ExtractionRunsGet: () => (/* binding */ listExtractRunsApiV1ExtractionRunsGet),\n/* harmony export */   listExtractRunsApiV1Extractionv2RunsGet: () => (/* binding */ listExtractRunsApiV1Extractionv2RunsGet),\n/* harmony export */   listExtractionAgentsApiV1ExtractionExtractionAgentsGet: () => (/* binding */ listExtractionAgentsApiV1ExtractionExtractionAgentsGet),\n/* harmony export */   listExtractionAgentsApiV1Extractionv2ExtractionAgentsGet: () => (/* binding */ listExtractionAgentsApiV1Extractionv2ExtractionAgentsGet),\n/* harmony export */   listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet: () => (/* binding */ listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet),\n/* harmony export */   listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet: () => (/* binding */ listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet),\n/* harmony export */   listFilePagesFiguresApiV1FilesIdPageFiguresGet: () => (/* binding */ listFilePagesFiguresApiV1FilesIdPageFiguresGet),\n/* harmony export */   listFilesApiV1FilesGet: () => (/* binding */ listFilesApiV1FilesGet),\n/* harmony export */   listJobsApiV1ExtractionJobsGet: () => (/* binding */ listJobsApiV1ExtractionJobsGet),\n/* harmony export */   listJobsApiV1Extractionv2JobsGet: () => (/* binding */ listJobsApiV1Extractionv2JobsGet),\n/* harmony export */   listKeysApiV1ApiKeysGet: () => (/* binding */ listKeysApiV1ApiKeysGet),\n/* harmony export */   listLocalEvalSetsForProjectApiV1ProjectsProjectIdLocalevalsetsGet: () => (/* binding */ listLocalEvalSetsForProjectApiV1ProjectsProjectIdLocalevalsetsGet),\n/* harmony export */   listLocalEvalsForProjectApiV1ProjectsProjectIdLocalevalGet: () => (/* binding */ listLocalEvalsForProjectApiV1ProjectsProjectIdLocalevalGet),\n/* harmony export */   listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet: () => (/* binding */ listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet),\n/* harmony export */   listOrganizationsApiV1OrganizationsGet: () => (/* binding */ listOrganizationsApiV1OrganizationsGet),\n/* harmony export */   listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet: () => (/* binding */ listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet),\n/* harmony export */   listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet: () => (/* binding */ listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet),\n/* harmony export */   listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet: () => (/* binding */ listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet),\n/* harmony export */   listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get: () => (/* binding */ listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get),\n/* harmony export */   listPipelineFilesApiV1PipelinesPipelineIdFilesGet: () => (/* binding */ listPipelineFilesApiV1PipelinesPipelineIdFilesGet),\n/* harmony export */   listPipelineJobsApiV1PipelinesPipelineIdJobsGet: () => (/* binding */ listPipelineJobsApiV1PipelinesPipelineIdJobsGet),\n/* harmony export */   listProjectsApiV1ProjectsGet: () => (/* binding */ listProjectsApiV1ProjectsGet),\n/* harmony export */   listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet: () => (/* binding */ listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet),\n/* harmony export */   listPromptmixinPromptsApiV1ProjectsProjectIdPromptsGet: () => (/* binding */ listPromptmixinPromptsApiV1ProjectsProjectIdPromptsGet),\n/* harmony export */   listQuestionsApiV1EvalsDatasetsDatasetIdQuestionGet: () => (/* binding */ listQuestionsApiV1EvalsDatasetsDatasetIdQuestionGet),\n/* harmony export */   listReportsApiV1ReportsListGet: () => (/* binding */ listReportsApiV1ReportsListGet),\n/* harmony export */   listRetrieversApiV1RetrieversGet: () => (/* binding */ listRetrieversApiV1RetrieversGet),\n/* harmony export */   listRolesApiV1OrganizationsOrganizationIdRolesGet: () => (/* binding */ listRolesApiV1OrganizationsOrganizationIdRolesGet),\n/* harmony export */   listSupportedModelsApiV1EvalsModelsGet: () => (/* binding */ listSupportedModelsApiV1EvalsModelsGet),\n/* harmony export */   listTransformationDefinitionsApiV1ComponentDefinitionConfigurableTransformationsGet: () => (/* binding */ listTransformationDefinitionsApiV1ComponentDefinitionConfigurableTransformationsGet),\n/* harmony export */   metronome_plan_type: () => (/* binding */ metronome_plan_type),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet: () => (/* binding */ paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet),\n/* harmony export */   plan_frequency: () => (/* binding */ plan_frequency),\n/* harmony export */   readFileContentApiV1FilesIdContentGet: () => (/* binding */ readFileContentApiV1FilesIdContentGet),\n/* harmony export */   removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete: () => (/* binding */ removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete),\n/* harmony export */   removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete: () => (/* binding */ removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete),\n/* harmony export */   replaceQuestionApiV1EvalsQuestionsQuestionIdPut: () => (/* binding */ replaceQuestionApiV1EvalsQuestionsQuestionIdPut),\n/* harmony export */   restartReportApiV1ReportsReportIdRestartPost: () => (/* binding */ restartReportApiV1ReportsReportIdRestartPost),\n/* harmony export */   retrieveApiV1RetrieversRetrieverIdRetrievePost: () => (/* binding */ retrieveApiV1RetrieversRetrieverIdRetrievePost),\n/* harmony export */   runJobApiV1ExtractionJobsPost: () => (/* binding */ runJobApiV1ExtractionJobsPost),\n/* harmony export */   runJobApiV1Extractionv2JobsPost: () => (/* binding */ runJobApiV1Extractionv2JobsPost),\n/* harmony export */   runJobTestUserApiV1ExtractionJobsTestPost: () => (/* binding */ runJobTestUserApiV1ExtractionJobsTestPost),\n/* harmony export */   runJobTestUserApiV1Extractionv2JobsTestPost: () => (/* binding */ runJobTestUserApiV1Extractionv2JobsTestPost),\n/* harmony export */   runSearchApiV1PipelinesPipelineIdRetrievePost: () => (/* binding */ runSearchApiV1PipelinesPipelineIdRetrievePost),\n/* harmony export */   screenshotApiParsingScreenshotPost: () => (/* binding */ screenshotApiParsingScreenshotPost),\n/* harmony export */   screenshotApiV1ParsingScreenshotPost: () => (/* binding */ screenshotApiV1ParsingScreenshotPost),\n/* harmony export */   searchPipelinesApiV1PipelinesGet: () => (/* binding */ searchPipelinesApiV1PipelinesGet),\n/* harmony export */   setDefaultOrganizationApiV1OrganizationsDefaultPut: () => (/* binding */ setDefaultOrganizationApiV1OrganizationsDefaultPut),\n/* harmony export */   status: () => (/* binding */ status),\n/* harmony export */   stripeWebhookApiV1BillingWebhookPost: () => (/* binding */ stripeWebhookApiV1BillingWebhookPost),\n/* harmony export */   suggestEditsEndpointApiV1ReportsReportIdSuggestEditsPost: () => (/* binding */ suggestEditsEndpointApiV1ReportsReportIdSuggestEditsPost),\n/* harmony export */   syncFilesApiV1FilesSyncPut: () => (/* binding */ syncFilesApiV1FilesSyncPut),\n/* harmony export */   syncPipelineApiV1PipelinesPipelineIdSyncPost: () => (/* binding */ syncPipelineApiV1PipelinesPipelineIdSyncPost),\n/* harmony export */   syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost: () => (/* binding */ syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost),\n/* harmony export */   updateChatAppApiV1AppsIdPut: () => (/* binding */ updateChatAppApiV1AppsIdPut),\n/* harmony export */   updateDataSinkApiV1DataSinksDataSinkIdPut: () => (/* binding */ updateDataSinkApiV1DataSinksDataSinkIdPut),\n/* harmony export */   updateDataSourceApiV1DataSourcesDataSourceIdPut: () => (/* binding */ updateDataSourceApiV1DataSourcesDataSourceIdPut),\n/* harmony export */   updateDatasetApiV1EvalsDatasetsDatasetIdPut: () => (/* binding */ updateDatasetApiV1EvalsDatasetsDatasetIdPut),\n/* harmony export */   updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut: () => (/* binding */ updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut),\n/* harmony export */   updateExistingApiKeyApiV1ApiKeysApiKeyIdPut: () => (/* binding */ updateExistingApiKeyApiV1ApiKeysApiKeyIdPut),\n/* harmony export */   updateExistingPipelineApiV1PipelinesPipelineIdPut: () => (/* binding */ updateExistingPipelineApiV1PipelinesPipelineIdPut),\n/* harmony export */   updateExistingProjectApiV1ProjectsProjectIdPut: () => (/* binding */ updateExistingProjectApiV1ProjectsProjectIdPut),\n/* harmony export */   updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut: () => (/* binding */ updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut),\n/* harmony export */   updateExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdPut: () => (/* binding */ updateExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdPut),\n/* harmony export */   updateOrganizationApiV1OrganizationsOrganizationIdPut: () => (/* binding */ updateOrganizationApiV1OrganizationsOrganizationIdPut),\n/* harmony export */   updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut: () => (/* binding */ updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut),\n/* harmony export */   updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut: () => (/* binding */ updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut),\n/* harmony export */   updatePromptmixinPromptsApiV1ProjectsProjectIdPromptsPromptSetIdPut: () => (/* binding */ updatePromptmixinPromptsApiV1ProjectsProjectIdPromptsPromptSetIdPut),\n/* harmony export */   updateReportApiV1ReportsReportIdPatch: () => (/* binding */ updateReportApiV1ReportsReportIdPatch),\n/* harmony export */   updateReportMetadataApiV1ReportsReportIdPost: () => (/* binding */ updateReportMetadataApiV1ReportsReportIdPost),\n/* harmony export */   updateReportPlanApiV1ReportsReportIdPlanPatch: () => (/* binding */ updateReportPlanApiV1ReportsReportIdPlanPatch),\n/* harmony export */   updateRetrieverApiV1RetrieversRetrieverIdPut: () => (/* binding */ updateRetrieverApiV1RetrieversRetrieverIdPut),\n/* harmony export */   uploadFileApiParsingUploadPost: () => (/* binding */ uploadFileApiParsingUploadPost),\n/* harmony export */   uploadFileApiV1FilesPost: () => (/* binding */ uploadFileApiV1FilesPost),\n/* harmony export */   uploadFileApiV1ParsingUploadPost: () => (/* binding */ uploadFileApiV1ParsingUploadPost),\n/* harmony export */   uploadFileFromUrlApiV1FilesUploadFromUrlPut: () => (/* binding */ uploadFileFromUrlApiV1FilesUploadFromUrlPut),\n/* harmony export */   upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut: () => (/* binding */ upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut),\n/* harmony export */   upsertDataSinkApiV1DataSinksPut: () => (/* binding */ upsertDataSinkApiV1DataSinksPut),\n/* harmony export */   upsertDataSourceApiV1DataSourcesPut: () => (/* binding */ upsertDataSourceApiV1DataSourcesPut),\n/* harmony export */   upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut: () => (/* binding */ upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut),\n/* harmony export */   upsertOrganizationApiV1OrganizationsPut: () => (/* binding */ upsertOrganizationApiV1OrganizationsPut),\n/* harmony export */   upsertPipelineApiV1PipelinesPut: () => (/* binding */ upsertPipelineApiV1PipelinesPut),\n/* harmony export */   upsertProjectApiV1ProjectsPut: () => (/* binding */ upsertProjectApiV1ProjectsPut),\n/* harmony export */   upsertRetrieverApiV1RetrieversPut: () => (/* binding */ upsertRetrieverApiV1RetrieversPut),\n/* harmony export */   usageApiParsingUsageGet: () => (/* binding */ usageApiParsingUsageGet),\n/* harmony export */   usageApiV1ParsingUsageGet: () => (/* binding */ usageApiV1ParsingUsageGet),\n/* harmony export */   validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost: () => (/* binding */ validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost),\n/* harmony export */   validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost: () => (/* binding */ validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost),\n/* harmony export */   validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost: () => (/* binding */ validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost),\n/* harmony export */   validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost: () => (/* binding */ validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost),\n/* harmony export */   validateExtractionSchemaApiV1Extractionv2ExtractionAgentsSchemaValidationPost: () => (/* binding */ validateExtractionSchemaApiV1Extractionv2ExtractionAgentsSchemaValidationPost)\n/* harmony export */ });\nvar U = /\\{[^{}]+\\}/g, S = ({ allowReserved: t, name: r, value: e })=>{\n    if (e == null) return \"\";\n    if (typeof e == \"object\") throw new Error(\"Deeply-nested arrays/objects aren\\u2019t supported. Provide your own `querySerializer()` to handle these.\");\n    return `${r}=${t ? e : encodeURIComponent(e)}`;\n}, $ = (t)=>{\n    switch(t){\n        case \"label\":\n            return \".\";\n        case \"matrix\":\n            return \";\";\n        case \"simple\":\n            return \",\";\n        default:\n            return \"&\";\n    }\n}, k = (t)=>{\n    switch(t){\n        case \"form\":\n            return \",\";\n        case \"pipeDelimited\":\n            return \"|\";\n        case \"spaceDelimited\":\n            return \"%20\";\n        default:\n            return \",\";\n    }\n}, D = (t)=>{\n    switch(t){\n        case \"label\":\n            return \".\";\n        case \"matrix\":\n            return \";\";\n        case \"simple\":\n            return \",\";\n        default:\n            return \"&\";\n    }\n}, j = ({ allowReserved: t, explode: r, name: e, style: s, value: o })=>{\n    if (!r) {\n        let n = (t ? o : o.map((c)=>encodeURIComponent(c))).join(k(s));\n        switch(s){\n            case \"label\":\n                return `.${n}`;\n            case \"matrix\":\n                return `;${e}=${n}`;\n            case \"simple\":\n                return n;\n            default:\n                return `${e}=${n}`;\n        }\n    }\n    let a = $(s), i = o.map((n)=>s === \"label\" || s === \"simple\" ? t ? n : encodeURIComponent(n) : S({\n            allowReserved: t,\n            name: e,\n            value: n\n        })).join(a);\n    return s === \"label\" || s === \"matrix\" ? a + i : i;\n}, A = ({ allowReserved: t, explode: r, name: e, style: s, value: o })=>{\n    if (o instanceof Date) return `${e}=${o.toISOString()}`;\n    if (s !== \"deepObject\" && !r) {\n        let n = [];\n        Object.entries(o).forEach(([f, p])=>{\n            n = [\n                ...n,\n                f,\n                t ? p : encodeURIComponent(p)\n            ];\n        });\n        let c = n.join(\",\");\n        switch(s){\n            case \"form\":\n                return `${e}=${c}`;\n            case \"label\":\n                return `.${c}`;\n            case \"matrix\":\n                return `;${e}=${c}`;\n            default:\n                return c;\n        }\n    }\n    let a = D(s), i = Object.entries(o).map(([n, c])=>S({\n            allowReserved: t,\n            name: s === \"deepObject\" ? `${e}[${n}]` : n,\n            value: c\n        })).join(a);\n    return s === \"label\" || s === \"matrix\" ? a + i : i;\n}, _ = ({ path: t, url: r })=>{\n    let e = r, s = r.match(U);\n    if (s) for (let o of s){\n        let a = false, i = o.substring(1, o.length - 1), n = \"simple\";\n        i.endsWith(\"*\") && (a = true, i = i.substring(0, i.length - 1)), i.startsWith(\".\") ? (i = i.substring(1), n = \"label\") : i.startsWith(\";\") && (i = i.substring(1), n = \"matrix\");\n        let c = t[i];\n        if (c == null) continue;\n        if (Array.isArray(c)) {\n            e = e.replace(o, j({\n                explode: a,\n                name: i,\n                style: n,\n                value: c\n            }));\n            continue;\n        }\n        if (typeof c == \"object\") {\n            e = e.replace(o, A({\n                explode: a,\n                name: i,\n                style: n,\n                value: c\n            }));\n            continue;\n        }\n        if (n === \"matrix\") {\n            e = e.replace(o, `;${S({\n                name: i,\n                value: c\n            })}`);\n            continue;\n        }\n        let f = encodeURIComponent(n === \"label\" ? `.${c}` : c);\n        e = e.replace(o, f);\n    }\n    return e;\n}, C = ({ allowReserved: t, array: r, object: e } = {})=>(o)=>{\n        let a = [];\n        if (o && typeof o == \"object\") for(let i in o){\n            let n = o[i];\n            if (n != null) {\n                if (Array.isArray(n)) {\n                    a = [\n                        ...a,\n                        j({\n                            allowReserved: t,\n                            explode: true,\n                            name: i,\n                            style: \"form\",\n                            value: n,\n                            ...r\n                        })\n                    ];\n                    continue;\n                }\n                if (typeof n == \"object\") {\n                    a = [\n                        ...a,\n                        A({\n                            allowReserved: t,\n                            explode: true,\n                            name: i,\n                            style: \"deepObject\",\n                            value: n,\n                            ...e\n                        })\n                    ];\n                    continue;\n                }\n                a = [\n                    ...a,\n                    S({\n                        allowReserved: t,\n                        name: i,\n                        value: n\n                    })\n                ];\n            }\n        }\n        return a.join(\"&\");\n    }, w = (t)=>{\n    if (!t) return \"stream\";\n    let r = t.split(\";\")[0]?.trim();\n    if (r) {\n        if (r.startsWith(\"application/json\") || r.endsWith(\"+json\")) return \"json\";\n        if (r === \"multipart/form-data\") return \"formData\";\n        if ([\n            \"application/\",\n            \"audio/\",\n            \"image/\",\n            \"video/\"\n        ].some((e)=>r.startsWith(e))) return \"blob\";\n        if (r.startsWith(\"text/\")) return \"text\";\n    }\n}, H = async (t, r)=>{\n    let e = typeof r == \"function\" ? await r(t) : r;\n    if (e) return t.scheme === \"bearer\" ? `Bearer ${e}` : t.scheme === \"basic\" ? `Basic ${btoa(e)}` : e;\n}, P = async ({ security: t, ...r })=>{\n    for (let e of t){\n        let s = await H(e, r.auth);\n        if (!s) continue;\n        let o = e.name ?? \"Authorization\";\n        switch(e.in){\n            case \"query\":\n                r.query || (r.query = {}), r.query[o] = s;\n                break;\n            case \"header\":\n            default:\n                r.headers.set(o, s);\n                break;\n        }\n        return;\n    }\n}, b = (t)=>B({\n        baseUrl: t.baseUrl ?? \"\",\n        path: t.path,\n        query: t.query,\n        querySerializer: typeof t.querySerializer == \"function\" ? t.querySerializer : C(t.querySerializer),\n        url: t.url\n    }), B = ({ baseUrl: t, path: r, query: e, querySerializer: s, url: o })=>{\n    let a = o.startsWith(\"/\") ? o : `/${o}`, i = t + a;\n    r && (i = _({\n        path: r,\n        url: i\n    }));\n    let n = e ? s(e) : \"\";\n    return n.startsWith(\"?\") && (n = n.substring(1)), n && (i += `?${n}`), i;\n}, R = (t, r)=>{\n    let e = {\n        ...t,\n        ...r\n    };\n    return e.baseUrl?.endsWith(\"/\") && (e.baseUrl = e.baseUrl.substring(0, e.baseUrl.length - 1)), e.headers = O(t.headers, r.headers), e;\n}, O = (...t)=>{\n    let r = new Headers;\n    for (let e of t){\n        if (!e || typeof e != \"object\") continue;\n        let s = e instanceof Headers ? e.entries() : Object.entries(e);\n        for (let [o, a] of s)if (a === null) r.delete(o);\n        else if (Array.isArray(a)) for (let i of a)r.append(o, i);\n        else a !== undefined && r.set(o, typeof a == \"object\" ? JSON.stringify(a) : a);\n    }\n    return r;\n}, y = class {\n    constructor(){\n        this._fns = [];\n    }\n    clear() {\n        this._fns = [];\n    }\n    exists(r) {\n        return this._fns.indexOf(r) !== -1;\n    }\n    eject(r) {\n        let e = this._fns.indexOf(r);\n        e !== -1 && (this._fns = [\n            ...this._fns.slice(0, e),\n            ...this._fns.slice(e + 1)\n        ]);\n    }\n    use(r) {\n        this._fns = [\n            ...this._fns,\n            r\n        ];\n    }\n}, E = ()=>({\n        error: new y,\n        request: new y,\n        response: new y\n    }), x = (t, r, e)=>{\n    typeof e == \"string\" || e instanceof Blob ? t.append(r, e) : t.append(r, JSON.stringify(e));\n}, W = {\n    bodySerializer: (t)=>{\n        let r = new FormData;\n        return Object.entries(t).forEach(([e, s])=>{\n            s != null && (Array.isArray(s) ? s.forEach((o)=>x(r, e, o)) : x(r, e, s));\n        }), r;\n    }\n}, I = {\n    bodySerializer: (t)=>JSON.stringify(t)\n}, Q = C({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: \"form\"\n    },\n    object: {\n        explode: true,\n        style: \"deepObject\"\n    }\n}), V = {\n    \"Content-Type\": \"application/json\"\n}, q = (t = {})=>({\n        ...I,\n        baseUrl: \"\",\n        headers: V,\n        parseAs: \"auto\",\n        querySerializer: Q,\n        ...t\n    });\nvar M = (t = {})=>{\n    let r = R(q(), t), e = ()=>({\n            ...r\n        }), s = (i)=>(r = R(r, i), e()), o = E(), a = async (i)=>{\n        let n = {\n            ...r,\n            ...i,\n            fetch: i.fetch ?? r.fetch ?? globalThis.fetch,\n            headers: O(r.headers, i.headers)\n        };\n        n.security && await P({\n            ...n,\n            security: n.security\n        }), n.body && n.bodySerializer && (n.body = n.bodySerializer(n.body)), n.body || n.headers.delete(\"Content-Type\");\n        let c = b(n), f = {\n            redirect: \"follow\",\n            ...n\n        }, p = new Request(c, f);\n        for (let u of o.request._fns)p = await u(p, n);\n        let T = n.fetch, l = await T(p);\n        for (let u of o.response._fns)l = await u(l, p, n);\n        let h = {\n            request: p,\n            response: l\n        };\n        if (l.ok) {\n            if (l.status === 204 || l.headers.get(\"Content-Length\") === \"0\") return {\n                data: {},\n                ...h\n            };\n            let u = (n.parseAs === \"auto\" ? w(l.headers.get(\"Content-Type\")) : n.parseAs) ?? \"json\";\n            if (u === \"stream\") return {\n                data: l.body,\n                ...h\n            };\n            let g = await l[u]();\n            return u === \"json\" && (n.responseValidator && await n.responseValidator(g), n.responseTransformer && (g = await n.responseTransformer(g))), {\n                data: g,\n                ...h\n            };\n        }\n        let m = await l.text();\n        try {\n            m = JSON.parse(m);\n        } catch  {}\n        let d = m;\n        for (let u of o.error._fns)d = await u(m, l, p, n);\n        if (d = d || {}, n.throwOnError) throw d;\n        return {\n            error: d,\n            ...h\n        };\n    };\n    return {\n        buildUrl: b,\n        connect: (i)=>a({\n                ...i,\n                method: \"CONNECT\"\n            }),\n        delete: (i)=>a({\n                ...i,\n                method: \"DELETE\"\n            }),\n        get: (i)=>a({\n                ...i,\n                method: \"GET\"\n            }),\n        getConfig: e,\n        head: (i)=>a({\n                ...i,\n                method: \"HEAD\"\n            }),\n        interceptors: o,\n        options: (i)=>a({\n                ...i,\n                method: \"OPTIONS\"\n            }),\n        patch: (i)=>a({\n                ...i,\n                method: \"PATCH\"\n            }),\n        post: (i)=>a({\n                ...i,\n                method: \"POST\"\n            }),\n        put: (i)=>a({\n                ...i,\n                method: \"PUT\"\n            }),\n        request: a,\n        setConfig: s,\n        trace: (i)=>a({\n                ...i,\n                method: \"TRACE\"\n            })\n    };\n};\n\n// This file is auto-generated by @hey-api/openapi-ts\nconst client = M(q());\n/**\n * Generate Key\n * Generate a new API Key.\n */ const generateKeyApiV1ApiKeysPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/api-keys\"\n    });\n};\n/**\n * List Keys\n * List API Keys for a user.\n */ const listKeysApiV1ApiKeysGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/api-keys\"\n    });\n};\n/**\n * Delete Api Key\n * Delete an API Key by ID.\n */ const deleteApiKeyApiV1ApiKeysApiKeyIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/api-keys/{api_key_id}\"\n    });\n};\n/**\n * Update Existing Api Key\n * Update name of an existing API Key.\n */ const updateExistingApiKeyApiV1ApiKeysApiKeyIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/api-keys/{api_key_id}\"\n    });\n};\n/**\n * Validate Embedding Connection\n * Validate an embedding connection.\n *\n * Args:\n * embedding_config: The embedding configuration to validate.\n * pipeline_id: If provided, the embedding connection will be validated for the pipeline.\n * user: The user to validate the embedding connection for.\n * db: The database session.\n *\n * Returns:\n * A BaseConnectionValidation object indicating the result of the validation.\n */ const validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/validate-integrations/validate-embedding-connection\"\n    });\n};\n/**\n * Validate Data Source Connection\n * Validate a data source connection.\n */ const validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/validate-integrations/validate-data-source-connection\"\n    });\n};\n/**\n * Validate Data Sink Connection\n * Validate a data sink connection.\n */ const validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/validate-integrations/validate-data-sink-connection\"\n    });\n};\n/**\n * List Data Sinks\n * List data sinks for a given project.\n */ const listDataSinksApiV1DataSinksGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/data-sinks\"\n    });\n};\n/**\n * Create Data Sink\n * Create a new data sink.\n */ const createDataSinkApiV1DataSinksPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/data-sinks\"\n    });\n};\n/**\n * Upsert Data Sink\n * Upserts a data sink.\n * Updates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.\n */ const upsertDataSinkApiV1DataSinksPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/data-sinks\"\n    });\n};\n/**\n * Get Data Sink\n * Get a data sink by ID.\n */ const getDataSinkApiV1DataSinksDataSinkIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/data-sinks/{data_sink_id}\"\n    });\n};\n/**\n * Update Data Sink\n * Update a data sink by ID.\n */ const updateDataSinkApiV1DataSinksDataSinkIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/data-sinks/{data_sink_id}\"\n    });\n};\n/**\n * Delete Data Sink\n * Delete a data sink by ID.\n */ const deleteDataSinkApiV1DataSinksDataSinkIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/data-sinks/{data_sink_id}\"\n    });\n};\n/**\n * List Data Sources\n * List data sources for a given project.\n * If project_id is not provided, uses the default project.\n */ const listDataSourcesApiV1DataSourcesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/data-sources\"\n    });\n};\n/**\n * Create Data Source\n * Create a new data source.\n */ const createDataSourceApiV1DataSourcesPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/data-sources\"\n    });\n};\n/**\n * Upsert Data Source\n * Upserts a data source.\n * Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.\n */ const upsertDataSourceApiV1DataSourcesPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/data-sources\"\n    });\n};\n/**\n * Get Data Source\n * Get a data source by ID.\n */ const getDataSourceApiV1DataSourcesDataSourceIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/data-sources/{data_source_id}\"\n    });\n};\n/**\n * Update Data Source\n * Update a data source by ID.\n */ const updateDataSourceApiV1DataSourcesDataSourceIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/data-sources/{data_source_id}\"\n    });\n};\n/**\n * Delete Data Source\n * Delete a data source by ID.\n */ const deleteDataSourceApiV1DataSourcesDataSourceIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/data-sources/{data_source_id}\"\n    });\n};\n/**\n * List Embedding Model Configs\n */ const listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/embedding-model-configs\"\n    });\n};\n/**\n * Create a new Embedding Model Configuration\n * Create a new embedding model configuration within a specified project.\n */ const createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/embedding-model-configs\"\n    });\n};\n/**\n * Upsert Embedding Model Config\n * Upserts an embedding model config.\n * Updates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.\n */ const upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/embedding-model-configs\"\n    });\n};\n/**\n * Update Embedding Model Config\n * Update an embedding model config by ID.\n */ const updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/embedding-model-configs/{embedding_model_config_id}\"\n    });\n};\n/**\n * Delete Embedding Model Config\n * Delete an embedding model config by ID.\n */ const deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/embedding-model-configs/{embedding_model_config_id}\"\n    });\n};\n/**\n * Create Organization\n * Create a new organization.\n */ const createOrganizationApiV1OrganizationsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/organizations\"\n    });\n};\n/**\n * Upsert Organization\n * Upsert a new organization.\n */ const upsertOrganizationApiV1OrganizationsPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations\"\n    });\n};\n/**\n * List Organizations\n * List organizations for a user.\n */ const listOrganizationsApiV1OrganizationsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations\"\n    });\n};\n/**\n * Set Default Organization\n * Set the default organization for the user.\n */ const setDefaultOrganizationApiV1OrganizationsDefaultPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations/default\"\n    });\n};\n/**\n * Get Default Organization\n * Get the default organization for the user.\n */ const getDefaultOrganizationApiV1OrganizationsDefaultGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/default\"\n    });\n};\n/**\n * Get Organization\n * Get an organization by ID.\n */ const getOrganizationApiV1OrganizationsOrganizationIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}\"\n    });\n};\n/**\n * Update Organization\n * Update an existing organization.\n */ const updateOrganizationApiV1OrganizationsOrganizationIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}\"\n    });\n};\n/**\n * Delete Organization\n * Delete an organization by ID.\n */ const deleteOrganizationApiV1OrganizationsOrganizationIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}\"\n    });\n};\n/**\n * Get Organization Usage\n * Get usage for a project\n */ const getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/usage\"\n    });\n};\n/**\n * List Organization Users\n * Get all users in an organization.\n */ const listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users\"\n    });\n};\n/**\n * Add Users To Organization\n * Add a user to an organization.\n */ const addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users\"\n    });\n};\n/**\n * Remove Users From Organization\n * Remove users from an organization by email.\n */ const removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/{member_user_id}\"\n    });\n};\n/**\n * Batch Remove Users From Organization\n * Remove a batch of users from an organization.\n */ const batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/remove\"\n    });\n};\n/**\n * List Roles\n * List all roles in an organization.\n */ const listRolesApiV1OrganizationsOrganizationIdRolesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/roles\"\n    });\n};\n/**\n * Assign Role To User In Organization\n * Assign a role to a user in an organization.\n */ const assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/roles\"\n    });\n};\n/**\n * Get User Role\n * Get the role of a user in an organization.\n */ const getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/roles\"\n    });\n};\n/**\n * List Projects By User\n * List all projects for a user in an organization.\n */ const listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/{user_id}/projects\"\n    });\n};\n/**\n * Add User To Project\n * Add a user to a project.\n */ const addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/{user_id}/projects\"\n    });\n};\n/**\n * Remove User From Project\n * Remove a user from a project.\n */ const removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/organizations/{organization_id}/users/{user_id}/projects/{project_id}\"\n    });\n};\n/**\n * List Projects\n * List projects or get one by name\n */ const listProjectsApiV1ProjectsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects\"\n    });\n};\n/**\n * Create Project\n * Create a new project.\n */ const createProjectApiV1ProjectsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/projects\"\n    });\n};\n/**\n * Upsert Project\n * Upsert a project.\n * Updates if a project with the same name already exists. Otherwise, creates a new project.\n */ const upsertProjectApiV1ProjectsPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/projects\"\n    });\n};\n/**\n * Delete Project\n * Delete a project by ID.\n */ const deleteProjectApiV1ProjectsProjectIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/projects/{project_id}\"\n    });\n};\n/**\n * Get Project\n * Get a project by ID.\n */ const getProjectApiV1ProjectsProjectIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects/{project_id}\"\n    });\n};\n/**\n * Update Existing Project\n * Update an existing project.\n */ const updateExistingProjectApiV1ProjectsProjectIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/projects/{project_id}\"\n    });\n};\n/**\n * Get Project Usage\n * Get usage for a project\n */ const getProjectUsageApiV1ProjectsProjectIdUsageGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/usage\"\n    });\n};\n/**\n * Create Eval Dataset For Project\n * Create a new eval dataset for a project.\n */ const createEvalDatasetForProjectApiV1ProjectsProjectIdEvalDatasetPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/eval/dataset\"\n    });\n};\n/**\n * List Datasets For Project\n * List eval datasets for a project.\n */ const listDatasetsForProjectApiV1ProjectsProjectIdEvalDatasetGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/eval/dataset\"\n    });\n};\n/**\n * Create Local Eval Set For Project\n * Create a new local eval set.\n */ const createLocalEvalSetForProjectApiV1ProjectsProjectIdLocalevalsetPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/localevalset\"\n    });\n};\n/**\n * List Local Evals For Project\n * List local eval results for a project.\n */ const listLocalEvalsForProjectApiV1ProjectsProjectIdLocalevalGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/localeval\"\n    });\n};\n/**\n * List Local Eval Sets For Project\n * List local eval sets for a project.\n */ const listLocalEvalSetsForProjectApiV1ProjectsProjectIdLocalevalsetsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/localevalsets\"\n    });\n};\n/**\n * Delete Local Eval Set\n * Delete a local eval set.\n */ const deleteLocalEvalSetApiV1ProjectsProjectIdLocalevalsetLocalEvalSetIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/localevalset/{local_eval_set_id}\"\n    });\n};\n/**\n * Create Prompt Mixin Prompts\n * Create a new PromptMixin prompt set.\n */ const createPromptMixinPromptsApiV1ProjectsProjectIdPromptsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/prompts\"\n    });\n};\n/**\n * List Promptmixin Prompts\n * List PromptMixin prompt sets for a project.\n */ const listPromptmixinPromptsApiV1ProjectsProjectIdPromptsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/prompts\"\n    });\n};\n/**\n * Update Promptmixin Prompts\n * Update a PromptMixin prompt set.\n */ const updatePromptmixinPromptsApiV1ProjectsProjectIdPromptsPromptSetIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/prompts/{prompt_set_id}\"\n    });\n};\n/**\n * Delete Prompt Mixin Prompts\n * Delete a PromptMixin prompt set.\n */ const deletePromptMixinPromptsApiV1ProjectsProjectIdPromptsPromptSetIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/projects/{project_id}/prompts/{prompt_set_id}\"\n    });\n};\n/**\n * Get File\n * Read File metadata objects.\n */ const getFileApiV1FilesIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}\"\n    });\n};\n/**\n * Delete File\n * Delete the file from S3.\n */ const deleteFileApiV1FilesIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/files/{id}\"\n    });\n};\n/**\n * List Files\n * Read File metadata objects.\n */ const listFilesApiV1FilesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files\"\n    });\n};\n/**\n * Generate Presigned Url\n * Create a presigned url for uploading a file.\n */ const generatePresignedUrlApiV1FilesPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/files\"\n    });\n};\n/**\n * Upload File\n * Upload a file to S3.\n */ const uploadFileApiV1FilesPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/v1/files\"\n    });\n};\n/**\n * Sync Files\n * Sync Files API against file contents uploaded via S3 presigned urls.\n */ const syncFilesApiV1FilesSyncPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/files/sync\"\n    });\n};\n/**\n * Upload File From Url\n * Upload a file to S3 from a URL.\n */ const uploadFileFromUrlApiV1FilesUploadFromUrlPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/files/upload_from_url\"\n    });\n};\n/**\n * Read File Content\n * Returns a presigned url to read the file content.\n */ const readFileContentApiV1FilesIdContentGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}/content\"\n    });\n};\n/**\n * List File Page Screenshots\n * List metadata for all screenshots of pages from a file.\n */ const listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}/page_screenshots\"\n    });\n};\n/**\n * Get File Page Screenshot\n * Get screenshot of a page from a file.\n */ const getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}/page_screenshots/{page_index}\"\n    });\n};\n/**\n * List File Pages Figures\n */ const listFilePagesFiguresApiV1FilesIdPageFiguresGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}/page-figures\"\n    });\n};\n/**\n * List File Page Figures\n */ const listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}/page-figures/{page_index}\"\n    });\n};\n/**\n * Get File Page Figure\n */ const getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/files/{id}/page-figures/{page_index}/{figure_name}\"\n    });\n};\n/**\n * Search Pipelines\n * Search for pipelines by various parameters.\n */ const searchPipelinesApiV1PipelinesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines\"\n    });\n};\n/**\n * Create Pipeline\n * Create a new pipeline for a project.\n */ const createPipelineApiV1PipelinesPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines\"\n    });\n};\n/**\n * Upsert Pipeline\n * Upsert a pipeline for a project.\n * Updates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.\n */ const upsertPipelineApiV1PipelinesPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines\"\n    });\n};\n/**\n * Get Pipeline\n * Get a pipeline by ID for a given project.\n */ const getPipelineApiV1PipelinesPipelineIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}\"\n    });\n};\n/**\n * Update Existing Pipeline\n * Update an existing pipeline for a project.\n */ const updateExistingPipelineApiV1PipelinesPipelineIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}\"\n    });\n};\n/**\n * Delete Pipeline\n * Delete a pipeline by ID.\n */ const deletePipelineApiV1PipelinesPipelineIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}\"\n    });\n};\n/**\n * Get Pipeline Status\n * Get the status of a pipeline by ID.\n */ const getPipelineStatusApiV1PipelinesPipelineIdStatusGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/status\"\n    });\n};\n/**\n * Sync Pipeline\n * Run ingestion for the pipeline by incrementally updating the data-sink with upstream changes from data-sources & files.\n */ const syncPipelineApiV1PipelinesPipelineIdSyncPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/sync\"\n    });\n};\n/**\n * Cancel Pipeline Sync\n */ const cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/sync/cancel\"\n    });\n};\n/**\n * Copy Pipeline\n * Copy a pipeline by ID.\n */ const copyPipelineApiV1PipelinesPipelineIdCopyPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/copy\"\n    });\n};\n/**\n * Execute Eval Dataset\n * Execute a dataset.\n */ const executeEvalDatasetApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecutePost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute\"\n    });\n};\n/**\n * Get Eval Dataset Executions\n * Get the status of an EvalDatasetExecution.\n */ const getEvalDatasetExecutionsApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute\"\n    });\n};\n/**\n * Get Eval Dataset Execution Result\n * Get the result of an EvalDatasetExecution.\n * If eval_question_ids is specified, only the results for the specified\n * questions will be returned.\n * If any of the specified questions do not have a result, they will be ignored.\n */ const getEvalDatasetExecutionResultApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteResultGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute/result\"\n    });\n};\n/**\n * Get Eval Dataset Execution\n * Get the status of an EvalDatasetExecution.\n */ const getEvalDatasetExecutionApiV1PipelinesPipelineIdEvalDatasetsEvalDatasetIdExecuteEvalDatasetExecutionIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/eval-datasets/{eval_dataset_id}/execute/{eval_dataset_execution_id}\"\n    });\n};\n/**\n * @deprecated\n * List Pipeline Files\n * Get files for a pipeline.\n */ const listPipelineFilesApiV1PipelinesPipelineIdFilesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/files\"\n    });\n};\n/**\n * Add Files To Pipeline\n * Add files to a pipeline.\n */ const addFilesToPipelineApiV1PipelinesPipelineIdFilesPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/files\"\n    });\n};\n/**\n * @deprecated\n * List Pipeline Files2\n * Get files for a pipeline.\n */ const listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/files2\"\n    });\n};\n/**\n * Get Pipeline File Status\n * Get status of a file for a pipeline.\n */ const getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/files/{file_id}/status\"\n    });\n};\n/**\n * Update Pipeline File\n * Update a file for a pipeline.\n */ const updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/files/{file_id}\"\n    });\n};\n/**\n * Delete Pipeline File\n * Delete a file from a pipeline.\n */ const deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/files/{file_id}\"\n    });\n};\n/**\n * Import Pipeline Metadata\n * Import metadata for a pipeline.\n */ const importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/v1/pipelines/{pipeline_id}/metadata\"\n    });\n};\n/**\n * Delete Pipeline Files Metadata\n * Delete metadata for all files in a pipeline.\n */ const deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/metadata\"\n    });\n};\n/**\n * List Pipeline Data Sources\n * Get data sources for a pipeline.\n */ const listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/data-sources\"\n    });\n};\n/**\n * Add Data Sources To Pipeline\n * Add data sources to a pipeline.\n */ const addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/data-sources\"\n    });\n};\n/**\n * Update Pipeline Data Source\n * Update the configuration of a data source in a pipeline.\n */ const updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}\"\n    });\n};\n/**\n * Delete Pipeline Data Source\n * Delete a data source from a pipeline.\n */ const deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}\"\n    });\n};\n/**\n * Sync Pipeline Data Source\n * Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.\n */ const syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/sync\"\n    });\n};\n/**\n * Get Pipeline Data Source Status\n * Get the status of a data source for a pipeline.\n */ const getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/status\"\n    });\n};\n/**\n * Run Search\n * Get retrieval results for a managed pipeline and a query\n */ const runSearchApiV1PipelinesPipelineIdRetrievePost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/retrieve\"\n    });\n};\n/**\n * List Pipeline Jobs\n * Get jobs for a pipeline.\n */ const listPipelineJobsApiV1PipelinesPipelineIdJobsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/jobs\"\n    });\n};\n/**\n * Get Pipeline Job\n * Get a job for a pipeline.\n */ const getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/jobs/{job_id}\"\n    });\n};\n/**\n * Get Playground Session\n * Get a playground session for a user and pipeline.\n */ const getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/playground-session\"\n    });\n};\n/**\n * Chat\n * Make a retrieval query + chat completion for a managed pipeline.\n */ const chatApiV1PipelinesPipelineIdChatPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/chat\"\n    });\n};\n/**\n * Create Batch Pipeline Documents\n * Batch create documents for a pipeline.\n */ const createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents\"\n    });\n};\n/**\n * List Pipeline Documents\n * Return a list of documents for a pipeline.\n */ const listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents\"\n    });\n};\n/**\n * Upsert Batch Pipeline Documents\n * Batch create or update a document for a pipeline.\n */ const upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents\"\n    });\n};\n/**\n * Paginated List Pipeline Documents\n * Return a list of documents for a pipeline.\n */ const paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents/paginated\"\n    });\n};\n/**\n * Get Pipeline Document\n * Return a single document for a pipeline.\n */ const getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents/{document_id}\"\n    });\n};\n/**\n * Delete Pipeline Document\n * Delete a document for a pipeline.\n */ const deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents/{document_id}\"\n    });\n};\n/**\n * Get Pipeline Document Status\n * Return a single document for a pipeline.\n */ const getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents/{document_id}/status\"\n    });\n};\n/**\n * List Pipeline Document Chunks\n * Return a list of chunks for a pipeline document.\n */ const listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/pipelines/{pipeline_id}/documents/{document_id}/chunks\"\n    });\n};\n/**\n * Create Retriever\n * Create a new Retriever.\n */ const createRetrieverApiV1RetrieversPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/retrievers\"\n    });\n};\n/**\n * Upsert Retriever\n * Upsert a new Retriever.\n */ const upsertRetrieverApiV1RetrieversPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/retrievers\"\n    });\n};\n/**\n * List Retrievers\n * List Retrievers for a project.\n */ const listRetrieversApiV1RetrieversGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/retrievers\"\n    });\n};\n/**\n * Get Retriever\n * Get a Retriever by ID.\n */ const getRetrieverApiV1RetrieversRetrieverIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/retrievers/{retriever_id}\"\n    });\n};\n/**\n * Update Retriever\n * Update an existing Retriever.\n */ const updateRetrieverApiV1RetrieversRetrieverIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/retrievers/{retriever_id}\"\n    });\n};\n/**\n * Delete Retriever\n * Delete a Retriever by ID.\n */ const deleteRetrieverApiV1RetrieversRetrieverIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/retrievers/{retriever_id}\"\n    });\n};\n/**\n * Retrieve\n * Retrieve data using a Retriever.\n */ const retrieveApiV1RetrieversRetrieverIdRetrievePost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/retrievers/{retriever_id}/retrieve\"\n    });\n};\n/**\n * Get Jobs\n * Get jobs for a project.\n */ const getJobsApiV1JobsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/jobs/\"\n    });\n};\n/**\n * Get Dataset\n * Get a dataset by ID.\n */ const getDatasetApiV1EvalsDatasetsDatasetIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/evals/datasets/{dataset_id}\"\n    });\n};\n/**\n * Update Dataset\n * Update a dataset.\n */ const updateDatasetApiV1EvalsDatasetsDatasetIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/evals/datasets/{dataset_id}\"\n    });\n};\n/**\n * Delete Dataset\n * Delete a dataset.\n */ const deleteDatasetApiV1EvalsDatasetsDatasetIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/evals/datasets/{dataset_id}\"\n    });\n};\n/**\n * Create Question\n * Create a new question.\n */ const createQuestionApiV1EvalsDatasetsDatasetIdQuestionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/evals/datasets/{dataset_id}/question\"\n    });\n};\n/**\n * List Questions\n * List questions for a dataset.\n */ const listQuestionsApiV1EvalsDatasetsDatasetIdQuestionGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/evals/datasets/{dataset_id}/question\"\n    });\n};\n/**\n * Create Questions\n * Create a new question.\n */ const createQuestionsApiV1EvalsDatasetsDatasetIdQuestionsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/evals/datasets/{dataset_id}/questions\"\n    });\n};\n/**\n * Get Question\n * Get a question by ID.\n */ const getQuestionApiV1EvalsQuestionsQuestionIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/evals/questions/{question_id}\"\n    });\n};\n/**\n * Replace Question\n * Replace a question.\n */ const replaceQuestionApiV1EvalsQuestionsQuestionIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/evals/questions/{question_id}\"\n    });\n};\n/**\n * Delete Question\n * Delete a question.\n */ const deleteQuestionApiV1EvalsQuestionsQuestionIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/evals/questions/{question_id}\"\n    });\n};\n/**\n * List Supported Models\n * List supported models.\n */ const listSupportedModelsApiV1EvalsModelsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/evals/models\"\n    });\n};\n/**\n * Get Job Image Result\n * Get a job by id\n */ const getJobImageResultApiV1ParsingJobJobIdResultImageNameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/image/{name}\"\n    });\n};\n/**\n * Get Supported File Extensions\n * Get a list of supported file extensions\n */ const getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/supported_file_extensions\"\n    });\n};\n/**\n * Screenshot\n */ const screenshotApiV1ParsingScreenshotPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/v1/parsing/screenshot\"\n    });\n};\n/**\n * Upload File\n * Upload a file to s3 and create a job. return a job id\n */ const uploadFileApiV1ParsingUploadPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/v1/parsing/upload\"\n    });\n};\n/**\n * Usage\n * DEPRECATED: use either /organizations/{organization_id}/usage or /projects/{project_id}/usage instead\n * Get parsing usage for user\n */ const usageApiV1ParsingUsageGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/usage\"\n    });\n};\n/**\n * Get Job\n * Get a job by id\n */ const getJobApiV1ParsingJobJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}\"\n    });\n};\n/**\n * Get Parsing Job Details\n * Get a job by id\n */ const getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/details\"\n    });\n};\n/**\n * Get Job Text Result\n * Get a job by id\n */ const getJobTextResultApiV1ParsingJobJobIdResultTextGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/text\"\n    });\n};\n/**\n * Get Job Raw Text Result\n * Get a job by id\n */ const getJobRawTextResultApiV1ParsingJobJobIdResultRawTextGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/raw/text\"\n    });\n};\n/**\n * Get Job Raw Text Result\n * Get a job by id\n */ const getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/pdf\"\n    });\n};\n/**\n * Get Job Raw Text Result\n * Get a job by id\n */ const getJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/raw/pdf\"\n    });\n};\n/**\n * Get Job Structured Result\n * Get a job by id\n */ const getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/structured\"\n    });\n};\n/**\n * Get Job Raw Structured Result\n * Get a job by id\n */ const getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/raw/structured\"\n    });\n};\n/**\n * Get Job Raw Xlsx Result\n * Get a job by id\n */ const getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/xlsx\"\n    });\n};\n/**\n * Get Job Raw Xlsx Result\n * Get a job by id\n */ const getJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/raw/xlsx\"\n    });\n};\n/**\n * Get Job Result\n * Get a job by id\n */ const getJobResultApiV1ParsingJobJobIdResultMarkdownGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/markdown\"\n    });\n};\n/**\n * Get Job Raw Md Result\n * Get a job by id\n */ const getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/raw/markdown\"\n    });\n};\n/**\n * Get Job Json Result\n * Get a job by id\n */ const getJobJsonResultApiV1ParsingJobJobIdResultJsonGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/json\"\n    });\n};\n/**\n * Get Job Json Raw Result\n * Get a job by id\n */ const getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/result/raw/json\"\n    });\n};\n/**\n * Get Parsing History Result\n * Get parsing history for user\n */ const getParsingHistoryResultApiV1ParsingHistoryGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/history\"\n    });\n};\n/**\n * Generate Presigned Url\n * Generate a presigned URL for a job\n */ const generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/parsing/job/{job_id}/read/{filename}\"\n    });\n};\n/**\n * List Transformation Definitions\n * List transformation component definitions.\n */ const listTransformationDefinitionsApiV1ComponentDefinitionConfigurableTransformationsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/component-definition/configurable-transformations\"\n    });\n};\n/**\n * List Data Source Definitions\n * List data source component definitions.\n */ const listDataSourceDefinitionsApiV1ComponentDefinitionDataSourcesGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/component-definition/data-sources\"\n    });\n};\n/**\n * List Data Sink Definitions\n * List data sink component definitions.\n */ const listDataSinkDefinitionsApiV1ComponentDefinitionDataSinksGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/component-definition/data-sinks\"\n    });\n};\n/**\n * Create Chat App\n * Create a new chat app.\n */ const createChatAppApiV1AppsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/apps/\"\n    });\n};\n/**\n * Get Chat Apps\n */ const getChatAppsApiV1AppsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/apps/\"\n    });\n};\n/**\n * Get Chat App\n * Get a chat app by ID.\n */ const getChatAppApiV1AppsIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/apps/{id}\"\n    });\n};\n/**\n * Update Chat App\n * Update a chat app.\n */ const updateChatAppApiV1AppsIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/apps/{id}\"\n    });\n};\n/**\n * Delete Chat App\n */ const deleteChatAppApiV1AppsIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/apps/{id}\"\n    });\n};\n/**\n * Chat With Chat App\n * Chat with a chat app.\n */ const chatWithChatAppApiV1AppsIdChatPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/apps/{id}/chat\"\n    });\n};\n/**\n * Create Checkout Session\n * Create a new checkout session.\n */ const createCheckoutSessionApiV1BillingCheckoutSessionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/billing/checkout-session\"\n    });\n};\n/**\n * Create Customer Portal Session\n * Create a new customer portal session.\n */ const createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/billing/customer-portal-session\"\n    });\n};\n/**\n * Stripe Webhook\n * Stripe webhook endpoint.\n */ const stripeWebhookApiV1BillingWebhookPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/billing/webhook\"\n    });\n};\n/**\n * Downgrade Plan\n */ const downgradePlanApiV1BillingDowngradePlanPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/billing/downgrade-plan\"\n    });\n};\n/**\n * Create Intent And Customer Session\n * Create a new setup intent and and a customer session.\n *\n * See https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements\n */ const createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/billing/create-intent-and-customer-session\"\n    });\n};\n/**\n * @deprecated\n * Create Extraction Agent\n */ const createExtractionAgentApiV1Extractionv2ExtractionAgentsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents\"\n    });\n};\n/**\n * @deprecated\n * List Extraction Agents\n */ const listExtractionAgentsApiV1Extractionv2ExtractionAgentsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents\"\n    });\n};\n/**\n * @deprecated\n * Validate Extraction Schema\n * Validates an extraction agent's schema definition.\n * Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.\n */ const validateExtractionSchemaApiV1Extractionv2ExtractionAgentsSchemaValidationPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents/schema/validation\"\n    });\n};\n/**\n * @deprecated\n * Get Extraction Agent By Name\n */ const getExtractionAgentByNameApiV1Extractionv2ExtractionAgentsByNameNameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents/by-name/{name}\"\n    });\n};\n/**\n * @deprecated\n * Get Extraction Agent\n */ const getExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents/{extraction_agent_id}\"\n    });\n};\n/**\n * @deprecated\n * Delete Extraction Agent\n */ const deleteExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents/{extraction_agent_id}\"\n    });\n};\n/**\n * @deprecated\n * Update Extraction Agent\n */ const updateExtractionAgentApiV1Extractionv2ExtractionAgentsExtractionAgentIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/extractionv2/extraction-agents/{extraction_agent_id}\"\n    });\n};\n/**\n * @deprecated\n * List Jobs\n */ const listJobsApiV1Extractionv2JobsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/jobs\"\n    });\n};\n/**\n * @deprecated\n * Run Job\n */ const runJobApiV1Extractionv2JobsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extractionv2/jobs\"\n    });\n};\n/**\n * @deprecated\n * Get Job\n */ const getJobApiV1Extractionv2JobsJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/jobs/{job_id}\"\n    });\n};\n/**\n * @deprecated\n * Run Job Test User\n */ const runJobTestUserApiV1Extractionv2JobsTestPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extractionv2/jobs/test\"\n    });\n};\n/**\n * @deprecated\n * Get Job Result\n */ const getJobResultApiV1Extractionv2JobsJobIdResultGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/jobs/{job_id}/result\"\n    });\n};\n/**\n * @deprecated\n * List Extract Runs\n */ const listExtractRunsApiV1Extractionv2RunsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/runs\"\n    });\n};\n/**\n * @deprecated\n * Get Run By Job Id\n */ const getRunByJobIdApiV1Extractionv2RunsByJobJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/runs/by-job/{job_id}\"\n    });\n};\n/**\n * @deprecated\n * Get Run\n */ const getRunApiV1Extractionv2RunsRunIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extractionv2/runs/{run_id}\"\n    });\n};\n/**\n * @deprecated\n * Delete Extraction Run\n */ const deleteExtractionRunApiV1Extractionv2RunsRunIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/extractionv2/runs/{run_id}\"\n    });\n};\n/**\n * Create Extraction Agent\n */ const createExtractionAgentApiV1ExtractionExtractionAgentsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents\"\n    });\n};\n/**\n * List Extraction Agents\n */ const listExtractionAgentsApiV1ExtractionExtractionAgentsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents\"\n    });\n};\n/**\n * Validate Extraction Schema\n * Validates an extraction agent's schema definition.\n * Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.\n */ const validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents/schema/validation\"\n    });\n};\n/**\n * Get Extraction Agent By Name\n */ const getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents/by-name/{name}\"\n    });\n};\n/**\n * Get Extraction Agent\n */ const getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents/{extraction_agent_id}\"\n    });\n};\n/**\n * Delete Extraction Agent\n */ const deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents/{extraction_agent_id}\"\n    });\n};\n/**\n * Update Extraction Agent\n */ const updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut = (options)=>{\n    return (options?.client ?? client).put({\n        ...options,\n        url: \"/api/v1/extraction/extraction-agents/{extraction_agent_id}\"\n    });\n};\n/**\n * List Jobs\n */ const listJobsApiV1ExtractionJobsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/jobs\"\n    });\n};\n/**\n * Run Job\n */ const runJobApiV1ExtractionJobsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extraction/jobs\"\n    });\n};\n/**\n * Get Job\n */ const getJobApiV1ExtractionJobsJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/jobs/{job_id}\"\n    });\n};\n/**\n * Run Job Test User\n */ const runJobTestUserApiV1ExtractionJobsTestPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/extraction/jobs/test\"\n    });\n};\n/**\n * Get Job Result\n */ const getJobResultApiV1ExtractionJobsJobIdResultGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/jobs/{job_id}/result\"\n    });\n};\n/**\n * List Extract Runs\n */ const listExtractRunsApiV1ExtractionRunsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/runs\"\n    });\n};\n/**\n * Get Run By Job Id\n */ const getRunByJobIdApiV1ExtractionRunsByJobJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/runs/by-job/{job_id}\"\n    });\n};\n/**\n * Get Run\n */ const getRunApiV1ExtractionRunsRunIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/extraction/runs/{run_id}\"\n    });\n};\n/**\n * Delete Extraction Run\n */ const deleteExtractionRunApiV1ExtractionRunsRunIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/extraction/runs/{run_id}\"\n    });\n};\n/**\n * Create Report\n * Create a new report.\n */ const createReportApiV1ReportsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/v1/reports/\"\n    });\n};\n/**\n * List Reports\n * List all reports for a project.\n */ const listReportsApiV1ReportsListGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/reports/list\"\n    });\n};\n/**\n * Get Report\n * Get a specific report.\n */ const getReportApiV1ReportsReportIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/reports/{report_id}\"\n    });\n};\n/**\n * Update Report Metadata\n * Update metadata for a report.\n */ const updateReportMetadataApiV1ReportsReportIdPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/reports/{report_id}\"\n    });\n};\n/**\n * Update Report\n * Update a report's content.\n */ const updateReportApiV1ReportsReportIdPatch = (options)=>{\n    return (options?.client ?? client).patch({\n        ...options,\n        url: \"/api/v1/reports/{report_id}\"\n    });\n};\n/**\n * Delete Report\n * Delete a report.\n */ const deleteReportApiV1ReportsReportIdDelete = (options)=>{\n    return (options?.client ?? client).delete({\n        ...options,\n        url: \"/api/v1/reports/{report_id}\"\n    });\n};\n/**\n * Get Report Plan\n * Get the plan for a report.\n */ const getReportPlanApiV1ReportsReportIdPlanGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/reports/{report_id}/plan\"\n    });\n};\n/**\n * Update Report Plan\n * Update the plan of a report, including approval, rejection, and editing.\n */ const updateReportPlanApiV1ReportsReportIdPlanPatch = (options)=>{\n    return (options?.client ?? client).patch({\n        ...options,\n        url: \"/api/v1/reports/{report_id}/plan\"\n    });\n};\n/**\n * Get Report Events\n * Get all historical events for a report.\n */ const getReportEventsApiV1ReportsReportIdEventsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/reports/{report_id}/events\"\n    });\n};\n/**\n * Get Report Metadata\n * Get metadata for a report.\n */ const getReportMetadataApiV1ReportsReportIdMetadataGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/v1/reports/{report_id}/metadata\"\n    });\n};\n/**\n * Suggest Edits Endpoint\n * Suggest edits to a report based on user query and chat history.\n */ const suggestEditsEndpointApiV1ReportsReportIdSuggestEditsPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/reports/{report_id}/suggest_edits\"\n    });\n};\n/**\n * Restart Report\n * Restart a report from scratch.\n */ const restartReportApiV1ReportsReportIdRestartPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        url: \"/api/v1/reports/{report_id}/restart\"\n    });\n};\n/**\n * Get Job Image Result\n * Get a job by id\n */ const getJobImageResultApiParsingJobJobIdResultImageNameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/image/{name}\"\n    });\n};\n/**\n * Get Supported File Extensions\n * Get a list of supported file extensions\n */ const getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/supported_file_extensions\"\n    });\n};\n/**\n * Screenshot\n */ const screenshotApiParsingScreenshotPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/parsing/screenshot\"\n    });\n};\n/**\n * Upload File\n * Upload a file to s3 and create a job. return a job id\n */ const uploadFileApiParsingUploadPost = (options)=>{\n    return (options?.client ?? client).post({\n        ...options,\n        ...W,\n        headers: {\n            \"Content-Type\": null,\n            ...options?.headers\n        },\n        url: \"/api/parsing/upload\"\n    });\n};\n/**\n * Usage\n * DEPRECATED: use either /organizations/{organization_id}/usage or /projects/{project_id}/usage instead\n * Get parsing usage for user\n */ const usageApiParsingUsageGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/usage\"\n    });\n};\n/**\n * Get Job\n * Get a job by id\n */ const getJobApiParsingJobJobIdGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}\"\n    });\n};\n/**\n * Get Parsing Job Details\n * Get a job by id\n */ const getParsingJobDetailsApiParsingJobJobIdDetailsGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/details\"\n    });\n};\n/**\n * Get Job Text Result\n * Get a job by id\n */ const getJobTextResultApiParsingJobJobIdResultTextGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/text\"\n    });\n};\n/**\n * Get Job Raw Text Result\n * Get a job by id\n */ const getJobRawTextResultApiParsingJobJobIdResultRawTextGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/raw/text\"\n    });\n};\n/**\n * Get Job Raw Text Result\n * Get a job by id\n */ const getJobRawTextResultApiParsingJobJobIdResultPdfGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/pdf\"\n    });\n};\n/**\n * Get Job Raw Text Result\n * Get a job by id\n */ const getJobRawTextResultApiParsingJobJobIdResultRawPdfGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/raw/pdf\"\n    });\n};\n/**\n * Get Job Structured Result\n * Get a job by id\n */ const getJobStructuredResultApiParsingJobJobIdResultStructuredGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/structured\"\n    });\n};\n/**\n * Get Job Raw Structured Result\n * Get a job by id\n */ const getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/raw/structured\"\n    });\n};\n/**\n * Get Job Raw Xlsx Result\n * Get a job by id\n */ const getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/xlsx\"\n    });\n};\n/**\n * Get Job Raw Xlsx Result\n * Get a job by id\n */ const getJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/raw/xlsx\"\n    });\n};\n/**\n * Get Job Result\n * Get a job by id\n */ const getJobResultApiParsingJobJobIdResultMarkdownGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/markdown\"\n    });\n};\n/**\n * Get Job Raw Md Result\n * Get a job by id\n */ const getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/raw/markdown\"\n    });\n};\n/**\n * Get Job Json Result\n * Get a job by id\n */ const getJobJsonResultApiParsingJobJobIdResultJsonGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/json\"\n    });\n};\n/**\n * Get Job Json Raw Result\n * Get a job by id\n */ const getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/result/raw/json\"\n    });\n};\n/**\n * Get Parsing History Result\n * Get parsing history for user\n */ const getParsingHistoryResultApiParsingHistoryGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/history\"\n    });\n};\n/**\n * Generate Presigned Url\n * Generate a presigned URL for a job\n */ const generatePresignedUrlApiParsingJobJobIdReadFilenameGet = (options)=>{\n    return (options?.client ?? client).get({\n        ...options,\n        url: \"/api/parsing/job/{job_id}/read/{filename}\"\n    });\n};\n\n// This file is auto-generated by @hey-api/openapi-ts\nconst name = {\n    FREE: \"free\",\n    LLAMA_PARSE: \"llama_parse\",\n    ENTERPRISE: \"enterprise\",\n    UNKNOWN: \"unknown\",\n    FREE_CONTRACT: \"free_contract\",\n    PRO: \"pro\",\n    ENTERPRISE_CONTRACT: \"enterprise_contract\",\n    ENTERPRISE_POC: \"enterprise_poc\"\n};\nconst metronome_plan_type = {\n    PLAN: \"plan\",\n    CONTRACT: \"contract\"\n};\nconst plan_frequency = {\n    MONTHLY: \"MONTHLY\",\n    QUARTERLY: \"QUARTERLY\",\n    ANNUAL: \"ANNUAL\"\n};\nconst BoxAuthMechanism = {\n    DEVELOPER_TOKEN: \"developer_token\",\n    CCG: \"ccg\"\n};\nconst ChunkMode = {\n    PAGE: \"PAGE\",\n    DOCUMENT: \"DOCUMENT\",\n    SECTION: \"SECTION\",\n    GROUPED_PAGES: \"GROUPED_PAGES\"\n};\n/**\n * Enum for the mode of composite retrieval.\n */ const CompositeRetrievalMode = {\n    ROUTING: \"routing\",\n    FULL: \"full\"\n};\nconst ConfigurableDataSinkNames = {\n    PINECONE: \"PINECONE\",\n    POSTGRES: \"POSTGRES\",\n    QDRANT: \"QDRANT\",\n    AZUREAI_SEARCH: \"AZUREAI_SEARCH\",\n    MONGODB_ATLAS: \"MONGODB_ATLAS\",\n    MILVUS: \"MILVUS\"\n};\nconst ConfigurableDataSourceNames = {\n    S3: \"S3\",\n    AZURE_STORAGE_BLOB: \"AZURE_STORAGE_BLOB\",\n    GOOGLE_DRIVE: \"GOOGLE_DRIVE\",\n    MICROSOFT_ONEDRIVE: \"MICROSOFT_ONEDRIVE\",\n    MICROSOFT_SHAREPOINT: \"MICROSOFT_SHAREPOINT\",\n    SLACK: \"SLACK\",\n    NOTION_PAGE: \"NOTION_PAGE\",\n    CONFLUENCE: \"CONFLUENCE\",\n    JIRA: \"JIRA\",\n    BOX: \"BOX\"\n};\nconst ConfigurableTransformationNames = {\n    CHARACTER_SPLITTER: \"CHARACTER_SPLITTER\",\n    PAGE_SPLITTER_NODE_PARSER: \"PAGE_SPLITTER_NODE_PARSER\",\n    CODE_NODE_PARSER: \"CODE_NODE_PARSER\",\n    SENTENCE_AWARE_NODE_PARSER: \"SENTENCE_AWARE_NODE_PARSER\",\n    TOKEN_AWARE_NODE_PARSER: \"TOKEN_AWARE_NODE_PARSER\",\n    MARKDOWN_NODE_PARSER: \"MARKDOWN_NODE_PARSER\",\n    MARKDOWN_ELEMENT_NODE_PARSER: \"MARKDOWN_ELEMENT_NODE_PARSER\"\n};\nconst EvalMetric = {\n    RELEVANCY: \"RELEVANCY\",\n    FAITHFULNESS: \"FAITHFULNESS\"\n};\nconst ExtractMode = {\n    FAST: \"FAST\",\n    ACCURATE: \"ACCURATE\"\n};\nconst ExtractState = {\n    CREATED: \"CREATED\",\n    PENDING: \"PENDING\",\n    SUCCESS: \"SUCCESS\",\n    ERROR: \"ERROR\"\n};\nconst ExtractTarget = {\n    PER_DOC: \"PER_DOC\",\n    PER_PAGE: \"PER_PAGE\"\n};\n/**\n * Vector store filter conditions to combine different filters.\n */ const FilterCondition = {\n    AND: \"and\",\n    OR: \"or\",\n    NOT: \"not\"\n};\n/**\n * Vector store filter operator.\n */ const FilterOperator = {\n    __: \"<=\",\n    _: \"<\",\n    IN: \"in\",\n    NIN: \"nin\",\n    ANY: \"any\",\n    ALL: \"all\",\n    TEXT_MATCH: \"text_match\",\n    TEXT_MATCH_INSENSITIVE: \"text_match_insensitive\",\n    CONTAINS: \"contains\",\n    IS_EMPTY: \"is_empty\"\n};\n/**\n * Enum for mapping original job names to readable names.\n */ const JobNameMapping = {\n    MANAGED_INGESTION: \"MANAGED_INGESTION\",\n    DATA_SOURCE: \"DATA_SOURCE\",\n    FILES_UPDATE: \"FILES_UPDATE\",\n    FILE_UPDATER: \"FILE_UPDATER\",\n    PARSE: \"PARSE\",\n    TRANSFORM: \"TRANSFORM\",\n    INGESTION: \"INGESTION\",\n    METADATA_UPDATE: \"METADATA_UPDATE\"\n};\n/**\n * Enum for executable pipeline job names.\n */ const JobNames = {\n    LOAD_DOCUMENTS_JOB: \"load_documents_job\",\n    LOAD_FILES_JOB: \"load_files_job\",\n    PLAYGROUND_JOB: \"playground_job\",\n    EVAL_DATASET_JOB: \"eval_dataset_job\",\n    PIPELINE_MANAGED_INGESTION_JOB: \"pipeline_managed_ingestion_job\",\n    DATA_SOURCE_MANAGED_INGESTION_JOB: \"data_source_managed_ingestion_job\",\n    DATA_SOURCE_UPDATE_DISPATCHER_JOB: \"data_source_update_dispatcher_job\",\n    PIPELINE_FILE_UPDATE_DISPATCHER_JOB: \"pipeline_file_update_dispatcher_job\",\n    PIPELINE_FILE_UPDATER_JOB: \"pipeline_file_updater_job\",\n    FILE_MANAGED_INGESTION_JOB: \"file_managed_ingestion_job\",\n    DOCUMENT_INGESTION_JOB: \"document_ingestion_job\",\n    PARSE_RAW_FILE_JOB: \"parse_raw_file_job\",\n    LLAMA_PARSE_TRANSFORM_JOB: \"llama_parse_transform_job\",\n    METADATA_UPDATE_JOB: \"metadata_update_job\",\n    PARSE_RAW_FILE_JOB_CACHED: \"parse_raw_file_job_cached\",\n    EXTRACTION_JOB: \"extraction_job\",\n    EXTRACT_JOB: \"extract_job\",\n    ASYNCIO_TEST_JOB: \"asyncio_test_job\"\n};\nconst LlamaParseSupportedFileExtensions = {\n    _PDF: \".pdf\",\n    _DOC: \".doc\",\n    _DOCX: \".docx\",\n    _DOCM: \".docm\",\n    _DOT: \".dot\",\n    _DOTX: \".dotx\",\n    _DOTM: \".dotm\",\n    _RTF: \".rtf\",\n    _WPS: \".wps\",\n    _WPD: \".wpd\",\n    _SXW: \".sxw\",\n    _STW: \".stw\",\n    _SXG: \".sxg\",\n    _PAGES: \".pages\",\n    _MW: \".mw\",\n    _MCW: \".mcw\",\n    _UOT: \".uot\",\n    _UOF: \".uof\",\n    _UOS: \".uos\",\n    _UOP: \".uop\",\n    _PPT: \".ppt\",\n    _PPTX: \".pptx\",\n    _POT: \".pot\",\n    _PPTM: \".pptm\",\n    _POTX: \".potx\",\n    _POTM: \".potm\",\n    _KEY: \".key\",\n    _ODP: \".odp\",\n    _ODG: \".odg\",\n    _OTP: \".otp\",\n    _FOPD: \".fopd\",\n    _SXI: \".sxi\",\n    _STI: \".sti\",\n    _EPUB: \".epub\",\n    _JPG: \".jpg\",\n    _JPEG: \".jpeg\",\n    _PNG: \".png\",\n    _GIF: \".gif\",\n    _BMP: \".bmp\",\n    _SVG: \".svg\",\n    _TIFF: \".tiff\",\n    _WEBP: \".webp\",\n    _HTML: \".html\",\n    _HTM: \".htm\",\n    _XLS: \".xls\",\n    _XLSX: \".xlsx\",\n    _XLSM: \".xlsm\",\n    _XLSB: \".xlsb\",\n    _XLW: \".xlw\",\n    _CSV: \".csv\",\n    _DIF: \".dif\",\n    _SYLK: \".sylk\",\n    _SLK: \".slk\",\n    _PRN: \".prn\",\n    _NUMBERS: \".numbers\",\n    _ET: \".et\",\n    _ODS: \".ods\",\n    _FODS: \".fods\",\n    _UOS1: \".uos1\",\n    _UOS2: \".uos2\",\n    _DBF: \".dbf\",\n    _WK1: \".wk1\",\n    _WK2: \".wk2\",\n    _WK3: \".wk3\",\n    _WK4: \".wk4\",\n    _WKS: \".wks\",\n    _WQ1: \".wq1\",\n    _WQ2: \".wq2\",\n    _WB1: \".wb1\",\n    _WB2: \".wb2\",\n    _WB3: \".wb3\",\n    _QPW: \".qpw\",\n    _XLR: \".xlr\",\n    _ETH: \".eth\",\n    _TSV: \".tsv\"\n};\n/**\n * Status of managed ingestion with partial Updates.\n */ const ManagedIngestionStatus = {\n    NOT_STARTED: \"NOT_STARTED\",\n    IN_PROGRESS: \"IN_PROGRESS\",\n    SUCCESS: \"SUCCESS\",\n    ERROR: \"ERROR\",\n    PARTIAL_SUCCESS: \"PARTIAL_SUCCESS\",\n    CANCELLED: \"CANCELLED\"\n};\n/**\n * Message role.\n */ const MessageRole = {\n    SYSTEM: \"system\",\n    USER: \"user\",\n    ASSISTANT: \"assistant\",\n    FUNCTION: \"function\",\n    TOOL: \"tool\",\n    CHATBOT: \"chatbot\",\n    MODEL: \"model\"\n};\n/**\n * Node relationships used in `BaseNode` class.\n *\n * Attributes:\n * SOURCE: The node is the source document.\n * PREVIOUS: The node is the previous node in the document.\n * NEXT: The node is the next node in the document.\n * PARENT: The node is the parent node in the document.\n * CHILD: The node is a child node in the document.\n */ const NodeRelationship = {\n    _1: \"1\",\n    _2: \"2\",\n    _3: \"3\",\n    _4: \"4\",\n    _5: \"5\"\n};\nconst ObjectType = {\n    _1: \"1\",\n    _2: \"2\",\n    _3: \"3\",\n    _4: \"4\",\n    _5: \"5\"\n};\n/**\n * Enum for the Parse plan level.\n */ const ParsePlanLevel = {\n    DEFAULT: \"DEFAULT\",\n    PREMIUM: \"PREMIUM\"\n};\n/**\n * Enum for representing the languages supported by the parser\n */ const ParserLanguages = {\n    AF: \"af\",\n    AZ: \"az\",\n    BS: \"bs\",\n    CS: \"cs\",\n    CY: \"cy\",\n    DA: \"da\",\n    DE: \"de\",\n    EN: \"en\",\n    ES: \"es\",\n    ET: \"et\",\n    FR: \"fr\",\n    GA: \"ga\",\n    HR: \"hr\",\n    HU: \"hu\",\n    ID: \"id\",\n    IS: \"is\",\n    IT: \"it\",\n    KU: \"ku\",\n    LA: \"la\",\n    LT: \"lt\",\n    LV: \"lv\",\n    MI: \"mi\",\n    MS: \"ms\",\n    MT: \"mt\",\n    NL: \"nl\",\n    NO: \"no\",\n    OC: \"oc\",\n    PI: \"pi\",\n    PL: \"pl\",\n    PT: \"pt\",\n    RO: \"ro\",\n    RS_LATIN: \"rs_latin\",\n    SK: \"sk\",\n    SL: \"sl\",\n    SQ: \"sq\",\n    SV: \"sv\",\n    SW: \"sw\",\n    TL: \"tl\",\n    TR: \"tr\",\n    UZ: \"uz\",\n    VI: \"vi\",\n    AR: \"ar\",\n    FA: \"fa\",\n    UG: \"ug\",\n    UR: \"ur\",\n    BN: \"bn\",\n    AS: \"as\",\n    MNI: \"mni\",\n    RU: \"ru\",\n    RS_CYRILLIC: \"rs_cyrillic\",\n    BE: \"be\",\n    BG: \"bg\",\n    UK: \"uk\",\n    MN: \"mn\",\n    ABQ: \"abq\",\n    ADY: \"ady\",\n    KBD: \"kbd\",\n    AVA: \"ava\",\n    DAR: \"dar\",\n    INH: \"inh\",\n    CHE: \"che\",\n    LBE: \"lbe\",\n    LEZ: \"lez\",\n    TAB: \"tab\",\n    TJK: \"tjk\",\n    HI: \"hi\",\n    MR: \"mr\",\n    NE: \"ne\",\n    BH: \"bh\",\n    MAI: \"mai\",\n    ANG: \"ang\",\n    BHO: \"bho\",\n    MAH: \"mah\",\n    SCK: \"sck\",\n    NEW: \"new\",\n    GOM: \"gom\",\n    SA: \"sa\",\n    BGC: \"bgc\",\n    TH: \"th\",\n    CH_SIM: \"ch_sim\",\n    CH_TRA: \"ch_tra\",\n    JA: \"ja\",\n    KO: \"ko\",\n    TA: \"ta\",\n    TE: \"te\",\n    KN: \"kn\"\n};\n/**\n * Enum for representing the mode of parsing to be used\n */ const ParsingMode = {\n    PARSE_PAGE_WITHOUT_LLM: \"parse_page_without_llm\",\n    PARSE_PAGE_WITH_LLM: \"parse_page_with_llm\",\n    PARSE_PAGE_WITH_LVM: \"parse_page_with_lvm\",\n    PARSE_PAGE_WITH_AGENT: \"parse_page_with_agent\",\n    PARSE_DOCUMENT_WITH_LLM: \"parse_document_with_llm\"\n};\n/**\n * Enum for dataset partition names.\n */ const PartitionNames = {\n    DATA_SOURCE_ID_PARTITION: \"data_source_id_partition\",\n    PIPELINE_ID_PARTITION: \"pipeline_id_partition\",\n    EVAL_DATASET_ID_PARTITION: \"eval_dataset_id_partition\",\n    FILE_ID_PARTITION: \"file_id_partition\",\n    PIPELINE_FILE_ID_PARTITION: \"pipeline_file_id_partition\",\n    FILE_PARSING_ID_PARTITION: \"file_parsing_id_partition\",\n    EXTRACTION_SCHEMA_ID_PARTITION: \"extraction_schema_id_partition\"\n};\n/**\n * Enum for representing the type of a pipeline\n */ const PipelineType = {\n    PLAYGROUND: \"PLAYGROUND\",\n    MANAGED: \"MANAGED\"\n};\n/**\n * Enum of possible pooling choices with pooling behaviors.\n */ const Pooling = {\n    CLS: \"cls\",\n    MEAN: \"mean\",\n    LAST: \"last\"\n};\n/**\n * Current status of the operation\n */ const status = {\n    PENDING: \"pending\",\n    IN_PROGRESS: \"in_progress\",\n    COMPLETED: \"completed\",\n    ERROR: \"error\"\n};\n/**\n * Pydantic program mode.\n */ const PydanticProgramMode = {\n    DEFAULT: \"default\",\n    OPENAI: \"openai\",\n    LLM: \"llm\",\n    FUNCTION: \"function\",\n    GUIDANCE: \"guidance\",\n    LM_FORMAT_ENFORCER: \"lm-format-enforcer\"\n};\nconst ReportBlockDependency = {\n    NONE: \"none\",\n    ALL: \"all\",\n    PREVIOUS: \"previous\",\n    NEXT: \"next\"\n};\nconst ReportEventType = {\n    LOAD_TEMPLATE: \"load_template\",\n    EXTRACT_PLAN: \"extract_plan\",\n    SUMMARIZE: \"summarize\",\n    FILE_PROCESSING: \"file_processing\",\n    GENERATE_BLOCK: \"generate_block\",\n    EDITING: \"editing\"\n};\nconst ReportState = {\n    PENDING: \"pending\",\n    PLANNING: \"planning\",\n    WAITING_APPROVAL: \"waiting_approval\",\n    GENERATING: \"generating\",\n    COMPLETED: \"completed\",\n    ERROR: \"error\"\n};\nconst RetrievalMode = {\n    CHUNKS: \"chunks\",\n    FILES_VIA_METADATA: \"files_via_metadata\",\n    FILES_VIA_CONTENT: \"files_via_content\",\n    AUTO_ROUTED: \"auto_routed\"\n};\nconst SchemaRelaxMode = {\n    FULL: \"FULL\",\n    TOP_LEVEL: \"TOP_LEVEL\",\n    LEAF: \"LEAF\"\n};\n/**\n * Enum for representing the status of a job\n */ const StatusEnum = {\n    PENDING: \"PENDING\",\n    SUCCESS: \"SUCCESS\",\n    ERROR: \"ERROR\",\n    PARTIAL_SUCCESS: \"PARTIAL_SUCCESS\",\n    CANCELLED: \"CANCELLED\"\n};\nconst StructMode = {\n    STRUCT_PARSE: \"STRUCT_PARSE\",\n    JSON_MODE: \"JSON_MODE\",\n    FUNC_CALL: \"FUNC_CALL\",\n    UNSTRUCTURED: \"UNSTRUCTURED\"\n};\nconst SupportedLLMModelNames = {\n    GPT_3_5_TURBO: \"GPT_3_5_TURBO\",\n    GPT_4: \"GPT_4\",\n    GPT_4_TURBO: \"GPT_4_TURBO\",\n    GPT_4O: \"GPT_4O\",\n    GPT_4O_MINI: \"GPT_4O_MINI\",\n    AZURE_OPENAI_GPT_3_5_TURBO: \"AZURE_OPENAI_GPT_3_5_TURBO\",\n    AZURE_OPENAI_GPT_4O: \"AZURE_OPENAI_GPT_4O\",\n    AZURE_OPENAI_GPT_4O_MINI: \"AZURE_OPENAI_GPT_4O_MINI\",\n    AZURE_OPENAI_GPT_4: \"AZURE_OPENAI_GPT_4\",\n    CLAUDE_3_5_SONNET: \"CLAUDE_3_5_SONNET\",\n    BEDROCK_CLAUDE_3_5_SONNET: \"BEDROCK_CLAUDE_3_5_SONNET\",\n    VERTEX_AI_CLAUDE_3_5_SONNET: \"VERTEX_AI_CLAUDE_3_5_SONNET\"\n};\nconst TransformationCategoryNames = {\n    NODE_PARSER: \"NODE_PARSER\",\n    EMBEDDING: \"EMBEDDING\"\n};\n/**\n * Copied from llama_index.embeddings.vertex.base.VertexEmbeddingMode\n * since importing llama_index.embeddings.vertex.base incurs a lot of memory usage.\n */ const VertexEmbeddingMode = {\n    DEFAULT: \"default\",\n    CLASSIFICATION: \"classification\",\n    CLUSTERING: \"clustering\",\n    SIMILARITY: \"similarity\",\n    RETRIEVAL: \"retrieval\"\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/reader/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/cloud/reader/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LlamaParseReader: () => (/* binding */ LlamaParseReader)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../api/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/api/dist/index.js\");\n\n\n\n\nvar U = /\\{[^{}]+\\}/g, S = ({ allowReserved: t, name: r, value: e })=>{\n    if (e == null) return \"\";\n    if (typeof e == \"object\") throw new Error(\"Deeply-nested arrays/objects aren\\u2019t supported. Provide your own `querySerializer()` to handle these.\");\n    return `${r}=${t ? e : encodeURIComponent(e)}`;\n}, $ = (t)=>{\n    switch(t){\n        case \"label\":\n            return \".\";\n        case \"matrix\":\n            return \";\";\n        case \"simple\":\n            return \",\";\n        default:\n            return \"&\";\n    }\n}, k = (t)=>{\n    switch(t){\n        case \"form\":\n            return \",\";\n        case \"pipeDelimited\":\n            return \"|\";\n        case \"spaceDelimited\":\n            return \"%20\";\n        default:\n            return \",\";\n    }\n}, D = (t)=>{\n    switch(t){\n        case \"label\":\n            return \".\";\n        case \"matrix\":\n            return \";\";\n        case \"simple\":\n            return \",\";\n        default:\n            return \"&\";\n    }\n}, j = ({ allowReserved: t, explode: r, name: e, style: s, value: o })=>{\n    if (!r) {\n        let n = (t ? o : o.map((c)=>encodeURIComponent(c))).join(k(s));\n        switch(s){\n            case \"label\":\n                return `.${n}`;\n            case \"matrix\":\n                return `;${e}=${n}`;\n            case \"simple\":\n                return n;\n            default:\n                return `${e}=${n}`;\n        }\n    }\n    let a = $(s), i = o.map((n)=>s === \"label\" || s === \"simple\" ? t ? n : encodeURIComponent(n) : S({\n            allowReserved: t,\n            name: e,\n            value: n\n        })).join(a);\n    return s === \"label\" || s === \"matrix\" ? a + i : i;\n}, A = ({ allowReserved: t, explode: r, name: e, style: s, value: o })=>{\n    if (o instanceof Date) return `${e}=${o.toISOString()}`;\n    if (s !== \"deepObject\" && !r) {\n        let n = [];\n        Object.entries(o).forEach(([f, p])=>{\n            n = [\n                ...n,\n                f,\n                t ? p : encodeURIComponent(p)\n            ];\n        });\n        let c = n.join(\",\");\n        switch(s){\n            case \"form\":\n                return `${e}=${c}`;\n            case \"label\":\n                return `.${c}`;\n            case \"matrix\":\n                return `;${e}=${c}`;\n            default:\n                return c;\n        }\n    }\n    let a = D(s), i = Object.entries(o).map(([n, c])=>S({\n            allowReserved: t,\n            name: s === \"deepObject\" ? `${e}[${n}]` : n,\n            value: c\n        })).join(a);\n    return s === \"label\" || s === \"matrix\" ? a + i : i;\n}, _ = ({ path: t, url: r })=>{\n    let e = r, s = r.match(U);\n    if (s) for (let o of s){\n        let a = false, i = o.substring(1, o.length - 1), n = \"simple\";\n        i.endsWith(\"*\") && (a = true, i = i.substring(0, i.length - 1)), i.startsWith(\".\") ? (i = i.substring(1), n = \"label\") : i.startsWith(\";\") && (i = i.substring(1), n = \"matrix\");\n        let c = t[i];\n        if (c == null) continue;\n        if (Array.isArray(c)) {\n            e = e.replace(o, j({\n                explode: a,\n                name: i,\n                style: n,\n                value: c\n            }));\n            continue;\n        }\n        if (typeof c == \"object\") {\n            e = e.replace(o, A({\n                explode: a,\n                name: i,\n                style: n,\n                value: c\n            }));\n            continue;\n        }\n        if (n === \"matrix\") {\n            e = e.replace(o, `;${S({\n                name: i,\n                value: c\n            })}`);\n            continue;\n        }\n        let f = encodeURIComponent(n === \"label\" ? `.${c}` : c);\n        e = e.replace(o, f);\n    }\n    return e;\n}, C = ({ allowReserved: t, array: r, object: e } = {})=>(o)=>{\n        let a = [];\n        if (o && typeof o == \"object\") for(let i in o){\n            let n = o[i];\n            if (n != null) {\n                if (Array.isArray(n)) {\n                    a = [\n                        ...a,\n                        j({\n                            allowReserved: t,\n                            explode: true,\n                            name: i,\n                            style: \"form\",\n                            value: n,\n                            ...r\n                        })\n                    ];\n                    continue;\n                }\n                if (typeof n == \"object\") {\n                    a = [\n                        ...a,\n                        A({\n                            allowReserved: t,\n                            explode: true,\n                            name: i,\n                            style: \"deepObject\",\n                            value: n,\n                            ...e\n                        })\n                    ];\n                    continue;\n                }\n                a = [\n                    ...a,\n                    S({\n                        allowReserved: t,\n                        name: i,\n                        value: n\n                    })\n                ];\n            }\n        }\n        return a.join(\"&\");\n    }, w = (t)=>{\n    if (!t) return \"stream\";\n    let r = t.split(\";\")[0]?.trim();\n    if (r) {\n        if (r.startsWith(\"application/json\") || r.endsWith(\"+json\")) return \"json\";\n        if (r === \"multipart/form-data\") return \"formData\";\n        if ([\n            \"application/\",\n            \"audio/\",\n            \"image/\",\n            \"video/\"\n        ].some((e)=>r.startsWith(e))) return \"blob\";\n        if (r.startsWith(\"text/\")) return \"text\";\n    }\n}, H = async (t, r)=>{\n    let e = typeof r == \"function\" ? await r(t) : r;\n    if (e) return t.scheme === \"bearer\" ? `Bearer ${e}` : t.scheme === \"basic\" ? `Basic ${btoa(e)}` : e;\n}, P = async ({ security: t, ...r })=>{\n    for (let e of t){\n        let s = await H(e, r.auth);\n        if (!s) continue;\n        let o = e.name ?? \"Authorization\";\n        switch(e.in){\n            case \"query\":\n                r.query || (r.query = {}), r.query[o] = s;\n                break;\n            case \"header\":\n            default:\n                r.headers.set(o, s);\n                break;\n        }\n        return;\n    }\n}, b = (t)=>B({\n        baseUrl: t.baseUrl ?? \"\",\n        path: t.path,\n        query: t.query,\n        querySerializer: typeof t.querySerializer == \"function\" ? t.querySerializer : C(t.querySerializer),\n        url: t.url\n    }), B = ({ baseUrl: t, path: r, query: e, querySerializer: s, url: o })=>{\n    let a = o.startsWith(\"/\") ? o : `/${o}`, i = t + a;\n    r && (i = _({\n        path: r,\n        url: i\n    }));\n    let n = e ? s(e) : \"\";\n    return n.startsWith(\"?\") && (n = n.substring(1)), n && (i += `?${n}`), i;\n}, R = (t, r)=>{\n    let e = {\n        ...t,\n        ...r\n    };\n    return e.baseUrl?.endsWith(\"/\") && (e.baseUrl = e.baseUrl.substring(0, e.baseUrl.length - 1)), e.headers = O(t.headers, r.headers), e;\n}, O = (...t)=>{\n    let r = new Headers;\n    for (let e of t){\n        if (!e || typeof e != \"object\") continue;\n        let s = e instanceof Headers ? e.entries() : Object.entries(e);\n        for (let [o, a] of s)if (a === null) r.delete(o);\n        else if (Array.isArray(a)) for (let i of a)r.append(o, i);\n        else a !== undefined && r.set(o, typeof a == \"object\" ? JSON.stringify(a) : a);\n    }\n    return r;\n}, y = class {\n    constructor(){\n        this._fns = [];\n    }\n    clear() {\n        this._fns = [];\n    }\n    exists(r) {\n        return this._fns.indexOf(r) !== -1;\n    }\n    eject(r) {\n        let e = this._fns.indexOf(r);\n        e !== -1 && (this._fns = [\n            ...this._fns.slice(0, e),\n            ...this._fns.slice(e + 1)\n        ]);\n    }\n    use(r) {\n        this._fns = [\n            ...this._fns,\n            r\n        ];\n    }\n}, E = ()=>({\n        error: new y,\n        request: new y,\n        response: new y\n    }), I = {\n    bodySerializer: (t)=>JSON.stringify(t)\n}, Q = C({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: \"form\"\n    },\n    object: {\n        explode: true,\n        style: \"deepObject\"\n    }\n}), V = {\n    \"Content-Type\": \"application/json\"\n}, q = (t = {})=>({\n        ...I,\n        baseUrl: \"\",\n        headers: V,\n        parseAs: \"auto\",\n        querySerializer: Q,\n        ...t\n    });\nvar M = (t = {})=>{\n    let r = R(q(), t), e = ()=>({\n            ...r\n        }), s = (i)=>(r = R(r, i), e()), o = E(), a = async (i)=>{\n        let n = {\n            ...r,\n            ...i,\n            fetch: i.fetch ?? r.fetch ?? globalThis.fetch,\n            headers: O(r.headers, i.headers)\n        };\n        n.security && await P({\n            ...n,\n            security: n.security\n        }), n.body && n.bodySerializer && (n.body = n.bodySerializer(n.body)), n.body || n.headers.delete(\"Content-Type\");\n        let c = b(n), f = {\n            redirect: \"follow\",\n            ...n\n        }, p = new Request(c, f);\n        for (let u of o.request._fns)p = await u(p, n);\n        let T = n.fetch, l = await T(p);\n        for (let u of o.response._fns)l = await u(l, p, n);\n        let h = {\n            request: p,\n            response: l\n        };\n        if (l.ok) {\n            if (l.status === 204 || l.headers.get(\"Content-Length\") === \"0\") return {\n                data: {},\n                ...h\n            };\n            let u = (n.parseAs === \"auto\" ? w(l.headers.get(\"Content-Type\")) : n.parseAs) ?? \"json\";\n            if (u === \"stream\") return {\n                data: l.body,\n                ...h\n            };\n            let g = await l[u]();\n            return u === \"json\" && (n.responseValidator && await n.responseValidator(g), n.responseTransformer && (g = await n.responseTransformer(g))), {\n                data: g,\n                ...h\n            };\n        }\n        let m = await l.text();\n        try {\n            m = JSON.parse(m);\n        } catch  {}\n        let d = m;\n        for (let u of o.error._fns)d = await u(m, l, p, n);\n        if (d = d || {}, n.throwOnError) throw d;\n        return {\n            error: d,\n            ...h\n        };\n    };\n    return {\n        buildUrl: b,\n        connect: (i)=>a({\n                ...i,\n                method: \"CONNECT\"\n            }),\n        delete: (i)=>a({\n                ...i,\n                method: \"DELETE\"\n            }),\n        get: (i)=>a({\n                ...i,\n                method: \"GET\"\n            }),\n        getConfig: e,\n        head: (i)=>a({\n                ...i,\n                method: \"HEAD\"\n            }),\n        interceptors: o,\n        options: (i)=>a({\n                ...i,\n                method: \"OPTIONS\"\n            }),\n        patch: (i)=>a({\n                ...i,\n                method: \"PATCH\"\n            }),\n        post: (i)=>a({\n                ...i,\n                method: \"POST\"\n            }),\n        put: (i)=>a({\n                ...i,\n                method: \"PUT\"\n            }),\n        request: a,\n        setConfig: s,\n        trace: (i)=>a({\n                ...i,\n                method: \"TRACE\"\n            })\n    };\n};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar retry$2 = {};\n\nvar retry_operation;\nvar hasRequiredRetry_operation;\n\nfunction requireRetry_operation () {\n\tif (hasRequiredRetry_operation) return retry_operation;\n\thasRequiredRetry_operation = 1;\n\tfunction RetryOperation(timeouts, options) {\n\t    // Compatibility for the old (timeouts, retryForever) signature\n\t    if (typeof options === 'boolean') {\n\t        options = {\n\t            forever: options\n\t        };\n\t    }\n\t    this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n\t    this._timeouts = timeouts;\n\t    this._options = options || {};\n\t    this._maxRetryTime = options && options.maxRetryTime || Infinity;\n\t    this._fn = null;\n\t    this._errors = [];\n\t    this._attempts = 1;\n\t    this._operationTimeout = null;\n\t    this._operationTimeoutCb = null;\n\t    this._timeout = null;\n\t    this._operationStart = null;\n\t    this._timer = null;\n\t    if (this._options.forever) {\n\t        this._cachedTimeouts = this._timeouts.slice(0);\n\t    }\n\t}\n\tretry_operation = RetryOperation;\n\tRetryOperation.prototype.reset = function() {\n\t    this._attempts = 1;\n\t    this._timeouts = this._originalTimeouts.slice(0);\n\t};\n\tRetryOperation.prototype.stop = function() {\n\t    if (this._timeout) {\n\t        clearTimeout(this._timeout);\n\t    }\n\t    if (this._timer) {\n\t        clearTimeout(this._timer);\n\t    }\n\t    this._timeouts = [];\n\t    this._cachedTimeouts = null;\n\t};\n\tRetryOperation.prototype.retry = function(err) {\n\t    if (this._timeout) {\n\t        clearTimeout(this._timeout);\n\t    }\n\t    if (!err) {\n\t        return false;\n\t    }\n\t    var currentTime = new Date().getTime();\n\t    if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n\t        this._errors.push(err);\n\t        this._errors.unshift(new Error('RetryOperation timeout occurred'));\n\t        return false;\n\t    }\n\t    this._errors.push(err);\n\t    var timeout = this._timeouts.shift();\n\t    if (timeout === undefined) {\n\t        if (this._cachedTimeouts) {\n\t            // retry forever, only keep last error\n\t            this._errors.splice(0, this._errors.length - 1);\n\t            timeout = this._cachedTimeouts.slice(-1);\n\t        } else {\n\t            return false;\n\t        }\n\t    }\n\t    var self = this;\n\t    this._timer = setTimeout(function() {\n\t        self._attempts++;\n\t        if (self._operationTimeoutCb) {\n\t            self._timeout = setTimeout(function() {\n\t                self._operationTimeoutCb(self._attempts);\n\t            }, self._operationTimeout);\n\t            if (self._options.unref) {\n\t                self._timeout.unref();\n\t            }\n\t        }\n\t        self._fn(self._attempts);\n\t    }, timeout);\n\t    if (this._options.unref) {\n\t        this._timer.unref();\n\t    }\n\t    return true;\n\t};\n\tRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n\t    this._fn = fn;\n\t    if (timeoutOps) {\n\t        if (timeoutOps.timeout) {\n\t            this._operationTimeout = timeoutOps.timeout;\n\t        }\n\t        if (timeoutOps.cb) {\n\t            this._operationTimeoutCb = timeoutOps.cb;\n\t        }\n\t    }\n\t    var self = this;\n\t    if (this._operationTimeoutCb) {\n\t        this._timeout = setTimeout(function() {\n\t            self._operationTimeoutCb();\n\t        }, self._operationTimeout);\n\t    }\n\t    this._operationStart = new Date().getTime();\n\t    this._fn(this._attempts);\n\t};\n\tRetryOperation.prototype.try = function(fn) {\n\t    console.log('Using RetryOperation.try() is deprecated');\n\t    this.attempt(fn);\n\t};\n\tRetryOperation.prototype.start = function(fn) {\n\t    console.log('Using RetryOperation.start() is deprecated');\n\t    this.attempt(fn);\n\t};\n\tRetryOperation.prototype.start = RetryOperation.prototype.try;\n\tRetryOperation.prototype.errors = function() {\n\t    return this._errors;\n\t};\n\tRetryOperation.prototype.attempts = function() {\n\t    return this._attempts;\n\t};\n\tRetryOperation.prototype.mainError = function() {\n\t    if (this._errors.length === 0) {\n\t        return null;\n\t    }\n\t    var counts = {};\n\t    var mainError = null;\n\t    var mainErrorCount = 0;\n\t    for(var i = 0; i < this._errors.length; i++){\n\t        var error = this._errors[i];\n\t        var message = error.message;\n\t        var count = (counts[message] || 0) + 1;\n\t        counts[message] = count;\n\t        if (count >= mainErrorCount) {\n\t            mainError = error;\n\t            mainErrorCount = count;\n\t        }\n\t    }\n\t    return mainError;\n\t};\n\treturn retry_operation;\n}\n\nvar hasRequiredRetry$1;\n\nfunction requireRetry$1 () {\n\tif (hasRequiredRetry$1) return retry$2;\n\thasRequiredRetry$1 = 1;\n\t(function (exports) {\n\t\tvar RetryOperation = requireRetry_operation();\n\t\texports.operation = function(options) {\n\t\t    var timeouts = exports.timeouts(options);\n\t\t    return new RetryOperation(timeouts, {\n\t\t        forever: options && (options.forever || options.retries === Infinity),\n\t\t        unref: options && options.unref,\n\t\t        maxRetryTime: options && options.maxRetryTime\n\t\t    });\n\t\t};\n\t\texports.timeouts = function(options) {\n\t\t    if (options instanceof Array) {\n\t\t        return [].concat(options);\n\t\t    }\n\t\t    var opts = {\n\t\t        retries: 10,\n\t\t        factor: 2,\n\t\t        minTimeout: 1 * 1000,\n\t\t        maxTimeout: Infinity,\n\t\t        randomize: false\n\t\t    };\n\t\t    for(var key in options){\n\t\t        opts[key] = options[key];\n\t\t    }\n\t\t    if (opts.minTimeout > opts.maxTimeout) {\n\t\t        throw new Error('minTimeout is greater than maxTimeout');\n\t\t    }\n\t\t    var timeouts = [];\n\t\t    for(var i = 0; i < opts.retries; i++){\n\t\t        timeouts.push(this.createTimeout(i, opts));\n\t\t    }\n\t\t    if (options && options.forever && !timeouts.length) {\n\t\t        timeouts.push(this.createTimeout(i, opts));\n\t\t    }\n\t\t    // sort the array numerically ascending\n\t\t    timeouts.sort(function(a, b) {\n\t\t        return a - b;\n\t\t    });\n\t\t    return timeouts;\n\t\t};\n\t\texports.createTimeout = function(attempt, opts) {\n\t\t    var random = opts.randomize ? Math.random() + 1 : 1;\n\t\t    var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n\t\t    timeout = Math.min(timeout, opts.maxTimeout);\n\t\t    return timeout;\n\t\t};\n\t\texports.wrap = function(obj, options, methods) {\n\t\t    if (options instanceof Array) {\n\t\t        methods = options;\n\t\t        options = null;\n\t\t    }\n\t\t    if (!methods) {\n\t\t        methods = [];\n\t\t        for(var key in obj){\n\t\t            if (typeof obj[key] === 'function') {\n\t\t                methods.push(key);\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    for(var i = 0; i < methods.length; i++){\n\t\t        var method = methods[i];\n\t\t        var original = obj[method];\n\t\t        obj[method] = (function retryWrapper(original) {\n\t\t            var op = exports.operation(options);\n\t\t            var args = Array.prototype.slice.call(arguments, 1);\n\t\t            var callback = args.pop();\n\t\t            args.push(function(err) {\n\t\t                if (op.retry(err)) {\n\t\t                    return;\n\t\t                }\n\t\t                if (err) {\n\t\t                    arguments[0] = op.mainError();\n\t\t                }\n\t\t                callback.apply(this, arguments);\n\t\t            });\n\t\t            op.attempt(function() {\n\t\t                original.apply(obj, args);\n\t\t            });\n\t\t        }).bind(obj, original);\n\t\t        obj[method].options = options;\n\t\t    }\n\t\t}; \n\t} (retry$2));\n\treturn retry$2;\n}\n\nvar retry$1;\nvar hasRequiredRetry;\n\nfunction requireRetry () {\n\tif (hasRequiredRetry) return retry$1;\n\thasRequiredRetry = 1;\n\tretry$1 = requireRetry$1();\n\treturn retry$1;\n}\n\nvar retryExports = requireRetry();\nvar retry = /*@__PURE__*/getDefaultExportFromCjs(retryExports);\n\nconst objectToString = Object.prototype.toString;\nconst isError = (value)=>objectToString.call(value) === '[object Error]';\nconst errorMessages = new Set([\n    'network error',\n    'Failed to fetch',\n    'NetworkError when attempting to fetch resource.',\n    'The Internet connection appears to be offline.',\n    'Load failed',\n    'Network request failed',\n    'fetch failed',\n    'terminated'\n]);\nfunction isNetworkError(error) {\n    const isValid = error && isError(error) && error.name === 'TypeError' && typeof error.message === 'string';\n    if (!isValid) {\n        return false;\n    }\n    // We do an extra check for Safari 17+ as it has a very generic error message.\n    // Network errors in Safari have no stack.\n    if (error.message === 'Load failed') {\n        return error.stack === undefined;\n    }\n    return errorMessages.has(error.message);\n}\n\nclass AbortError extends Error {\n    constructor(message){\n        super();\n        if (message instanceof Error) {\n            this.originalError = message;\n            ({ message } = message);\n        } else {\n            this.originalError = new Error(message);\n            this.originalError.stack = this.stack;\n        }\n        this.name = 'AbortError';\n        this.message = message;\n    }\n}\nconst decorateErrorWithCounts = (error, attemptNumber, options)=>{\n    // Minus 1 from attemptNumber because the first attempt does not count as a retry\n    const retriesLeft = options.retries - (attemptNumber - 1);\n    error.attemptNumber = attemptNumber;\n    error.retriesLeft = retriesLeft;\n    return error;\n};\nasync function pRetry(input, options) {\n    return new Promise((resolve, reject)=>{\n        options = {\n            ...options\n        };\n        options.onFailedAttempt ??= ()=>{};\n        options.shouldRetry ??= ()=>true;\n        options.retries ??= 10;\n        const operation = retry.operation(options);\n        const abortHandler = ()=>{\n            operation.stop();\n            reject(options.signal?.reason);\n        };\n        if (options.signal && !options.signal.aborted) {\n            options.signal.addEventListener('abort', abortHandler, {\n                once: true\n            });\n        }\n        const cleanUp = ()=>{\n            options.signal?.removeEventListener('abort', abortHandler);\n            operation.stop();\n        };\n        operation.attempt(async (attemptNumber)=>{\n            try {\n                const result = await input(attemptNumber);\n                cleanUp();\n                resolve(result);\n            } catch (error) {\n                try {\n                    if (!(error instanceof Error)) {\n                        throw new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`);\n                    }\n                    if (error instanceof AbortError) {\n                        throw error.originalError;\n                    }\n                    if (error instanceof TypeError && !isNetworkError(error)) {\n                        throw error;\n                    }\n                    decorateErrorWithCounts(error, attemptNumber, options);\n                    if (!await options.shouldRetry(error)) {\n                        operation.stop();\n                        reject(error);\n                    }\n                    await options.onFailedAttempt(error);\n                    if (!operation.retry(error)) {\n                        throw operation.mainError();\n                    }\n                } catch (finalError) {\n                    decorateErrorWithCounts(finalError, attemptNumber, options);\n                    cleanUp();\n                    reject(finalError);\n                }\n            }\n        });\n    });\n}\n\nasync function sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\n// Do not modify this variable or cause type errors\n// eslint-disable-next-line no-var\nvar process;\n/**\n * Represents a reader for parsing files using the LlamaParse API.\n * See https://github.com/run-llama/llama_parse\n */ class LlamaParseReader extends _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.FileReader {\n    #client;\n    constructor(params = {}){\n        super(), // The base URL of the Llama Cloud Platform.\n        this.baseUrl = \"https://api.cloud.llamaindex.ai\", // The result type for the parser.\n        this.resultType = \"text\", // The interval in seconds to check if the parsing is done.\n        this.checkInterval = 1, // The maximum timeout in seconds to wait for the parsing to finish.\n        this.maxTimeout = 2000, // Whether to print the progress of the parsing.\n        this.verbose = true, // The language to parse the file in.\n        this.language = [\n            \"en\"\n        ], // New polling options:\n        // Controls the backoff mode: \"constant\", \"linear\", or \"exponential\".\n        this.backoffPattern = \"linear\", // Maximum interval in seconds between polls.\n        this.maxCheckInterval = 5, // Maximum number of retryable errors before giving up.\n        this.maxErrorCount = 4, // Deprecated. Use vendorMultimodal params. Whether to use gpt-4o to extract text.\n        this.gpt4oMode = false, // Whether to ignore errors during parsing.\n        this.ignoreErrors = true, // Whether to split by page using the pageSeparator (or \"\\n---\\n\" as default).\n        this.splitByPage = true, // Whether to use the vendor multimodal API.\n        this.useVendorMultimodalModel = false, this.output_tables_as_HTML = false;\n        Object.assign(this, params);\n        this.language = Array.isArray(this.language) ? this.language : [\n            this.language\n        ];\n        this.stdout = params.stdout ?? \"undefined\" !== \"undefined\" ? process.stdout : undefined;\n        const apiKey = params.apiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.getEnv)(\"LLAMA_CLOUD_API_KEY\");\n        if (!apiKey) {\n            throw new Error(\"API Key is required for LlamaParseReader. Please pass the apiKey parameter or set the LLAMA_CLOUD_API_KEY environment variable.\");\n        }\n        this.apiKey = apiKey;\n        if (this.baseUrl.endsWith(\"/\")) {\n            this.baseUrl = this.baseUrl.slice(0, -1);\n        }\n        if (this.baseUrl.endsWith(\"/api/parsing\")) {\n            this.baseUrl = this.baseUrl.slice(0, -\"/api/parsing\".length);\n        }\n        if (params.gpt4oMode) {\n            params.gpt4oApiKey = params.gpt4oApiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.getEnv)(\"LLAMA_CLOUD_GPT4O_API_KEY\");\n            this.gpt4oApiKey = params.gpt4oApiKey;\n        }\n        if (params.useVendorMultimodalModel) {\n            params.vendorMultimodalApiKey = params.vendorMultimodalApiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.getEnv)(\"LLAMA_CLOUD_VENDOR_MULTIMODAL_API_KEY\");\n            this.vendorMultimodalApiKey = params.vendorMultimodalApiKey;\n        }\n        this.#client = M(q({\n            headers: {\n                Authorization: `Bearer ${this.apiKey}`\n            },\n            baseUrl: this.baseUrl\n        }));\n    }\n    /**\n   * Creates a job for the LlamaParse API.\n   *\n   * @param data - The file data as a Uint8Array.\n   * @param filename - Optional filename for the file.\n   * @returns A Promise resolving to the job ID as a string.\n   */ async #createJob(data, filename) {\n        if (this.verbose) {\n            console.log(\"Started uploading the file\");\n        }\n        // TODO: remove Blob usage when we drop Node.js 18 support\n        const file = globalThis.File && filename ? new File([\n            data\n        ], filename) : new Blob([\n            data\n        ]);\n        const body = {\n            file,\n            language: this.language,\n            parsing_instruction: this.parsingInstruction,\n            skip_diagonal_text: this.skipDiagonalText,\n            invalidate_cache: this.invalidateCache,\n            do_not_cache: this.doNotCache,\n            fast_mode: this.fastMode,\n            do_not_unroll_columns: this.doNotUnrollColumns,\n            page_separator: this.pageSeparator,\n            page_prefix: this.pagePrefix,\n            page_suffix: this.pageSuffix,\n            gpt4o_mode: this.gpt4oMode,\n            gpt4o_api_key: this.gpt4oApiKey,\n            bounding_box: this.boundingBox,\n            target_pages: this.targetPages,\n            use_vendor_multimodal_model: this.useVendorMultimodalModel,\n            vendor_multimodal_model_name: this.vendorMultimodalModelName,\n            vendor_multimodal_api_key: this.vendorMultimodalApiKey,\n            premium_mode: this.premiumMode,\n            webhook_url: this.webhookUrl,\n            take_screenshot: this.takeScreenshot,\n            disable_ocr: this.disableOcr,\n            disable_reconstruction: this.disableReconstruction,\n            input_s3_path: this.inputS3Path,\n            output_s3_path_prefix: this.outputS3PathPrefix,\n            continuous_mode: this.continuousMode,\n            is_formatting_instruction: this.isFormattingInstruction,\n            annotate_links: this.annotateLinks,\n            azure_openai_deployment_name: this.azureOpenaiDeploymentName,\n            azure_openai_endpoint: this.azureOpenaiEndpoint,\n            azure_openai_api_version: this.azureOpenaiApiVersion,\n            azure_openai_key: this.azureOpenaiKey,\n            auto_mode: this.auto_mode,\n            auto_mode_trigger_on_image_in_page: this.auto_mode_trigger_on_image_in_page,\n            auto_mode_trigger_on_table_in_page: this.auto_mode_trigger_on_table_in_page,\n            auto_mode_trigger_on_text_in_page: this.auto_mode_trigger_on_text_in_page,\n            auto_mode_trigger_on_regexp_in_page: this.auto_mode_trigger_on_regexp_in_page,\n            bbox_bottom: this.bbox_bottom,\n            bbox_left: this.bbox_left,\n            bbox_right: this.bbox_right,\n            bbox_top: this.bbox_top,\n            disable_image_extraction: this.disable_image_extraction,\n            extract_charts: this.extract_charts,\n            guess_xlsx_sheet_name: this.guess_xlsx_sheet_name,\n            html_make_all_elements_visible: this.html_make_all_elements_visible,\n            html_remove_fixed_elements: this.html_remove_fixed_elements,\n            html_remove_navigation_elements: this.html_remove_navigation_elements,\n            http_proxy: this.http_proxy,\n            input_url: this.input_url,\n            max_pages: this.max_pages,\n            output_pdf_of_document: this.output_pdf_of_document,\n            structured_output: this.structured_output,\n            structured_output_json_schema: this.structured_output_json_schema,\n            structured_output_json_schema_name: this.structured_output_json_schema_name,\n            extract_layout: this.extract_layout,\n            output_tables_as_HTML: this.output_tables_as_HTML,\n            input_s3_region: this.input_s3_region,\n            output_s3_region: this.output_s3_region,\n            preserve_layout_alignment_across_pages: this.preserve_layout_alignment_across_pages,\n            spreadsheet_extract_sub_tables: this.spreadsheet_extract_sub_tables,\n            formatting_instruction: this.formatting_instruction,\n            parse_mode: this.parse_mode,\n            system_prompt: this.system_prompt,\n            system_prompt_append: this.system_prompt_append,\n            user_prompt: this.user_prompt,\n            job_timeout_in_seconds: this.job_timeout_in_seconds,\n            job_timeout_extra_time_per_page_in_seconds: this.job_timeout_extra_time_per_page_in_seconds,\n            strict_mode_image_extraction: this.strict_mode_image_extraction,\n            strict_mode_image_ocr: this.strict_mode_image_ocr,\n            strict_mode_reconstruction: this.strict_mode_reconstruction,\n            strict_mode_buggy_font: this.strict_mode_buggy_font,\n            ignore_document_elements_for_layout_detection: this.ignore_document_elements_for_layout_detection,\n            complemental_formatting_instruction: this.complemental_formatting_instruction,\n            content_guideline_instruction: this.content_guideline_instruction,\n            adaptive_long_table: this.adaptive_long_table,\n            model: this.model\n        };\n        const response = await (0,_api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.uploadFileApiV1ParsingUploadPost)({\n            client: this.#client,\n            throwOnError: true,\n            query: {\n                project_id: this.project_id ?? null,\n                organization_id: this.organization_id ?? null\n            },\n            signal: AbortSignal.timeout(this.maxTimeout * 1000),\n            body\n        });\n        return response.data.id;\n    }\n    /**\n   * Retrieves the result of a parsing job.\n   *\n   * Uses a polling loop with retry logic. Each API call is retried\n   * up to maxErrorCount times if it fails with a 5XX or socket error.\n   * The delay between polls increases according to the specified backoffPattern (\"constant\", \"linear\", or \"exponential\"),\n   * capped by maxCheckInterval.\n   *\n   * @param jobId - The job ID.\n   * @param resultType - The type of result to fetch (\"text\", \"json\", or \"markdown\").\n   * @returns A Promise resolving to the job result.\n   */ async getJobResult(jobId, resultType) {\n        let tries = 0;\n        let currentInterval = this.checkInterval;\n        while(true){\n            await sleep(currentInterval * 1000);\n            // Wraps the API call in a retry\n            let result;\n            try {\n                result = await pRetry(()=>(0,_api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.getJobApiV1ParsingJobJobIdGet)({\n                        client: this.#client,\n                        throwOnError: true,\n                        path: {\n                            job_id: jobId\n                        },\n                        query: {\n                            project_id: this.project_id ?? null,\n                            organization_id: this.organization_id ?? null\n                        },\n                        signal: AbortSignal.timeout(this.maxTimeout * 1000)\n                    }), {\n                    retries: this.maxErrorCount,\n                    onFailedAttempt: (error)=>{\n                        // Retry only on 5XX or socket errors.\n                        const status = error.cause?.response?.status;\n                        if (!(status && status >= 500 && status < 600 || error.cause?.code && (error.cause.code === \"ECONNRESET\" || error.cause.code === \"ETIMEDOUT\" || error.cause.code === \"ECONNREFUSED\"))) {\n                            throw error;\n                        }\n                        if (this.verbose) {\n                            console.warn(`Attempting to get job ${jobId} result (attempt ${error.attemptNumber}) failed. Retrying...`);\n                        }\n                    }\n                });\n            } catch (e) {\n                throw new Error(`Max error count reached for job ${jobId}: ${e.message}`);\n            }\n            const { data } = result;\n            const status = data[\"status\"];\n            if (status === \"SUCCESS\") {\n                let resultData;\n                switch(resultType){\n                    case \"json\":\n                        {\n                            resultData = await (0,_api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.getJobJsonResultApiV1ParsingJobJobIdResultJsonGet)({\n                                client: this.#client,\n                                throwOnError: true,\n                                path: {\n                                    job_id: jobId\n                                },\n                                query: {\n                                    project_id: this.project_id ?? null,\n                                    organization_id: this.organization_id ?? null\n                                },\n                                signal: AbortSignal.timeout(this.maxTimeout * 1000)\n                            });\n                            break;\n                        }\n                    case \"markdown\":\n                        {\n                            resultData = await (0,_api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.getJobResultApiV1ParsingJobJobIdResultMarkdownGet)({\n                                client: this.#client,\n                                throwOnError: true,\n                                path: {\n                                    job_id: jobId\n                                },\n                                query: {\n                                    project_id: this.project_id ?? null,\n                                    organization_id: this.organization_id ?? null\n                                },\n                                signal: AbortSignal.timeout(this.maxTimeout * 1000)\n                            });\n                            break;\n                        }\n                    case \"text\":\n                        {\n                            resultData = await (0,_api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.getJobTextResultApiV1ParsingJobJobIdResultTextGet)({\n                                client: this.#client,\n                                throwOnError: true,\n                                path: {\n                                    job_id: jobId\n                                },\n                                query: {\n                                    project_id: this.project_id ?? null,\n                                    organization_id: this.organization_id ?? null\n                                },\n                                signal: AbortSignal.timeout(this.maxTimeout * 1000)\n                            });\n                            break;\n                        }\n                }\n                return resultData.data;\n            } else if (status === \"PENDING\") {\n                if (this.verbose && tries % 10 === 0) {\n                    this.stdout?.write(\".\");\n                }\n                tries++;\n            } else {\n                if (this.verbose) {\n                    console.error(`Received error response ${status} for job ${jobId}. Got Error Code: ${data.error_code} and Error Message: ${data.error_message}`);\n                }\n                throw new Error(`Failed to parse the file: ${jobId}, status: ${status}`);\n            }\n            // Adjust the polling interval based on the backoff pattern.\n            if (this.backoffPattern === \"exponential\") {\n                currentInterval = Math.min(currentInterval * 2, this.maxCheckInterval);\n            } else if (this.backoffPattern === \"linear\") {\n                currentInterval = Math.min(currentInterval + this.checkInterval, this.maxCheckInterval);\n            } else if (this.backoffPattern === \"constant\") {\n                currentInterval = this.checkInterval;\n            }\n        }\n    }\n    /**\n   * Loads data from a file and returns an array of Document objects.\n   * To be used with resultType \"text\" or \"markdown\".\n   *\n   * @param fileContent - The content of the file as a Uint8Array.\n   * @param filename - Optional filename for the file.\n   * @returns A Promise that resolves to an array of Document objects.\n   */ async loadDataAsContent(fileContent, filename) {\n        return this.#createJob(fileContent, filename).then(async (jobId)=>{\n            if (this.verbose) {\n                console.log(`Started parsing the file under job id ${jobId}`);\n            }\n            // Return results as Document objects.\n            const jobResults = await this.getJobResult(jobId, this.resultType);\n            const resultText = jobResults[this.resultType];\n            // Split the text by separator if splitByPage is true.\n            if (this.splitByPage) {\n                return this.splitTextBySeparator(resultText);\n            }\n            return [\n                new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    text: resultText\n                })\n            ];\n        }).catch((error)=>{\n            console.warn(`Error while parsing the file with: ${error.message ?? error.detail}`);\n            if (this.ignoreErrors) {\n                return [];\n            } else {\n                throw error;\n            }\n        });\n    }\n    /**\n   * Loads data from a file and returns an array of JSON objects.\n   * To be used with resultType \"json\".\n   *\n   * @param filePathOrContent - The file path or the file content as a Uint8Array.\n   * @returns A Promise that resolves to an array of JSON objects.\n   */ async loadJson(filePathOrContent) {\n        let jobId;\n        const isFilePath = typeof filePathOrContent === \"string\";\n        try {\n            const data = isFilePath ? await _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.fs.readFile(filePathOrContent) : filePathOrContent;\n            // Create a job for the file.\n            jobId = await this.#createJob(data, isFilePath ? _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.path.basename(filePathOrContent) : undefined);\n            if (this.verbose) {\n                console.log(`Started parsing the file under job id ${jobId}`);\n            }\n            // Return results as an array of JSON objects.\n            const resultJson = await this.getJobResult(jobId, \"json\");\n            resultJson.job_id = jobId;\n            resultJson.file_path = isFilePath ? filePathOrContent : undefined;\n            return [\n                resultJson\n            ];\n        } catch (e) {\n            console.error(`Error while parsing the file under job id ${jobId}`, e);\n            if (this.ignoreErrors) {\n                return [];\n            } else {\n                throw e;\n            }\n        }\n    }\n    /**\n   * Downloads and saves images from a given JSON result to a specified download path.\n   * Currently only supports resultType \"json\".\n   *\n   * @param jsonResult - The JSON result containing image information.\n   * @param downloadPath - The path where the downloaded images will be saved.\n   * @returns A Promise that resolves to an array of image objects.\n   */ async getImages(jsonResult, downloadPath) {\n        try {\n            // Create download directory if it doesn't exist (checks for write access).\n            try {\n                await _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.fs.access(downloadPath);\n            } catch  {\n                await _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.fs.mkdir(downloadPath, {\n                    recursive: true\n                });\n            }\n            const images = [];\n            for (const result of jsonResult){\n                const jobId = result.job_id;\n                for (const page of result.pages){\n                    if (this.verbose) {\n                        console.log(`> Image for page ${page.page}: ${page.images}`);\n                    }\n                    for (const image of page.images){\n                        const imageName = image.name;\n                        const imagePath = await this.getImagePath(downloadPath, jobId, imageName);\n                        await this.fetchAndSaveImage(imageName, imagePath, jobId);\n                        // Assign metadata to the image.\n                        image.path = imagePath;\n                        image.job_id = jobId;\n                        image.original_pdf_path = result.file_path;\n                        image.page_number = page.page;\n                        images.push(image);\n                    }\n                }\n            }\n            return images;\n        } catch (e) {\n            console.error(`Error while downloading images from the parsed result`, e);\n            if (this.ignoreErrors) {\n                return [];\n            } else {\n                throw e;\n            }\n        }\n    }\n    /**\n   * Constructs the file path for an image.\n   *\n   * @param downloadPath - The base download directory.\n   * @param jobId - The job ID.\n   * @param imageName - The image name.\n   * @returns A Promise that resolves to the full image path.\n   */ async getImagePath(downloadPath, jobId, imageName) {\n        return _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.path.join(downloadPath, `${jobId}-${imageName}`);\n    }\n    /**\n   * Fetches an image from the API and saves it to the specified path.\n   *\n   * @param imageName - The name of the image.\n   * @param imagePath - The local path to save the image.\n   * @param jobId - The associated job ID.\n   */ async fetchAndSaveImage(imageName, imagePath, jobId) {\n        const response = await (0,_api_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.getJobImageResultApiV1ParsingJobJobIdResultImageNameGet)({\n            client: this.#client,\n            path: {\n                job_id: jobId,\n                name: imageName\n            },\n            query: {\n                project_id: this.project_id ?? null,\n                organization_id: this.organization_id ?? null\n            }\n        });\n        if (response.error) {\n            throw new Error(`Failed to download image: ${response.error.detail}`);\n        }\n        const blob = await response.data;\n        // Write the image buffer to the specified imagePath.\n        await _llamaindex_env__WEBPACK_IMPORTED_MODULE_1__.fs.writeFile(imagePath, new Uint8Array(await blob.arrayBuffer()));\n    }\n    /**\n   * Filters out invalid values (null, undefined, empty string) for specific parameters.\n   *\n   * @param params - The parameters object.\n   * @param keysToCheck - The keys to check for valid values.\n   * @returns A new object with filtered parameters.\n   */ filterSpecificParams(params, keysToCheck) {\n        const filteredParams = {};\n        for (const [key, value] of Object.entries(params)){\n            if (keysToCheck.includes(key)) {\n                if (value !== null && value !== undefined && value !== \"\") {\n                    filteredParams[key] = value;\n                }\n            } else {\n                filteredParams[key] = value;\n            }\n        }\n        return filteredParams;\n    }\n    /**\n   * Splits text into Document objects using the page separator.\n   *\n   * @param text - The text to be split.\n   * @returns An array of Document objects.\n   */ splitTextBySeparator(text) {\n        const separator = this.pageSeparator ?? \"\\n---\\n\";\n        const textChunks = text.split(separator);\n        return textChunks.map((docChunk)=>new _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_0__.Document({\n                text: docChunk\n            }));\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/cloud/reader/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRunner: () => (/* binding */ AgentRunner),\n/* harmony export */   AgentWorker: () => (/* binding */ AgentWorker),\n/* harmony export */   LLMAgent: () => (/* binding */ LLMAgent),\n/* harmony export */   LLMAgentWorker: () => (/* binding */ LLMAgentWorker),\n/* harmony export */   callTool: () => (/* binding */ callTool),\n/* harmony export */   consumeAsyncIterable: () => (/* binding */ consumeAsyncIterable),\n/* harmony export */   createReadableStream: () => (/* binding */ createReadableStream),\n/* harmony export */   stepTools: () => (/* binding */ stepTools),\n/* harmony export */   stepToolsStreaming: () => (/* binding */ stepToolsStreaming),\n/* harmony export */   validateAgentParams: () => (/* binding */ validateAgentParams)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _chat_engine_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chat-engine/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js\");\n/* harmony import */ var _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../decorator/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../memory/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\n\n\n\n\n\n// #TODO stepTools and stepToolsStreaming should be moved to a better abstraction\nasync function stepToolsStreaming({ response, tools, step, enqueueOutput }) {\n    const responseChunkStream = new ReadableStream({\n        async start (controller) {\n            for await (const chunk of response){\n                controller.enqueue(chunk);\n            }\n            controller.close();\n        }\n    });\n    const [pipStream, finalStream] = responseChunkStream.tee();\n    const reader = pipStream.getReader();\n    const { value } = await reader.read();\n    reader.releaseLock();\n    if (value === undefined) {\n        throw new Error(\"first chunk value is undefined, this should not happen\");\n    }\n    // check if first chunk has tool calls, if so, this is a function call\n    // otherwise, it's a regular message\n    const hasToolCall = !!(value.options && \"toolCall\" in value.options);\n    enqueueOutput({\n        taskStep: step,\n        output: finalStream,\n        isLast: !hasToolCall\n    });\n    if (hasToolCall) {\n        // you need to consume the response to get the full toolCalls\n        const toolCalls = new Map();\n        for await (const chunk of pipStream){\n            if (chunk.options && \"toolCall\" in chunk.options) {\n                const toolCall = chunk.options.toolCall;\n                toolCall.forEach((toolCall)=>{\n                    toolCalls.set(toolCall.id, toolCall);\n                });\n            }\n        }\n        // If there are toolCalls, but they didn't get read into the stream, used for Gemini\n        if (!toolCalls.size && value.options && \"toolCall\" in value.options) {\n            value.options.toolCall.forEach((toolCall)=>{\n                toolCalls.set(toolCall.id, toolCall);\n            });\n        }\n        step.context.store.messages = [\n            ...step.context.store.messages,\n            {\n                role: \"assistant\",\n                content: \"\",\n                options: {\n                    toolCall: [\n                        ...toolCalls.values()\n                    ]\n                }\n            }\n        ];\n        for (const toolCall of toolCalls.values()){\n            const targetTool = tools.find((tool)=>tool.metadata.name === toolCall.name);\n            const toolOutput = await callTool(targetTool, toolCall, step.context.logger);\n            step.context.store.messages = [\n                ...step.context.store.messages,\n                {\n                    role: \"user\",\n                    content: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.stringifyJSONToMessageContent)(toolOutput.output),\n                    options: {\n                        toolResult: {\n                            result: toolOutput.output,\n                            isError: toolOutput.isError,\n                            id: toolCall.id\n                        }\n                    }\n                }\n            ];\n            step.context.store.toolOutputs.push(toolOutput);\n        }\n    }\n}\nasync function stepTools({ response, tools, step, enqueueOutput }) {\n    step.context.store.messages = [\n        ...step.context.store.messages,\n        response.message\n    ];\n    const options = response.message.options ?? {};\n    enqueueOutput({\n        taskStep: step,\n        output: response,\n        isLast: !(\"toolCall\" in options)\n    });\n    if (\"toolCall\" in options) {\n        const { toolCall } = options;\n        for (const call of toolCall){\n            const targetTool = tools.find((tool)=>tool.metadata.name === call.name);\n            const toolOutput = await callTool(targetTool, call, step.context.logger);\n            step.context.store.toolOutputs.push(toolOutput);\n            step.context.store.messages = [\n                ...step.context.store.messages,\n                {\n                    content: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.stringifyJSONToMessageContent)(toolOutput.output),\n                    role: \"user\",\n                    options: {\n                        toolResult: {\n                            result: toolOutput.output,\n                            isError: toolOutput.isError,\n                            id: call.id\n                        }\n                    }\n                }\n            ];\n        }\n    }\n}\nasync function callTool(tool, toolCall, logger) {\n    let input;\n    if (typeof toolCall.input === \"string\") {\n        try {\n            input = JSON.parse(toolCall.input);\n        } catch (e) {\n            const output = `Tool ${toolCall.name} can't be called. Input is not a valid JSON object.`;\n            logger.error(`${output} Try increasing the maxTokens parameter of your LLM. Invalid Input: ${toolCall.input}`);\n            return {\n                tool,\n                input: {},\n                output,\n                isError: true\n            };\n        }\n    } else {\n        input = toolCall.input;\n    }\n    if (!tool) {\n        logger.error(`Tool ${toolCall.name} does not exist.`);\n        const output = `Tool ${toolCall.name} does not exist.`;\n        return {\n            tool,\n            input,\n            output,\n            isError: true\n        };\n    }\n    const call = tool.call;\n    let output;\n    if (!call) {\n        logger.error(`Tool ${tool.metadata.name} (remote:${toolCall.name}) does not have a implementation.`);\n        output = `Tool ${tool.metadata.name} (remote:${toolCall.name}) does not have a implementation.`;\n        return {\n            tool,\n            input,\n            output,\n            isError: true\n        };\n    }\n    try {\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.callbackManager.dispatchEvent(\"llm-tool-call\", {\n            toolCall: {\n                ...toolCall,\n                input\n            }\n        });\n        output = await call.call(tool, input);\n        logger.log(`Tool ${tool.metadata.name} (remote:${toolCall.name}) succeeded.`);\n        logger.log(`Output: ${JSON.stringify(output)}`);\n        const toolOutput = {\n            tool,\n            input,\n            output,\n            isError: false\n        };\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.callbackManager.dispatchEvent(\"llm-tool-result\", {\n            toolCall: {\n                ...toolCall,\n                input\n            },\n            toolResult: {\n                ...toolOutput\n            }\n        });\n        return toolOutput;\n    } catch (e) {\n        output = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.prettifyError)(e);\n        logger.error(`Tool ${tool.metadata.name} (remote:${toolCall.name}) failed: ${output}`);\n    }\n    return {\n        tool,\n        input,\n        output,\n        isError: true\n    };\n}\nasync function consumeAsyncIterable(input, previousContent = \"\") {\n    if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.isAsyncIterable)(input)) {\n        const result = {\n            content: previousContent,\n            // only assistant will give streaming response\n            role: \"assistant\",\n            options: {}\n        };\n        for await (const chunk of input){\n            result.content += chunk.delta;\n            if (chunk.options) {\n                result.options = {\n                    ...result.options,\n                    ...chunk.options\n                };\n            }\n        }\n        return result;\n    } else {\n        return input;\n    }\n}\nfunction createReadableStream(asyncIterable) {\n    return new ReadableStream({\n        async start (controller) {\n            for await (const chunk of asyncIterable){\n                controller.enqueue(chunk);\n            }\n            controller.close();\n        }\n    });\n}\nfunction validateAgentParams(params) {\n    if (\"tools\" in params) {\n        zod__WEBPACK_IMPORTED_MODULE_7__.z.array(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.baseToolWithCallSchema).parse(params.tools);\n    }\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _computedKey, _initProto;\nconst MAX_TOOL_CALLS = 10;\nfunction createTaskOutputStream(handler, context) {\n    const steps = [];\n    return new ReadableStream({\n        pull: async (controller)=>{\n            const step = {\n                id: (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)(),\n                context,\n                prevStep: null,\n                nextSteps: new Set()\n            };\n            if (steps.length > 0) {\n                step.prevStep = steps[steps.length - 1];\n            }\n            const taskOutputs = [];\n            steps.push(step);\n            const enqueueOutput = (output)=>{\n                context.logger.log(\"Enqueueing output for step(id, %s).\", step.id);\n                taskOutputs.push(output);\n                controller.enqueue(output);\n            };\n            _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.callbackManager.dispatchEvent(\"agent-start\", {\n                startStep: step\n            });\n            context.logger.log(\"Starting step(id, %s).\", step.id);\n            await handler(step, enqueueOutput);\n            context.logger.log(\"Finished step(id, %s).\", step.id);\n            // fixme: support multi-thread when there are multiple outputs\n            // todo: for now we pretend there is only one task output\n            const { isLast, taskStep } = taskOutputs[0];\n            context = {\n                ...taskStep.context,\n                store: {\n                    ...taskStep.context.store\n                },\n                toolCallCount: 1\n            };\n            if (isLast) {\n                context.logger.log(\"Final step(id, %s) reached, closing task.\", step.id);\n                _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.callbackManager.dispatchEvent(\"agent-end\", {\n                    endStep: step\n                });\n                controller.close();\n            }\n        }\n    });\n}\n_computedKey = Symbol.toStringTag;\n/**\n * Worker will schedule tasks and handle the task execution\n */ class AgentWorker {\n    #taskSet;\n    createTask(query, context) {\n        context.store.messages.push({\n            role: \"user\",\n            content: query\n        });\n        const taskOutputStream = createTaskOutputStream(this.taskHandler, context);\n        return new ReadableStream({\n            pull: async (controller)=>{\n                for await (const stepOutput of taskOutputStream){\n                    this.#taskSet.add(stepOutput.taskStep);\n                    if (stepOutput.isLast) {\n                        let currentStep = stepOutput.taskStep;\n                        while(currentStep){\n                            this.#taskSet.delete(currentStep);\n                            currentStep = currentStep.prevStep;\n                        }\n                        const { output, taskStep } = stepOutput;\n                        if (output instanceof ReadableStream) {\n                            let content = \"\";\n                            let options = undefined;\n                            const transformedStream = output.pipeThrough(new TransformStream({\n                                transform (chunk, controller) {\n                                    content += chunk.delta;\n                                    if (!options && chunk.options) {\n                                        options = chunk.options;\n                                    }\n                                    controller.enqueue(chunk); // Pass the chunk through unchanged\n                                },\n                                // When stream finishes, store the accumulated message in context\n                                flush () {\n                                    taskStep.context.store.messages = [\n                                        ...taskStep.context.store.messages,\n                                        {\n                                            role: \"assistant\",\n                                            content,\n                                            options\n                                        }\n                                    ];\n                                }\n                            }));\n                            stepOutput.output = transformedStream;\n                        }\n                        controller.enqueue(stepOutput);\n                        controller.close();\n                    } else {\n                        controller.enqueue(stepOutput);\n                    }\n                }\n            }\n        });\n    }\n    constructor(){\n        this.#taskSet = new Set();\n        this[_computedKey] = \"AgentWorker\";\n    }\n}\n/**\n * Runner will manage the task execution and provide a high-level API for the user\n */ class AgentRunner extends _chat_engine_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatEngine {\n    static{\n        ({ e: [_initProto] } = _apply_decs_2203_r(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.wrapEventCaller,\n                2,\n                \"chat\"\n            ]\n        ], []));\n    }\n    #llm;\n    #tools;\n    #systemPrompt;\n    #chatHistory;\n    #runner;\n    #verbose;\n    static defaultCreateStore() {\n        return Object.create(null);\n    }\n    static{\n        this.defaultTaskHandler = async (step, enqueueOutput)=>{\n            const { llm, getTools, stream, additionalChatOptions } = step.context;\n            const lastMessage = step.context.store.messages.at(-1).content;\n            const tools = await getTools(lastMessage);\n            if (!stream) {\n                const response = await llm.chat({\n                    stream,\n                    tools,\n                    messages: [\n                        ...step.context.store.messages\n                    ],\n                    additionalChatOptions\n                });\n                await stepTools({\n                    response,\n                    tools,\n                    step,\n                    enqueueOutput\n                });\n            } else {\n                const response = await llm.chat({\n                    stream,\n                    tools,\n                    messages: [\n                        ...step.context.store.messages\n                    ],\n                    additionalChatOptions\n                });\n                await stepToolsStreaming({\n                    response,\n                    tools,\n                    step,\n                    enqueueOutput\n                });\n            }\n        };\n    }\n    constructor(params){\n        super(), this.#systemPrompt = (_initProto(this), null);\n        const { llm, chatHistory, systemPrompt, runner, tools, verbose } = params;\n        this.#llm = llm;\n        this.#chatHistory = chatHistory;\n        this.#runner = runner;\n        if (systemPrompt) {\n            this.#systemPrompt = systemPrompt;\n        }\n        this.#tools = tools;\n        this.#verbose = verbose;\n    }\n    get llm() {\n        return this.#llm;\n    }\n    get chatHistory() {\n        return this.#chatHistory;\n    }\n    get verbose() {\n        return _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.debug || this.#verbose;\n    }\n    reset() {\n        this.#chatHistory = [];\n    }\n    getTools(query) {\n        return typeof this.#tools === \"function\" ? this.#tools(query) : this.#tools;\n    }\n    static shouldContinue(task) {\n        return task.context.toolCallCount < MAX_TOOL_CALLS;\n    }\n    createTask(message, stream = false, verbose = undefined, chatHistory, additionalChatOptions) {\n        const initialMessages = [\n            ...chatHistory ?? this.#chatHistory\n        ];\n        if (this.#systemPrompt !== null) {\n            const systemPrompt = this.#systemPrompt;\n            const alreadyHasSystemPrompt = initialMessages.filter((msg)=>msg.role === \"system\").some((msg)=>Object.is(msg.content, systemPrompt));\n            if (!alreadyHasSystemPrompt) {\n                initialMessages.push({\n                    content: systemPrompt,\n                    role: \"system\"\n                });\n            }\n        }\n        return this.#runner.createTask(message, {\n            stream,\n            toolCallCount: 0,\n            llm: this.#llm,\n            additionalChatOptions: additionalChatOptions ?? {},\n            getTools: (message)=>this.getTools(message),\n            store: {\n                ...this.createStore(),\n                messages: initialMessages,\n                toolOutputs: []\n            },\n            shouldContinue: AgentRunner.shouldContinue,\n            logger: // disable verbose if explicitly set to false\n            verbose === false ? _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.emptyLogger : verbose || this.verbose ? _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.consoleLogger : _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.emptyLogger\n        });\n    }\n    async chat(params) {\n        let chatHistory = [];\n        if (params.chatHistory instanceof _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.BaseMemory) {\n            chatHistory = await params.chatHistory.getMessages();\n        } else {\n            chatHistory = params.chatHistory;\n        }\n        const task = this.createTask(params.message, !!params.stream, false, chatHistory, params.chatOptions);\n        for await (const stepOutput of task){\n            // update chat history for each round\n            this.#chatHistory = [\n                ...stepOutput.taskStep.context.store.messages\n            ];\n            if (stepOutput.isLast) {\n                const { output } = stepOutput;\n                if (output instanceof ReadableStream) {\n                    return output.pipeThrough(new TransformStream({\n                        transform (chunk, controller) {\n                            controller.enqueue(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.EngineResponse.fromChatResponseChunk(chunk));\n                        }\n                    }));\n                } else {\n                    return _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.EngineResponse.fromChatResponse(output);\n                }\n            }\n        }\n        throw new Error(\"Task ended without a last step.\");\n    }\n}\n\nclass LLMAgentWorker extends AgentWorker {\n    constructor(...args){\n        super(...args), this.taskHandler = AgentRunner.defaultTaskHandler;\n    }\n}\nclass LLMAgent extends AgentRunner {\n    constructor(params){\n        validateAgentParams(params);\n        const llm = params.llm ?? (_global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.llm ? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.Settings.llm : null);\n        if (!llm) throw new Error(\"llm must be provided for either in params or Settings.llm\");\n        super({\n            llm,\n            chatHistory: params.chatHistory ?? [],\n            systemPrompt: params.systemPrompt ?? null,\n            runner: new LLMAgentWorker(),\n            tools: \"tools\" in params ? params.tools : params.toolRetriever.retrieve.bind(params.toolRetriever),\n            verbose: params.verbose ?? false\n        }), this.createStore = AgentRunner.defaultCreateStore, this.taskHandler = AgentRunner.defaultTaskHandler;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatEngine: () => (/* binding */ BaseChatEngine),\n/* harmony export */   ContextChatEngine: () => (/* binding */ ContextChatEngine),\n/* harmony export */   DefaultContextGenerator: () => (/* binding */ DefaultContextGenerator),\n/* harmony export */   SimpleChatEngine: () => (/* binding */ SimpleChatEngine)\n/* harmony export */ });\n/* harmony import */ var _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../decorator/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../memory/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js\");\n/* harmony import */ var _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../prompts/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _response_synthesizers_dist_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../response-synthesizers/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\");\n\n\n\n\n\n\n\n\nclass BaseChatEngine {\n}\n\nclass DefaultContextGenerator extends _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.PromptMixin {\n    constructor(init){\n        super();\n        this.retriever = init.retriever;\n        this.contextSystemPrompt = init?.contextSystemPrompt ?? _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultContextSystemPrompt;\n        this.nodePostprocessors = init.nodePostprocessors || [];\n        this.contextRole = init.contextRole ?? \"system\";\n        this.metadataMode = init.metadataMode ?? _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.NONE;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _getPrompts() {\n        return {\n            contextSystemPrompt: this.contextSystemPrompt\n        };\n    }\n    _updatePrompts(promptsDict) {\n        if (promptsDict.contextSystemPrompt) {\n            this.contextSystemPrompt = promptsDict.contextSystemPrompt;\n        }\n    }\n    async applyNodePostprocessors(nodes, query) {\n        let nodesWithScore = nodes;\n        for (const postprocessor of this.nodePostprocessors){\n            nodesWithScore = await postprocessor.postprocessNodes(nodesWithScore, query);\n        }\n        return nodesWithScore;\n    }\n    async generate(message) {\n        const sourceNodesWithScore = await this.retriever.retrieve({\n            query: message\n        });\n        const nodes = await this.applyNodePostprocessors(sourceNodesWithScore, message);\n        const content = await (0,_response_synthesizers_dist_index_js__WEBPACK_IMPORTED_MODULE_6__.createMessageContent)(this.contextSystemPrompt, nodes.map((r)=>r.node), undefined, this.metadataMode);\n        return {\n            message: {\n                content,\n                role: this.contextRole\n            },\n            nodes\n        };\n    }\n}\n\nfunction applyDecs2203RFactory$1() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r$1(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r$1 = applyDecs2203RFactory$1())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto$1;\n/**\n * ContextChatEngine uses the Index to get the appropriate context for each query.\n * The context is stored in the system prompt, and the chat history is chunk,\n * allowing the appropriate context to be surfaced for each query.\n */ class ContextChatEngine extends _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.PromptMixin {\n    static{\n        ({ e: [_initProto$1] } = _apply_decs_2203_r$1(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.wrapEventCaller,\n                2,\n                \"chat\"\n            ]\n        ], []));\n    }\n    get chatHistory() {\n        return this.memory.getMessages();\n    }\n    constructor(init){\n        super(), _initProto$1(this);\n        this.chatModel = init.chatModel ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.llm;\n        this.memory = new _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ChatMemoryBuffer({\n            chatHistory: init?.chatHistory\n        });\n        this.contextGenerator = new DefaultContextGenerator({\n            retriever: init.retriever,\n            contextSystemPrompt: init?.contextSystemPrompt,\n            nodePostprocessors: init?.nodePostprocessors,\n            contextRole: init?.contextRole,\n            metadataMode: _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.LLM\n        });\n        this.systemPrompt = init.systemPrompt;\n    }\n    _getPrompts() {\n        return {\n            ...this.contextGenerator.getPrompts()\n        };\n    }\n    _updatePrompts(prompts) {\n        this.contextGenerator.updatePrompts(prompts);\n    }\n    _getPromptModules() {\n        return {\n            contextGenerator: this.contextGenerator\n        };\n    }\n    async chat(params) {\n        const { message, stream } = params;\n        const chatHistory = params.chatHistory ? new _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ChatMemoryBuffer({\n            chatHistory: params.chatHistory instanceof _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.BaseMemory ? await params.chatHistory.getMessages() : params.chatHistory\n        }) : this.memory;\n        const requestMessages = await this.prepareRequestMessages(message, chatHistory);\n        if (stream) {\n            const stream = await this.chatModel.chat({\n                messages: requestMessages.messages,\n                stream: true,\n                additionalChatOptions: params.chatOptions\n            });\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamReducer)({\n                stream,\n                initialValue: \"\",\n                reducer: (accumulator, part)=>accumulator += part.delta,\n                finished: (accumulator)=>{\n                    chatHistory.put({\n                        content: accumulator,\n                        role: \"assistant\"\n                    });\n                }\n            }), (r)=>_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromChatResponseChunk(r, requestMessages.nodes));\n        }\n        const response = await this.chatModel.chat({\n            messages: requestMessages.messages,\n            additionalChatOptions: params.chatOptions\n        });\n        chatHistory.put(response.message);\n        return _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromChatResponse(response, requestMessages.nodes);\n    }\n    reset() {\n        this.memory.reset();\n    }\n    async prepareRequestMessages(message, chatHistory) {\n        chatHistory.put({\n            content: message,\n            role: \"user\"\n        });\n        const textOnly = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(message);\n        const context = await this.contextGenerator.generate(textOnly);\n        const systemMessage = this.prependSystemPrompt(context.message);\n        const messages = await chatHistory.getMessages([\n            systemMessage\n        ]);\n        return {\n            nodes: context.nodes,\n            messages\n        };\n    }\n    prependSystemPrompt(message) {\n        if (!this.systemPrompt) return message;\n        return {\n            ...message,\n            content: this.systemPrompt.trim() + \"\\n\" + (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(message.content)\n        };\n    }\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto;\n/**\n * SimpleChatEngine is the simplest possible chat engine. Useful for using your own custom prompts.\n */ class SimpleChatEngine {\n    static{\n        ({ e: [_initProto] } = _apply_decs_2203_r(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.wrapEventCaller,\n                2,\n                \"chat\"\n            ]\n        ], []));\n    }\n    get chatHistory() {\n        return this.memory.getMessages();\n    }\n    constructor(init){\n        _initProto(this);\n        this.memory = init?.memory ?? new _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ChatMemoryBuffer();\n        this.llm = init?.llm ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.llm;\n    }\n    async chat(params) {\n        const { message, stream } = params;\n        const chatHistory = params.chatHistory ? new _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ChatMemoryBuffer({\n            chatHistory: params.chatHistory instanceof _memory_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.BaseMemory ? await params.chatHistory.getMessages() : params.chatHistory\n        }) : this.memory;\n        chatHistory.put({\n            content: message,\n            role: \"user\"\n        });\n        if (stream) {\n            const stream = await this.llm.chat({\n                messages: await chatHistory.getMessages(),\n                stream: true\n            });\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamReducer)({\n                stream,\n                initialValue: \"\",\n                reducer: (accumulator, part)=>accumulator + part.delta,\n                finished: (accumulator)=>{\n                    chatHistory.put({\n                        content: accumulator,\n                        role: \"assistant\"\n                    });\n                }\n            }), _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromChatResponseChunk);\n        }\n        const response = await this.llm.chat({\n            stream: false,\n            messages: await chatHistory.getMessages()\n        });\n        chatHistory.put(response.message);\n        return _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromChatResponse(response);\n    }\n    reset() {\n        this.memory.reset();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/chat-engine/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexDict: () => (/* binding */ IndexDict),\n/* harmony export */   IndexList: () => (/* binding */ IndexList),\n/* harmony export */   IndexStruct: () => (/* binding */ IndexStruct),\n/* harmony export */   IndexStructType: () => (/* binding */ IndexStructType),\n/* harmony export */   KeywordTable: () => (/* binding */ KeywordTable),\n/* harmony export */   jsonToIndexStruct: () => (/* binding */ jsonToIndexStruct)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n\nconst IndexStructType = {\n    NODE: \"node\",\n    TREE: \"tree\",\n    LIST: \"list\",\n    KEYWORD_TABLE: \"keyword_table\",\n    DICT: \"dict\",\n    SIMPLE_DICT: \"simple_dict\",\n    WEAVIATE: \"weaviate\",\n    PINECONE: \"pinecone\",\n    QDRANT: \"qdrant\",\n    LANCEDB: \"lancedb\",\n    MILVUS: \"milvus\",\n    CHROMA: \"chroma\",\n    MYSCALE: \"myscale\",\n    CLICKHOUSE: \"clickhouse\",\n    VECTOR_STORE: \"vector_store\",\n    OPENSEARCH: \"opensearch\",\n    DASHVECTOR: \"dashvector\",\n    CHATGPT_RETRIEVAL_PLUGIN: \"chatgpt_retrieval_plugin\",\n    DEEPLAKE: \"deeplake\",\n    EPSILLA: \"epsilla\",\n    MULTIMODAL_VECTOR_STORE: \"multimodal\",\n    SQL: \"sql\",\n    KG: \"kg\",\n    SIMPLE_KG: \"simple_kg\",\n    SIMPLE_LPG: \"simple_lpg\",\n    NEBULAGRAPH: \"nebulagraph\",\n    FALKORDB: \"falkordb\",\n    EMPTY: \"empty\",\n    COMPOSITE: \"composite\",\n    PANDAS: \"pandas\",\n    DOCUMENT_SUMMARY: \"document_summary\",\n    VECTARA: \"vectara\",\n    ZILLIZ_CLOUD_PIPELINE: \"zilliz_cloud_pipeline\",\n    POSTGRESML: \"postgresml\"\n};\n\nclass IndexStruct {\n    constructor(indexId = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)(), summary = undefined){\n        this.indexId = indexId;\n        this.summary = summary;\n    }\n    toJson() {\n        return {\n            indexId: this.indexId,\n            summary: this.summary\n        };\n    }\n    getSummary() {\n        if (this.summary === undefined) {\n            throw new Error(\"summary field of the index struct is not set\");\n        }\n        return this.summary;\n    }\n}\n// A table of keywords mapping keywords to text chunks.\nclass KeywordTable extends IndexStruct {\n    addNode(keywords, nodeId) {\n        keywords.forEach((keyword)=>{\n            if (!this.table.has(keyword)) {\n                this.table.set(keyword, new Set());\n            }\n            this.table.get(keyword).add(nodeId);\n        });\n    }\n    deleteNode(keywords, nodeId) {\n        keywords.forEach((keyword)=>{\n            if (this.table.has(keyword)) {\n                this.table.get(keyword).delete(nodeId);\n            }\n        });\n    }\n    toJson() {\n        return {\n            ...super.toJson(),\n            table: Array.from(this.table.entries()).reduce((acc, [keyword, nodeIds])=>{\n                acc[keyword] = Array.from(nodeIds);\n                return acc;\n            }, {}),\n            type: this.type\n        };\n    }\n    constructor(...args){\n        super(...args), this.table = new Map(), this.type = IndexStructType.KEYWORD_TABLE;\n    }\n}\nclass IndexDict extends IndexStruct {\n    addNode(node, textId) {\n        const vectorId = textId ?? node.id_;\n        this.nodesDict[vectorId] = node;\n    }\n    toJson() {\n        const nodesDict = {};\n        for (const [key, node] of Object.entries(this.nodesDict)){\n            nodesDict[key] = node.toJSON();\n        }\n        return {\n            ...super.toJson(),\n            nodesDict,\n            type: this.type\n        };\n    }\n    delete(nodeId) {\n        delete this.nodesDict[nodeId];\n    }\n    constructor(...args){\n        super(...args), this.nodesDict = {}, this.type = IndexStructType.SIMPLE_DICT;\n    }\n}\nclass IndexList extends IndexStruct {\n    addNode(node) {\n        this.nodes.push(node.id_);\n    }\n    toJson() {\n        return {\n            ...super.toJson(),\n            nodes: this.nodes,\n            type: this.type\n        };\n    }\n    constructor(...args){\n        super(...args), this.nodes = [], this.type = IndexStructType.LIST;\n    }\n}\n\nfunction jsonToIndexStruct(// eslint-disable-next-line @typescript-eslint/no-explicit-any\njson) {\n    if (json.type === IndexStructType.LIST) {\n        const indexList = new IndexList(json.indexId, json.summary);\n        indexList.nodes = json.nodes;\n        return indexList;\n    } else if (json.type === IndexStructType.SIMPLE_DICT) {\n        const indexDict = new IndexDict(json.indexId, json.summary);\n        indexDict.nodesDict = Object.entries(json.nodesDict).reduce((acc, [key, value])=>{\n            acc[key] = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.jsonToNode)(value);\n            return acc;\n        }, {});\n        return indexDict;\n    } else {\n        throw new Error(`Unknown index struct type: ${json.type}`);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9kYXRhLXN0cnVjdHMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE2QztBQUNXOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsMkRBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsSUFBSTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHVCQUF1QixpRUFBVTtBQUNqQztBQUNBLFNBQVMsSUFBSTtBQUNiO0FBQ0EsTUFBTTtBQUNOLHNEQUFzRCxVQUFVO0FBQ2hFO0FBQ0E7O0FBRStGIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvZGF0YS1zdHJ1Y3RzL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ0BsbGFtYWluZGV4L2Vudic7XG5pbXBvcnQgeyBqc29uVG9Ob2RlIH0gZnJvbSAnLi4vLi4vc2NoZW1hL2Rpc3QvaW5kZXguanMnO1xuXG5jb25zdCBJbmRleFN0cnVjdFR5cGUgPSB7XG4gICAgTk9ERTogXCJub2RlXCIsXG4gICAgVFJFRTogXCJ0cmVlXCIsXG4gICAgTElTVDogXCJsaXN0XCIsXG4gICAgS0VZV09SRF9UQUJMRTogXCJrZXl3b3JkX3RhYmxlXCIsXG4gICAgRElDVDogXCJkaWN0XCIsXG4gICAgU0lNUExFX0RJQ1Q6IFwic2ltcGxlX2RpY3RcIixcbiAgICBXRUFWSUFURTogXCJ3ZWF2aWF0ZVwiLFxuICAgIFBJTkVDT05FOiBcInBpbmVjb25lXCIsXG4gICAgUURSQU5UOiBcInFkcmFudFwiLFxuICAgIExBTkNFREI6IFwibGFuY2VkYlwiLFxuICAgIE1JTFZVUzogXCJtaWx2dXNcIixcbiAgICBDSFJPTUE6IFwiY2hyb21hXCIsXG4gICAgTVlTQ0FMRTogXCJteXNjYWxlXCIsXG4gICAgQ0xJQ0tIT1VTRTogXCJjbGlja2hvdXNlXCIsXG4gICAgVkVDVE9SX1NUT1JFOiBcInZlY3Rvcl9zdG9yZVwiLFxuICAgIE9QRU5TRUFSQ0g6IFwib3BlbnNlYXJjaFwiLFxuICAgIERBU0hWRUNUT1I6IFwiZGFzaHZlY3RvclwiLFxuICAgIENIQVRHUFRfUkVUUklFVkFMX1BMVUdJTjogXCJjaGF0Z3B0X3JldHJpZXZhbF9wbHVnaW5cIixcbiAgICBERUVQTEFLRTogXCJkZWVwbGFrZVwiLFxuICAgIEVQU0lMTEE6IFwiZXBzaWxsYVwiLFxuICAgIE1VTFRJTU9EQUxfVkVDVE9SX1NUT1JFOiBcIm11bHRpbW9kYWxcIixcbiAgICBTUUw6IFwic3FsXCIsXG4gICAgS0c6IFwia2dcIixcbiAgICBTSU1QTEVfS0c6IFwic2ltcGxlX2tnXCIsXG4gICAgU0lNUExFX0xQRzogXCJzaW1wbGVfbHBnXCIsXG4gICAgTkVCVUxBR1JBUEg6IFwibmVidWxhZ3JhcGhcIixcbiAgICBGQUxLT1JEQjogXCJmYWxrb3JkYlwiLFxuICAgIEVNUFRZOiBcImVtcHR5XCIsXG4gICAgQ09NUE9TSVRFOiBcImNvbXBvc2l0ZVwiLFxuICAgIFBBTkRBUzogXCJwYW5kYXNcIixcbiAgICBET0NVTUVOVF9TVU1NQVJZOiBcImRvY3VtZW50X3N1bW1hcnlcIixcbiAgICBWRUNUQVJBOiBcInZlY3RhcmFcIixcbiAgICBaSUxMSVpfQ0xPVURfUElQRUxJTkU6IFwiemlsbGl6X2Nsb3VkX3BpcGVsaW5lXCIsXG4gICAgUE9TVEdSRVNNTDogXCJwb3N0Z3Jlc21sXCJcbn07XG5cbmNsYXNzIEluZGV4U3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvcihpbmRleElkID0gcmFuZG9tVVVJRCgpLCBzdW1tYXJ5ID0gdW5kZWZpbmVkKXtcbiAgICAgICAgdGhpcy5pbmRleElkID0gaW5kZXhJZDtcbiAgICAgICAgdGhpcy5zdW1tYXJ5ID0gc3VtbWFyeTtcbiAgICB9XG4gICAgdG9Kc29uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXhJZDogdGhpcy5pbmRleElkLFxuICAgICAgICAgICAgc3VtbWFyeTogdGhpcy5zdW1tYXJ5XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFN1bW1hcnkoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1bW1hcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3VtbWFyeSBmaWVsZCBvZiB0aGUgaW5kZXggc3RydWN0IGlzIG5vdCBzZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3VtbWFyeTtcbiAgICB9XG59XG4vLyBBIHRhYmxlIG9mIGtleXdvcmRzIG1hcHBpbmcga2V5d29yZHMgdG8gdGV4dCBjaHVua3MuXG5jbGFzcyBLZXl3b3JkVGFibGUgZXh0ZW5kcyBJbmRleFN0cnVjdCB7XG4gICAgYWRkTm9kZShrZXl3b3Jkcywgbm9kZUlkKSB7XG4gICAgICAgIGtleXdvcmRzLmZvckVhY2goKGtleXdvcmQpPT57XG4gICAgICAgICAgICBpZiAoIXRoaXMudGFibGUuaGFzKGtleXdvcmQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZS5zZXQoa2V5d29yZCwgbmV3IFNldCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGFibGUuZ2V0KGtleXdvcmQpLmFkZChub2RlSWQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVsZXRlTm9kZShrZXl3b3Jkcywgbm9kZUlkKSB7XG4gICAgICAgIGtleXdvcmRzLmZvckVhY2goKGtleXdvcmQpPT57XG4gICAgICAgICAgICBpZiAodGhpcy50YWJsZS5oYXMoa2V5d29yZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLmdldChrZXl3b3JkKS5kZWxldGUobm9kZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvSnNvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSnNvbigpLFxuICAgICAgICAgICAgdGFibGU6IEFycmF5LmZyb20odGhpcy50YWJsZS5lbnRyaWVzKCkpLnJlZHVjZSgoYWNjLCBba2V5d29yZCwgbm9kZUlkc10pPT57XG4gICAgICAgICAgICAgICAgYWNjW2tleXdvcmRdID0gQXJyYXkuZnJvbShub2RlSWRzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfSwge30pLFxuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKSwgdGhpcy50YWJsZSA9IG5ldyBNYXAoKSwgdGhpcy50eXBlID0gSW5kZXhTdHJ1Y3RUeXBlLktFWVdPUkRfVEFCTEU7XG4gICAgfVxufVxuY2xhc3MgSW5kZXhEaWN0IGV4dGVuZHMgSW5kZXhTdHJ1Y3Qge1xuICAgIGFkZE5vZGUobm9kZSwgdGV4dElkKSB7XG4gICAgICAgIGNvbnN0IHZlY3RvcklkID0gdGV4dElkID8/IG5vZGUuaWRfO1xuICAgICAgICB0aGlzLm5vZGVzRGljdFt2ZWN0b3JJZF0gPSBub2RlO1xuICAgIH1cbiAgICB0b0pzb24oKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzRGljdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIG5vZGVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMubm9kZXNEaWN0KSl7XG4gICAgICAgICAgICBub2Rlc0RpY3Rba2V5XSA9IG5vZGUudG9KU09OKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSnNvbigpLFxuICAgICAgICAgICAgbm9kZXNEaWN0LFxuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRlbGV0ZShub2RlSWQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubm9kZXNEaWN0W25vZGVJZF07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKSwgdGhpcy5ub2Rlc0RpY3QgPSB7fSwgdGhpcy50eXBlID0gSW5kZXhTdHJ1Y3RUeXBlLlNJTVBMRV9ESUNUO1xuICAgIH1cbn1cbmNsYXNzIEluZGV4TGlzdCBleHRlbmRzIEluZGV4U3RydWN0IHtcbiAgICBhZGROb2RlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUuaWRfKTtcbiAgICB9XG4gICAgdG9Kc29uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9Kc29uKCksXG4gICAgICAgICAgICBub2RlczogdGhpcy5ub2RlcyxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyksIHRoaXMubm9kZXMgPSBbXSwgdGhpcy50eXBlID0gSW5kZXhTdHJ1Y3RUeXBlLkxJU1Q7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBqc29uVG9JbmRleFN0cnVjdCgvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuanNvbikge1xuICAgIGlmIChqc29uLnR5cGUgPT09IEluZGV4U3RydWN0VHlwZS5MSVNUKSB7XG4gICAgICAgIGNvbnN0IGluZGV4TGlzdCA9IG5ldyBJbmRleExpc3QoanNvbi5pbmRleElkLCBqc29uLnN1bW1hcnkpO1xuICAgICAgICBpbmRleExpc3Qubm9kZXMgPSBqc29uLm5vZGVzO1xuICAgICAgICByZXR1cm4gaW5kZXhMaXN0O1xuICAgIH0gZWxzZSBpZiAoanNvbi50eXBlID09PSBJbmRleFN0cnVjdFR5cGUuU0lNUExFX0RJQ1QpIHtcbiAgICAgICAgY29uc3QgaW5kZXhEaWN0ID0gbmV3IEluZGV4RGljdChqc29uLmluZGV4SWQsIGpzb24uc3VtbWFyeSk7XG4gICAgICAgIGluZGV4RGljdC5ub2Rlc0RpY3QgPSBPYmplY3QuZW50cmllcyhqc29uLm5vZGVzRGljdCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSk9PntcbiAgICAgICAgICAgIGFjY1trZXldID0ganNvblRvTm9kZSh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHJldHVybiBpbmRleERpY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGluZGV4IHN0cnVjdCB0eXBlOiAke2pzb24udHlwZX1gKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEluZGV4RGljdCwgSW5kZXhMaXN0LCBJbmRleFN0cnVjdCwgSW5kZXhTdHJ1Y3RUeXBlLCBLZXl3b3JkVGFibGUsIGpzb25Ub0luZGV4U3RydWN0IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lazyInitHash: () => (/* binding */ lazyInitHash),\n/* harmony export */   wrapEventCaller: () => (/* binding */ wrapEventCaller),\n/* harmony export */   wrapLLMEvent: () => (/* binding */ wrapLLMEvent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\nfunction wrapEventCaller(originalMethod, context) {\n    const name = context.name;\n    context.addInitializer(function() {\n        // @ts-expect-error - this is a valid assignment\n        const fn = this[name].bind(this);\n        // @ts-expect-error - this is a valid assignment\n        this[name] = (...args)=>{\n            return (0,_global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.withEventCaller)(this, ()=>fn(...args));\n        };\n    });\n    return function(...args) {\n        const result = originalMethod.call(this, ...args);\n        // patch for iterators because AsyncLocalStorage doesn't work with them\n        if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isAsyncIterable)(result)) {\n            const iter = result[Symbol.asyncIterator]();\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            return async function* asyncGeneratorWrapper() {\n                while(true){\n                    const { value, done } = await snapshot(()=>iter.next());\n                    if (done) {\n                        break;\n                    }\n                    yield value;\n                }\n            }();\n        } else if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isIterable)(result)) {\n            const iter = result[Symbol.iterator]();\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            return function* generatorWrapper() {\n                while(true){\n                    const { value, done } = snapshot(()=>iter.next());\n                    if (done) {\n                        break;\n                    }\n                    yield value;\n                }\n            }();\n        }\n        return result;\n    };\n}\n\nfunction lazyInitHash(value, _context) {\n    return {\n        get () {\n            const oldValue = value.get.call(this);\n            if (oldValue === \"\") {\n                const hash = this.generateHash();\n                value.set.call(this, hash);\n            }\n            return value.get.call(this);\n        },\n        set (newValue) {\n            value.set.call(this, newValue);\n        },\n        init (value) {\n            return value;\n        }\n    };\n}\n\nfunction wrapLLMEvent(originalMethod, _context) {\n    return async function withLLMEvent(...params) {\n        const id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-start\", {\n            id,\n            messages: params[0].messages\n        });\n        const response = await originalMethod.call(this, ...params);\n        if (Symbol.asyncIterator in response) {\n            // save snapshot to restore it after the response is done\n            const snapshot = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage.snapshot();\n            const originalAsyncIterator = {\n                [Symbol.asyncIterator]: response[Symbol.asyncIterator].bind(response)\n            };\n            response[Symbol.asyncIterator] = async function*() {\n                const finalResponse = {\n                    raw: [],\n                    message: {\n                        content: \"\",\n                        role: \"assistant\",\n                        options: {}\n                    }\n                };\n                let firstOne = false;\n                for await (const chunk of originalAsyncIterator){\n                    if (!firstOne) {\n                        firstOne = true;\n                        finalResponse.message.content = chunk.delta;\n                    } else {\n                        finalResponse.message.content += chunk.delta;\n                    }\n                    if (chunk.options) {\n                        finalResponse.message.options = {\n                            ...finalResponse.message.options,\n                            ...chunk.options\n                        };\n                    }\n                    _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-stream\", {\n                        id,\n                        chunk\n                    });\n                    finalResponse.raw.push(chunk);\n                    yield chunk;\n                }\n                snapshot(()=>{\n                    _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-end\", {\n                        id,\n                        response: finalResponse\n                    });\n                });\n            };\n        } else {\n            _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager.dispatchEvent(\"llm-end\", {\n                id,\n                response\n            });\n        }\n        return response;\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9kZWNvcmF0b3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0U7QUFDTztBQUNDOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzRUFBZTtBQUNsQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFFQUFlO0FBQzNCO0FBQ0EsNkJBQTZCLDhEQUFpQjtBQUM5QztBQUNBO0FBQ0EsNEJBQTRCLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixVQUFVLFNBQVMsZ0VBQVU7QUFDN0I7QUFDQSw2QkFBNkIsOERBQWlCO0FBQzlDO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQiwyREFBVTtBQUM3QixRQUFRLDJEQUFRO0FBQ2hCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDhEQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkRBQVE7QUFDNUI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyREFBUTtBQUM1QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBLFVBQVU7QUFDVixZQUFZLDJEQUFRO0FBQ3BCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRXVEIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvZGVjb3JhdG9yL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2UsIHJhbmRvbVVVSUQgfSBmcm9tICdAbGxhbWFpbmRleC9lbnYnO1xuaW1wb3J0IHsgd2l0aEV2ZW50Q2FsbGVyLCBTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2dsb2JhbC9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSwgaXNJdGVyYWJsZSB9IGZyb20gJy4uLy4uL3V0aWxzL2Rpc3QvaW5kZXguanMnO1xuXG5mdW5jdGlvbiB3cmFwRXZlbnRDYWxsZXIob3JpZ2luYWxNZXRob2QsIGNvbnRleHQpIHtcbiAgICBjb25zdCBuYW1lID0gY29udGV4dC5uYW1lO1xuICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSB0aGlzIGlzIGEgdmFsaWQgYXNzaWdubWVudFxuICAgICAgICBjb25zdCBmbiA9IHRoaXNbbmFtZV0uYmluZCh0aGlzKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHRoaXMgaXMgYSB2YWxpZCBhc3NpZ25tZW50XG4gICAgICAgIHRoaXNbbmFtZV0gPSAoLi4uYXJncyk9PntcbiAgICAgICAgICAgIHJldHVybiB3aXRoRXZlbnRDYWxsZXIodGhpcywgKCk9PmZuKC4uLmFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBvcmlnaW5hbE1ldGhvZC5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgICAgICAvLyBwYXRjaCBmb3IgaXRlcmF0b3JzIGJlY2F1c2UgQXN5bmNMb2NhbFN0b3JhZ2UgZG9lc24ndCB3b3JrIHdpdGggdGhlbVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSByZXN1bHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IEFzeW5jTG9jYWxTdG9yYWdlLnNuYXBzaG90KCk7XG4gICAgICAgICAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24qIGFzeW5jR2VuZXJhdG9yV3JhcHBlcigpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSh0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgc25hcHNob3QoKCk9Pml0ZXIubmV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0l0ZXJhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSByZXN1bHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBBc3luY0xvY2FsU3RvcmFnZS5zbmFwc2hvdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKiBnZW5lcmF0b3JXcmFwcGVyKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBzbmFwc2hvdCgoKT0+aXRlci5uZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbGF6eUluaXRIYXNoKHZhbHVlLCBfY29udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHZhbHVlLmdldC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IHRoaXMuZ2VuZXJhdGVIYXNoKCk7XG4gICAgICAgICAgICAgICAgdmFsdWUuc2V0LmNhbGwodGhpcywgaGFzaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlLnNldC5jYWxsKHRoaXMsIG5ld1ZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdCAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdyYXBMTE1FdmVudChvcmlnaW5hbE1ldGhvZCwgX2NvbnRleHQpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gd2l0aExMTUV2ZW50KC4uLnBhcmFtcykge1xuICAgICAgICBjb25zdCBpZCA9IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgU2V0dGluZ3MuY2FsbGJhY2tNYW5hZ2VyLmRpc3BhdGNoRXZlbnQoXCJsbG0tc3RhcnRcIiwge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlczogcGFyYW1zWzBdLm1lc3NhZ2VzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yaWdpbmFsTWV0aG9kLmNhbGwodGhpcywgLi4ucGFyYW1zKTtcbiAgICAgICAgaWYgKFN5bWJvbC5hc3luY0l0ZXJhdG9yIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAvLyBzYXZlIHNuYXBzaG90IHRvIHJlc3RvcmUgaXQgYWZ0ZXIgdGhlIHJlc3BvbnNlIGlzIGRvbmVcbiAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gQXN5bmNMb2NhbFN0b3JhZ2Uuc25hcHNob3QoKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQXN5bmNJdGVyYXRvciA9IHtcbiAgICAgICAgICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiByZXNwb25zZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0uYmluZChyZXNwb25zZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNwb25zZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBhc3luYyBmdW5jdGlvbiooKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmluYWxSZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmF3OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7fVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RPbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIG9yaWdpbmFsQXN5bmNJdGVyYXRvcil7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RPbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0T25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsUmVzcG9uc2UubWVzc2FnZS5jb250ZW50ID0gY2h1bmsuZGVsdGE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFJlc3BvbnNlLm1lc3NhZ2UuY29udGVudCArPSBjaHVuay5kZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmsub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxSZXNwb25zZS5tZXNzYWdlLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmluYWxSZXNwb25zZS5tZXNzYWdlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2h1bmsub3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1zdHJlYW1cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxSZXNwb25zZS5yYXcucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIGNodW5rO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzbmFwc2hvdCgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1lbmRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogZmluYWxSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImxsbS1lbmRcIiwge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgbGF6eUluaXRIYXNoLCB3cmFwRXZlbnRDYWxsZXIsIHdyYXBMTE1FdmVudCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEmbedding: () => (/* binding */ BaseEmbedding),\n/* harmony export */   DEFAULT_SIMILARITY_TOP_K: () => (/* binding */ DEFAULT_SIMILARITY_TOP_K),\n/* harmony export */   MultiModalEmbedding: () => (/* binding */ MultiModalEmbedding),\n/* harmony export */   SimilarityType: () => (/* binding */ SimilarityType),\n/* harmony export */   batchEmbeddings: () => (/* binding */ batchEmbeddings),\n/* harmony export */   getTopKEmbeddings: () => (/* binding */ getTopKEmbeddings),\n/* harmony export */   getTopKMMREmbeddings: () => (/* binding */ getTopKMMREmbeddings),\n/* harmony export */   similarity: () => (/* binding */ similarity),\n/* harmony export */   truncateMaxTokens: () => (/* binding */ truncateMaxTokens)\n/* harmony export */ });\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n\n\n\n\nfunction truncateMaxTokens(tokenizer, value, maxTokens) {\n    // the maximum number of tokens per one character is 2 (e.g. 爨)\n    if (value.length * 2 < maxTokens) return value;\n    const t = _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_2__.tokenizers.tokenizer(tokenizer);\n    let tokens = t.encode(value);\n    if (tokens.length > maxTokens) {\n        // truncate tokens\n        tokens = tokens.slice(0, maxTokens);\n        value = t.decode(tokens);\n        // if we truncate at an UTF-8 boundary (some characters have more than one token), tiktoken returns a � character - remove it\n        return value.replace(\"�\", \"\");\n    }\n    return value;\n}\n\nconst DEFAULT_SIMILARITY_TOP_K = 2;\n/**\n * Similarity type\n * Default is cosine similarity. Dot product and negative Euclidean distance are also supported.\n */ var SimilarityType = /*#__PURE__*/ function(SimilarityType) {\n    SimilarityType[\"DEFAULT\"] = \"cosine\";\n    SimilarityType[\"DOT_PRODUCT\"] = \"dot_product\";\n    SimilarityType[\"EUCLIDEAN\"] = \"euclidean\";\n    return SimilarityType;\n}({});\n/**\n * The similarity between two embeddings.\n * @param embedding1\n * @param embedding2\n * @param mode\n * @returns similarity score with higher numbers meaning the two embeddings are more similar\n */ function similarity(embedding1, embedding2, mode = \"cosine\") {\n    if (embedding1.length !== embedding2.length) {\n        throw new Error(\"Embedding length mismatch\");\n    }\n    // NOTE I've taken enough Kahan to know that we should probably leave the\n    // numeric programming to numeric programmers. The naive approach here\n    // will probably cause some avoidable loss of floating point precision\n    // ml-distance is worth watching although they currently also use the naive\n    // formulas\n    function norm(x) {\n        let result = 0;\n        for(let i = 0; i < x.length; i++){\n            result += x[i] * x[i];\n        }\n        return Math.sqrt(result);\n    }\n    switch(mode){\n        case \"euclidean\":\n            {\n                const difference = embedding1.map((x, i)=>x - embedding2[i]);\n                return -norm(difference);\n            }\n        case \"dot_product\":\n            {\n                let result = 0;\n                for(let i = 0; i < embedding1.length; i++){\n                    result += embedding1[i] * embedding2[i];\n                }\n                return result;\n            }\n        case \"cosine\":\n            {\n                return similarity(embedding1, embedding2, \"dot_product\") / (norm(embedding1) * norm(embedding2));\n            }\n        default:\n            throw new Error(\"Not implemented yet\");\n    }\n}\n/**\n * Get the top K embeddings from a list of embeddings ordered by similarity to the query.\n * @param queryEmbedding\n * @param embeddings list of embeddings to consider\n * @param similarityTopK max number of embeddings to return, default 2\n * @param embeddingIds ids of embeddings in the embeddings list\n * @param similarityCutoff minimum similarity score\n * @returns\n */ function getTopKEmbeddings(queryEmbedding, embeddings, similarityTopK = 2, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nembeddingIds = null, similarityCutoff = null) {\n    if (embeddingIds == null) {\n        embeddingIds = Array(embeddings.length).map((_, i)=>i);\n    }\n    if (embeddingIds.length !== embeddings.length) {\n        throw new Error(\"getTopKEmbeddings: embeddings and embeddingIds length mismatch\");\n    }\n    const similarities = [];\n    for(let i = 0; i < embeddings.length; i++){\n        const sim = similarity(queryEmbedding, embeddings[i]);\n        if (similarityCutoff == null || sim > similarityCutoff) {\n            similarities.push({\n                similarity: sim,\n                id: embeddingIds[i]\n            });\n        }\n    }\n    similarities.sort((a, b)=>b.similarity - a.similarity); // Reverse sort\n    const resultSimilarities = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const resultIds = [];\n    for(let i = 0; i < similarityTopK; i++){\n        if (i >= similarities.length) {\n            break;\n        }\n        resultSimilarities.push(similarities[i].similarity);\n        resultIds.push(similarities[i].id);\n    }\n    return [\n        resultSimilarities,\n        resultIds\n    ];\n}\nfunction getTopKMMREmbeddings(queryEmbedding, embeddings, similarityFn = null, similarityTopK = null, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nembeddingIds = null, _similarityCutoff = null, mmrThreshold = null) {\n    const threshold = mmrThreshold || 0.5;\n    similarityFn = similarityFn || similarity;\n    if (embeddingIds === null || embeddingIds.length === 0) {\n        embeddingIds = Array.from({\n            length: embeddings.length\n        }, (_, i)=>i);\n    }\n    const fullEmbedMap = new Map(embeddingIds.map((value, i)=>[\n            value,\n            i\n        ]));\n    const embedMap = new Map(fullEmbedMap);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const embedSimilarity = new Map();\n    let score = Number.NEGATIVE_INFINITY;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let highScoreId = null;\n    for(let i = 0; i < embeddings.length; i++){\n        const emb = embeddings[i];\n        const similarity = similarityFn(queryEmbedding, emb);\n        embedSimilarity.set(embeddingIds[i], similarity);\n        if (similarity * threshold > score) {\n            highScoreId = embeddingIds[i];\n            score = similarity * threshold;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const results = [];\n    const embeddingLength = embeddings.length;\n    const similarityTopKCount = similarityTopK || embeddingLength;\n    while(results.length < Math.min(similarityTopKCount, embeddingLength)){\n        results.push([\n            score,\n            highScoreId\n        ]);\n        embedMap.delete(highScoreId);\n        const recentEmbeddingId = highScoreId;\n        score = Number.NEGATIVE_INFINITY;\n        for (const embedId of Array.from(embedMap.keys())){\n            const overlapWithRecent = similarityFn(embeddings[embedMap.get(embedId)], embeddings[fullEmbedMap.get(recentEmbeddingId)]);\n            if (threshold * embedSimilarity.get(embedId) - (1 - threshold) * overlapWithRecent > score) {\n                score = threshold * embedSimilarity.get(embedId) - (1 - threshold) * overlapWithRecent;\n                highScoreId = embedId;\n            }\n        }\n    }\n    const resultSimilarities = results.map(([s, _])=>s);\n    const resultIds = results.map(([_, n])=>n);\n    return [\n        resultSimilarities,\n        resultIds\n    ];\n}\n\nconst DEFAULT_EMBED_BATCH_SIZE = 10;\nclass BaseEmbedding extends _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.TransformComponent {\n    constructor(transformFn){\n        if (transformFn) {\n            super(transformFn), this.embedBatchSize = DEFAULT_EMBED_BATCH_SIZE, /**\n   * Optionally override this method to retrieve multiple embeddings in a single request\n   * @param texts\n   */ this.getTextEmbeddings = async (texts)=>{\n                const embeddings = [];\n                for (const text of texts){\n                    const embedding = await this.getTextEmbedding(text);\n                    embeddings.push(embedding);\n                }\n                return embeddings;\n            };\n        } else {\n            super(async (nodes, options)=>{\n                const texts = nodes.map((node)=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.EMBED));\n                const embeddings = await this.getTextEmbeddingsBatch(texts, options);\n                for(let i = 0; i < nodes.length; i++){\n                    nodes[i].embedding = embeddings[i];\n                }\n                return nodes;\n            }), this.embedBatchSize = DEFAULT_EMBED_BATCH_SIZE, this.getTextEmbeddings = async (texts)=>{\n                const embeddings = [];\n                for (const text of texts){\n                    const embedding = await this.getTextEmbedding(text);\n                    embeddings.push(embedding);\n                }\n                return embeddings;\n            };\n        }\n    }\n    similarity(embedding1, embedding2, mode = SimilarityType.DEFAULT) {\n        return similarity(embedding1, embedding2, mode);\n    }\n    async getQueryEmbedding(query) {\n        const text = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.extractSingleText)(query);\n        if (text) {\n            return await this.getTextEmbedding(text);\n        }\n        return null;\n    }\n    /**\n   * Get embeddings for a batch of texts\n   * @param texts\n   * @param options\n   */ async getTextEmbeddingsBatch(texts, options) {\n        return await batchEmbeddings(texts, this.getTextEmbeddings, this.embedBatchSize, options);\n    }\n    truncateMaxTokens(input) {\n        return input.map((s)=>{\n            // truncate to max tokens\n            if (!(this.embedInfo?.tokenizer && this.embedInfo?.maxTokens)) return s;\n            return truncateMaxTokens(this.embedInfo.tokenizer, s, this.embedInfo.maxTokens);\n        });\n    }\n}\nasync function batchEmbeddings(values, embedFunc, chunkSize, options) {\n    const resultEmbeddings = [];\n    const queue = values;\n    const curBatch = [];\n    for(let i = 0; i < queue.length; i++){\n        curBatch.push(queue[i]);\n        if (i == queue.length - 1 || curBatch.length == chunkSize) {\n            const embeddings = await embedFunc(curBatch);\n            resultEmbeddings.push(...embeddings);\n            if (options?.logProgress) {\n                console.log(`getting embedding progress: ${i} / ${queue.length}`);\n            }\n            curBatch.length = 0;\n        }\n    }\n    return resultEmbeddings;\n}\n\n/*\n * Base class for Multi Modal embeddings.\n */ class MultiModalEmbedding extends BaseEmbedding {\n    constructor(){\n        super(async (nodes, options)=>{\n            const nodeMap = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.splitNodesByType)(nodes);\n            const imageNodes = nodeMap[_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ModalityType.IMAGE] ?? [];\n            const textNodes = nodeMap[_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ModalityType.TEXT] ?? [];\n            const embeddings = await batchEmbeddings(textNodes.map((node)=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.MetadataMode.EMBED)), this.getTextEmbeddings.bind(this), this.embedBatchSize, options);\n            for(let i = 0; i < textNodes.length; i++){\n                textNodes[i].embedding = embeddings[i];\n            }\n            const imageEmbeddings = await batchEmbeddings(imageNodes.map((n)=>n.image), this.getImageEmbeddings.bind(this), this.embedBatchSize, options);\n            for(let i = 0; i < imageNodes.length; i++){\n                imageNodes[i].embedding = imageEmbeddings[i];\n            }\n            return nodes;\n        });\n    }\n    /**\n   * Optionally override this method to retrieve multiple image embeddings in a single request\n   * @param images\n   */ async getImageEmbeddings(images) {\n        return Promise.all(images.map((imgFilePath)=>this.getImageEmbedding(imgFilePath)));\n    }\n    async getQueryEmbedding(query) {\n        const image = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.extractImage)(query);\n        if (image) {\n            return await this.getImageEmbedding(image);\n        }\n        const text = (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.extractSingleText)(query);\n        if (text) {\n            return await this.getTextEmbedding(text);\n        }\n        return null;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   DEFAULT_BASE_URL: () => (/* binding */ DEFAULT_BASE_URL),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP: () => (/* binding */ DEFAULT_CHUNK_OVERLAP),\n/* harmony export */   DEFAULT_CHUNK_OVERLAP_RATIO: () => (/* binding */ DEFAULT_CHUNK_OVERLAP_RATIO),\n/* harmony export */   DEFAULT_CHUNK_SIZE: () => (/* binding */ DEFAULT_CHUNK_SIZE),\n/* harmony export */   DEFAULT_COLLECTION: () => (/* binding */ DEFAULT_COLLECTION),\n/* harmony export */   DEFAULT_CONTEXT_WINDOW: () => (/* binding */ DEFAULT_CONTEXT_WINDOW),\n/* harmony export */   DEFAULT_DOC_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_DOC_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_EU_BASE_URL: () => (/* binding */ DEFAULT_EU_BASE_URL),\n/* harmony export */   DEFAULT_GRAPH_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_GRAPH_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_INDEX_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_INDEX_STORE_PERSIST_FILENAME),\n/* harmony export */   DEFAULT_NAMESPACE: () => (/* binding */ DEFAULT_NAMESPACE),\n/* harmony export */   DEFAULT_NUM_OUTPUTS: () => (/* binding */ DEFAULT_NUM_OUTPUTS),\n/* harmony export */   DEFAULT_PADDING: () => (/* binding */ DEFAULT_PADDING),\n/* harmony export */   DEFAULT_PERSIST_DIR: () => (/* binding */ DEFAULT_PERSIST_DIR),\n/* harmony export */   DEFAULT_PROJECT_NAME: () => (/* binding */ DEFAULT_PROJECT_NAME),\n/* harmony export */   DEFAULT_VECTOR_STORE_PERSIST_FILENAME: () => (/* binding */ DEFAULT_VECTOR_STORE_PERSIST_FILENAME),\n/* harmony export */   EventCaller: () => (/* binding */ EventCaller),\n/* harmony export */   Settings: () => (/* binding */ Settings),\n/* harmony export */   getEventCaller: () => (/* binding */ getEventCaller),\n/* harmony export */   withEventCaller: () => (/* binding */ withEventCaller)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n\n\n\n//#region llm\nconst DEFAULT_CONTEXT_WINDOW = 3900;\nconst DEFAULT_NUM_OUTPUTS = 256;\nconst DEFAULT_CHUNK_SIZE = 1024;\nconst DEFAULT_CHUNK_OVERLAP = 20;\nconst DEFAULT_CHUNK_OVERLAP_RATIO = 0.1;\nconst DEFAULT_PADDING = 5;\n//#endregion\n//#region storage\nconst DEFAULT_COLLECTION = \"data\";\nconst DEFAULT_PERSIST_DIR = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.join(\"./storage\");\nconst DEFAULT_INDEX_STORE_PERSIST_FILENAME = \"index_store.json\";\nconst DEFAULT_DOC_STORE_PERSIST_FILENAME = \"doc_store.json\";\nconst DEFAULT_VECTOR_STORE_PERSIST_FILENAME = \"vector_store.json\";\nconst DEFAULT_GRAPH_STORE_PERSIST_FILENAME = \"graph_store.json\";\nconst DEFAULT_NAMESPACE = \"docstore\";\n//#endregion\n//#region llama cloud\nconst DEFAULT_PROJECT_NAME = \"Default\";\nconst DEFAULT_BASE_URL = \"https://api.cloud.llamaindex.ai\";\nconst DEFAULT_EU_BASE_URL = \"https://api.cloud.eu.llamaindex.ai\"; //#endregion\n\nconst eventReasonAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\n/**\n * EventCaller is used to track the caller of an event.\n */ class EventCaller {\n    constructor(caller, parent){\n        this.caller = caller;\n        this.parent = parent;\n        this.id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        this.#computedCallers = null;\n    }\n    #computedCallers;\n    get computedCallers() {\n        if (this.#computedCallers != null) {\n            return this.#computedCallers;\n        }\n        const callers = [\n            this.caller\n        ];\n        let parent = this.parent;\n        while(parent != null){\n            callers.push(parent.caller);\n            parent = parent.parent;\n        }\n        this.#computedCallers = callers;\n        return callers;\n    }\n    static create(caller, parent) {\n        return new EventCaller(caller, parent);\n    }\n}\nfunction getEventCaller() {\n    return eventReasonAsyncLocalStorage.getStore() ?? null;\n}\n/**\n * @param caller who is calling this function, pass in `this` if it's a class method\n * @param fn\n */ function withEventCaller(caller, fn) {\n    // create a chain of event callers\n    const parentCaller = getEventCaller();\n    return eventReasonAsyncLocalStorage.run(EventCaller.create(caller, parentCaller), fn);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass LlamaIndexCustomEvent extends _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.CustomEvent {\n    constructor(event, options){\n        super(event, options), this.reason = null;\n        this.reason = options?.reason ?? null;\n    }\n    static fromEvent(type, detail) {\n        return new LlamaIndexCustomEvent(type, {\n            detail: detail,\n            reason: getEventCaller()\n        });\n    }\n}\nclass CallbackManager {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    #handlers;\n    on(event, handler) {\n        if (!this.#handlers.has(event)) {\n            this.#handlers.set(event, []);\n        }\n        this.#handlers.get(event).push(handler);\n        return this;\n    }\n    off(event, handler) {\n        if (!this.#handlers.has(event)) {\n            return this;\n        }\n        const cbs = this.#handlers.get(event);\n        const index = cbs.indexOf(handler);\n        if (index > -1) {\n            cbs.splice(index, 1);\n        }\n        return this;\n    }\n    dispatchEvent(event, detail, sync = false) {\n        const cbs = this.#handlers.get(event);\n        if (!cbs) {\n            return;\n        }\n        if (typeof queueMicrotask === \"undefined\") {\n            console.warn(\"queueMicrotask is not available, dispatching synchronously\");\n            sync = true;\n        }\n        if (sync) {\n            cbs.forEach((handler)=>handler(LlamaIndexCustomEvent.fromEvent(event, {\n                    ...detail\n                })));\n        } else {\n            queueMicrotask(()=>{\n                cbs.forEach((handler)=>handler(LlamaIndexCustomEvent.fromEvent(event, {\n                        ...detail\n                    })));\n            });\n        }\n    }\n    constructor(){\n        this.#handlers = new Map();\n    }\n}\nconst globalCallbackManager = new CallbackManager();\nconst callbackManagerAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet currentCallbackManager = globalCallbackManager;\nfunction getCallbackManager() {\n    return callbackManagerAsyncLocalStorage.getStore() ?? currentCallbackManager;\n}\nfunction setCallbackManager(callbackManager) {\n    currentCallbackManager = callbackManager;\n}\nfunction withCallbackManager(callbackManager, fn) {\n    return callbackManagerAsyncLocalStorage.run(callbackManager, fn);\n}\n\nconst chunkSizeAsyncLocalStorage$1 = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalChunkSize = 1024;\nfunction getChunkSize() {\n    return chunkSizeAsyncLocalStorage$1.getStore() ?? globalChunkSize;\n}\nfunction setChunkSize(chunkSize) {\n    if (chunkSize !== undefined) {\n        globalChunkSize = chunkSize;\n    }\n}\nfunction withChunkSize(embeddedModel, fn) {\n    return chunkSizeAsyncLocalStorage$1.run(embeddedModel, fn);\n}\n\nconst embeddedModelAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalEmbeddedModel = null;\nfunction getEmbeddedModel() {\n    const currentEmbeddedModel = embeddedModelAsyncLocalStorage.getStore() ?? globalEmbeddedModel;\n    if (!currentEmbeddedModel) {\n        throw new Error(\"Cannot find Embedding, please set `Settings.embedModel = ...` on the top of your code\");\n    }\n    return currentEmbeddedModel;\n}\nfunction setEmbeddedModel(embeddedModel) {\n    globalEmbeddedModel = embeddedModel;\n}\nfunction withEmbeddedModel(embeddedModel, fn) {\n    return embeddedModelAsyncLocalStorage.run(embeddedModel, fn);\n}\n\nconst llmAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalLLM;\nfunction getLLM() {\n    const currentLLM = llmAsyncLocalStorage.getStore() ?? globalLLM;\n    if (!currentLLM) {\n        throw new Error(\"Cannot find LLM, please set `Settings.llm = ...` on the top of your code\");\n    }\n    return currentLLM;\n}\nfunction setLLM(llm) {\n    globalLLM = llm;\n}\nfunction withLLM(llm, fn) {\n    return llmAsyncLocalStorage.run(llm, fn);\n}\n\nconst chunkSizeAsyncLocalStorage = new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorage();\nlet globalTokenizer = _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_1__.tokenizers.tokenizer();\nfunction getTokenizer() {\n    return chunkSizeAsyncLocalStorage.getStore() ?? globalTokenizer;\n}\nfunction setTokenizer(tokenizer) {\n    if (tokenizer !== undefined) {\n        globalTokenizer = tokenizer;\n    }\n}\nfunction withTokenizer(tokenizer, fn) {\n    return chunkSizeAsyncLocalStorage.run(tokenizer, fn);\n}\n\nconst Settings = {\n    get llm () {\n        return getLLM();\n    },\n    set llm (llm){\n        setLLM(llm);\n    },\n    withLLM (llm1, fn) {\n        return withLLM(llm1, fn);\n    },\n    get embedModel () {\n        return getEmbeddedModel();\n    },\n    set embedModel (embedModel){\n        setEmbeddedModel(embedModel);\n    },\n    withEmbedModel (embedModel1, fn) {\n        return withEmbeddedModel(embedModel1, fn);\n    },\n    get tokenizer () {\n        return getTokenizer();\n    },\n    set tokenizer (tokenizer){\n        setTokenizer(tokenizer);\n    },\n    withTokenizer (tokenizer1, fn) {\n        return withTokenizer(tokenizer1, fn);\n    },\n    get chunkSize () {\n        return getChunkSize();\n    },\n    set chunkSize (chunkSize){\n        setChunkSize(chunkSize);\n    },\n    withChunkSize (chunkSize1, fn) {\n        return withChunkSize(chunkSize1, fn);\n    },\n    get callbackManager () {\n        return getCallbackManager();\n    },\n    set callbackManager (callbackManager){\n        setCallbackManager(callbackManager);\n    },\n    withCallbackManager (callbackManager1, fn) {\n        return withCallbackManager(callbackManager1, fn);\n    },\n    get debug () {\n        let debug = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)(\"DEBUG\");\n        if (typeof window !== \"undefined\") {\n            debug ||= window.localStorage.debug;\n        }\n        return Boolean(debug) && debug?.includes(\"llamaindex\") || debug === \"*\" || debug === \"true\";\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PromptHelper: () => (/* binding */ PromptHelper),\n/* harmony export */   getBiggestPrompt: () => (/* binding */ getBiggestPrompt)\n/* harmony export */ });\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _node_parser_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node-parser/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js\");\n/* harmony import */ var _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../prompts/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n\n\n\n\n/**\n * Get the empty prompt text given a prompt.\n */ function getEmptyPromptTxt(prompt) {\n    return prompt.format(Object.fromEntries([\n        ...prompt.templateVars.keys()\n    ].map((key)=>[\n            key,\n            \"\"\n        ])));\n}\n/**\n * Get biggest empty prompt size from a list of prompts.\n * Used to calculate the maximum size of inputs to the LLM.\n */ function getBiggestPrompt(prompts) {\n    const emptyPromptTexts = prompts.map(getEmptyPromptTxt);\n    const emptyPromptLengths = emptyPromptTexts.map((text)=>text.length);\n    const maxEmptyPromptLength = Math.max(...emptyPromptLengths);\n    const maxEmptyPromptIndex = emptyPromptLengths.indexOf(maxEmptyPromptLength);\n    return prompts[maxEmptyPromptIndex];\n}\n/**\n * A collection of helper functions for working with prompts.\n */ class PromptHelper {\n    constructor(options = {}){\n        const { contextWindow = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CONTEXT_WINDOW, numOutput = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NUM_OUTPUTS, chunkOverlapRatio = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_OVERLAP_RATIO, chunkSizeLimit, tokenizer, separator = \" \" } = options;\n        this.contextWindow = contextWindow;\n        this.numOutput = numOutput;\n        this.chunkOverlapRatio = chunkOverlapRatio;\n        this.chunkSizeLimit = chunkSizeLimit;\n        this.tokenizer = tokenizer ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.tokenizer;\n        this.separator = separator;\n    }\n    /**\n   * Calculate the available context size based on the number of prompt tokens.\n   */ #getAvailableContextSize(numPromptTokens) {\n        const contextSizeTokens = this.contextWindow - numPromptTokens - this.numOutput;\n        if (contextSizeTokens < 0) {\n            throw new Error(`Calculated available context size ${contextSizeTokens} is not non-negative.`);\n        }\n        return contextSizeTokens;\n    }\n    /**\n   * Calculate the available chunk size based on the prompt and other parameters.\n   */ #getAvailableChunkSize(prompt, numChunks = 1, padding = 5) {\n        let numPromptTokens = 0;\n        if (prompt instanceof _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.PromptTemplate) {\n            numPromptTokens = this.tokenizer.encode(getEmptyPromptTxt(prompt)).length;\n        }\n        const availableContextSize = this.#getAvailableContextSize(numPromptTokens);\n        let result = Math.floor(availableContextSize / numChunks) - padding;\n        if (this.chunkSizeLimit !== undefined) {\n            result = Math.min(this.chunkSizeLimit, result);\n        }\n        return result;\n    }\n    /**\n   * Creates a text splitter configured to maximally pack the available context window.\n   */ getTextSplitterGivenPrompt(prompt, numChunks = 1, padding = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PADDING) {\n        const chunkSize = this.#getAvailableChunkSize(prompt, numChunks, padding);\n        if (chunkSize <= 0) {\n            throw new TypeError(`Chunk size ${chunkSize} is not positive.`);\n        }\n        const chunkOverlap = Math.floor(this.chunkOverlapRatio * chunkSize);\n        return new _node_parser_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.TokenTextSplitter({\n            separator: this.separator,\n            chunkSize,\n            chunkOverlap,\n            tokenizer: this.tokenizer\n        });\n    }\n    /**\n   * Truncate text chunks to fit within the available context window.\n   */ truncate(prompt, textChunks, padding = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PADDING) {\n        const textSplitter = this.getTextSplitterGivenPrompt(prompt, textChunks.length, padding);\n        return textChunks.map((chunk)=>(0,_node_parser_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.truncateText)(chunk, textSplitter));\n    }\n    /**\n   * Repack text chunks to better utilize the available context window.\n   */ repack(prompt, textChunks, padding = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PADDING) {\n        const textSplitter = this.getTextSplitterGivenPrompt(prompt, 1, padding);\n        const combinedStr = textChunks.map((c)=>c.trim()).filter((c)=>c.length > 0).join(\"\\n\\n\");\n        return textSplitter.splitText(combinedStr);\n    }\n    static fromLLMMetadata(metadata, options) {\n        const { chunkOverlapRatio = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_OVERLAP_RATIO, chunkSizeLimit = undefined, tokenizer = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.tokenizer, separator = \" \" } = options ?? {};\n        return new PromptHelper({\n            contextWindow: metadata.contextWindow,\n            // fixme: numOutput is not in LLMMetadata\n            numOutput: _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NUM_OUTPUTS,\n            chunkOverlapRatio,\n            chunkSizeLimit,\n            tokenizer,\n            separator\n        });\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9pbmRpY2VzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUo7QUFDL0Q7QUFDckI7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsZ0JBQWdCLGdCQUFnQix5RUFBc0IsY0FBYyxzRUFBbUIsc0JBQXNCLDhFQUEyQiwrQ0FBK0M7QUFDdkw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMkRBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsbUJBQW1CO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtFQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0Usa0VBQWU7QUFDakY7QUFDQTtBQUNBLDhDQUE4QyxXQUFXO0FBQ3pEO0FBQ0E7QUFDQSxtQkFBbUIseUVBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxrRUFBZTtBQUM1RDtBQUNBLHVDQUF1Qyx3RUFBWTtBQUNuRDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsa0VBQWU7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0IsOEVBQTJCLDBDQUEwQywyREFBUSw4QkFBOEI7QUFDL0k7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNFQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUUwQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9jb3JlL2luZGljZXMvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUZBVUxUX0NPTlRFWFRfV0lORE9XLCBERUZBVUxUX05VTV9PVVRQVVRTLCBERUZBVUxUX0NIVU5LX09WRVJMQVBfUkFUSU8sIFNldHRpbmdzLCBERUZBVUxUX1BBRERJTkcgfSBmcm9tICcuLi8uLi9nbG9iYWwvZGlzdC9pbmRleC5qcyc7XG5pbXBvcnQgeyBUb2tlblRleHRTcGxpdHRlciwgdHJ1bmNhdGVUZXh0IH0gZnJvbSAnLi4vLi4vbm9kZS1wYXJzZXIvZGlzdC9pbmRleC5qcyc7XG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL3Byb21wdHMvZGlzdC9pbmRleC5qcyc7XG5cbi8qKlxuICogR2V0IHRoZSBlbXB0eSBwcm9tcHQgdGV4dCBnaXZlbiBhIHByb21wdC5cbiAqLyBmdW5jdGlvbiBnZXRFbXB0eVByb21wdFR4dChwcm9tcHQpIHtcbiAgICByZXR1cm4gcHJvbXB0LmZvcm1hdChPYmplY3QuZnJvbUVudHJpZXMoW1xuICAgICAgICAuLi5wcm9tcHQudGVtcGxhdGVWYXJzLmtleXMoKVxuICAgIF0ubWFwKChrZXkpPT5bXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBcIlwiXG4gICAgICAgIF0pKSk7XG59XG4vKipcbiAqIEdldCBiaWdnZXN0IGVtcHR5IHByb21wdCBzaXplIGZyb20gYSBsaXN0IG9mIHByb21wdHMuXG4gKiBVc2VkIHRvIGNhbGN1bGF0ZSB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0cyB0byB0aGUgTExNLlxuICovIGZ1bmN0aW9uIGdldEJpZ2dlc3RQcm9tcHQocHJvbXB0cykge1xuICAgIGNvbnN0IGVtcHR5UHJvbXB0VGV4dHMgPSBwcm9tcHRzLm1hcChnZXRFbXB0eVByb21wdFR4dCk7XG4gICAgY29uc3QgZW1wdHlQcm9tcHRMZW5ndGhzID0gZW1wdHlQcm9tcHRUZXh0cy5tYXAoKHRleHQpPT50ZXh0Lmxlbmd0aCk7XG4gICAgY29uc3QgbWF4RW1wdHlQcm9tcHRMZW5ndGggPSBNYXRoLm1heCguLi5lbXB0eVByb21wdExlbmd0aHMpO1xuICAgIGNvbnN0IG1heEVtcHR5UHJvbXB0SW5kZXggPSBlbXB0eVByb21wdExlbmd0aHMuaW5kZXhPZihtYXhFbXB0eVByb21wdExlbmd0aCk7XG4gICAgcmV0dXJuIHByb21wdHNbbWF4RW1wdHlQcm9tcHRJbmRleF07XG59XG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBoZWxwZXIgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggcHJvbXB0cy5cbiAqLyBjbGFzcyBQcm9tcHRIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgICAgIGNvbnN0IHsgY29udGV4dFdpbmRvdyA9IERFRkFVTFRfQ09OVEVYVF9XSU5ET1csIG51bU91dHB1dCA9IERFRkFVTFRfTlVNX09VVFBVVFMsIGNodW5rT3ZlcmxhcFJhdGlvID0gREVGQVVMVF9DSFVOS19PVkVSTEFQX1JBVElPLCBjaHVua1NpemVMaW1pdCwgdG9rZW5pemVyLCBzZXBhcmF0b3IgPSBcIiBcIiB9ID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb250ZXh0V2luZG93ID0gY29udGV4dFdpbmRvdztcbiAgICAgICAgdGhpcy5udW1PdXRwdXQgPSBudW1PdXRwdXQ7XG4gICAgICAgIHRoaXMuY2h1bmtPdmVybGFwUmF0aW8gPSBjaHVua092ZXJsYXBSYXRpbztcbiAgICAgICAgdGhpcy5jaHVua1NpemVMaW1pdCA9IGNodW5rU2l6ZUxpbWl0O1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplciA/PyBTZXR0aW5ncy50b2tlbml6ZXI7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gc2VwYXJhdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBhdmFpbGFibGUgY29udGV4dCBzaXplIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgcHJvbXB0IHRva2Vucy5cbiAgICovICNnZXRBdmFpbGFibGVDb250ZXh0U2l6ZShudW1Qcm9tcHRUb2tlbnMpIHtcbiAgICAgICAgY29uc3QgY29udGV4dFNpemVUb2tlbnMgPSB0aGlzLmNvbnRleHRXaW5kb3cgLSBudW1Qcm9tcHRUb2tlbnMgLSB0aGlzLm51bU91dHB1dDtcbiAgICAgICAgaWYgKGNvbnRleHRTaXplVG9rZW5zIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYWxjdWxhdGVkIGF2YWlsYWJsZSBjb250ZXh0IHNpemUgJHtjb250ZXh0U2l6ZVRva2Vuc30gaXMgbm90IG5vbi1uZWdhdGl2ZS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dFNpemVUb2tlbnM7XG4gICAgfVxuICAgIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGF2YWlsYWJsZSBjaHVuayBzaXplIGJhc2VkIG9uIHRoZSBwcm9tcHQgYW5kIG90aGVyIHBhcmFtZXRlcnMuXG4gICAqLyAjZ2V0QXZhaWxhYmxlQ2h1bmtTaXplKHByb21wdCwgbnVtQ2h1bmtzID0gMSwgcGFkZGluZyA9IDUpIHtcbiAgICAgICAgbGV0IG51bVByb21wdFRva2VucyA9IDA7XG4gICAgICAgIGlmIChwcm9tcHQgaW5zdGFuY2VvZiBQcm9tcHRUZW1wbGF0ZSkge1xuICAgICAgICAgICAgbnVtUHJvbXB0VG9rZW5zID0gdGhpcy50b2tlbml6ZXIuZW5jb2RlKGdldEVtcHR5UHJvbXB0VHh0KHByb21wdCkpLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdmFpbGFibGVDb250ZXh0U2l6ZSA9IHRoaXMuI2dldEF2YWlsYWJsZUNvbnRleHRTaXplKG51bVByb21wdFRva2Vucyk7XG4gICAgICAgIGxldCByZXN1bHQgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUNvbnRleHRTaXplIC8gbnVtQ2h1bmtzKSAtIHBhZGRpbmc7XG4gICAgICAgIGlmICh0aGlzLmNodW5rU2l6ZUxpbWl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IE1hdGgubWluKHRoaXMuY2h1bmtTaXplTGltaXQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAqIENyZWF0ZXMgYSB0ZXh0IHNwbGl0dGVyIGNvbmZpZ3VyZWQgdG8gbWF4aW1hbGx5IHBhY2sgdGhlIGF2YWlsYWJsZSBjb250ZXh0IHdpbmRvdy5cbiAgICovIGdldFRleHRTcGxpdHRlckdpdmVuUHJvbXB0KHByb21wdCwgbnVtQ2h1bmtzID0gMSwgcGFkZGluZyA9IERFRkFVTFRfUEFERElORykge1xuICAgICAgICBjb25zdCBjaHVua1NpemUgPSB0aGlzLiNnZXRBdmFpbGFibGVDaHVua1NpemUocHJvbXB0LCBudW1DaHVua3MsIHBhZGRpbmcpO1xuICAgICAgICBpZiAoY2h1bmtTaXplIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENodW5rIHNpemUgJHtjaHVua1NpemV9IGlzIG5vdCBwb3NpdGl2ZS5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaHVua092ZXJsYXAgPSBNYXRoLmZsb29yKHRoaXMuY2h1bmtPdmVybGFwUmF0aW8gKiBjaHVua1NpemUpO1xuICAgICAgICByZXR1cm4gbmV3IFRva2VuVGV4dFNwbGl0dGVyKHtcbiAgICAgICAgICAgIHNlcGFyYXRvcjogdGhpcy5zZXBhcmF0b3IsXG4gICAgICAgICAgICBjaHVua1NpemUsXG4gICAgICAgICAgICBjaHVua092ZXJsYXAsXG4gICAgICAgICAgICB0b2tlbml6ZXI6IHRoaXMudG9rZW5pemVyXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICogVHJ1bmNhdGUgdGV4dCBjaHVua3MgdG8gZml0IHdpdGhpbiB0aGUgYXZhaWxhYmxlIGNvbnRleHQgd2luZG93LlxuICAgKi8gdHJ1bmNhdGUocHJvbXB0LCB0ZXh0Q2h1bmtzLCBwYWRkaW5nID0gREVGQVVMVF9QQURESU5HKSB7XG4gICAgICAgIGNvbnN0IHRleHRTcGxpdHRlciA9IHRoaXMuZ2V0VGV4dFNwbGl0dGVyR2l2ZW5Qcm9tcHQocHJvbXB0LCB0ZXh0Q2h1bmtzLmxlbmd0aCwgcGFkZGluZyk7XG4gICAgICAgIHJldHVybiB0ZXh0Q2h1bmtzLm1hcCgoY2h1bmspPT50cnVuY2F0ZVRleHQoY2h1bmssIHRleHRTcGxpdHRlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmVwYWNrIHRleHQgY2h1bmtzIHRvIGJldHRlciB1dGlsaXplIHRoZSBhdmFpbGFibGUgY29udGV4dCB3aW5kb3cuXG4gICAqLyByZXBhY2socHJvbXB0LCB0ZXh0Q2h1bmtzLCBwYWRkaW5nID0gREVGQVVMVF9QQURESU5HKSB7XG4gICAgICAgIGNvbnN0IHRleHRTcGxpdHRlciA9IHRoaXMuZ2V0VGV4dFNwbGl0dGVyR2l2ZW5Qcm9tcHQocHJvbXB0LCAxLCBwYWRkaW5nKTtcbiAgICAgICAgY29uc3QgY29tYmluZWRTdHIgPSB0ZXh0Q2h1bmtzLm1hcCgoYyk9PmMudHJpbSgpKS5maWx0ZXIoKGMpPT5jLmxlbmd0aCA+IDApLmpvaW4oXCJcXG5cXG5cIik7XG4gICAgICAgIHJldHVybiB0ZXh0U3BsaXR0ZXIuc3BsaXRUZXh0KGNvbWJpbmVkU3RyKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21MTE1NZXRhZGF0YShtZXRhZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNodW5rT3ZlcmxhcFJhdGlvID0gREVGQVVMVF9DSFVOS19PVkVSTEFQX1JBVElPLCBjaHVua1NpemVMaW1pdCA9IHVuZGVmaW5lZCwgdG9rZW5pemVyID0gU2V0dGluZ3MudG9rZW5pemVyLCBzZXBhcmF0b3IgPSBcIiBcIiB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9tcHRIZWxwZXIoe1xuICAgICAgICAgICAgY29udGV4dFdpbmRvdzogbWV0YWRhdGEuY29udGV4dFdpbmRvdyxcbiAgICAgICAgICAgIC8vIGZpeG1lOiBudW1PdXRwdXQgaXMgbm90IGluIExMTU1ldGFkYXRhXG4gICAgICAgICAgICBudW1PdXRwdXQ6IERFRkFVTFRfTlVNX09VVFBVVFMsXG4gICAgICAgICAgICBjaHVua092ZXJsYXBSYXRpbyxcbiAgICAgICAgICAgIGNodW5rU2l6ZUxpbWl0LFxuICAgICAgICAgICAgdG9rZW5pemVyLFxuICAgICAgICAgICAgc2VwYXJhdG9yXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUHJvbXB0SGVscGVyLCBnZXRCaWdnZXN0UHJvbXB0IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/llms/dist/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/llms/dist/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLM: () => (/* binding */ BaseLLM),\n/* harmony export */   ToolCallLLM: () => (/* binding */ ToolCallLLM)\n/* harmony export */ });\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\nclass BaseLLM {\n    async complete(params) {\n        const { prompt, stream, responseFormat } = params;\n        if (stream) {\n            const stream = await this.chat({\n                messages: [\n                    {\n                        content: prompt,\n                        role: \"user\"\n                    }\n                ],\n                stream: true,\n                ...responseFormat ? {\n                    responseFormat\n                } : {}\n            });\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.streamConverter)(stream, (chunk)=>{\n                return {\n                    raw: null,\n                    text: chunk.delta\n                };\n            });\n        }\n        const chatResponse = await this.chat({\n            messages: [\n                {\n                    content: prompt,\n                    role: \"user\"\n                }\n            ],\n            ...responseFormat ? {\n                responseFormat\n            } : {}\n        });\n        return {\n            text: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.extractText)(chatResponse.message.content),\n            raw: chatResponse.raw\n        };\n    }\n}\nclass ToolCallLLM extends BaseLLM {\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9sbG1zL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlFOztBQUV6RTtBQUNBO0FBQ0EsZ0JBQWdCLGlDQUFpQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGFBQWE7QUFDYixtQkFBbUIscUVBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsU0FBUztBQUNUO0FBQ0Esa0JBQWtCLGlFQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0MiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9sbG1zL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyZWFtQ29udmVydGVyLCBleHRyYWN0VGV4dCB9IGZyb20gJy4uLy4uL3V0aWxzL2Rpc3QvaW5kZXguanMnO1xuXG5jbGFzcyBCYXNlTExNIHtcbiAgICBhc3luYyBjb21wbGV0ZShwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgeyBwcm9tcHQsIHN0cmVhbSwgcmVzcG9uc2VGb3JtYXQgfSA9IHBhcmFtcztcbiAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgdGhpcy5jaGF0KHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBwcm9tcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlOiBcInVzZXJcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdHJlYW06IHRydWUsXG4gICAgICAgICAgICAgICAgLi4ucmVzcG9uc2VGb3JtYXQgPyB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlRm9ybWF0XG4gICAgICAgICAgICAgICAgfSA6IHt9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW1Db252ZXJ0ZXIoc3RyZWFtLCAoY2h1bmspPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmF3OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjaHVuay5kZWx0YVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGF0UmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNoYXQoe1xuICAgICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHByb21wdCxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogXCJ1c2VyXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLi4ucmVzcG9uc2VGb3JtYXQgPyB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VGb3JtYXRcbiAgICAgICAgICAgIH0gOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IGV4dHJhY3RUZXh0KGNoYXRSZXNwb25zZS5tZXNzYWdlLmNvbnRlbnQpLFxuICAgICAgICAgICAgcmF3OiBjaGF0UmVzcG9uc2UucmF3XG4gICAgICAgIH07XG4gICAgfVxufVxuY2xhc3MgVG9vbENhbGxMTE0gZXh0ZW5kcyBCYXNlTExNIHtcbn1cblxuZXhwb3J0IHsgQmFzZUxMTSwgVG9vbENhbGxMTE0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/llms/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMemory: () => (/* binding */ BaseMemory),\n/* harmony export */   ChatMemoryBuffer: () => (/* binding */ ChatMemoryBuffer),\n/* harmony export */   ChatSummaryMemoryBuffer: () => (/* binding */ ChatSummaryMemoryBuffer)\n/* harmony export */ });\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _storage_chat_store_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../storage/chat-store/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/chat-store/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n/* harmony import */ var _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../prompts/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n\n\n\n\n\n\nconst DEFAULT_TOKEN_LIMIT_RATIO = 0.75;\nconst DEFAULT_CHAT_STORE_KEY = \"chat_history\";\n/**\n * A ChatMemory is used to keep the state of back and forth chat messages\n */ class BaseMemory {\n    _tokenCountForMessages(messages) {\n        if (messages.length === 0) {\n            return 0;\n        }\n        const tokenizer = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.tokenizer;\n        const str = messages.map((m)=>(0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.extractText)(m.content)).join(\" \");\n        return tokenizer.encode(str).length;\n    }\n}\nclass BaseChatStoreMemory extends BaseMemory {\n    constructor(chatStore = new _storage_chat_store_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.SimpleChatStore(), chatStoreKey = DEFAULT_CHAT_STORE_KEY){\n        super(), this.chatStore = chatStore, this.chatStoreKey = chatStoreKey;\n    }\n    getAllMessages() {\n        return this.chatStore.getMessages(this.chatStoreKey);\n    }\n    put(messages) {\n        this.chatStore.addMessage(this.chatStoreKey, messages);\n    }\n    set(messages) {\n        this.chatStore.setMessages(this.chatStoreKey, messages);\n    }\n    reset() {\n        this.chatStore.deleteMessages(this.chatStoreKey);\n    }\n}\n\nclass ChatMemoryBuffer extends BaseChatStoreMemory {\n    constructor(options){\n        super(options?.chatStore, options?.chatStoreKey);\n        const llm = options?.llm ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.llm;\n        const contextWindow = llm.metadata.contextWindow;\n        this.tokenLimit = options?.tokenLimit ?? Math.ceil(contextWindow * DEFAULT_TOKEN_LIMIT_RATIO);\n        if (options?.chatHistory) {\n            this.chatStore.setMessages(this.chatStoreKey, options.chatHistory);\n        }\n    }\n    async getMessages(transientMessages, initialTokenCount = 0) {\n        const messages = await this.getAllMessages();\n        if (initialTokenCount > this.tokenLimit) {\n            throw new Error(\"Initial token count exceeds token limit\");\n        }\n        // Add input messages as transient messages\n        const messagesWithInput = transientMessages ? [\n            ...transientMessages,\n            ...messages\n        ] : messages;\n        let messageCount = messagesWithInput.length;\n        let currentMessages = messagesWithInput.slice(-messageCount);\n        let tokenCount = this._tokenCountForMessages(messagesWithInput) + initialTokenCount;\n        while(tokenCount > this.tokenLimit && messageCount > 1){\n            messageCount -= 1;\n            if (messagesWithInput.at(-messageCount).role === \"assistant\") {\n                messageCount -= 1;\n            }\n            currentMessages = messagesWithInput.slice(-messageCount);\n            tokenCount = this._tokenCountForMessages(currentMessages) + initialTokenCount;\n        }\n        if (tokenCount > this.tokenLimit && messageCount <= 0) {\n            return [];\n        }\n        return messagesWithInput.slice(-messageCount);\n    }\n}\n\nclass ChatSummaryMemoryBuffer extends BaseMemory {\n    constructor(options){\n        super();\n        this.messages = options?.messages ?? [];\n        this.summaryPrompt = options?.summaryPrompt ?? _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.defaultSummaryPrompt;\n        this.llm = options?.llm ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.llm;\n        if (!this.llm.metadata.maxTokens) {\n            throw new Error(\"LLM maxTokens is not set. Needed so the summarizer ensures the context window size of the LLM.\");\n        }\n        this.tokenizer = options?.tokenizer ?? _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_3__.tokenizers.tokenizer();\n        this.tokensToSummarize = this.llm.metadata.contextWindow - this.llm.metadata.maxTokens;\n        if (this.tokensToSummarize < this.llm.metadata.contextWindow * 0.25) {\n            throw new Error(\"The number of tokens that trigger the summarize process are less than 25% of the context window. Try lowering maxTokens or use a model with a larger context window.\");\n        }\n    }\n    async summarize() {\n        // get the conversation messages to create summary\n        const messagesToSummarize = this.calcConversationMessages();\n        let promptMessages;\n        do {\n            promptMessages = [\n                {\n                    content: this.summaryPrompt.format({\n                        context: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.messagesToHistory)(messagesToSummarize)\n                    }),\n                    role: \"user\",\n                    options: {}\n                }\n            ];\n            // remove oldest message until the chat history is short enough for the context window\n            messagesToSummarize.shift();\n        }while (this.tokenizer.encode(promptMessages[0].content).length > this.tokensToSummarize)\n        const response = await this.llm.chat({\n            messages: promptMessages\n        });\n        return {\n            content: response.message.content,\n            role: \"memory\"\n        };\n    }\n    // Find last summary message\n    get lastSummaryIndex() {\n        const reversedMessages = this.messages.slice().reverse();\n        const index = reversedMessages.findIndex((message)=>message.role === \"memory\");\n        if (index === -1) {\n            return null;\n        }\n        return this.messages.length - 1 - index;\n    }\n    getLastSummary() {\n        const lastSummaryIndex = this.lastSummaryIndex;\n        return lastSummaryIndex ? this.messages[lastSummaryIndex] : null;\n    }\n    get systemMessages() {\n        // get array of all system messages\n        return this.messages.filter((message)=>message.role === \"system\");\n    }\n    get nonSystemMessages() {\n        // get array of all non-system messages\n        return this.messages.filter((message)=>message.role !== \"system\");\n    }\n    /**\n   * Calculates the messages that describe the conversation so far.\n   * If there's no memory, all non-system messages are used.\n   * If there's a memory, uses all messages after the last summary message.\n   */ calcConversationMessages(transformSummary) {\n        const lastSummaryIndex = this.lastSummaryIndex;\n        if (!lastSummaryIndex) {\n            // there's no memory, so just use all non-system messages\n            return this.nonSystemMessages;\n        } else {\n            // there's a memory, so use all messages after the last summary message\n            // and convert summary message so it can be send to the LLM\n            const summaryMessage = transformSummary ? {\n                content: `Summary of the conversation so far: ${this.messages[lastSummaryIndex].content}`,\n                role: \"system\"\n            } : this.messages[lastSummaryIndex];\n            return [\n                summaryMessage,\n                ...this.messages.slice(lastSummaryIndex + 1)\n            ];\n        }\n    }\n    calcCurrentRequestMessages(transientMessages) {\n        // currently, we're sending:\n        // system messages first, then transient messages and then the messages that describe the conversation so far\n        return [\n            ...this.systemMessages,\n            ...transientMessages ? transientMessages : [],\n            ...this.calcConversationMessages(true)\n        ];\n    }\n    reset() {\n        this.messages = [];\n    }\n    async getMessages(transientMessages) {\n        const requestMessages = this.calcCurrentRequestMessages(transientMessages);\n        // get tokens of current request messages and the transient messages\n        const tokens = requestMessages.reduce((count, message)=>count + this.tokenizer.encode((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.extractText)(message.content)).length, 0);\n        if (tokens > this.tokensToSummarize) {\n            // if there are too many tokens for the next request, call summarize\n            const memoryMessage = await this.summarize();\n            const lastMessage = this.messages.at(-1);\n            if (lastMessage && lastMessage.role === \"user\") {\n                // if last message is a user message, ensure that it's sent after the new memory message\n                this.messages.pop();\n                this.messages.push(memoryMessage);\n                this.messages.push(lastMessage);\n            } else {\n                // otherwise just add the memory message\n                this.messages.push(memoryMessage);\n            }\n            // TODO: we still might have too many tokens\n            // e.g. too large system messages or transient messages\n            // how should we deal with that?\n            return this.calcCurrentRequestMessages(transientMessages);\n        }\n        return requestMessages;\n    }\n    async getAllMessages() {\n        return this.getMessages();\n    }\n    put(message) {\n        this.messages.push(message);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MarkdownNodeParser: () => (/* binding */ MarkdownNodeParser),\n/* harmony export */   MetadataAwareTextSplitter: () => (/* binding */ MetadataAwareTextSplitter),\n/* harmony export */   NodeParser: () => (/* binding */ NodeParser),\n/* harmony export */   SentenceSplitter: () => (/* binding */ SentenceSplitter),\n/* harmony export */   SentenceWindowNodeParser: () => (/* binding */ SentenceWindowNodeParser),\n/* harmony export */   SimpleNodeParser: () => (/* binding */ SimpleNodeParser),\n/* harmony export */   TextSplitter: () => (/* binding */ TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* binding */ TokenTextSplitter),\n/* harmony export */   splitByChar: () => (/* binding */ splitByChar),\n/* harmony export */   splitByPhraseRegex: () => (/* binding */ splitByPhraseRegex),\n/* harmony export */   splitByRegex: () => (/* binding */ splitByRegex),\n/* harmony export */   splitBySentenceTokenizer: () => (/* binding */ splitBySentenceTokenizer),\n/* harmony export */   splitBySep: () => (/* binding */ splitBySep),\n/* harmony export */   truncateText: () => (/* binding */ truncateText)\n/* harmony export */ });\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n\n\n\n\n\nclass NodeParser extends _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.TransformComponent {\n    constructor(){\n        super((nodes)=>{\n            // alex: should we fix `as` type?\n            return this.getNodesFromDocuments(nodes);\n        }), this.includeMetadata = true, this.includePrevNextRel = true;\n    }\n    postProcessParsedNodes(nodes, parentDocMap) {\n        nodes.forEach((node, i)=>{\n            const parentDoc = parentDocMap.get(node.sourceNode?.nodeId || \"\");\n            if (parentDoc) {\n                const startCharIdx = parentDoc.text.indexOf(node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.NONE));\n                if (startCharIdx >= 0) {\n                    node.startCharIdx = startCharIdx;\n                    node.endCharIdx = startCharIdx + node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.NONE).length;\n                }\n                if (this.includeMetadata && node.metadata && parentDoc.metadata) {\n                    node.metadata = {\n                        ...node.metadata,\n                        ...parentDoc.metadata\n                    };\n                }\n            }\n            if (this.includePrevNextRel && node.sourceNode) {\n                const previousNode = i > 0 ? nodes[i - 1] : null;\n                const nextNode = i < nodes.length - 1 ? nodes[i + 1] : null;\n                if (previousNode && previousNode.sourceNode && previousNode.sourceNode.nodeId === node.sourceNode.nodeId) {\n                    node.relationships = {\n                        ...node.relationships,\n                        [_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.NodeRelationship.PREVIOUS]: previousNode.asRelatedNodeInfo()\n                    };\n                }\n                if (nextNode && nextNode.sourceNode && nextNode.sourceNode.nodeId === node.sourceNode.nodeId) {\n                    node.relationships = {\n                        ...node.relationships,\n                        [_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.NodeRelationship.NEXT]: nextNode.asRelatedNodeInfo()\n                    };\n                }\n            }\n        });\n        return nodes;\n    }\n    getNodesFromDocuments(documents) {\n        const docsId = new Map(documents.map((doc)=>[\n                doc.id_,\n                doc\n            ]));\n        const callbackManager = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager;\n        callbackManager.dispatchEvent(\"node-parsing-start\", {\n            documents\n        });\n        const parsedNodes = this.parseNodes(documents);\n        if ((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.isPromise)(parsedNodes)) {\n            return parsedNodes.then((parsedNodes)=>{\n                const nodes = this.postProcessParsedNodes(parsedNodes, docsId);\n                callbackManager.dispatchEvent(\"node-parsing-end\", {\n                    nodes\n                });\n                return nodes;\n            });\n        } else {\n            const nodes = this.postProcessParsedNodes(parsedNodes, docsId);\n            callbackManager.dispatchEvent(\"node-parsing-end\", {\n                nodes\n            });\n            return nodes;\n        }\n    }\n}\nclass TextSplitter extends NodeParser {\n    splitTexts(texts) {\n        return texts.flatMap((text)=>this.splitText(text));\n    }\n    parseNodes(nodes) {\n        return nodes.reduce((allNodes, node)=>{\n            const splits = this.splitText(node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.ALL));\n            const nodes = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.buildNodeFromSplits)(splits, node);\n            return allNodes.concat(nodes);\n        }, []);\n    }\n}\nclass MetadataAwareTextSplitter extends TextSplitter {\n    splitTextsMetadataAware(texts, metadata) {\n        if (texts.length !== metadata.length) {\n            throw new TypeError(\"`texts` and `metadata` must have the same length\");\n        }\n        return texts.flatMap((text, i)=>this.splitTextMetadataAware(text, metadata[i]));\n    }\n    getMetadataString(node) {\n        const embedStr = node.getMetadataStr(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.EMBED);\n        const llmStr = node.getMetadataStr(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.LLM);\n        if (embedStr.length > llmStr.length) {\n            return embedStr;\n        } else {\n            return llmStr;\n        }\n    }\n    parseNodes(nodes) {\n        return nodes.reduce((allNodes, node)=>{\n            const metadataStr = this.getMetadataString(node);\n            const splits = this.splitTextMetadataAware(node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.NONE), metadataStr);\n            return allNodes.concat((0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.buildNodeFromSplits)(splits, node));\n        }, []);\n    }\n}\n\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\n// lib/natural/tokenizers/tokenizer.js\nvar require_tokenizer = __commonJS({\n    \"lib/natural/tokenizers/tokenizer.js\" (exports, module) {\n        var Tokenizer = class {\n            trim(array) {\n                while(array[array.length - 1] === \"\"){\n                    array.pop();\n                }\n                while(array[0] === \"\"){\n                    array.shift();\n                }\n                return array;\n            }\n        };\n        module.exports = Tokenizer;\n    }\n});\n// lib/natural/tokenizers/sentence_tokenizer.js\nvar require_sentence_tokenizer = __commonJS({\n    \"lib/natural/tokenizers/sentence_tokenizer.js\" (exports, module) {\n        var Tokenizer = require_tokenizer();\n        var NUM = \"NUMBER\";\n        var DELIM = \"DELIM\";\n        var URI = \"URI\";\n        var ABBREV = \"ABBREV\";\n        function generateUniqueCode(base, index) {\n            return `{{${base}_${index}}}`;\n        }\n        function escapeRegExp(string) {\n            return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n        }\n        var SentenceTokenizer = class extends Tokenizer {\n            constructor(abbreviations){\n                super();\n                if (abbreviations) {\n                    this.abbreviations = abbreviations;\n                } else {\n                    this.abbreviations = [];\n                }\n                this.replacementMap = null;\n                this.replacementCounter = 0;\n            }\n            replaceUrisWithPlaceholders(text) {\n                const urlPattern = /(https?:\\/\\/\\S+|www\\.\\S+|ftp:\\/\\/\\S+|(mailto:)?[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}|file:\\/\\/\\S+)/gi;\n                const modifiedText = text.replace(urlPattern, (match)=>{\n                    const placeholder = generateUniqueCode(URI, this.replacementCounter++);\n                    this.replacementMap.set(placeholder, match);\n                    return placeholder;\n                });\n                return modifiedText;\n            }\n            replaceAbbreviations(text) {\n                if (this.abbreviations.length === 0) {\n                    return text;\n                }\n                const pattern = new RegExp(`(${this.abbreviations.map((abbrev)=>escapeRegExp(abbrev)).join(\"|\")})`, \"gi\");\n                const replacedText = text.replace(pattern, (match)=>{\n                    const code = generateUniqueCode(ABBREV, this.replacementCounter++);\n                    this.replacementMap.set(code, match);\n                    return code;\n                });\n                return replacedText;\n            }\n            replaceDelimitersWithPlaceholders(text) {\n                const delimiterPattern = /([.?!… ]*)([.?!…])([\"'”’)}\\]]?)/g;\n                const modifiedText = text.replace(delimiterPattern, (match, p1, p2, p3)=>{\n                    const placeholder = generateUniqueCode(DELIM, this.replacementCounter++);\n                    this.delimiterMap.set(placeholder, p1 + p2 + p3);\n                    return placeholder;\n                });\n                return modifiedText;\n            }\n            splitOnPlaceholders(text, placeholders) {\n                if (this.delimiterMap.size === 0) {\n                    return [\n                        text\n                    ];\n                }\n                const keys = Array.from(this.delimiterMap.keys());\n                const pattern = new RegExp(`(${keys.map(escapeRegExp).join(\"|\")})`);\n                const parts = text.split(pattern);\n                const sentences = [];\n                for(let i = 0; i < parts.length; i += 2){\n                    const sentence = parts[i];\n                    const placeholder = parts[i + 1] || \"\";\n                    sentences.push(sentence + placeholder);\n                }\n                return sentences;\n            }\n            replaceNumbersWithCode(text) {\n                const numberPattern = /\\b\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?\\b/g;\n                const replacedText = text.replace(numberPattern, (match)=>{\n                    const code = generateUniqueCode(NUM, this.replacementCounter++);\n                    this.replacementMap.set(code, match);\n                    return code;\n                });\n                return replacedText;\n            }\n            revertReplacements(text) {\n                let originalText = text;\n                for (const [placeholder, replacement] of this.replacementMap.entries()){\n                    const pattern = new RegExp(escapeRegExp(placeholder), \"g\");\n                    originalText = originalText.replace(pattern, replacement);\n                }\n                return originalText;\n            }\n            revertDelimiters(text) {\n                let originalText = text;\n                for (const [placeholder, replacement] of this.delimiterMap.entries()){\n                    const pattern = new RegExp(escapeRegExp(placeholder), \"g\");\n                    originalText = originalText.replace(pattern, replacement);\n                }\n                return originalText;\n            }\n            tokenize(text) {\n                this.replacementCounter = 0;\n                this.replacementMap = /* @__PURE__ */ new Map();\n                this.delimiterMap = /* @__PURE__ */ new Map();\n                const result1 = this.replaceAbbreviations(text);\n                const result2 = this.replaceUrisWithPlaceholders(result1);\n                const result3 = this.replaceNumbersWithCode(result2);\n                const result4 = this.replaceDelimitersWithPlaceholders(result3);\n                const sentences = this.splitOnPlaceholders(result4);\n                const newSentences = sentences.map((s)=>{\n                    const s1 = this.revertReplacements(s);\n                    return this.revertDelimiters(s1);\n                });\n                const trimmedSentences = this.trim(newSentences);\n                const trimmedSentences2 = trimmedSentences.map((sent)=>sent.trim());\n                return trimmedSentences2;\n            }\n        };\n        module.exports = SentenceTokenizer;\n    }\n});\nvar SentenceTokenizer = require_sentence_tokenizer();\n\nconst truncateText = (text, textSplitter)=>{\n    const chunks = textSplitter.splitText(text);\n    return chunks[0] ?? text;\n};\nconst splitTextKeepSeparator = (text, separator)=>{\n    const parts = text.split(separator);\n    const result = parts.map((part, index)=>index > 0 ? separator + part : part);\n    return result.filter((s)=>s);\n};\nconst splitBySep = (sep, keepSep = true)=>{\n    if (keepSep) {\n        return (text)=>splitTextKeepSeparator(text, sep);\n    } else {\n        return (text)=>text.split(sep);\n    }\n};\nconst splitByChar = ()=>{\n    return (text)=>text.split(\"\");\n};\nlet sentenceTokenizer = null;\nconst splitBySentenceTokenizer = ()=>{\n    if (!sentenceTokenizer) {\n        sentenceTokenizer = new SentenceTokenizer([\n            \"i.e.\",\n            \"etc.\",\n            \"vs.\",\n            \"Inc.\",\n            \"A.S.A.P.\"\n        ]);\n    }\n    const tokenizer = sentenceTokenizer;\n    return (text)=>{\n        try {\n            return tokenizer.tokenize(text);\n        } catch  {\n            return [\n                text\n            ];\n        }\n    };\n};\nconst splitByRegex = (regex)=>{\n    return (text)=>text.match(new RegExp(regex, \"g\")) || [];\n};\nconst splitByPhraseRegex = ()=>{\n    const regex = \"[^,.;]+[,.;]?\";\n    return splitByRegex(regex);\n};\n\n/**\n * Parse text with a preference for complete sentences.\n */ class SentenceSplitter extends MetadataAwareTextSplitter {\n    #chunkingTokenizerFn;\n    #splitFns;\n    #subSentenceSplitFns;\n    #tokenizer;\n    constructor(params){\n        super(), /**\n   * The token chunk size for each chunk.\n   */ this.chunkSize = 1024, /**\n   * The token overlap of each chunk when splitting.\n   */ this.chunkOverlap = 200, /**\n   * Default separator for splitting into words\n   */ this.separator = \" \", /**\n   * Separator between paragraphs.\n   */ this.paragraphSeparator = \"\\n\\n\\n\", /**\n   * Backup regex for splitting into sentences.\n   */ this.secondaryChunkingRegex = \"[^,.;。？！]+[,.;。？！]?\", this.#chunkingTokenizerFn = splitBySentenceTokenizer(), this.#splitFns = new Set(), this.#subSentenceSplitFns = new Set(), this.tokenSize = (text)=>this.#tokenizer.encode(text).length;\n        if (params) {\n            const parsedParams = _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.sentenceSplitterSchema.parse(params);\n            this.chunkSize = parsedParams.chunkSize;\n            this.chunkOverlap = parsedParams.chunkOverlap;\n            this.separator = parsedParams.separator;\n            this.paragraphSeparator = parsedParams.paragraphSeparator;\n            this.secondaryChunkingRegex = parsedParams.secondaryChunkingRegex;\n        }\n        this.#tokenizer = params?.tokenizer ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.tokenizer;\n        this.#splitFns.add(splitBySep(this.paragraphSeparator));\n        this.#splitFns.add(this.#chunkingTokenizerFn);\n        this.#subSentenceSplitFns.add(splitByRegex(this.secondaryChunkingRegex));\n        this.#subSentenceSplitFns.add(splitBySep(this.separator));\n        this.#subSentenceSplitFns.add(splitByChar());\n    }\n    splitTextMetadataAware(text, metadata) {\n        const metadataLength = this.tokenSize(metadata);\n        const effectiveChunkSize = this.chunkSize - metadataLength;\n        if (effectiveChunkSize <= 0) {\n            throw new Error(`Metadata length (${metadataLength}) is longer than chunk size (${this.chunkSize}). Consider increasing the chunk size or decreasing the size of your metadata to avoid this.`);\n        } else if (effectiveChunkSize < 50) {\n            console.log(`Metadata length (${metadataLength}) is close to chunk size (${this.chunkSize}). Resulting chunks are less than 50 tokens. Consider increasing the chunk size or decreasing the size of your metadata to avoid this.`);\n        }\n        return this._splitText(text, effectiveChunkSize);\n    }\n    splitText(text) {\n        return this._splitText(text, this.chunkSize);\n    }\n    _splitText(text, chunkSize) {\n        if (text === \"\") return [\n            text\n        ];\n        const callbackManager = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager;\n        callbackManager.dispatchEvent(\"chunking-start\", {\n            text: [\n                text\n            ]\n        });\n        const splits = this.#split(text, chunkSize);\n        const chunks = this.#merge(splits, chunkSize);\n        callbackManager.dispatchEvent(\"chunking-end\", {\n            chunks\n        });\n        return chunks;\n    }\n    #split(text, chunkSize) {\n        const tokenSize = this.tokenSize(text);\n        if (tokenSize <= chunkSize) {\n            return [\n                {\n                    text,\n                    isSentence: true,\n                    tokenSize\n                }\n            ];\n        }\n        const [textSplitsByFns, isSentence] = this.#getSplitsByFns(text);\n        const textSplits = [];\n        for (const textSplit of textSplitsByFns){\n            const tokenSize = this.tokenSize(textSplit);\n            if (tokenSize <= chunkSize) {\n                textSplits.push({\n                    text: textSplit,\n                    isSentence,\n                    tokenSize\n                });\n            } else {\n                const recursiveTextSplits = this.#split(textSplit, chunkSize);\n                textSplits.push(...recursiveTextSplits);\n            }\n        }\n        return textSplits;\n    }\n    #getSplitsByFns(text) {\n        for (const splitFn of this.#splitFns){\n            const splits = splitFn(text);\n            if (splits.length > 1) {\n                return [\n                    splits,\n                    true\n                ];\n            }\n        }\n        for (const splitFn of this.#subSentenceSplitFns){\n            const splits = splitFn(text);\n            if (splits.length > 1) {\n                return [\n                    splits,\n                    false\n                ];\n            }\n        }\n        return [\n            [\n                text\n            ],\n            true\n        ];\n    }\n    #merge(splits, chunkSize) {\n        const chunks = [];\n        let currentChunk = [];\n        let lastChunk = [];\n        let currentChunkLength = 0;\n        let newChunk = true;\n        const closeChunk = ()=>{\n            chunks.push(currentChunk.map(([text])=>text).join(\"\"));\n            lastChunk = currentChunk;\n            currentChunk = [];\n            currentChunkLength = 0;\n            newChunk = true;\n            let lastIndex = lastChunk.length - 1;\n            while(lastIndex >= 0 && currentChunkLength + lastChunk[lastIndex][1] <= this.chunkOverlap){\n                const [text, length] = lastChunk[lastIndex];\n                currentChunkLength += length;\n                currentChunk.unshift([\n                    text,\n                    length\n                ]);\n                lastIndex -= 1;\n            }\n        };\n        while(splits.length > 0){\n            const curSplit = splits[0];\n            if (curSplit.tokenSize > chunkSize) {\n                throw new Error(\"Single token exceeded chunk size\");\n            }\n            if (currentChunkLength + curSplit.tokenSize > chunkSize && !newChunk) {\n                closeChunk();\n            } else {\n                if (curSplit.isSentence || currentChunkLength + curSplit.tokenSize <= chunkSize || newChunk) {\n                    currentChunkLength += curSplit.tokenSize;\n                    currentChunk.push([\n                        curSplit.text,\n                        curSplit.tokenSize\n                    ]);\n                    splits.shift();\n                    newChunk = false;\n                } else {\n                    closeChunk();\n                }\n            }\n        }\n        // Handle the last chunk\n        if (!newChunk) {\n            chunks.push(currentChunk.map(([text])=>text).join(\"\"));\n        }\n        return this.#postprocessChunks(chunks);\n    }\n    /**\n   * Remove whitespace only chunks and remove leading and trailing whitespace.\n   */ #postprocessChunks(chunks) {\n        const newChunks = [];\n        for (const chunk of chunks){\n            const trimmedChunk = chunk.trim();\n            if (trimmedChunk !== \"\") {\n                newChunks.push(trimmedChunk);\n            }\n        }\n        return newChunks;\n    }\n}\n\nclass MarkdownNodeParser extends NodeParser {\n    parseNodes(nodes, showProgress) {\n        return nodes.reduce((allNodes, node)=>{\n            const markdownNodes = this.getNodesFromNode(node);\n            return allNodes.concat(markdownNodes);\n        }, []);\n    }\n    getNodesFromNode(node) {\n        const text = node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.NONE);\n        const markdownNodes = [];\n        const lines = text.split(\"\\n\");\n        let metadata = {};\n        let codeBlock = false;\n        let currentSection = \"\";\n        for (const line of lines){\n            if (line.trim().startsWith(\"```\")) {\n                codeBlock = !codeBlock;\n            }\n            const headerMatch = /^(#+)\\s(.*)/.exec(line);\n            if (headerMatch && !codeBlock) {\n                if (currentSection !== \"\") {\n                    markdownNodes.push(this.buildNodeFromSplit(currentSection.trim(), node, metadata));\n                }\n                metadata = this.updateMetadata(metadata, headerMatch[2], headerMatch[1].trim().length);\n                currentSection = `${headerMatch[2]}\\n`;\n            } else {\n                currentSection += line + \"\\n\";\n            }\n        }\n        if (currentSection !== \"\") {\n            markdownNodes.push(this.buildNodeFromSplit(currentSection.trim(), node, metadata));\n        }\n        return markdownNodes;\n    }\n    updateMetadata(headersMetadata, newHeader, newHeaderLevel) {\n        const updatedHeaders = {};\n        for(let i = 1; i < newHeaderLevel; i++){\n            const key = `Header_${i}`;\n            if (key in headersMetadata) {\n                updatedHeaders[key] = headersMetadata[key];\n            }\n        }\n        updatedHeaders[`Header_${newHeaderLevel}`] = newHeader;\n        return updatedHeaders;\n    }\n    buildNodeFromSplit(textSplit, node, metadata) {\n        const newNode = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.buildNodeFromSplits)([\n            textSplit\n        ], node, undefined)[0];\n        if (this.includeMetadata) {\n            newNode.metadata = {\n                ...newNode.metadata,\n                ...metadata\n            };\n        }\n        return newNode;\n    }\n}\n\nclass SentenceWindowNodeParser extends NodeParser {\n    static{\n        this.DEFAULT_WINDOW_SIZE = 3;\n    }\n    static{\n        this.DEFAULT_WINDOW_METADATA_KEY = \"window\";\n    }\n    static{\n        this.DEFAULT_ORIGINAL_TEXT_METADATA_KEY = \"originalText\";\n    }\n    constructor(params){\n        super(), this.sentenceSplitter = splitBySentenceTokenizer(), this.idGenerator = ()=>(0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n        if (params) {\n            const parsedParams = _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.sentenceWindowNodeParserSchema.parse(params);\n            this.windowSize = parsedParams.windowSize;\n            this.windowMetadataKey = parsedParams.windowMetadataKey;\n            this.originalTextMetadataKey = parsedParams.originalTextMetadataKey;\n        } else {\n            this.windowSize = SentenceWindowNodeParser.DEFAULT_WINDOW_SIZE;\n            this.windowMetadataKey = SentenceWindowNodeParser.DEFAULT_WINDOW_METADATA_KEY;\n            this.originalTextMetadataKey = SentenceWindowNodeParser.DEFAULT_ORIGINAL_TEXT_METADATA_KEY;\n        }\n    }\n    parseNodes(nodes, showProgress) {\n        return nodes.reduce((allNodes, node)=>{\n            const nodes = this.buildWindowNodesFromDocuments([\n                node\n            ]);\n            return allNodes.concat(nodes);\n        }, []);\n    }\n    buildWindowNodesFromDocuments(documents) {\n        const allNodes = [];\n        for (const doc of documents){\n            const text = doc.text;\n            const textSplits = this.sentenceSplitter(text);\n            const nodes = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.buildNodeFromSplits)(textSplits, doc, undefined, this.idGenerator);\n            nodes.forEach((node, i)=>{\n                const windowNodes = nodes.slice(Math.max(0, i - this.windowSize), Math.min(i + this.windowSize + 1, nodes.length));\n                node.metadata[this.windowMetadataKey] = windowNodes.map((n)=>n.text).join(\" \");\n                node.metadata[this.originalTextMetadataKey] = node.text;\n                node.excludedEmbedMetadataKeys.push(this.windowMetadataKey, this.originalTextMetadataKey);\n                node.excludedLlmMetadataKeys.push(this.windowMetadataKey, this.originalTextMetadataKey);\n            });\n            allNodes.push(...nodes);\n        }\n        return allNodes;\n    }\n}\n\nconst DEFAULT_METADATA_FORMAT_LEN = 2;\nconst tokenTextSplitterSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    chunkSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().positive().default(_global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_SIZE),\n    chunkOverlap: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().nonnegative().default(_global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_OVERLAP),\n    separator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().default(\" \"),\n    backupSeparators: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()).default([\n        \"\\n\"\n    ])\n});\nclass TokenTextSplitter extends MetadataAwareTextSplitter {\n    #tokenizer;\n    #splitFns;\n    constructor(params){\n        super(), this.chunkSize = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_SIZE, this.chunkOverlap = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_CHUNK_OVERLAP, this.separator = \" \", this.backupSeparators = [\n            \"\\n\"\n        ], this.#splitFns = [];\n        if (params) {\n            const parsedParams = tokenTextSplitterSchema.parse(params);\n            this.chunkSize = parsedParams.chunkSize;\n            this.chunkOverlap = parsedParams.chunkOverlap;\n            this.separator = parsedParams.separator;\n            this.backupSeparators = parsedParams.backupSeparators;\n        }\n        if (this.chunkOverlap > this.chunkSize) {\n            throw new Error(`Got a larger chunk overlap (${this.chunkOverlap}) than chunk size (${this.chunkSize}), should be smaller.`);\n        }\n        this.#tokenizer = params?.tokenizer ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.tokenizer;\n        const allSeparators = [\n            this.separator,\n            ...this.backupSeparators\n        ];\n        this.#splitFns = allSeparators.map((sep)=>splitBySep(sep));\n        this.#splitFns.push(splitByChar());\n    }\n    /**\n   * Split text into chunks, reserving space required for metadata string.\n   * @param text The text to split.\n   * @param metadata The metadata string.\n   * @returns An array of text chunks.\n   */ splitTextMetadataAware(text, metadata) {\n        const metadataLength = this.tokenSize(metadata) + DEFAULT_METADATA_FORMAT_LEN;\n        const effectiveChunkSize = this.chunkSize - metadataLength;\n        if (effectiveChunkSize <= 0) {\n            throw new Error(`Metadata length (${metadataLength}) is longer than chunk size (${this.chunkSize}). ` + `Consider increasing the chunk size or decreasing the size of your metadata to avoid this.`);\n        } else if (effectiveChunkSize < 50) {\n            console.warn(`Metadata length (${metadataLength}) is close to chunk size (${this.chunkSize}). ` + `Resulting chunks are less than 50 tokens. Consider increasing the chunk size or decreasing the size of your metadata to avoid this.`);\n        }\n        return this._splitText(text, effectiveChunkSize);\n    }\n    /**\n   * Split text into chunks.\n   * @param text The text to split.\n   * @returns An array of text chunks.\n   */ splitText(text) {\n        return this._splitText(text, this.chunkSize);\n    }\n    /**\n   * Internal method to split text into chunks up to a specified size.\n   * @param text The text to split.\n   * @param chunkSize The maximum size of each chunk.\n   * @returns An array of text chunks.\n   */ _splitText(text, chunkSize) {\n        if (text === \"\") return [\n            text\n        ];\n        // Dispatch chunking start event\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager.dispatchEvent(\"chunking-start\", {\n            text: [\n                text\n            ]\n        });\n        const splits = this._split(text, chunkSize);\n        const chunks = this._merge(splits, chunkSize);\n        _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager.dispatchEvent(\"chunking-end\", {\n            chunks\n        });\n        return chunks;\n    }\n    /**\n   * Break text into splits that are smaller than the chunk size.\n   * @param text The text to split.\n   * @param chunkSize The maximum size of each split.\n   * @returns An array of text splits.\n   */ _split(text, chunkSize) {\n        if (this.tokenSize(text) <= chunkSize) {\n            return [\n                text\n            ];\n        }\n        for (const splitFn of this.#splitFns){\n            const splits = splitFn(text);\n            if (splits.length > 1) {\n                const newSplits = [];\n                for (const split of splits){\n                    const splitLen = this.tokenSize(split);\n                    if (splitLen <= chunkSize) {\n                        newSplits.push(split);\n                    } else {\n                        newSplits.push(...this._split(split, chunkSize));\n                    }\n                }\n                return newSplits;\n            }\n        }\n        return [\n            text\n        ];\n    }\n    /**\n   * Merge splits into chunks with overlap.\n   * @param splits The array of text splits.\n   * @param chunkSize The maximum size of each chunk.\n   * @returns An array of merged text chunks.\n   */ _merge(splits, chunkSize) {\n        const chunks = [];\n        let currentChunk = [];\n        let currentLength = 0;\n        for (const split of splits){\n            const splitLength = this.tokenSize(split);\n            if (splitLength > chunkSize) {\n                console.warn(`Got a split of size ${splitLength}, larger than chunk size ${chunkSize}.`);\n            }\n            if (currentLength + splitLength > chunkSize) {\n                const chunk = currentChunk.join(\"\").trim();\n                if (chunk) {\n                    chunks.push(chunk);\n                }\n                currentChunk = [];\n                currentLength = 0;\n                const overlapTokens = this.chunkOverlap;\n                const overlapSplits = [];\n                let overlapLength = 0;\n                while(overlapSplits.length < splits.length && overlapLength < overlapTokens){\n                    const overlapSplit = currentChunk.shift();\n                    if (!overlapSplit) break;\n                    overlapSplits.push(overlapSplit);\n                    overlapLength += this.tokenSize(overlapSplit);\n                }\n                for (const overlapSplit of overlapSplits.reverse()){\n                    currentChunk.push(overlapSplit);\n                    currentLength += this.tokenSize(overlapSplit);\n                    if (currentLength >= overlapTokens) break;\n                }\n            }\n            currentChunk.push(split);\n            currentLength += splitLength;\n        }\n        const finalChunk = currentChunk.join(\"\").trim();\n        if (finalChunk) {\n            chunks.push(finalChunk);\n        }\n        return chunks;\n    }\n    /**\n   * Calculate the number of tokens in the text using the tokenizer.\n   * @param text The text to tokenize.\n   * @returns The number of tokens.\n   */ tokenSize(text) {\n        return this.#tokenizer.encode(text).length;\n    }\n}\n\n/**\n * @deprecated Use `SentenceSplitter` instead\n */ const SimpleNodeParser = SentenceSplitter;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/objects/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/objects/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseObjectNodeMapping: () => (/* binding */ BaseObjectNodeMapping),\n/* harmony export */   ObjectRetriever: () => (/* binding */ ObjectRetriever)\n/* harmony export */ });\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n// Assuming that necessary interfaces and classes (like OT, TextNode, BaseNode, etc.) are defined elsewhere\n// Import statements (e.g., for TextNode, BaseNode) should be added based on your project's structure\nclass BaseObjectNodeMapping {\n    // Concrete methods can be defined as usual\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    validateObject(obj) {}\n    // Implementing the add object logic\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    addObj(obj) {\n        this.validateObject(obj);\n        this._addObj(obj);\n    }\n    // Implementing toNodes method\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toNodes(objs) {\n        return objs.map((obj)=>this.toNode(obj));\n    }\n    // Implementing fromNode method\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fromNode(node) {\n        const obj = this._fromNode(node);\n        this.validateObject(obj);\n        return obj;\n    }\n}\nclass ObjectRetriever {\n    constructor(retriever, objectNodeMapping){\n        this._retriever = retriever;\n        this._objectNodeMapping = objectNodeMapping;\n    }\n    // In TypeScript, getters are defined like this.\n    get retriever() {\n        return this._retriever;\n    }\n    // Translating the retrieve method\n    async retrieve(strOrQueryBundle) {\n        const nodes = await this.retriever.retrieve({\n            query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.extractText)(strOrQueryBundle)\n        });\n        const objs = nodes.map((n)=>this._objectNodeMapping.fromNode(n.node));\n        return objs;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9vYmplY3RzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpRUFBVztBQUM5QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRWtEIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvb2JqZWN0cy9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RUZXh0IH0gZnJvbSAnLi4vLi4vdXRpbHMvZGlzdC9pbmRleC5qcyc7XG5cbi8vIEFzc3VtaW5nIHRoYXQgbmVjZXNzYXJ5IGludGVyZmFjZXMgYW5kIGNsYXNzZXMgKGxpa2UgT1QsIFRleHROb2RlLCBCYXNlTm9kZSwgZXRjLikgYXJlIGRlZmluZWQgZWxzZXdoZXJlXG4vLyBJbXBvcnQgc3RhdGVtZW50cyAoZS5nLiwgZm9yIFRleHROb2RlLCBCYXNlTm9kZSkgc2hvdWxkIGJlIGFkZGVkIGJhc2VkIG9uIHlvdXIgcHJvamVjdCdzIHN0cnVjdHVyZVxuY2xhc3MgQmFzZU9iamVjdE5vZGVNYXBwaW5nIHtcbiAgICAvLyBDb25jcmV0ZSBtZXRob2RzIGNhbiBiZSBkZWZpbmVkIGFzIHVzdWFsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YWxpZGF0ZU9iamVjdChvYmopIHt9XG4gICAgLy8gSW1wbGVtZW50aW5nIHRoZSBhZGQgb2JqZWN0IGxvZ2ljXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhZGRPYmoob2JqKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVPYmplY3Qob2JqKTtcbiAgICAgICAgdGhpcy5fYWRkT2JqKG9iaik7XG4gICAgfVxuICAgIC8vIEltcGxlbWVudGluZyB0b05vZGVzIG1ldGhvZFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdG9Ob2RlcyhvYmpzKSB7XG4gICAgICAgIHJldHVybiBvYmpzLm1hcCgob2JqKT0+dGhpcy50b05vZGUob2JqKSk7XG4gICAgfVxuICAgIC8vIEltcGxlbWVudGluZyBmcm9tTm9kZSBtZXRob2RcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGZyb21Ob2RlKG5vZGUpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5fZnJvbU5vZGUobm9kZSk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVPYmplY3Qob2JqKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG59XG5jbGFzcyBPYmplY3RSZXRyaWV2ZXIge1xuICAgIGNvbnN0cnVjdG9yKHJldHJpZXZlciwgb2JqZWN0Tm9kZU1hcHBpbmcpe1xuICAgICAgICB0aGlzLl9yZXRyaWV2ZXIgPSByZXRyaWV2ZXI7XG4gICAgICAgIHRoaXMuX29iamVjdE5vZGVNYXBwaW5nID0gb2JqZWN0Tm9kZU1hcHBpbmc7XG4gICAgfVxuICAgIC8vIEluIFR5cGVTY3JpcHQsIGdldHRlcnMgYXJlIGRlZmluZWQgbGlrZSB0aGlzLlxuICAgIGdldCByZXRyaWV2ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXRyaWV2ZXI7XG4gICAgfVxuICAgIC8vIFRyYW5zbGF0aW5nIHRoZSByZXRyaWV2ZSBtZXRob2RcbiAgICBhc3luYyByZXRyaWV2ZShzdHJPclF1ZXJ5QnVuZGxlKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gYXdhaXQgdGhpcy5yZXRyaWV2ZXIucmV0cmlldmUoe1xuICAgICAgICAgICAgcXVlcnk6IGV4dHJhY3RUZXh0KHN0ck9yUXVlcnlCdW5kbGUpXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBvYmpzID0gbm9kZXMubWFwKChuKT0+dGhpcy5fb2JqZWN0Tm9kZU1hcHBpbmcuZnJvbU5vZGUobi5ub2RlKSk7XG4gICAgICAgIHJldHVybiBvYmpzO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQmFzZU9iamVjdE5vZGVNYXBwaW5nLCBPYmplY3RSZXRyaWV2ZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/objects/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/postprocessor/dist/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/postprocessor/dist/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptTemplate: () => (/* binding */ BasePromptTemplate),\n/* harmony export */   PromptMixin: () => (/* binding */ PromptMixin),\n/* harmony export */   PromptTemplate: () => (/* binding */ PromptTemplate),\n/* harmony export */   anthropicSummaryPrompt: () => (/* binding */ anthropicSummaryPrompt),\n/* harmony export */   anthropicTextQaPrompt: () => (/* binding */ anthropicTextQaPrompt),\n/* harmony export */   defaultChoiceSelectPrompt: () => (/* binding */ defaultChoiceSelectPrompt),\n/* harmony export */   defaultCondenseQuestionPrompt: () => (/* binding */ defaultCondenseQuestionPrompt),\n/* harmony export */   defaultContextSystemPrompt: () => (/* binding */ defaultContextSystemPrompt),\n/* harmony export */   defaultKeywordExtractPrompt: () => (/* binding */ defaultKeywordExtractPrompt),\n/* harmony export */   defaultNodeTextTemplate: () => (/* binding */ defaultNodeTextTemplate),\n/* harmony export */   defaultQueryKeywordExtractPrompt: () => (/* binding */ defaultQueryKeywordExtractPrompt),\n/* harmony export */   defaultQuestionExtractPrompt: () => (/* binding */ defaultQuestionExtractPrompt),\n/* harmony export */   defaultRefinePrompt: () => (/* binding */ defaultRefinePrompt),\n/* harmony export */   defaultSubQuestionPrompt: () => (/* binding */ defaultSubQuestionPrompt),\n/* harmony export */   defaultSummaryPrompt: () => (/* binding */ defaultSummaryPrompt),\n/* harmony export */   defaultTextQAPrompt: () => (/* binding */ defaultTextQAPrompt),\n/* harmony export */   defaultTitleCombinePromptTemplate: () => (/* binding */ defaultTitleCombinePromptTemplate),\n/* harmony export */   defaultTitleExtractorPromptTemplate: () => (/* binding */ defaultTitleExtractorPromptTemplate),\n/* harmony export */   defaultTreeSummarizePrompt: () => (/* binding */ defaultTreeSummarizePrompt)\n/* harmony export */ });\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n\n\n\n/**\n * MIT License\n *\n * Copyright (c) 2019 jhonararipe\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */ \nfunction formatImpl(...args_) {\n    // Create variables\n    let self = this;\n    const __patterns__ = self.match(/({.*?})/g);\n    const { REF, FILL_CHAR, MASK_NUMBER, ALIGN_OP, CROP_SIZE, FRACTION, TYPE_VAR } = {\n        REF: 1,\n        FILL_CHAR: 2,\n        MASK_NUMBER: 3,\n        ALIGN_OP: 4,\n        CROP_SIZE: 5,\n        FRACTION: 7,\n        TYPE_VAR: 8\n    };\n    const DEFAULT_PLACE = 6;\n    const ALL_REGEXP = /{(\\w+)?:([^>\\^<\\d#]|0)?([#%,])?([>^<\\.])?(\\d+)?(\\.)?(\\d+)?([eEfFgGdxXobn#%])?}/g;\n    const regExpBasic = /{\\[?(\\w+)\\]?}/; // it's not best solution\n    const isObject = typeof args_[0] === \"object\";\n    // types/use logic\n    __patterns__?.map((pattern, patt_index)=>{\n        const kargs = ALL_REGEXP.exec(pattern) || ALL_REGEXP.exec(pattern);\n        const wargs = regExpBasic.exec(pattern);\n        // Insert values (one 2 one / array / object)\n        const INDEX_VAR = (wargs ? wargs[REF] : kargs ? kargs[REF] : patt_index) || patt_index;\n        // @ts-expect-error\n        const NATUAL_VALUE = isObject ? args_[0][INDEX_VAR] : args_[INDEX_VAR];\n        // @ts-expect-error\n        let ACTUAL_VALUE = isObject ? args_[0][INDEX_VAR] : args_[INDEX_VAR];\n        // Verify sintax/semantic\n        if (ACTUAL_VALUE === null || ACTUAL_VALUE === undefined) throw new Error(`Replacement index ${INDEX_VAR} out of range for positional args tuple`);\n        if (kargs) {\n            // If TYPE_VAR is not defined and the first argument is a number, pad a string should from left, so set TYPE_VAR to \"d\"\n            if (kargs[TYPE_VAR] === undefined && typeof ACTUAL_VALUE === \"number\") {\n                kargs[TYPE_VAR] = \"d\";\n            }\n            const LETTER = (!kargs[FILL_CHAR] ? false : !kargs[ALIGN_OP] && [\n                ...\"FfbefoxXn\"\n            ].includes(kargs[FILL_CHAR].toLowerCase()) ? kargs[FILL_CHAR] : kargs[TYPE_VAR]) || kargs[TYPE_VAR];\n            //  padronaze\n            if (LETTER) {\n                const floatSize = pattern.includes(\".\") ? Number(kargs[FRACTION] || kargs[CROP_SIZE]) : DEFAULT_PLACE;\n                switch(LETTER){\n                    case \"E\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toExponential(DEFAULT_PLACE).toUpperCase();\n                        break;\n                    case \"e\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toExponential(DEFAULT_PLACE);\n                        break;\n                    case \"X\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toString(16).toUpperCase();\n                        break;\n                    case \"x\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toString(16); // Hexadecimal\n                        break;\n                    case \"b\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toString(2); // Binary\n                        break;\n                    case \"f\":\n                    case \"F\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toFixed(floatSize);\n                        break;\n                    case \"o\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.toString(8); // Octal\n                        break;\n                }\n                //  mask\n                switch(kargs[MASK_NUMBER]){\n                    case \"#\":\n                        const MASK = {\n                            x: \"0x\",\n                            X: \"0X\",\n                            o: \"0o\",\n                            b: \"0b\"\n                        }[LETTER];\n                        ACTUAL_VALUE = MASK + ACTUAL_VALUE;\n                        break;\n                }\n            }\n            // signal\n            if (// @ts-expect-error\n            [\n                ...\" +-,%\"\n            ].includes(kargs[FILL_CHAR]) && typeof NATUAL_VALUE === \"number\") {\n                ACTUAL_VALUE = ACTUAL_VALUE.toString().replace(\"-\", \"\");\n                if (NATUAL_VALUE >= 0) switch(kargs[FILL_CHAR]){\n                    case \"+\":\n                        ACTUAL_VALUE = \"+\" + ACTUAL_VALUE;\n                        break;\n                    case \" \":\n                        ACTUAL_VALUE = \" \" + ACTUAL_VALUE;\n                        break;\n                    case \",\":\n                        ACTUAL_VALUE = NATUAL_VALUE.toString().split(/(?=(?:...)*$)/).join(kargs[FILL_CHAR]);\n                        break;\n                    case \"%\":\n                        ACTUAL_VALUE = (NATUAL_VALUE * 100).toFixed(// @ts-expect-error\n                        kargs[FRACTION] || DEFAULT_PLACE) + \"%\";\n                        break;\n                }\n                else ACTUAL_VALUE = \"-\" + ACTUAL_VALUE;\n            }\n            // space / order / trim\n            if (kargs[CROP_SIZE]) {\n                ACTUAL_VALUE = ACTUAL_VALUE.toString();\n                const FILL_ELEMENT = kargs[FILL_CHAR] || \" \";\n                const SIZE_STRING = ACTUAL_VALUE.length;\n                const SIZE_ARG = kargs[CROP_SIZE];\n                const FILL_LENGTH = SIZE_STRING > SIZE_ARG ? SIZE_STRING : SIZE_ARG;\n                const FILL = FILL_ELEMENT.repeat(FILL_LENGTH);\n                switch(kargs[ALIGN_OP] || kargs[FILL_CHAR]){\n                    case \"<\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.padEnd(FILL_LENGTH, FILL_ELEMENT);\n                        break;\n                    case \".\":\n                        if (!(LETTER && /[fF]/.test(LETTER))) ACTUAL_VALUE = ACTUAL_VALUE.slice(0, SIZE_ARG);\n                        break;\n                    case \">\":\n                        ACTUAL_VALUE = ACTUAL_VALUE.padStart(FILL_LENGTH, FILL_ELEMENT);\n                        break;\n                    case \"^\":\n                        const length_start = Math.floor((FILL_LENGTH - SIZE_STRING) / 2);\n                        const string_start = length_start > 0 ? FILL_ELEMENT.repeat(length_start) + ACTUAL_VALUE : ACTUAL_VALUE;\n                        ACTUAL_VALUE = FILL.replace(RegExp(`.{${string_start.length}}`), string_start);\n                        break;\n                    default:\n                        ACTUAL_VALUE = LETTER ? ACTUAL_VALUE.padStart(FILL_LENGTH, FILL_ELEMENT) : ACTUAL_VALUE.padEnd(FILL_LENGTH, FILL_ELEMENT);\n                        break;\n                }\n            }\n        }\n        // SET Definitive value\n        self = self.replace(pattern, ACTUAL_VALUE);\n    });\n    return self;\n}\nconst format = (inputString, ...param)=>formatImpl.apply(inputString, param);\n\nconst promptType = {\n    SUMMARY: \"summary\",\n    TREE_INSERT: \"insert\",\n    TREE_SELECT: \"tree_select\",\n    TREE_SELECT_MULTIPLE: \"tree_select_multiple\",\n    QUESTION_ANSWER: \"text_qa\",\n    REFINE: \"refine\",\n    KEYWORD_EXTRACT: \"keyword_extract\",\n    QUERY_KEYWORD_EXTRACT: \"query_keyword_extract\",\n    SCHEMA_EXTRACT: \"schema_extract\",\n    TEXT_TO_SQL: \"text_to_sql\",\n    TEXT_TO_GRAPH_QUERY: \"text_to_graph_query\",\n    TABLE_CONTEXT: \"table_context\",\n    KNOWLEDGE_TRIPLET_EXTRACT: \"knowledge_triplet_extract\",\n    SIMPLE_INPUT: \"simple_input\",\n    PANDAS: \"pandas\",\n    JSON_PATH: \"json_path\",\n    SINGLE_SELECT: \"single_select\",\n    MULTI_SELECT: \"multi_select\",\n    VECTOR_STORE_QUERY: \"vector_store_query\",\n    SUB_QUESTION: \"sub_question\",\n    SQL_RESPONSE_SYNTHESIS: \"sql_response_synthesis\",\n    SQL_RESPONSE_SYNTHESIS_V2: \"sql_response_synthesis_v2\",\n    CONVERSATION: \"conversation\",\n    DECOMPOSE: \"decompose\",\n    CHOICE_SELECT: \"choice_select\",\n    CUSTOM: \"custom\",\n    RANKGPT_RERANK: \"rankgpt_rerank\"\n};\nconst promptTypeSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.enum([\n    promptType.SUMMARY,\n    promptType.TREE_INSERT,\n    promptType.TREE_SELECT,\n    promptType.TREE_SELECT_MULTIPLE,\n    promptType.QUESTION_ANSWER,\n    promptType.REFINE,\n    promptType.KEYWORD_EXTRACT,\n    promptType.QUERY_KEYWORD_EXTRACT,\n    promptType.SCHEMA_EXTRACT,\n    promptType.TEXT_TO_SQL,\n    promptType.TEXT_TO_GRAPH_QUERY,\n    promptType.TABLE_CONTEXT,\n    promptType.KNOWLEDGE_TRIPLET_EXTRACT,\n    promptType.SIMPLE_INPUT,\n    promptType.PANDAS,\n    promptType.JSON_PATH,\n    promptType.SINGLE_SELECT,\n    promptType.MULTI_SELECT,\n    promptType.VECTOR_STORE_QUERY,\n    promptType.SUB_QUESTION,\n    promptType.SQL_RESPONSE_SYNTHESIS,\n    promptType.SQL_RESPONSE_SYNTHESIS_V2,\n    promptType.CONVERSATION,\n    promptType.DECOMPOSE,\n    promptType.CHOICE_SELECT,\n    promptType.CUSTOM,\n    promptType.RANKGPT_RERANK\n]);\nconst PromptType = promptTypeSchema.enum;\n\nclass BasePromptTemplate {\n    constructor(options){\n        this.metadata = {};\n        /**\n   * Set of template variables used in the prompt template. Used for type hints only.\n   * To get the list of template variables used in the prompt at run-time, use the `vars` method.\n   */ this.templateVars = new Set();\n        this.options = {};\n        this.templateVarMappings = {};\n        this.functionMappings = {};\n        const { metadata, templateVars, outputParser, templateVarMappings, functionMappings } = options;\n        if (metadata) {\n            this.metadata = metadata;\n        }\n        if (templateVars) {\n            this.templateVars = new Set(templateVars);\n        }\n        if (options.options) {\n            this.options = options.options;\n        }\n        this.outputParser = outputParser;\n        if (templateVarMappings) {\n            this.templateVarMappings = templateVarMappings;\n        }\n        if (functionMappings) {\n            this.functionMappings = functionMappings;\n        }\n    }\n    mapTemplateVars(options) {\n        const templateVarMappings = this.templateVarMappings;\n        return Object.fromEntries((0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.objectEntries)(options).map(([k, v])=>[\n                templateVarMappings[k] || k,\n                v\n            ]));\n    }\n    mapFunctionVars(options) {\n        const functionMappings = this.functionMappings;\n        const newOptions = {};\n        for (const [k, v] of (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.objectEntries)(functionMappings)){\n            newOptions[k] = v(options);\n        }\n        for (const [k, v] of (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.objectEntries)(options)){\n            if (!(k in newOptions)) {\n                newOptions[k] = v;\n            }\n        }\n        return newOptions;\n    }\n    mapAllVars(options) {\n        const newOptions = this.mapFunctionVars(options);\n        return this.mapTemplateVars(newOptions);\n    }\n}\nclass PromptTemplate extends BasePromptTemplate {\n    #template;\n    constructor(options){\n        const { template, promptType, ...rest } = options;\n        super(rest);\n        this.#template = template;\n        this.promptType = promptType ?? PromptType.custom;\n    }\n    partialFormat(options) {\n        const prompt = new PromptTemplate({\n            template: this.template,\n            templateVars: [\n                ...this.templateVars\n            ],\n            options: this.options,\n            outputParser: this.outputParser,\n            templateVarMappings: this.templateVarMappings,\n            functionMappings: this.functionMappings,\n            metadata: this.metadata,\n            promptType: this.promptType\n        });\n        prompt.options = {\n            ...prompt.options,\n            ...options\n        };\n        return prompt;\n    }\n    format(options) {\n        const allOptions = {\n            ...this.options,\n            ...options\n        };\n        const mappedAllOptions = this.mapAllVars(allOptions);\n        const prompt = format(this.template, mappedAllOptions);\n        if (this.outputParser) {\n            return this.outputParser.format(prompt);\n        }\n        return prompt;\n    }\n    formatMessages(options) {\n        const prompt = this.format(options);\n        return [\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ];\n    }\n    get template() {\n        return this.#template;\n    }\n    /**\n   * Returns all the template variables used in the prompt template.\n   */ vars() {\n        const template = this.template;\n        const matches = template.match(/\\{([^}]+)\\}/g) || [];\n        return [\n            ...new Set(matches.map((match)=>match.slice(1, -1)))\n        ];\n    }\n}\n\nclass PromptMixin {\n    validatePrompts(promptsDict, moduleDict) {\n        for (const key of Object.keys(promptsDict)){\n            if (key.includes(\":\")) {\n                throw new Error(`Prompt key ${key} cannot contain ':'.`);\n            }\n        }\n        for (const key of Object.keys(moduleDict)){\n            if (key.includes(\":\")) {\n                throw new Error(`Module key ${key} cannot contain ':'.`);\n            }\n        }\n    }\n    getPrompts() {\n        const promptsDict = this._getPrompts();\n        const moduleDict = this._getPromptModules();\n        this.validatePrompts(promptsDict, moduleDict);\n        const allPrompts = {\n            ...promptsDict\n        };\n        for (const [module_name, prompt_module] of (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.objectEntries)(moduleDict)){\n            for (const [key, prompt] of (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.objectEntries)(prompt_module.getPrompts())){\n                allPrompts[`${module_name}:${key}`] = prompt;\n            }\n        }\n        return allPrompts;\n    }\n    updatePrompts(prompts) {\n        const promptModules = this._getPromptModules();\n        this._updatePrompts(prompts);\n        const subPrompt = {};\n        for(const key in prompts){\n            if (key.includes(\":\")) {\n                const [moduleName, subKey] = key.split(\":\");\n                if (!subPrompt[moduleName]) {\n                    subPrompt[moduleName] = {};\n                }\n                subPrompt[moduleName][subKey] = prompts[key];\n            }\n        }\n        for (const [moduleName, subPromptDict] of Object.entries(subPrompt)){\n            if (!promptModules[moduleName]) {\n                throw new Error(`Module ${moduleName} not found.`);\n            }\n            const moduleToUpdate = promptModules[moduleName];\n            moduleToUpdate.updatePrompts(subPromptDict);\n        }\n    }\n}\n\nconst defaultTextQAPrompt = new PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\"\n    ],\n    template: `Context information is below.\n---------------------\n{context}\n---------------------\nGiven the context information and not prior knowledge, answer the query.\nQuery: {query}\nAnswer:`\n});\nconst anthropicTextQaPrompt = new PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\"\n    ],\n    template: `Context information:\n<context>\n{context}\n</context>\nGiven the context information and not prior knowledge, answer the query.\nQuery: {query}`\n});\nconst defaultSummaryPrompt = new PromptTemplate({\n    templateVars: [\n        \"context\"\n    ],\n    template: `Write a summary of the following. Try to use only the information provided. Try to include as many key details as possible.\n\n\n{context}\n\n\nSUMMARY:\"\"\"\n`\n});\nconst anthropicSummaryPrompt = new PromptTemplate({\n    templateVars: [\n        \"context\"\n    ],\n    template: `Summarize the following text. Try to use only the information provided. Try to include as many key details as possible.\n<original-text>\n{context}\n</original-text>\n\nSUMMARY:\n`\n});\nconst defaultRefinePrompt = new PromptTemplate({\n    templateVars: [\n        \"query\",\n        \"existingAnswer\",\n        \"context\"\n    ],\n    template: `The original query is as follows: {query}\nWe have provided an existing answer: {existingAnswer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the query.\nIf the context isn't useful, return the original answer.\nRefined Answer:`\n});\nconst defaultTreeSummarizePrompt = new PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\"\n    ],\n    template: `Context information from multiple sources is below.\n---------------------\n{context}\n---------------------\nGiven the information from multiple sources and not prior knowledge, answer the query.\nQuery: {query}\nAnswer:`\n});\nconst defaultChoiceSelectPrompt = new PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"query\"\n    ],\n    template: `A list of documents is shown below. Each document has a number next to it along \nwith a summary of the document. A question is also provided.\nRespond with the numbers of the documents\nyou should consult to answer the question, in order of relevance, as well\nas the relevance score. The relevance score is a number from 1-10 based on\nhow relevant you think the document is to the question.\nDo not include any documents that are not relevant to the question.\nExample format:\nDocument 1:\n<summary of document 1>\n\nDocument 2:\n<summary of document 2>\n\n...\n\nDocument 10:\\n<summary of document 10>\n\nQuestion: <question>\nAnswer:\nDoc: 9, Relevance: 7\nDoc: 3, Relevance: 4\nDoc: 7, Relevance: 3\n\nLet's try this now:\n\n{context}\nQuestion: {query}\nAnswer:`\n});\nfunction buildToolsText(tools) {\n    const toolsObj = tools.reduce((acc, tool)=>{\n        acc[tool.name] = tool.description;\n        return acc;\n    }, {});\n    return JSON.stringify(toolsObj, null, 4);\n}\nconst exampleTools = [\n    {\n        name: \"uber_10k\",\n        description: \"Provides information about Uber financials for year 2021\"\n    },\n    {\n        name: \"lyft_10k\",\n        description: \"Provides information about Lyft financials for year 2021\"\n    }\n];\nconst exampleQueryStr = `Compare and contrast the revenue growth and EBITDA of Uber and Lyft for year 2021`;\nconst exampleOutput = [\n    {\n        subQuestion: \"What is the revenue growth of Uber\",\n        toolName: \"uber_10k\"\n    },\n    {\n        subQuestion: \"What is the EBITDA of Uber\",\n        toolName: \"uber_10k\"\n    },\n    {\n        subQuestion: \"What is the revenue growth of Lyft\",\n        toolName: \"lyft_10k\"\n    },\n    {\n        subQuestion: \"What is the EBITDA of Lyft\",\n        toolName: \"lyft_10k\"\n    }\n];\nconst defaultSubQuestionPrompt = new PromptTemplate({\n    templateVars: [\n        \"toolsStr\",\n        \"queryStr\"\n    ],\n    template: `Given a user question, and a list of tools, output a list of relevant sub-questions that when composed can help answer the full user question:\n\n# Example 1\n<Tools>\n\\`\\`\\`json\n${buildToolsText(exampleTools)}\n\\`\\`\\`\n\n<User Question>\n${exampleQueryStr}\n\n<Output>\n\\`\\`\\`json\n${JSON.stringify(exampleOutput, null, 4)}\n\\`\\`\\`\n\n# Example 2\n<Tools>\n\\`\\`\\`json\n{toolsStr}\n\\`\\`\\`\n\n<User Question>\n{queryStr}\n\n<Output>\n`\n});\nconst defaultCondenseQuestionPrompt = new PromptTemplate({\n    templateVars: [\n        \"chatHistory\",\n        \"question\"\n    ],\n    template: `Given a conversation (between Human and Assistant) and a follow up message from Human, rewrite the message to be a standalone question that captures all relevant context from the conversation.\n\n<Chat History>\n{chatHistory}\n\n<Follow Up Message>\n{question}\n\n<Standalone question>\n`\n});\nconst defaultContextSystemPrompt = new PromptTemplate({\n    templateVars: [\n        \"context\"\n    ],\n    template: `Context information is below.\n---------------------\n{context}\n---------------------`\n});\nconst defaultKeywordExtractPrompt = new PromptTemplate({\n    templateVars: [\n        \"maxKeywords\",\n        \"context\"\n    ],\n    template: `\nSome text is provided below. Given the text, extract up to {maxKeywords} keywords from the text. Avoid stopwords.\n---------------------\n{context}\n---------------------\nProvide keywords in the following comma-separated format: 'KEYWORDS: <keywords>'\n`\n}).partialFormat({\n    maxKeywords: \"10\"\n});\nconst defaultQueryKeywordExtractPrompt = new PromptTemplate({\n    templateVars: [\n        \"maxKeywords\",\n        \"question\"\n    ],\n    template: `(\n  \"A question is provided below. Given the question, extract up to {maxKeywords} \"\n  \"keywords from the text. Focus on extracting the keywords that we can use \"\n  \"to best lookup answers to the question. Avoid stopwords.\"\n  \"---------------------\"\n  \"{question}\"\n  \"---------------------\"\n  \"Provide keywords in the following comma-separated format: 'KEYWORDS: <keywords>'\"\n)`\n}).partialFormat({\n    maxKeywords: \"10\"\n});\nconst defaultQuestionExtractPrompt = new PromptTemplate({\n    templateVars: [\n        \"numQuestions\",\n        \"context\"\n    ],\n    template: `(\n  \"Given the contextual informations below, generate {numQuestions} questions this context can provides specific answers to which are unlikely to be found else where. Higher-level summaries of surrounding context may be provided as well. \"\n  \"Try using these summaries to generate better questions that this context can answer.\"\n  \"---------------------\"\n  \"{context}\"\n  \"---------------------\"\n  \"Provide questions in the following format: 'QUESTIONS: <questions>'\"\n)`\n}).partialFormat({\n    numQuestions: \"5\"\n});\nconst defaultTitleExtractorPromptTemplate = new PromptTemplate({\n    templateVars: [\n        \"context\"\n    ],\n    template: `{context}\nGive a title that summarizes all of the unique entities, titles or themes found in the context. \nTitle: `\n});\nconst defaultTitleCombinePromptTemplate = new PromptTemplate({\n    templateVars: [\n        \"context\"\n    ],\n    template: `{context} \nBased on the above candidate titles and contents, what is the comprehensive title for this document? \nTitle: `\n});\nnew PromptTemplate({\n    templateVars: [\n        \"context\",\n        \"numKeywords\"\n    ],\n    template: `{context}\nGive {numKeywords} unique keywords for this document. \nFormat as comma separated. \nKeywords: `\n}).partialFormat({\n    keywordCount: \"5\"\n});\nconst defaultNodeTextTemplate = new PromptTemplate({\n    templateVars: [\n        \"metadataStr\",\n        \"content\"\n    ],\n    template: `[Excerpt from document]\n{metadataStr}\nExcerpt:\n-----\n{content}\n-----\n`\n}).partialFormat({\n    metadataStr: \"\",\n    content: \"\"\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseQueryEngine: () => (/* binding */ BaseQueryEngine),\n/* harmony export */   RetrieverQueryEngine: () => (/* binding */ RetrieverQueryEngine)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../decorator/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../prompts/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _response_synthesizers_dist_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../response-synthesizers/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\n\n\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto;\nclass BaseQueryEngine extends _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.PromptMixin {\n    static{\n        ({ e: [_initProto] } = _apply_decs_2203_r(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.wrapEventCaller,\n                2,\n                \"query\"\n            ]\n        ], []));\n    }\n    constructor(...args){\n        super(...args), _initProto(this);\n    }\n    async retrieve(params) {\n        throw new Error(\"This query engine does not support retrieve, use query directly\");\n    }\n    async query(params) {\n        const { stream, query } = params;\n        const id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        const callbackManager = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.callbackManager;\n        callbackManager.dispatchEvent(\"query-start\", {\n            id,\n            query\n        });\n        const response = await this._query(query, stream);\n        callbackManager.dispatchEvent(\"query-end\", {\n            id,\n            response\n        });\n        return response;\n    }\n}\n\nclass RetrieverQueryEngine extends BaseQueryEngine {\n    constructor(retriever, responseSynthesizer, nodePostprocessors){\n        super();\n        this.retriever = retriever;\n        this.responseSynthesizer = responseSynthesizer || (0,_response_synthesizers_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.getResponseSynthesizer)(\"compact\");\n        this.nodePostprocessors = nodePostprocessors || [];\n    }\n    async _query(strOrQueryBundle, stream) {\n        const nodesWithScore = await this.retrieve(typeof strOrQueryBundle === \"string\" ? strOrQueryBundle : (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(strOrQueryBundle));\n        if (stream) {\n            return this.responseSynthesizer.synthesize({\n                query: typeof strOrQueryBundle === \"string\" ? {\n                    query: strOrQueryBundle\n                } : strOrQueryBundle,\n                nodes: nodesWithScore\n            }, true);\n        }\n        return this.responseSynthesizer.synthesize({\n            query: typeof strOrQueryBundle === \"string\" ? {\n                query: strOrQueryBundle\n            } : strOrQueryBundle,\n            nodes: nodesWithScore\n        });\n    }\n    _getPrompts() {\n        return {};\n    }\n    _updatePrompts() {}\n    _getPromptModules() {\n        return {\n            responseSynthesizer: this.responseSynthesizer\n        };\n    }\n    async applyNodePostprocessors(nodes, query) {\n        let nodesWithScore = nodes;\n        for (const postprocessor of this.nodePostprocessors){\n            nodesWithScore = await postprocessor.postprocessNodes(nodesWithScore, query);\n        }\n        return nodesWithScore;\n    }\n    async retrieve(query) {\n        const nodes = await this.retriever.retrieve(query);\n        const messageContent = typeof query === \"string\" ? query : query.query;\n        return await this.applyNodePostprocessors(nodes, messageContent);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/query-engine/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseSynthesizer: () => (/* binding */ BaseSynthesizer),\n/* harmony export */   CompactAndRefine: () => (/* binding */ CompactAndRefine),\n/* harmony export */   MultiModal: () => (/* binding */ MultiModal),\n/* harmony export */   Refine: () => (/* binding */ Refine),\n/* harmony export */   TreeSummarize: () => (/* binding */ TreeSummarize),\n/* harmony export */   createMessageContent: () => (/* binding */ createMessageContent),\n/* harmony export */   getResponseSynthesizer: () => (/* binding */ getResponseSynthesizer),\n/* harmony export */   responseModeSchema: () => (/* binding */ responseModeSchema)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _indices_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../indices/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/indices/dist/index.js\");\n/* harmony import */ var _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../prompts/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n\n\n\n\n\n\n\n\nclass BaseSynthesizer extends _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.PromptMixin {\n    constructor(options){\n        super();\n        this.llm = options.llm ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.llm;\n        this.promptHelper = options.promptHelper ?? _indices_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.PromptHelper.fromLLMMetadata(this.llm.metadata);\n    }\n    async synthesize(query, stream = false) {\n        const callbackManager = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager;\n        const id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        callbackManager.dispatchEvent(\"synthesize-start\", {\n            id,\n            query\n        });\n        let response;\n        if (query.nodes.length === 0) {\n            if (stream) {\n                response = _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(\"Empty Response\", true, []);\n            } else {\n                response = _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(\"Empty Response\", false, []);\n            }\n        } else {\n            const queryMessage = typeof query.query === \"string\" ? query.query : query.query.query;\n            response = await this.getResponse(queryMessage, query.nodes, stream);\n        }\n        callbackManager.dispatchEvent(\"synthesize-end\", {\n            id,\n            query,\n            response\n        });\n        return response;\n    }\n}\n\nasync function createContentPerModality(prompt, type, nodes, extraParams, metadataMode) {\n    switch(type){\n        case _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.ModalityType.TEXT:\n            return [\n                {\n                    type: \"text\",\n                    text: prompt.format({\n                        ...extraParams,\n                        context: nodes.map((r)=>r.getContent(metadataMode)).join(\"\\n\\n\")\n                    })\n                }\n            ];\n        case _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.ModalityType.IMAGE:\n            return Promise.all(nodes.map(async (node)=>{\n                return {\n                    type: \"image_url\",\n                    image_url: {\n                        url: await (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.imageToDataUrl)(node.image)\n                    }\n                };\n            }));\n        default:\n            return [];\n    }\n}\nasync function createMessageContent(prompt, nodes, extraParams = {}, metadataMode = _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.NONE) {\n    const content = [];\n    const nodeMap = (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.splitNodesByType)(nodes);\n    for(const type in nodeMap){\n        // for each retrieved modality type, create message content\n        const nodes = nodeMap[type];\n        if (nodes) {\n            content.push(...await createContentPerModality(prompt, type, nodes, extraParams, metadataMode));\n        }\n    }\n    return content;\n}\n\nconst responseModeSchema = zod__WEBPACK_IMPORTED_MODULE_6__.z.enum([\n    \"refine\",\n    \"compact\",\n    \"tree_summarize\",\n    \"multi_modal\"\n]);\n/**\n * A response builder that uses the query to ask the LLM generate a better response using multiple text chunks.\n */ class Refine extends BaseSynthesizer {\n    constructor(options){\n        super(options);\n        this.textQATemplate = options.textQATemplate ?? _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultTextQAPrompt;\n        this.refineTemplate = options.refineTemplate ?? _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultRefinePrompt;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _getPrompts() {\n        return {\n            textQATemplate: this.textQATemplate,\n            refineTemplate: this.refineTemplate\n        };\n    }\n    _updatePrompts(prompts) {\n        if (prompts.textQATemplate) {\n            this.textQATemplate = prompts.textQATemplate;\n        }\n        if (prompts.refineTemplate) {\n            this.refineTemplate = prompts.refineTemplate;\n        }\n    }\n    async getResponse(query, nodes, stream) {\n        let response = undefined;\n        const textChunks = nodes.map(({ node })=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.LLM));\n        for(let i = 0; i < textChunks.length; i++){\n            const text = textChunks[i];\n            const lastChunk = i === textChunks.length - 1;\n            if (!response) {\n                response = await this.giveResponseSingle(query, text, !!stream && lastChunk);\n            } else {\n                response = await this.refineResponseSingle(response, query, text, !!stream && lastChunk);\n            }\n        }\n        if (response === undefined) {\n            response = stream ? async function*() {\n                yield \"\";\n            }() : \"\";\n        }\n        if (typeof response === \"string\") {\n            return _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(response, false, nodes);\n        } else {\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)(response, (text)=>_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(text, true, nodes));\n        }\n    }\n    async giveResponseSingle(query, textChunk, stream) {\n        const textQATemplate = this.textQATemplate.partialFormat({\n            query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n        });\n        const textChunks = this.promptHelper.repack(textQATemplate, [\n            textChunk\n        ]);\n        let response = undefined;\n        for(let i = 0; i < textChunks.length; i++){\n            const chunk = textChunks[i];\n            const lastChunk = i === textChunks.length - 1;\n            if (!response) {\n                response = await this.complete({\n                    prompt: textQATemplate.format({\n                        context: chunk\n                    }),\n                    stream: stream && lastChunk\n                });\n            } else {\n                response = await this.refineResponseSingle(response, query, chunk, stream && lastChunk);\n            }\n        }\n        return response;\n    }\n    async refineResponseSingle(initialReponse, query, textChunk, stream) {\n        const refineTemplate = this.refineTemplate.partialFormat({\n            query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n        });\n        const textChunks = this.promptHelper.repack(refineTemplate, [\n            textChunk\n        ]);\n        let response = initialReponse;\n        for(let i = 0; i < textChunks.length; i++){\n            const chunk = textChunks[i];\n            const lastChunk = i === textChunks.length - 1;\n            response = await this.complete({\n                prompt: refineTemplate.format({\n                    context: chunk,\n                    existingAnswer: response\n                }),\n                stream: stream && lastChunk\n            });\n        }\n        return response;\n    }\n    async complete(params) {\n        if (params.stream) {\n            const response = await this.llm.complete({\n                ...params,\n                stream: true\n            });\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)(response, (chunk)=>chunk.text);\n        } else {\n            const response = await this.llm.complete({\n                ...params,\n                stream: false\n            });\n            return response.text;\n        }\n    }\n}\n/**\n * CompactAndRefine is a slight variation of Refine that first compacts the text chunks into the smallest possible number of chunks.\n */ class CompactAndRefine extends Refine {\n    async getResponse(query, nodes, stream) {\n        const textQATemplate = this.textQATemplate.partialFormat({\n            query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n        });\n        const refineTemplate = this.refineTemplate.partialFormat({\n            query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n        });\n        const textChunks = nodes.map(({ node })=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.LLM));\n        const maxPrompt = (0,_indices_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.getBiggestPrompt)([\n            textQATemplate,\n            refineTemplate\n        ]);\n        const newTexts = this.promptHelper.repack(maxPrompt, textChunks);\n        const newNodes = newTexts.map((text)=>new _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.TextNode({\n                text\n            }));\n        if (stream) {\n            const streamResponse = await super.getResponse(query, newNodes.map((node)=>({\n                    node\n                })), true);\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)(streamResponse, (chunk)=>{\n                chunk.sourceNodes = nodes;\n                return chunk;\n            });\n        }\n        const originalResponse = await super.getResponse(query, newNodes.map((node)=>({\n                node\n            })), false);\n        originalResponse.sourceNodes = nodes;\n        return originalResponse;\n    }\n}\n/**\n * TreeSummarize repacks the text chunks into the smallest possible number of chunks and then summarizes them, then recursively does so until there's one chunk left.\n */ class TreeSummarize extends BaseSynthesizer {\n    constructor(options){\n        super(options);\n        this.summaryTemplate = options.summaryTemplate ?? _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultTreeSummarizePrompt;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _getPrompts() {\n        return {\n            summaryTemplate: this.summaryTemplate\n        };\n    }\n    _updatePrompts(prompts) {\n        if (prompts.summaryTemplate) {\n            this.summaryTemplate = prompts.summaryTemplate;\n        }\n    }\n    async getResponse(query, nodes, stream) {\n        const textChunks = nodes.map(({ node })=>node.getContent(_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.LLM));\n        if (!textChunks || textChunks.length === 0) {\n            throw new Error(\"Must have at least one text chunk\");\n        }\n        // Should we send the query here too?\n        const packedTextChunks = this.promptHelper.repack(this.summaryTemplate, textChunks);\n        if (packedTextChunks.length === 1) {\n            const params = {\n                prompt: this.summaryTemplate.format({\n                    context: packedTextChunks[0],\n                    query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n                })\n            };\n            if (stream) {\n                const response = await this.llm.complete({\n                    ...params,\n                    stream\n                });\n                return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)(response, (chunk)=>_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(chunk.text, true, nodes));\n            }\n            return _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse((await this.llm.complete(params)).text, false, nodes);\n        } else {\n            const summaries = await Promise.all(packedTextChunks.map((chunk)=>this.llm.complete({\n                    prompt: this.summaryTemplate.format({\n                        context: chunk,\n                        query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n                    })\n                })));\n            if (stream) {\n                return this.getResponse(query, summaries.map((s)=>({\n                        node: new _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.TextNode({\n                            text: s.text\n                        })\n                    })), true);\n            }\n            return this.getResponse(query, summaries.map((s)=>({\n                    node: new _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.TextNode({\n                        text: s.text\n                    })\n                })), false);\n        }\n    }\n}\nclass MultiModal extends BaseSynthesizer {\n    constructor({ textQATemplate, metadataMode, ...options } = {}){\n        super(options);\n        this.metadataMode = metadataMode ?? _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.MetadataMode.NONE;\n        this.textQATemplate = textQATemplate ?? _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.defaultTextQAPrompt;\n    }\n    _getPromptModules() {\n        return {};\n    }\n    _getPrompts() {\n        return {\n            textQATemplate: this.textQATemplate\n        };\n    }\n    _updatePrompts(promptsDict) {\n        if (promptsDict.textQATemplate) {\n            this.textQATemplate = promptsDict.textQATemplate;\n        }\n    }\n    async getResponse(query, nodes, stream) {\n        const prompt = await createMessageContent(this.textQATemplate, nodes.map(({ node })=>node), // this might not be good as this remove the image information\n        {\n            query: (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.extractText)(query)\n        }, this.metadataMode);\n        const llm = this.llm;\n        if (stream) {\n            const response = await llm.complete({\n                prompt,\n                stream\n            });\n            return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_5__.streamConverter)(response, ({ text })=>_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(text, true, nodes));\n        }\n        const response = await llm.complete({\n            prompt\n        });\n        return _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_4__.EngineResponse.fromResponse(response.text, false, nodes);\n    }\n}\nconst modeToSynthesizer = {\n    compact: CompactAndRefine,\n    refine: Refine,\n    tree_summarize: TreeSummarize,\n    multi_modal: MultiModal\n};\nfunction getResponseSynthesizer(mode, options = {}) {\n    const Synthesizer = modeToSynthesizer[mode];\n    if (!Synthesizer) {\n        throw new Error(`Invalid response mode: ${mode}`);\n    }\n    return new Synthesizer(options);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/response-synthesizers/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRetriever: () => (/* binding */ BaseRetriever)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../prompts/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n\n\n\nclass BaseRetriever extends _prompts_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.PromptMixin {\n    _updatePrompts() {}\n    _getPrompts() {\n        return {};\n    }\n    _getPromptModules() {\n        return {};\n    }\n    constructor(){\n        super(), this.objectMap = new Map();\n    }\n    async retrieve(params) {\n        const cb = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.Settings.callbackManager;\n        const queryBundle = typeof params === \"string\" ? {\n            query: params\n        } : params;\n        const id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        cb.dispatchEvent(\"retrieve-start\", {\n            id,\n            query: queryBundle\n        });\n        let response = await this._retrieve(queryBundle);\n        response = await this._handleRecursiveRetrieval(queryBundle, response);\n        cb.dispatchEvent(\"retrieve-end\", {\n            id,\n            query: queryBundle,\n            nodes: response\n        });\n        return response;\n    }\n    async _handleRecursiveRetrieval(params, nodes) {\n        const retrievedNodes = [];\n        for (const { node, score = 1.0 } of nodes){\n            if (node.type === _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.ObjectType.INDEX) {\n                const indexNode = node;\n                const object = this.objectMap.get(indexNode.indexId);\n                if (object !== undefined) {\n                    retrievedNodes.push(...this._retrieveFromObject(object, params, score));\n                } else {\n                    retrievedNodes.push({\n                        node,\n                        score\n                    });\n                }\n            } else {\n                retrievedNodes.push({\n                    node,\n                    score\n                });\n            }\n        }\n        return nodes;\n    }\n    _retrieveFromObject(object, queryBundle, score) {\n        if (object == null) {\n            throw new TypeError(\"Object is not retrievable\");\n        }\n        if (typeof object !== \"object\") {\n            throw new TypeError(\"Object is not retrievable\");\n        }\n        if (\"node\" in object && object.node instanceof _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.BaseNode) {\n            return [\n                {\n                    node: object.node,\n                    score: \"score\" in object && typeof object.score === \"number\" ? object.score : score\n                }\n            ];\n        }\n        if (object instanceof _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.BaseNode) {\n            return [\n                {\n                    node: object,\n                    score\n                }\n            ];\n        } else {\n            // todo: support other types\n            // BaseQueryEngine\n            // BaseRetriever\n            // QueryComponent\n            throw new TypeError(\"Object is not retrievable\");\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9yZXRyaWV2ZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2QztBQUNTO0FBQ0k7QUFDUTs7QUFFbEUsNEJBQTRCLCtEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMkRBQVE7QUFDM0I7QUFDQTtBQUNBLFVBQVU7QUFDVixtQkFBbUIsMkRBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekMsOEJBQThCLDZEQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCwyREFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwyREFBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUIiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9yZXRyaWV2ZXIvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnQGxsYW1haW5kZXgvZW52JztcbmltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi4vLi4vZ2xvYmFsL2Rpc3QvaW5kZXguanMnO1xuaW1wb3J0IHsgUHJvbXB0TWl4aW4gfSBmcm9tICcuLi8uLi9wcm9tcHRzL2Rpc3QvaW5kZXguanMnO1xuaW1wb3J0IHsgT2JqZWN0VHlwZSwgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9zY2hlbWEvZGlzdC9pbmRleC5qcyc7XG5cbmNsYXNzIEJhc2VSZXRyaWV2ZXIgZXh0ZW5kcyBQcm9tcHRNaXhpbiB7XG4gICAgX3VwZGF0ZVByb21wdHMoKSB7fVxuICAgIF9nZXRQcm9tcHRzKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIF9nZXRQcm9tcHRNb2R1bGVzKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCksIHRoaXMub2JqZWN0TWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBhc3luYyByZXRyaWV2ZShwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgY2IgPSBTZXR0aW5ncy5jYWxsYmFja01hbmFnZXI7XG4gICAgICAgIGNvbnN0IHF1ZXJ5QnVuZGxlID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJzdHJpbmdcIiA/IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBwYXJhbXNcbiAgICAgICAgfSA6IHBhcmFtcztcbiAgICAgICAgY29uc3QgaWQgPSByYW5kb21VVUlEKCk7XG4gICAgICAgIGNiLmRpc3BhdGNoRXZlbnQoXCJyZXRyaWV2ZS1zdGFydFwiLCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeUJ1bmRsZVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fcmV0cmlldmUocXVlcnlCdW5kbGUpO1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2hhbmRsZVJlY3Vyc2l2ZVJldHJpZXZhbChxdWVyeUJ1bmRsZSwgcmVzcG9uc2UpO1xuICAgICAgICBjYi5kaXNwYXRjaEV2ZW50KFwicmV0cmlldmUtZW5kXCIsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5QnVuZGxlLFxuICAgICAgICAgICAgbm9kZXM6IHJlc3BvbnNlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGFzeW5jIF9oYW5kbGVSZWN1cnNpdmVSZXRyaWV2YWwocGFyYW1zLCBub2Rlcykge1xuICAgICAgICBjb25zdCByZXRyaWV2ZWROb2RlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbm9kZSwgc2NvcmUgPSAxLjAgfSBvZiBub2Rlcyl7XG4gICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSBPYmplY3RUeXBlLklOREVYKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXhOb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmplY3QgPSB0aGlzLm9iamVjdE1hcC5nZXQoaW5kZXhOb2RlLmluZGV4SWQpO1xuICAgICAgICAgICAgICAgIGlmIChvYmplY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXRyaWV2ZWROb2Rlcy5wdXNoKC4uLnRoaXMuX3JldHJpZXZlRnJvbU9iamVjdChvYmplY3QsIHBhcmFtcywgc2NvcmUpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXRyaWV2ZWROb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29yZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHJpZXZlZE5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICBzY29yZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgX3JldHJpZXZlRnJvbU9iamVjdChvYmplY3QsIHF1ZXJ5QnVuZGxlLCBzY29yZSkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgaXMgbm90IHJldHJpZXZhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGlzIG5vdCByZXRyaWV2YWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJub2RlXCIgaW4gb2JqZWN0ICYmIG9iamVjdC5ub2RlIGluc3RhbmNlb2YgQmFzZU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBvYmplY3Qubm9kZSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcmU6IFwic2NvcmVcIiBpbiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5zY29yZSA9PT0gXCJudW1iZXJcIiA/IG9iamVjdC5zY29yZSA6IHNjb3JlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgQmFzZU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBvYmplY3QsXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRvZG86IHN1cHBvcnQgb3RoZXIgdHlwZXNcbiAgICAgICAgICAgIC8vIEJhc2VRdWVyeUVuZ2luZVxuICAgICAgICAgICAgLy8gQmFzZVJldHJpZXZlclxuICAgICAgICAgICAgLy8gUXVlcnlDb21wb25lbnRcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgaXMgbm90IHJldHJpZXZhYmxlXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBCYXNlUmV0cmlldmVyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/retriever/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseNode: () => (/* binding */ BaseNode),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   EngineResponse: () => (/* binding */ EngineResponse),\n/* harmony export */   FileReader: () => (/* binding */ FileReader),\n/* harmony export */   ImageDocument: () => (/* binding */ ImageDocument),\n/* harmony export */   ImageNode: () => (/* binding */ ImageNode),\n/* harmony export */   IndexNode: () => (/* binding */ IndexNode),\n/* harmony export */   MetadataMode: () => (/* binding */ MetadataMode),\n/* harmony export */   ModalityType: () => (/* binding */ ModalityType),\n/* harmony export */   NodeRelationship: () => (/* binding */ NodeRelationship),\n/* harmony export */   ObjectType: () => (/* binding */ ObjectType),\n/* harmony export */   TextNode: () => (/* binding */ TextNode),\n/* harmony export */   TransformComponent: () => (/* binding */ TransformComponent),\n/* harmony export */   anyFunctionSchema: () => (/* binding */ anyFunctionSchema),\n/* harmony export */   baseToolSchema: () => (/* binding */ baseToolSchema),\n/* harmony export */   baseToolWithCallSchema: () => (/* binding */ baseToolWithCallSchema),\n/* harmony export */   buildNodeFromSplits: () => (/* binding */ buildNodeFromSplits),\n/* harmony export */   jsonToNode: () => (/* binding */ jsonToNode),\n/* harmony export */   sentenceSplitterSchema: () => (/* binding */ sentenceSplitterSchema),\n/* harmony export */   sentenceWindowNodeParserSchema: () => (/* binding */ sentenceWindowNodeParserSchema),\n/* harmony export */   splitNodesByType: () => (/* binding */ splitNodesByType),\n/* harmony export */   toolMetadataSchema: () => (/* binding */ toolMetadataSchema)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../decorator/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n\n\n\n\n\nfunction chunkSizeCheck(contentGetter, _context) {\n    return function(...args) {\n        const content = contentGetter.call(this, ...args);\n        const chunkSize = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.chunkSize;\n        const enableChunkSizeCheck = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)(\"ENABLE_CHUNK_SIZE_CHECK\") === \"true\";\n        if (enableChunkSizeCheck && chunkSize !== undefined && content.length > chunkSize) {\n            console.warn(`Node (${this.id_}) is larger than chunk size: ${content.length} > ${chunkSize}`);\n            {\n                console.warn(\"Will truncate the content if it is larger than chunk size\");\n                console.warn(\"If you want to disable this behavior:\");\n                console.warn(\"  1. Set Settings.chunkSize = undefined\");\n                console.warn(\"  2. Set Settings.chunkSize to a larger value\");\n                console.warn(\"  3. Change the way of splitting content into smaller chunks\");\n            }\n            return content.slice(0, chunkSize);\n        }\n        return content;\n    };\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _init_hash, _initProto, _initProto1;\nvar NodeRelationship = /*#__PURE__*/ function(NodeRelationship) {\n    NodeRelationship[\"SOURCE\"] = \"SOURCE\";\n    NodeRelationship[\"PREVIOUS\"] = \"PREVIOUS\";\n    NodeRelationship[\"NEXT\"] = \"NEXT\";\n    NodeRelationship[\"PARENT\"] = \"PARENT\";\n    NodeRelationship[\"CHILD\"] = \"CHILD\";\n    return NodeRelationship;\n}({});\nvar ObjectType = /*#__PURE__*/ function(ObjectType) {\n    ObjectType[\"TEXT\"] = \"TEXT\";\n    ObjectType[\"IMAGE\"] = \"IMAGE\";\n    ObjectType[\"INDEX\"] = \"INDEX\";\n    ObjectType[\"DOCUMENT\"] = \"DOCUMENT\";\n    ObjectType[\"IMAGE_DOCUMENT\"] = \"IMAGE_DOCUMENT\";\n    return ObjectType;\n}({});\nvar MetadataMode = /*#__PURE__*/ function(MetadataMode) {\n    MetadataMode[\"ALL\"] = \"ALL\";\n    MetadataMode[\"EMBED\"] = \"EMBED\";\n    MetadataMode[\"LLM\"] = \"LLM\";\n    MetadataMode[\"NONE\"] = \"NONE\";\n    return MetadataMode;\n}({});\n/**\n * Generic abstract class for retrievable nodes\n */ class BaseNode {\n    static{\n        ({ e: [_init_hash, _initProto] } = _apply_decs_2203_r(this, [\n            [\n                _decorator_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.lazyInitHash,\n                1,\n                \"hash\"\n            ]\n        ], []));\n    }\n    #___private_hash_1;\n    get hash() {\n        return this.#___private_hash_1;\n    }\n    set hash(_v) {\n        this.#___private_hash_1 = _v;\n    }\n    constructor(init){\n        this.#___private_hash_1 = (_initProto(this), _init_hash(this, \"\"));\n        const { id_, metadata, excludedEmbedMetadataKeys, excludedLlmMetadataKeys, relationships, hash, embedding } = init || {};\n        this.id_ = id_ ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        this.metadata = metadata ?? {};\n        this.excludedEmbedMetadataKeys = excludedEmbedMetadataKeys ?? [];\n        this.excludedLlmMetadataKeys = excludedLlmMetadataKeys ?? [];\n        this.relationships = relationships ?? {};\n        this.embedding = embedding;\n    }\n    get sourceNode() {\n        const relationship = this.relationships[\"SOURCE\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Source object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get prevNode() {\n        const relationship = this.relationships[\"PREVIOUS\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Previous object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get nextNode() {\n        const relationship = this.relationships[\"NEXT\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Next object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get parentNode() {\n        const relationship = this.relationships[\"PARENT\"];\n        if (Array.isArray(relationship)) {\n            throw new Error(\"Parent object must be a single RelatedNodeInfo object\");\n        }\n        return relationship;\n    }\n    get childNodes() {\n        const relationship = this.relationships[\"CHILD\"];\n        if (!Array.isArray(relationship)) {\n            throw new Error(\"Child object must be a an array of RelatedNodeInfo objects\");\n        }\n        return relationship;\n    }\n    getEmbedding() {\n        if (this.embedding === undefined) {\n            throw new Error(\"Embedding not set\");\n        }\n        return this.embedding;\n    }\n    asRelatedNodeInfo() {\n        return {\n            nodeId: this.id_,\n            metadata: this.metadata,\n            hash: this.hash\n        };\n    }\n    /**\n   * Called by built in JSON.stringify (see https://javascript.info/json)\n   * Properties are read-only as they are not deep-cloned (not necessary for stringification).\n   * @see toMutableJSON - use to return a mutable JSON instead\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        return {\n            ...this,\n            type: this.type,\n            // hash is an accessor property, so it's not included in the rest operator\n            hash: this.hash\n        };\n    }\n    clone() {\n        return jsonToNode(this.toMutableJSON());\n    }\n    /**\n   * Converts the object to a JSON representation.\n   * Properties can be safely modified as a deep clone of the properties are created.\n   * @return {Record<string, any>} - The JSON representation of the object.\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toMutableJSON() {\n        return structuredClone(this.toJSON());\n    }\n}\n/**\n * TextNode is the default node type for text. Most common node type in LlamaIndex.TS\n */ class TextNode extends BaseNode {\n    static{\n        ({ e: [_initProto1] } = _apply_decs_2203_r(this, [\n            [\n                chunkSizeCheck,\n                2,\n                \"getContent\"\n            ]\n        ], []));\n    }\n    constructor(init = {}){\n        super(init), _initProto1(this);\n        const { text, textTemplate, startCharIdx, endCharIdx, metadataSeparator } = init;\n        this.text = text ?? \"\";\n        this.textTemplate = textTemplate ?? \"\";\n        if (startCharIdx) {\n            this.startCharIdx = startCharIdx;\n        }\n        if (endCharIdx) {\n            this.endCharIdx = endCharIdx;\n        }\n        this.metadataSeparator = metadataSeparator ?? \"\\n\";\n    }\n    /**\n   * Generate a hash of the text node.\n   * The ID is not part of the hash as it can change independent of content.\n   * @returns\n   */ generateHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        hashFunction.update(`type=${this.type}`);\n        hashFunction.update(`startCharIdx=${this.startCharIdx} endCharIdx=${this.endCharIdx}`);\n        hashFunction.update(this.getContent(\"ALL\"));\n        return hashFunction.digest();\n    }\n    get type() {\n        return \"TEXT\";\n    }\n    getContent(metadataMode = \"NONE\") {\n        const metadataStr = this.getMetadataStr(metadataMode).trim();\n        return `${metadataStr}\\n\\n${this.text}`.trim();\n    }\n    getMetadataStr(metadataMode) {\n        if (metadataMode === \"NONE\") {\n            return \"\";\n        }\n        const usableMetadataKeys = new Set(Object.keys(this.metadata).sort());\n        if (metadataMode === \"LLM\") {\n            for (const key of this.excludedLlmMetadataKeys){\n                usableMetadataKeys.delete(key);\n            }\n        } else if (metadataMode === \"EMBED\") {\n            for (const key of this.excludedEmbedMetadataKeys){\n                usableMetadataKeys.delete(key);\n            }\n        }\n        return [\n            ...usableMetadataKeys\n        ].map((key)=>`${key}: ${this.metadata[key]}`).join(this.metadataSeparator);\n    }\n    setContent(value) {\n        this.text = value;\n        this.hash = this.generateHash();\n    }\n    getNodeInfo() {\n        return {\n            start: this.startCharIdx,\n            end: this.endCharIdx\n        };\n    }\n    getText() {\n        return this.getContent(\"NONE\");\n    }\n}\nclass IndexNode extends TextNode {\n    constructor(init){\n        super(init);\n        const { indexId } = init || {};\n        this.indexId = indexId ?? \"\";\n    }\n    get type() {\n        return \"INDEX\";\n    }\n}\n/**\n * A document is just a special text node with a docId.\n */ class Document extends TextNode {\n    constructor(init){\n        super(init);\n    }\n    get type() {\n        return \"DOCUMENT\";\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonToNode(json, type) {\n    if (!json.type && !type) {\n        throw new Error(\"Node type not found\");\n    }\n    const nodeType = type || json.type;\n    switch(nodeType){\n        case \"TEXT\":\n            return new TextNode(json);\n        case \"INDEX\":\n            return new IndexNode(json);\n        case \"DOCUMENT\":\n            return new Document(json);\n        case \"IMAGE_DOCUMENT\":\n            return new ImageDocument(json);\n        default:\n            throw new Error(`Invalid node type: ${nodeType}`);\n    }\n}\nclass ImageNode extends TextNode {\n    constructor(init){\n        super(init);\n        const { image } = init;\n        this.image = image;\n    }\n    get type() {\n        return \"IMAGE\";\n    }\n    getUrl() {\n        // id_ stores the relative path, convert it to the URL of the file\n        const absPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.resolve(this.id_);\n        return new URL(`file://${absPath}`);\n    }\n    // Calculates the image part of the hash\n    generateImageHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        if (this.image instanceof Blob) {\n            // TODO: ideally we should use the blob's content to calculate the hash:\n            // hashFunction.update(new Uint8Array(await this.image.arrayBuffer()));\n            // as this is async, we're using the node's ID for the time being\n            hashFunction.update(this.id_);\n        } else if (this.image instanceof URL) {\n            hashFunction.update(this.image.toString());\n        } else if (typeof this.image === \"string\") {\n            hashFunction.update(this.image);\n        } else {\n            throw new Error(`Unknown image type: ${typeof this.image}. Can't calculate hash`);\n        }\n        return hashFunction.digest();\n    }\n    generateHash() {\n        const hashFunction = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.createSHA256)();\n        // calculates hash based on hash of both components (image and text)\n        hashFunction.update(super.generateHash());\n        hashFunction.update(this.generateImageHash());\n        return hashFunction.digest();\n    }\n}\nclass ImageDocument extends ImageNode {\n    constructor(init){\n        super(init);\n    }\n    get type() {\n        return \"IMAGE_DOCUMENT\";\n    }\n}\nvar ModalityType = /*#__PURE__*/ function(ModalityType) {\n    ModalityType[\"TEXT\"] = \"TEXT\";\n    ModalityType[\"IMAGE\"] = \"IMAGE\";\n    return ModalityType;\n}({});\nfunction splitNodesByType(nodes) {\n    const result = {};\n    for (const node of nodes){\n        let type;\n        if (node.type === \"IMAGE\" || node.type === \"IMAGE_DOCUMENT\") {\n            type = \"IMAGE\";\n        } else if (node.type === \"TEXT\" || node.type === \"DOCUMENT\" || node.type === \"INDEX\") {\n            type = \"TEXT\";\n        } else {\n            throw new Error(`Unknown node type: ${node.type}`);\n        }\n        if (type in result) {\n            result[type]?.push(node);\n        } else {\n            result[type] = [\n                node\n            ];\n        }\n    }\n    return result;\n}\nfunction buildNodeFromSplits(textSplits, doc, refDoc = doc, idGenerator = ()=>(0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)()) {\n    const nodes = [];\n    const relationships = {\n        [\"SOURCE\"]: refDoc.asRelatedNodeInfo()\n    };\n    textSplits.forEach((textChunk, i)=>{\n        if (doc.type === \"IMAGE\" || doc.type === \"IMAGE_DOCUMENT\") {\n            const imageDoc = doc;\n            const imageNode = new ImageNode({\n                id_: idGenerator(i, imageDoc),\n                text: textChunk,\n                image: imageDoc.image,\n                embedding: imageDoc.embedding,\n                excludedEmbedMetadataKeys: [\n                    ...imageDoc.excludedEmbedMetadataKeys\n                ],\n                excludedLlmMetadataKeys: [\n                    ...imageDoc.excludedLlmMetadataKeys\n                ],\n                metadataSeparator: imageDoc.metadataSeparator,\n                textTemplate: imageDoc.textTemplate,\n                relationships: {\n                    ...relationships\n                }\n            });\n            nodes.push(imageNode);\n        } else if (doc.type === \"DOCUMENT\" || doc.type === \"TEXT\") {\n            const textDoc = doc;\n            const node = new TextNode({\n                id_: idGenerator(i, textDoc),\n                text: textChunk,\n                embedding: textDoc.embedding,\n                excludedEmbedMetadataKeys: [\n                    ...textDoc.excludedEmbedMetadataKeys\n                ],\n                excludedLlmMetadataKeys: [\n                    ...textDoc.excludedLlmMetadataKeys\n                ],\n                metadataSeparator: textDoc.metadataSeparator,\n                textTemplate: textDoc.textTemplate,\n                relationships: {\n                    ...relationships\n                }\n            });\n            nodes.push(node);\n        } else {\n            throw new Error(`Unknown document type: ${doc.type}`);\n        }\n    });\n    return nodes;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TransformComponent {\n    constructor(transformFn){\n        Object.defineProperties(transformFn, Object.getOwnPropertyDescriptors(this.constructor.prototype));\n        const transform = function transform(...args) {\n            return transformFn(...args);\n        };\n        Reflect.setPrototypeOf(transform, new.target.prototype);\n        transform.id = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        return transform;\n    }\n}\n/**\n * A FileReader takes file paths and imports data into Document objects.\n */ class FileReader {\n    async loadData(filePath) {\n        const fileContent = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(filePath);\n        const filename = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(filePath);\n        const docs = await this.loadDataAsContent(fileContent, filename);\n        docs.forEach(FileReader.addMetaData(filePath));\n        return docs;\n    }\n    static addMetaData(filePath) {\n        return (doc, index)=>{\n            // generate id as loadDataAsContent is only responsible for the content\n            doc.id_ = `${filePath}_${index + 1}`;\n            doc.metadata[\"file_path\"] = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.resolve(filePath);\n            doc.metadata[\"file_name\"] = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.basename(filePath);\n        };\n    }\n}\n\nclass EngineResponse {\n    constructor(chatResponse, stream, sourceNodes){\n        this.metadata = {};\n        this.message = chatResponse.message;\n        this.raw = chatResponse.raw;\n        this.sourceNodes = sourceNodes;\n        this.stream = stream;\n    }\n    static fromResponse(response, stream, sourceNodes) {\n        return new EngineResponse(EngineResponse.toChatResponse(response), stream, sourceNodes);\n    }\n    static toChatResponse(response, raw = null) {\n        return {\n            message: {\n                content: response,\n                role: \"assistant\"\n            },\n            raw\n        };\n    }\n    static fromChatResponse(chatResponse, sourceNodes) {\n        return new EngineResponse(chatResponse, false, sourceNodes);\n    }\n    static fromChatResponseChunk(chunk, sourceNodes) {\n        return new EngineResponse(EngineResponse.toChatResponse(chunk.delta, chunk.raw), true, sourceNodes);\n    }\n    /**\n   * @deprecated Use `message` instead.\n   */ get response() {\n        return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.extractText)(this.message.content);\n    }\n    get delta() {\n        if (!this.stream) {\n            console.warn(\"delta is only available for streaming responses. Consider using 'message' instead.\");\n        }\n        return (0,_utils_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.extractText)(this.message.content);\n    }\n    toString() {\n        return this.response ?? \"\";\n    }\n}\n\nconst anyFunctionSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.function(zod__WEBPACK_IMPORTED_MODULE_4__.z.tuple([]).rest(zod__WEBPACK_IMPORTED_MODULE_4__.z.any()), zod__WEBPACK_IMPORTED_MODULE_4__.z.any());\nconst toolMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    description: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n    parameters: zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.any())\n});\nconst baseToolSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    call: anyFunctionSchema.optional(),\n    metadata: toolMetadataSchema\n});\nconst baseToolWithCallSchema = baseToolSchema.extend({\n    call: zod__WEBPACK_IMPORTED_MODULE_4__.z.function()\n});\nconst sentenceSplitterSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    chunkSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The token chunk size for each chunk.\"\n    }).gt(0).optional().default(()=>_global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Settings.chunkSize ?? 1024),\n    chunkOverlap: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The token overlap of each chunk when splitting.\"\n    }).gte(0).optional().default(200),\n    separator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Default separator for splitting into words\"\n    }).default(\" \"),\n    paragraphSeparator: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Separator between paragraphs.\"\n    }).optional().default(\"\\n\\n\\n\"),\n    secondaryChunkingRegex: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"Backup regex for splitting into sentences.\"\n    }).optional().default(\"[^,.;。？！]+[,.;。？！]?\")\n}).refine((data)=>data.chunkOverlap < data.chunkSize, \"Chunk overlap must be less than chunk size.\");\nconst sentenceWindowNodeParserSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    windowSize: zod__WEBPACK_IMPORTED_MODULE_4__.z.number({\n        description: \"The number of sentences on each side of a sentence to capture.\"\n    }).gt(0).default(3),\n    windowMetadataKey: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"The metadata key to store the sentence window under.\"\n    }).default(\"window\"),\n    originalTextMetadataKey: zod__WEBPACK_IMPORTED_MODULE_4__.z.string({\n        description: \"The metadata key to store the original sentence in.\"\n    }).default(\"originalText\")\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/chat-store/dist/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/storage/chat-store/dist/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatStore: () => (/* binding */ BaseChatStore),\n/* harmony export */   SimpleChatStore: () => (/* binding */ SimpleChatStore)\n/* harmony export */ });\nclass BaseChatStore {\n}\n\nclass SimpleChatStore extends BaseChatStore {\n    #store;\n    setMessages(key, messages) {\n        this.#store.set(key, messages);\n    }\n    getMessages(key) {\n        return this.#store.get(key) ?? [];\n    }\n    addMessage(key, message, idx) {\n        const messages = this.#store.get(key) ?? [];\n        if (idx === undefined) {\n            messages.push(message);\n        } else {\n            messages.splice(idx, 0, message);\n        }\n        this.#store.set(key, messages);\n    }\n    deleteMessages(key) {\n        this.#store.delete(key);\n    }\n    deleteMessage(key, idx) {\n        const messages = this.#store.get(key) ?? [];\n        messages.splice(idx, 1);\n        this.#store.set(key, messages);\n    }\n    getKeys() {\n        return this.#store.keys();\n    }\n    constructor(...args){\n        super(...args), this.#store = new Map();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2NoYXQtc3RvcmUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQyIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9jb3JlL3N0b3JhZ2UvY2hhdC1zdG9yZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEJhc2VDaGF0U3RvcmUge1xufVxuXG5jbGFzcyBTaW1wbGVDaGF0U3RvcmUgZXh0ZW5kcyBCYXNlQ2hhdFN0b3JlIHtcbiAgICAjc3RvcmU7XG4gICAgc2V0TWVzc2FnZXMoa2V5LCBtZXNzYWdlcykge1xuICAgICAgICB0aGlzLiNzdG9yZS5zZXQoa2V5LCBtZXNzYWdlcyk7XG4gICAgfVxuICAgIGdldE1lc3NhZ2VzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RvcmUuZ2V0KGtleSkgPz8gW107XG4gICAgfVxuICAgIGFkZE1lc3NhZ2Uoa2V5LCBtZXNzYWdlLCBpZHgpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB0aGlzLiNzdG9yZS5nZXQoa2V5KSA/PyBbXTtcbiAgICAgICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZXMuc3BsaWNlKGlkeCwgMCwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RvcmUuc2V0KGtleSwgbWVzc2FnZXMpO1xuICAgIH1cbiAgICBkZWxldGVNZXNzYWdlcyhrZXkpIHtcbiAgICAgICAgdGhpcy4jc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGRlbGV0ZU1lc3NhZ2Uoa2V5LCBpZHgpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB0aGlzLiNzdG9yZS5nZXQoa2V5KSA/PyBbXTtcbiAgICAgICAgbWVzc2FnZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIHRoaXMuI3N0b3JlLnNldChrZXksIG1lc3NhZ2VzKTtcbiAgICB9XG4gICAgZ2V0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3N0b3JlLmtleXMoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpLCB0aGlzLiNzdG9yZSA9IG5ldyBNYXAoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJhc2VDaGF0U3RvcmUsIFNpbXBsZUNoYXRTdG9yZSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/chat-store/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/doc-store/dist/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/storage/doc-store/dist/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentStore: () => (/* binding */ BaseDocumentStore),\n/* harmony export */   KVDocumentStore: () => (/* binding */ KVDocumentStore),\n/* harmony export */   docToJson: () => (/* binding */ docToJson),\n/* harmony export */   isValidDocJson: () => (/* binding */ isValidDocJson),\n/* harmony export */   jsonSerializer: () => (/* binding */ jsonSerializer),\n/* harmony export */   jsonToDoc: () => (/* binding */ jsonToDoc),\n/* harmony export */   noneSerializer: () => (/* binding */ noneSerializer)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n\n\nconst TYPE_KEY = \"__type__\";\nconst DATA_KEY = \"__data__\";\nconst jsonSerializer = {\n    toPersistence (data) {\n        return JSON.stringify(data);\n    },\n    fromPersistence (data) {\n        return JSON.parse(data);\n    }\n};\nconst noneSerializer = {\n    toPersistence (data) {\n        return data;\n    },\n    fromPersistence (data) {\n        return data;\n    }\n};\nfunction isValidDocJson(docJson) {\n    return typeof docJson === \"object\" && docJson !== null && docJson[TYPE_KEY] !== undefined && docJson[DATA_KEY] !== undefined;\n}\nfunction docToJson(doc, serializer) {\n    return {\n        [DATA_KEY]: serializer.toPersistence(doc.toJSON()),\n        [TYPE_KEY]: doc.type\n    };\n}\nfunction jsonToDoc(docDict, serializer) {\n    const docType = docDict[TYPE_KEY];\n    // fixme: zod type check this\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const dataDict = serializer.fromPersistence(docDict[DATA_KEY]);\n    let doc;\n    if (docType === _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ObjectType.DOCUMENT) {\n        doc = new _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.Document({\n            text: dataDict.text,\n            id_: dataDict.id_,\n            embedding: dataDict.embedding,\n            hash: dataDict.hash,\n            metadata: dataDict.metadata\n        });\n    } else if (docType === _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ObjectType.TEXT) {\n        doc = new _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.TextNode({\n            text: dataDict.text,\n            id_: dataDict.id_,\n            hash: dataDict.hash,\n            metadata: dataDict.metadata,\n            relationships: dataDict.relationships\n        });\n    } else {\n        throw new Error(`Unknown doc type: ${docType}`);\n    }\n    return doc;\n}\nconst DEFAULT_PERSIST_PATH = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.join(_global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PERSIST_DIR, _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_DOC_STORE_PERSIST_FILENAME);\nclass BaseDocumentStore {\n    // Save/load\n    persist(persistPath = DEFAULT_PERSIST_PATH) {\n    // Persist the docstore to a file.\n    }\n    // Nodes\n    getNodes(nodeIds, raiseError = true) {\n        return Promise.all(nodeIds.map((nodeId)=>this.getNode(nodeId, raiseError)));\n    }\n    async getNode(nodeId, raiseError = true) {\n        const doc = await this.getDocument(nodeId, raiseError);\n        if (!(doc instanceof _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.BaseNode)) {\n            throw new Error(`Document ${nodeId} is not a Node.`);\n        }\n        return doc;\n    }\n    async getNodeDict(nodeIdDict) {\n        const result = {};\n        for(const index in nodeIdDict){\n            result[index] = await this.getNode(nodeIdDict[index]);\n        }\n        return result;\n    }\n    constructor(){\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.serializer = jsonSerializer;\n    }\n}\n\nclass KVDocumentStore extends BaseDocumentStore {\n    constructor(kvstore, namespace = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_NAMESPACE){\n        super();\n        this.kvstore = kvstore;\n        this.nodeCollection = `${namespace}/data`;\n        this.refDocCollection = `${namespace}/ref_doc_info`;\n        this.metadataCollection = `${namespace}/metadata`;\n    }\n    async docs() {\n        const jsonDict = await this.kvstore.getAll(this.nodeCollection);\n        const docs = {};\n        for(const key in jsonDict){\n            const value = jsonDict[key];\n            if (isValidDocJson(value)) {\n                docs[key] = jsonToDoc(value, this.serializer);\n            } else {\n                console.warn(`Invalid JSON for docId ${key}`);\n            }\n        }\n        return docs;\n    }\n    async addDocuments(docs, allowUpdate = true) {\n        for(let idx = 0; idx < docs.length; idx++){\n            const doc = docs[idx];\n            if (doc.id_ === null) {\n                throw new Error(\"doc_id not set\");\n            }\n            if (!allowUpdate && await this.documentExists(doc.id_)) {\n                throw new Error(`doc_id ${doc.id_} already exists. Set allow_update to True to overwrite.`);\n            }\n            const nodeKey = doc.id_;\n            const data = docToJson(doc, this.serializer);\n            await this.kvstore.put(nodeKey, data, this.nodeCollection);\n            const metadata = {\n                docHash: doc.hash\n            };\n            if (doc.type === _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.ObjectType.TEXT && doc.sourceNode !== undefined) {\n                const refDocInfo = await this.getRefDocInfo(doc.sourceNode.nodeId) || {\n                    nodeIds: [],\n                    extraInfo: {}\n                };\n                refDocInfo.nodeIds.push(doc.id_);\n                if (Object.keys(refDocInfo.extraInfo).length === 0) {\n                    refDocInfo.extraInfo = {};\n                }\n                await this.kvstore.put(doc.sourceNode.nodeId, refDocInfo, this.refDocCollection);\n                metadata.refDocId = doc.sourceNode.nodeId;\n            }\n            await this.kvstore.put(nodeKey, metadata, this.metadataCollection);\n        }\n    }\n    async getDocument(docId, raiseError = true) {\n        const json = await this.kvstore.get(docId, this.nodeCollection);\n        if (this.isNil(json)) {\n            if (raiseError) {\n                throw new Error(`docId ${docId} not found.`);\n            } else {\n                return;\n            }\n        }\n        if (!isValidDocJson(json)) {\n            throw new Error(`Invalid JSON for docId ${docId}`);\n        }\n        return jsonToDoc(json, this.serializer);\n    }\n    async getRefDocInfo(refDocId) {\n        const refDocInfo = await this.kvstore.get(refDocId, this.refDocCollection);\n        return refDocInfo ? structuredClone(refDocInfo) : undefined;\n    }\n    async getAllRefDocInfo() {\n        const refDocInfos = await this.kvstore.getAll(this.refDocCollection);\n        if (this.isNil(refDocInfos)) {\n            return;\n        }\n        return refDocInfos;\n    }\n    async refDocExists(refDocId) {\n        return !this.isNil(await this.getRefDocInfo(refDocId));\n    }\n    async documentExists(docId) {\n        return !this.isNil(await this.kvstore.get(docId, this.nodeCollection));\n    }\n    async removeRefDocNode(docId) {\n        const metadata = await this.kvstore.get(docId, this.metadataCollection);\n        if (metadata === null) {\n            return;\n        }\n        const refDocId = metadata.refDocId;\n        if (this.isNil(refDocId)) {\n            return;\n        }\n        const refDocInfo = await this.kvstore.get(refDocId, this.refDocCollection);\n        if (!this.isNil(refDocInfo)) {\n            if (refDocInfo.nodeIds.length > 0) {\n                await this.kvstore.put(refDocId, refDocInfo, this.refDocCollection);\n            }\n            await this.kvstore.delete(refDocId, this.metadataCollection);\n        }\n    }\n    async deleteDocument(docId, raiseError = true, removeRefDocNode = true) {\n        if (removeRefDocNode) {\n            await this.removeRefDocNode(docId);\n        }\n        const deleteSuccess = await this.kvstore.delete(docId, this.nodeCollection);\n        await this.kvstore.delete(docId, this.metadataCollection);\n        if (!deleteSuccess && raiseError) {\n            throw new Error(`doc_id ${docId} not found.`);\n        }\n    }\n    async deleteRefDoc(refDocId, raiseError = true) {\n        const refDocInfo = await this.getRefDocInfo(refDocId);\n        if (this.isNil(refDocInfo)) {\n            if (raiseError) {\n                throw new Error(`ref_doc_id ${refDocId} not found.`);\n            } else {\n                return;\n            }\n        }\n        for (const docId of refDocInfo.nodeIds){\n            await this.deleteDocument(docId, false, false);\n        }\n        await this.kvstore.delete(refDocId, this.metadataCollection);\n        await this.kvstore.delete(refDocId, this.refDocCollection);\n    }\n    async setDocumentHash(docId, docHash) {\n        const metadata = {\n            docHash: docHash\n        };\n        await this.kvstore.put(docId, metadata, this.metadataCollection);\n    }\n    async getDocumentHash(docId) {\n        const metadata = await this.kvstore.get(docId, this.metadataCollection);\n        return metadata?.docHash;\n    }\n    async getAllDocumentHashes() {\n        const hashes = {};\n        const metadataDocs = await this.kvstore.getAll(this.metadataCollection);\n        for(const docId in metadataDocs){\n            const hash = await this.getDocumentHash(docId);\n            if (hash) {\n                hashes[hash] = docId;\n            }\n        }\n        return hashes;\n    }\n    isNil(value) {\n        return value === null || value === undefined;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2RvYy1zdG9yZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDb0Y7QUFDbEM7O0FBRXpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkRBQVU7QUFDOUIsa0JBQWtCLDJEQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTSxxQkFBcUIsNkRBQVU7QUFDckMsa0JBQWtCLDJEQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixpREFBSSxNQUFNLHNFQUFtQixFQUFFLHFGQUFrQztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDJEQUFRO0FBQ3JDLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxvRUFBaUI7QUFDdEQ7QUFDQTtBQUNBLGlDQUFpQyxVQUFVO0FBQzNDLG1DQUFtQyxVQUFVO0FBQzdDLHFDQUFxQyxVQUFVO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsdURBQXVELElBQUk7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxTQUFTO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDZEQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxPQUFPO0FBQ2hELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxNQUFNO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsT0FBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsVUFBVTtBQUN4RCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW9IIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvc3RvcmFnZS9kb2Mtc3RvcmUvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXRoIH0gZnJvbSAnQGxsYW1haW5kZXgvZW52JztcbmltcG9ydCB7IERFRkFVTFRfUEVSU0lTVF9ESVIsIERFRkFVTFRfRE9DX1NUT1JFX1BFUlNJU1RfRklMRU5BTUUsIERFRkFVTFRfTkFNRVNQQUNFIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsL2Rpc3QvaW5kZXguanMnO1xuaW1wb3J0IHsgT2JqZWN0VHlwZSwgRG9jdW1lbnQsIFRleHROb2RlLCBCYXNlTm9kZSB9IGZyb20gJy4uLy4uLy4uL3NjaGVtYS9kaXN0L2luZGV4LmpzJztcblxuY29uc3QgVFlQRV9LRVkgPSBcIl9fdHlwZV9fXCI7XG5jb25zdCBEQVRBX0tFWSA9IFwiX19kYXRhX19cIjtcbmNvbnN0IGpzb25TZXJpYWxpemVyID0ge1xuICAgIHRvUGVyc2lzdGVuY2UgKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH0sXG4gICAgZnJvbVBlcnNpc3RlbmNlIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH1cbn07XG5jb25zdCBub25lU2VyaWFsaXplciA9IHtcbiAgICB0b1BlcnNpc3RlbmNlIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0sXG4gICAgZnJvbVBlcnNpc3RlbmNlIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn07XG5mdW5jdGlvbiBpc1ZhbGlkRG9jSnNvbihkb2NKc29uKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkb2NKc29uID09PSBcIm9iamVjdFwiICYmIGRvY0pzb24gIT09IG51bGwgJiYgZG9jSnNvbltUWVBFX0tFWV0gIT09IHVuZGVmaW5lZCAmJiBkb2NKc29uW0RBVEFfS0VZXSAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZG9jVG9Kc29uKGRvYywgc2VyaWFsaXplcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIFtEQVRBX0tFWV06IHNlcmlhbGl6ZXIudG9QZXJzaXN0ZW5jZShkb2MudG9KU09OKCkpLFxuICAgICAgICBbVFlQRV9LRVldOiBkb2MudHlwZVxuICAgIH07XG59XG5mdW5jdGlvbiBqc29uVG9Eb2MoZG9jRGljdCwgc2VyaWFsaXplcikge1xuICAgIGNvbnN0IGRvY1R5cGUgPSBkb2NEaWN0W1RZUEVfS0VZXTtcbiAgICAvLyBmaXhtZTogem9kIHR5cGUgY2hlY2sgdGhpc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgZGF0YURpY3QgPSBzZXJpYWxpemVyLmZyb21QZXJzaXN0ZW5jZShkb2NEaWN0W0RBVEFfS0VZXSk7XG4gICAgbGV0IGRvYztcbiAgICBpZiAoZG9jVHlwZSA9PT0gT2JqZWN0VHlwZS5ET0NVTUVOVCkge1xuICAgICAgICBkb2MgPSBuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgdGV4dDogZGF0YURpY3QudGV4dCxcbiAgICAgICAgICAgIGlkXzogZGF0YURpY3QuaWRfLFxuICAgICAgICAgICAgZW1iZWRkaW5nOiBkYXRhRGljdC5lbWJlZGRpbmcsXG4gICAgICAgICAgICBoYXNoOiBkYXRhRGljdC5oYXNoLFxuICAgICAgICAgICAgbWV0YWRhdGE6IGRhdGFEaWN0Lm1ldGFkYXRhXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZG9jVHlwZSA9PT0gT2JqZWN0VHlwZS5URVhUKSB7XG4gICAgICAgIGRvYyA9IG5ldyBUZXh0Tm9kZSh7XG4gICAgICAgICAgICB0ZXh0OiBkYXRhRGljdC50ZXh0LFxuICAgICAgICAgICAgaWRfOiBkYXRhRGljdC5pZF8sXG4gICAgICAgICAgICBoYXNoOiBkYXRhRGljdC5oYXNoLFxuICAgICAgICAgICAgbWV0YWRhdGE6IGRhdGFEaWN0Lm1ldGFkYXRhLFxuICAgICAgICAgICAgcmVsYXRpb25zaGlwczogZGF0YURpY3QucmVsYXRpb25zaGlwc1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZG9jIHR5cGU6ICR7ZG9jVHlwZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvYztcbn1cbmNvbnN0IERFRkFVTFRfUEVSU0lTVF9QQVRIID0gcGF0aC5qb2luKERFRkFVTFRfUEVSU0lTVF9ESVIsIERFRkFVTFRfRE9DX1NUT1JFX1BFUlNJU1RfRklMRU5BTUUpO1xuY2xhc3MgQmFzZURvY3VtZW50U3RvcmUge1xuICAgIC8vIFNhdmUvbG9hZFxuICAgIHBlcnNpc3QocGVyc2lzdFBhdGggPSBERUZBVUxUX1BFUlNJU1RfUEFUSCkge1xuICAgIC8vIFBlcnNpc3QgdGhlIGRvY3N0b3JlIHRvIGEgZmlsZS5cbiAgICB9XG4gICAgLy8gTm9kZXNcbiAgICBnZXROb2Rlcyhub2RlSWRzLCByYWlzZUVycm9yID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobm9kZUlkcy5tYXAoKG5vZGVJZCk9PnRoaXMuZ2V0Tm9kZShub2RlSWQsIHJhaXNlRXJyb3IpKSk7XG4gICAgfVxuICAgIGFzeW5jIGdldE5vZGUobm9kZUlkLCByYWlzZUVycm9yID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCB0aGlzLmdldERvY3VtZW50KG5vZGVJZCwgcmFpc2VFcnJvcik7XG4gICAgICAgIGlmICghKGRvYyBpbnN0YW5jZW9mIEJhc2VOb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEb2N1bWVudCAke25vZGVJZH0gaXMgbm90IGEgTm9kZS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbiAgICBhc3luYyBnZXROb2RlRGljdChub2RlSWREaWN0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IoY29uc3QgaW5kZXggaW4gbm9kZUlkRGljdCl7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYXdhaXQgdGhpcy5nZXROb2RlKG5vZGVJZERpY3RbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0aGlzLnNlcmlhbGl6ZXIgPSBqc29uU2VyaWFsaXplcjtcbiAgICB9XG59XG5cbmNsYXNzIEtWRG9jdW1lbnRTdG9yZSBleHRlbmRzIEJhc2VEb2N1bWVudFN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihrdnN0b3JlLCBuYW1lc3BhY2UgPSBERUZBVUxUX05BTUVTUEFDRSl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMua3ZzdG9yZSA9IGt2c3RvcmU7XG4gICAgICAgIHRoaXMubm9kZUNvbGxlY3Rpb24gPSBgJHtuYW1lc3BhY2V9L2RhdGFgO1xuICAgICAgICB0aGlzLnJlZkRvY0NvbGxlY3Rpb24gPSBgJHtuYW1lc3BhY2V9L3JlZl9kb2NfaW5mb2A7XG4gICAgICAgIHRoaXMubWV0YWRhdGFDb2xsZWN0aW9uID0gYCR7bmFtZXNwYWNlfS9tZXRhZGF0YWA7XG4gICAgfVxuICAgIGFzeW5jIGRvY3MoKSB7XG4gICAgICAgIGNvbnN0IGpzb25EaWN0ID0gYXdhaXQgdGhpcy5rdnN0b3JlLmdldEFsbCh0aGlzLm5vZGVDb2xsZWN0aW9uKTtcbiAgICAgICAgY29uc3QgZG9jcyA9IHt9O1xuICAgICAgICBmb3IoY29uc3Qga2V5IGluIGpzb25EaWN0KXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0ganNvbkRpY3Rba2V5XTtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRG9jSnNvbih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBkb2NzW2tleV0gPSBqc29uVG9Eb2ModmFsdWUsIHRoaXMuc2VyaWFsaXplcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgSW52YWxpZCBKU09OIGZvciBkb2NJZCAke2tleX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jcztcbiAgICB9XG4gICAgYXN5bmMgYWRkRG9jdW1lbnRzKGRvY3MsIGFsbG93VXBkYXRlID0gdHJ1ZSkge1xuICAgICAgICBmb3IobGV0IGlkeCA9IDA7IGlkeCA8IGRvY3MubGVuZ3RoOyBpZHgrKyl7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBkb2NzW2lkeF07XG4gICAgICAgICAgICBpZiAoZG9jLmlkXyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRvY19pZCBub3Qgc2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1VwZGF0ZSAmJiBhd2FpdCB0aGlzLmRvY3VtZW50RXhpc3RzKGRvYy5pZF8pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkb2NfaWQgJHtkb2MuaWRffSBhbHJlYWR5IGV4aXN0cy4gU2V0IGFsbG93X3VwZGF0ZSB0byBUcnVlIHRvIG92ZXJ3cml0ZS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vZGVLZXkgPSBkb2MuaWRfO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRvY1RvSnNvbihkb2MsIHRoaXMuc2VyaWFsaXplcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmt2c3RvcmUucHV0KG5vZGVLZXksIGRhdGEsIHRoaXMubm9kZUNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgZG9jSGFzaDogZG9jLmhhc2hcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZG9jLnR5cGUgPT09IE9iamVjdFR5cGUuVEVYVCAmJiBkb2Muc291cmNlTm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmRG9jSW5mbyA9IGF3YWl0IHRoaXMuZ2V0UmVmRG9jSW5mbyhkb2Muc291cmNlTm9kZS5ub2RlSWQpIHx8IHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUlkczogW10sXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhSW5mbzoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlZkRvY0luZm8ubm9kZUlkcy5wdXNoKGRvYy5pZF8pO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhyZWZEb2NJbmZvLmV4dHJhSW5mbykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZkRvY0luZm8uZXh0cmFJbmZvID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMua3ZzdG9yZS5wdXQoZG9jLnNvdXJjZU5vZGUubm9kZUlkLCByZWZEb2NJbmZvLCB0aGlzLnJlZkRvY0NvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLnJlZkRvY0lkID0gZG9jLnNvdXJjZU5vZGUubm9kZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5rdnN0b3JlLnB1dChub2RlS2V5LCBtZXRhZGF0YSwgdGhpcy5tZXRhZGF0YUNvbGxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldERvY3VtZW50KGRvY0lkLCByYWlzZUVycm9yID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5rdnN0b3JlLmdldChkb2NJZCwgdGhpcy5ub2RlQ29sbGVjdGlvbik7XG4gICAgICAgIGlmICh0aGlzLmlzTmlsKGpzb24pKSB7XG4gICAgICAgICAgICBpZiAocmFpc2VFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZG9jSWQgJHtkb2NJZH0gbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1ZhbGlkRG9jSnNvbihqc29uKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEpTT04gZm9yIGRvY0lkICR7ZG9jSWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpzb25Ub0RvYyhqc29uLCB0aGlzLnNlcmlhbGl6ZXIpO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZWZEb2NJbmZvKHJlZkRvY0lkKSB7XG4gICAgICAgIGNvbnN0IHJlZkRvY0luZm8gPSBhd2FpdCB0aGlzLmt2c3RvcmUuZ2V0KHJlZkRvY0lkLCB0aGlzLnJlZkRvY0NvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVmRG9jSW5mbyA/IHN0cnVjdHVyZWRDbG9uZShyZWZEb2NJbmZvKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QWxsUmVmRG9jSW5mbygpIHtcbiAgICAgICAgY29uc3QgcmVmRG9jSW5mb3MgPSBhd2FpdCB0aGlzLmt2c3RvcmUuZ2V0QWxsKHRoaXMucmVmRG9jQ29sbGVjdGlvbik7XG4gICAgICAgIGlmICh0aGlzLmlzTmlsKHJlZkRvY0luZm9zKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWZEb2NJbmZvcztcbiAgICB9XG4gICAgYXN5bmMgcmVmRG9jRXhpc3RzKHJlZkRvY0lkKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc05pbChhd2FpdCB0aGlzLmdldFJlZkRvY0luZm8ocmVmRG9jSWQpKTtcbiAgICB9XG4gICAgYXN5bmMgZG9jdW1lbnRFeGlzdHMoZG9jSWQpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzTmlsKGF3YWl0IHRoaXMua3ZzdG9yZS5nZXQoZG9jSWQsIHRoaXMubm9kZUNvbGxlY3Rpb24pKTtcbiAgICB9XG4gICAgYXN5bmMgcmVtb3ZlUmVmRG9jTm9kZShkb2NJZCkge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHRoaXMua3ZzdG9yZS5nZXQoZG9jSWQsIHRoaXMubWV0YWRhdGFDb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKG1ldGFkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVmRG9jSWQgPSBtZXRhZGF0YS5yZWZEb2NJZDtcbiAgICAgICAgaWYgKHRoaXMuaXNOaWwocmVmRG9jSWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVmRG9jSW5mbyA9IGF3YWl0IHRoaXMua3ZzdG9yZS5nZXQocmVmRG9jSWQsIHRoaXMucmVmRG9jQ29sbGVjdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5pc05pbChyZWZEb2NJbmZvKSkge1xuICAgICAgICAgICAgaWYgKHJlZkRvY0luZm8ubm9kZUlkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5rdnN0b3JlLnB1dChyZWZEb2NJZCwgcmVmRG9jSW5mbywgdGhpcy5yZWZEb2NDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMua3ZzdG9yZS5kZWxldGUocmVmRG9jSWQsIHRoaXMubWV0YWRhdGFDb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBkZWxldGVEb2N1bWVudChkb2NJZCwgcmFpc2VFcnJvciA9IHRydWUsIHJlbW92ZVJlZkRvY05vZGUgPSB0cnVlKSB7XG4gICAgICAgIGlmIChyZW1vdmVSZWZEb2NOb2RlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZVJlZkRvY05vZGUoZG9jSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlbGV0ZVN1Y2Nlc3MgPSBhd2FpdCB0aGlzLmt2c3RvcmUuZGVsZXRlKGRvY0lkLCB0aGlzLm5vZGVDb2xsZWN0aW9uKTtcbiAgICAgICAgYXdhaXQgdGhpcy5rdnN0b3JlLmRlbGV0ZShkb2NJZCwgdGhpcy5tZXRhZGF0YUNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWRlbGV0ZVN1Y2Nlc3MgJiYgcmFpc2VFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkb2NfaWQgJHtkb2NJZH0gbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZVJlZkRvYyhyZWZEb2NJZCwgcmFpc2VFcnJvciA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgcmVmRG9jSW5mbyA9IGF3YWl0IHRoaXMuZ2V0UmVmRG9jSW5mbyhyZWZEb2NJZCk7XG4gICAgICAgIGlmICh0aGlzLmlzTmlsKHJlZkRvY0luZm8pKSB7XG4gICAgICAgICAgICBpZiAocmFpc2VFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVmX2RvY19pZCAke3JlZkRvY0lkfSBub3QgZm91bmQuYCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGRvY0lkIG9mIHJlZkRvY0luZm8ubm9kZUlkcyl7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZURvY3VtZW50KGRvY0lkLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMua3ZzdG9yZS5kZWxldGUocmVmRG9jSWQsIHRoaXMubWV0YWRhdGFDb2xsZWN0aW9uKTtcbiAgICAgICAgYXdhaXQgdGhpcy5rdnN0b3JlLmRlbGV0ZShyZWZEb2NJZCwgdGhpcy5yZWZEb2NDb2xsZWN0aW9uKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0RG9jdW1lbnRIYXNoKGRvY0lkLCBkb2NIYXNoKSB7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgZG9jSGFzaDogZG9jSGFzaFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCB0aGlzLmt2c3RvcmUucHV0KGRvY0lkLCBtZXRhZGF0YSwgdGhpcy5tZXRhZGF0YUNvbGxlY3Rpb24pO1xuICAgIH1cbiAgICBhc3luYyBnZXREb2N1bWVudEhhc2goZG9jSWQpIHtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCB0aGlzLmt2c3RvcmUuZ2V0KGRvY0lkLCB0aGlzLm1ldGFkYXRhQ29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiBtZXRhZGF0YT8uZG9jSGFzaDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QWxsRG9jdW1lbnRIYXNoZXMoKSB7XG4gICAgICAgIGNvbnN0IGhhc2hlcyA9IHt9O1xuICAgICAgICBjb25zdCBtZXRhZGF0YURvY3MgPSBhd2FpdCB0aGlzLmt2c3RvcmUuZ2V0QWxsKHRoaXMubWV0YWRhdGFDb2xsZWN0aW9uKTtcbiAgICAgICAgZm9yKGNvbnN0IGRvY0lkIGluIG1ldGFkYXRhRG9jcyl7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgdGhpcy5nZXREb2N1bWVudEhhc2goZG9jSWQpO1xuICAgICAgICAgICAgaWYgKGhhc2gpIHtcbiAgICAgICAgICAgICAgICBoYXNoZXNbaGFzaF0gPSBkb2NJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaGVzO1xuICAgIH1cbiAgICBpc05pbCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJhc2VEb2N1bWVudFN0b3JlLCBLVkRvY3VtZW50U3RvcmUsIGRvY1RvSnNvbiwgaXNWYWxpZERvY0pzb24sIGpzb25TZXJpYWxpemVyLCBqc29uVG9Eb2MsIG5vbmVTZXJpYWxpemVyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/doc-store/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/index-store/dist/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/storage/index-store/dist/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseIndexStore: () => (/* binding */ BaseIndexStore),\n/* harmony export */   DEFAULT_PERSIST_PATH: () => (/* binding */ DEFAULT_PERSIST_PATH),\n/* harmony export */   KVIndexStore: () => (/* binding */ KVIndexStore),\n/* harmony export */   SimpleIndexStore: () => (/* binding */ SimpleIndexStore)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _data_structs_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../data-structs/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/data-structs/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _kv_store_dist_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kv-store/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js\");\n\n\n\n\n\nconst DEFAULT_PERSIST_PATH = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.join(_global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PERSIST_DIR, _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_INDEX_STORE_PERSIST_FILENAME);\nclass BaseIndexStore {\n    async persist(persistPath = DEFAULT_PERSIST_PATH) {\n    // Persist the index store to disk.\n    }\n}\nclass KVIndexStore extends BaseIndexStore {\n    constructor(kvStore, namespace = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_NAMESPACE){\n        super();\n        this._kvStore = kvStore;\n        this._collection = `${namespace}/data`;\n    }\n    async addIndexStruct(indexStruct) {\n        const key = indexStruct.indexId;\n        const data = indexStruct.toJson();\n        await this._kvStore.put(key, data, this._collection);\n    }\n    async deleteIndexStruct(key) {\n        await this._kvStore.delete(key, this._collection);\n    }\n    async getIndexStruct(structId) {\n        if (!structId) {\n            const structs = await this.getIndexStructs();\n            if (structs.length !== 1) {\n                throw new Error(\"More than one index struct found\");\n            }\n            return structs[0];\n        } else {\n            const json = await this._kvStore.get(structId, this._collection);\n            if (json == null) {\n                return;\n            }\n            return (0,_data_structs_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.jsonToIndexStruct)(json);\n        }\n    }\n    async getIndexStructs() {\n        const jsons = await this._kvStore.getAll(this._collection);\n        return Object.values(jsons).map((json)=>(0,_data_structs_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.jsonToIndexStruct)(json));\n    }\n}\nclass SimpleIndexStore extends KVIndexStore {\n    constructor(kvStore){\n        kvStore = kvStore || new _kv_store_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.SimpleKVStore();\n        super(kvStore);\n        this.kvStore = kvStore;\n    }\n    static async fromPersistDir(persistDir = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PERSIST_DIR) {\n        const persistPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.join(persistDir, _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_INDEX_STORE_PERSIST_FILENAME);\n        return this.fromPersistPath(persistPath);\n    }\n    static async fromPersistPath(persistPath) {\n        const simpleKVStore = await _kv_store_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.SimpleKVStore.fromPersistPath(persistPath);\n        return new SimpleIndexStore(simpleKVStore);\n    }\n    async persist(persistPath = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PERSIST_DIR) {\n        this.kvStore.persist(persistPath);\n    }\n    static fromDict(saveDict) {\n        const simpleKVStore = _kv_store_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.SimpleKVStore.fromDict(saveDict);\n        return new SimpleIndexStore(simpleKVStore);\n    }\n    toDict() {\n        if (!(this.kvStore instanceof _kv_store_dist_index_js__WEBPACK_IMPORTED_MODULE_3__.SimpleKVStore)) {\n            throw new Error(\"KVStore is not a SimpleKVStore\");\n        }\n        return this.kvStore.toDict();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2luZGV4LXN0b3JlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBdUM7QUFDaUM7QUFDcUQ7QUFDaEU7O0FBRTdELDZCQUE2QixpREFBSSxNQUFNLHNFQUFtQixFQUFFLHVGQUFvQztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsb0VBQWlCO0FBQ3REO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw4RUFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsOEVBQWlCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtFQUFhO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxzRUFBbUI7QUFDaEUsNEJBQTRCLGlEQUFJLGtCQUFrQix1RkFBb0M7QUFDdEY7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtFQUFhO0FBQ2pEO0FBQ0E7QUFDQSxnQ0FBZ0Msc0VBQW1CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrRUFBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msa0VBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0YiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2luZGV4LXN0b3JlL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGF0aCB9IGZyb20gJ0BsbGFtYWluZGV4L2Vudic7XG5pbXBvcnQgeyBqc29uVG9JbmRleFN0cnVjdCB9IGZyb20gJy4uLy4uLy4uL2RhdGEtc3RydWN0cy9kaXN0L2luZGV4LmpzJztcbmltcG9ydCB7IERFRkFVTFRfUEVSU0lTVF9ESVIsIERFRkFVTFRfSU5ERVhfU1RPUkVfUEVSU0lTVF9GSUxFTkFNRSwgREVGQVVMVF9OQU1FU1BBQ0UgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWwvZGlzdC9pbmRleC5qcyc7XG5pbXBvcnQgeyBTaW1wbGVLVlN0b3JlIH0gZnJvbSAnLi4vLi4va3Ytc3RvcmUvZGlzdC9pbmRleC5qcyc7XG5cbmNvbnN0IERFRkFVTFRfUEVSU0lTVF9QQVRIID0gcGF0aC5qb2luKERFRkFVTFRfUEVSU0lTVF9ESVIsIERFRkFVTFRfSU5ERVhfU1RPUkVfUEVSU0lTVF9GSUxFTkFNRSk7XG5jbGFzcyBCYXNlSW5kZXhTdG9yZSB7XG4gICAgYXN5bmMgcGVyc2lzdChwZXJzaXN0UGF0aCA9IERFRkFVTFRfUEVSU0lTVF9QQVRIKSB7XG4gICAgLy8gUGVyc2lzdCB0aGUgaW5kZXggc3RvcmUgdG8gZGlzay5cbiAgICB9XG59XG5jbGFzcyBLVkluZGV4U3RvcmUgZXh0ZW5kcyBCYXNlSW5kZXhTdG9yZSB7XG4gICAgY29uc3RydWN0b3Ioa3ZTdG9yZSwgbmFtZXNwYWNlID0gREVGQVVMVF9OQU1FU1BBQ0Upe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9rdlN0b3JlID0ga3ZTdG9yZTtcbiAgICAgICAgdGhpcy5fY29sbGVjdGlvbiA9IGAke25hbWVzcGFjZX0vZGF0YWA7XG4gICAgfVxuICAgIGFzeW5jIGFkZEluZGV4U3RydWN0KGluZGV4U3RydWN0KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGluZGV4U3RydWN0LmluZGV4SWQ7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBpbmRleFN0cnVjdC50b0pzb24oKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fa3ZTdG9yZS5wdXQoa2V5LCBkYXRhLCB0aGlzLl9jb2xsZWN0aW9uKTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlSW5kZXhTdHJ1Y3Qoa2V5KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2t2U3RvcmUuZGVsZXRlKGtleSwgdGhpcy5fY29sbGVjdGlvbik7XG4gICAgfVxuICAgIGFzeW5jIGdldEluZGV4U3RydWN0KHN0cnVjdElkKSB7XG4gICAgICAgIGlmICghc3RydWN0SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cnVjdHMgPSBhd2FpdCB0aGlzLmdldEluZGV4U3RydWN0cygpO1xuICAgICAgICAgICAgaWYgKHN0cnVjdHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9yZSB0aGFuIG9uZSBpbmRleCBzdHJ1Y3QgZm91bmRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RydWN0c1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCB0aGlzLl9rdlN0b3JlLmdldChzdHJ1Y3RJZCwgdGhpcy5fY29sbGVjdGlvbik7XG4gICAgICAgICAgICBpZiAoanNvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGpzb25Ub0luZGV4U3RydWN0KGpzb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldEluZGV4U3RydWN0cygpIHtcbiAgICAgICAgY29uc3QganNvbnMgPSBhd2FpdCB0aGlzLl9rdlN0b3JlLmdldEFsbCh0aGlzLl9jb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoanNvbnMpLm1hcCgoanNvbik9Pmpzb25Ub0luZGV4U3RydWN0KGpzb24pKTtcbiAgICB9XG59XG5jbGFzcyBTaW1wbGVJbmRleFN0b3JlIGV4dGVuZHMgS1ZJbmRleFN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihrdlN0b3JlKXtcbiAgICAgICAga3ZTdG9yZSA9IGt2U3RvcmUgfHwgbmV3IFNpbXBsZUtWU3RvcmUoKTtcbiAgICAgICAgc3VwZXIoa3ZTdG9yZSk7XG4gICAgICAgIHRoaXMua3ZTdG9yZSA9IGt2U3RvcmU7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBmcm9tUGVyc2lzdERpcihwZXJzaXN0RGlyID0gREVGQVVMVF9QRVJTSVNUX0RJUikge1xuICAgICAgICBjb25zdCBwZXJzaXN0UGF0aCA9IHBhdGguam9pbihwZXJzaXN0RGlyLCBERUZBVUxUX0lOREVYX1NUT1JFX1BFUlNJU1RfRklMRU5BTUUpO1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tUGVyc2lzdFBhdGgocGVyc2lzdFBhdGgpO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVBlcnNpc3RQYXRoKHBlcnNpc3RQYXRoKSB7XG4gICAgICAgIGNvbnN0IHNpbXBsZUtWU3RvcmUgPSBhd2FpdCBTaW1wbGVLVlN0b3JlLmZyb21QZXJzaXN0UGF0aChwZXJzaXN0UGF0aCk7XG4gICAgICAgIHJldHVybiBuZXcgU2ltcGxlSW5kZXhTdG9yZShzaW1wbGVLVlN0b3JlKTtcbiAgICB9XG4gICAgYXN5bmMgcGVyc2lzdChwZXJzaXN0UGF0aCA9IERFRkFVTFRfUEVSU0lTVF9ESVIpIHtcbiAgICAgICAgdGhpcy5rdlN0b3JlLnBlcnNpc3QocGVyc2lzdFBhdGgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbURpY3Qoc2F2ZURpY3QpIHtcbiAgICAgICAgY29uc3Qgc2ltcGxlS1ZTdG9yZSA9IFNpbXBsZUtWU3RvcmUuZnJvbURpY3Qoc2F2ZURpY3QpO1xuICAgICAgICByZXR1cm4gbmV3IFNpbXBsZUluZGV4U3RvcmUoc2ltcGxlS1ZTdG9yZSk7XG4gICAgfVxuICAgIHRvRGljdCgpIHtcbiAgICAgICAgaWYgKCEodGhpcy5rdlN0b3JlIGluc3RhbmNlb2YgU2ltcGxlS1ZTdG9yZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIktWU3RvcmUgaXMgbm90IGEgU2ltcGxlS1ZTdG9yZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5rdlN0b3JlLnRvRGljdCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQmFzZUluZGV4U3RvcmUsIERFRkFVTFRfUEVSU0lTVF9QQVRILCBLVkluZGV4U3RvcmUsIFNpbXBsZUluZGV4U3RvcmUgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/index-store/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseInMemoryKVStore: () => (/* binding */ BaseInMemoryKVStore),\n/* harmony export */   BaseKVStore: () => (/* binding */ BaseKVStore),\n/* harmony export */   SimpleKVStore: () => (/* binding */ SimpleKVStore)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n\n\n\nasync function exists(path) {\n    try {\n        await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.access(path);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nclass BaseKVStore {\n}\nclass BaseInMemoryKVStore extends BaseKVStore {\n    static fromPersistPath(persistPath) {\n        throw new Error(\"Method not implemented.\");\n    }\n}\nclass SimpleKVStore extends BaseKVStore {\n    constructor(data = {}){\n        super(), this.data = data;\n    }\n    async put(key, val, collection = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_COLLECTION) {\n        if (!(collection in this.data)) {\n            this.data[collection] = {};\n        }\n        this.data[collection][key] = structuredClone(val); // Creating a shallow copy of the object\n        if (this.persistPath) {\n            await this.persist(this.persistPath);\n        }\n    }\n    async get(key, collection = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_COLLECTION) {\n        const collectionData = this.data[collection];\n        if (collectionData == null) {\n            return null;\n        }\n        if (!(key in collectionData)) {\n            return null;\n        }\n        return structuredClone(collectionData[key]); // Creating a shallow copy of the object\n    }\n    async getAll(collection = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_COLLECTION) {\n        if (this.data[collection]) {\n            return structuredClone(this.data[collection]);\n        }\n        return {};\n    }\n    async delete(key, collection = _global_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_COLLECTION) {\n        if (key in this.data[collection]) {\n            delete this.data[collection][key];\n            if (this.persistPath) {\n                await this.persist(this.persistPath);\n            }\n            return true;\n        }\n        return false;\n    }\n    async persist(persistPath) {\n        // TODO: decide on a way to polyfill path\n        const dirPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.dirname(persistPath);\n        if (!await exists(dirPath)) {\n            await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.mkdir(dirPath);\n        }\n        await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.writeFile(persistPath, JSON.stringify(this.data));\n    }\n    static async fromPersistPath(persistPath) {\n        const dirPath = _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.path.dirname(persistPath);\n        if (!await exists(dirPath)) {\n            await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.mkdir(dirPath);\n        }\n        let data = {};\n        try {\n            const fileData = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(persistPath);\n            data = JSON.parse(fileData.toString());\n        } catch (e) {\n            console.error(`No valid data found at path: ${persistPath} starting new store.`);\n        }\n        const store = new SimpleKVStore(data);\n        store.persistPath = persistPath;\n        return store;\n    }\n    toDict() {\n        return this.data;\n    }\n    static fromDict(saveDict) {\n        return new SimpleKVStore(saveDict);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS9zdG9yYWdlL2t2LXN0b3JlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkM7QUFDd0I7O0FBRW5FO0FBQ0E7QUFDQSxjQUFjLCtDQUFFO0FBQ2hCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHFDQUFxQyxxRUFBa0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHFFQUFrQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBLDhCQUE4QixxRUFBa0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxRUFBa0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpREFBSTtBQUM1QjtBQUNBLGtCQUFrQiwrQ0FBRTtBQUNwQjtBQUNBLGNBQWMsK0NBQUU7QUFDaEI7QUFDQTtBQUNBLHdCQUF3QixpREFBSTtBQUM1QjtBQUNBLGtCQUFrQiwrQ0FBRTtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsK0NBQUU7QUFDckM7QUFDQSxVQUFVO0FBQ1YsMERBQTBELGFBQWE7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyRCIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9jb3JlL3N0b3JhZ2Uva3Ytc3RvcmUvZGlzdC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXRoLCBmcyB9IGZyb20gJ0BsbGFtYWluZGV4L2Vudic7XG5pbXBvcnQgeyBERUZBVUxUX0NPTExFQ1RJT04gfSBmcm9tICcuLi8uLi8uLi9nbG9iYWwvZGlzdC9pbmRleC5qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGV4aXN0cyhwYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZnMuYWNjZXNzKHBhdGgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoICB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jbGFzcyBCYXNlS1ZTdG9yZSB7XG59XG5jbGFzcyBCYXNlSW5NZW1vcnlLVlN0b3JlIGV4dGVuZHMgQmFzZUtWU3RvcmUge1xuICAgIHN0YXRpYyBmcm9tUGVyc2lzdFBhdGgocGVyc2lzdFBhdGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxufVxuY2xhc3MgU2ltcGxlS1ZTdG9yZSBleHRlbmRzIEJhc2VLVlN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhID0ge30pe1xuICAgICAgICBzdXBlcigpLCB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBhc3luYyBwdXQoa2V5LCB2YWwsIGNvbGxlY3Rpb24gPSBERUZBVUxUX0NPTExFQ1RJT04pIHtcbiAgICAgICAgaWYgKCEoY29sbGVjdGlvbiBpbiB0aGlzLmRhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbY29sbGVjdGlvbl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFbY29sbGVjdGlvbl1ba2V5XSA9IHN0cnVjdHVyZWRDbG9uZSh2YWwpOyAvLyBDcmVhdGluZyBhIHNoYWxsb3cgY29weSBvZiB0aGUgb2JqZWN0XG4gICAgICAgIGlmICh0aGlzLnBlcnNpc3RQYXRoKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBlcnNpc3QodGhpcy5wZXJzaXN0UGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSwgY29sbGVjdGlvbiA9IERFRkFVTFRfQ09MTEVDVElPTikge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uRGF0YSA9IHRoaXMuZGF0YVtjb2xsZWN0aW9uXTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25EYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGtleSBpbiBjb2xsZWN0aW9uRGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJ1Y3R1cmVkQ2xvbmUoY29sbGVjdGlvbkRhdGFba2V5XSk7IC8vIENyZWF0aW5nIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBvYmplY3RcbiAgICB9XG4gICAgYXN5bmMgZ2V0QWxsKGNvbGxlY3Rpb24gPSBERUZBVUxUX0NPTExFQ1RJT04pIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVtjb2xsZWN0aW9uXSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZSh0aGlzLmRhdGFbY29sbGVjdGlvbl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKGtleSwgY29sbGVjdGlvbiA9IERFRkFVTFRfQ09MTEVDVElPTikge1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuZGF0YVtjb2xsZWN0aW9uXSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGF0YVtjb2xsZWN0aW9uXVtrZXldO1xuICAgICAgICAgICAgaWYgKHRoaXMucGVyc2lzdFBhdGgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBlcnNpc3QodGhpcy5wZXJzaXN0UGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIHBlcnNpc3QocGVyc2lzdFBhdGgpIHtcbiAgICAgICAgLy8gVE9ETzogZGVjaWRlIG9uIGEgd2F5IHRvIHBvbHlmaWxsIHBhdGhcbiAgICAgICAgY29uc3QgZGlyUGF0aCA9IHBhdGguZGlybmFtZShwZXJzaXN0UGF0aCk7XG4gICAgICAgIGlmICghYXdhaXQgZXhpc3RzKGRpclBhdGgpKSB7XG4gICAgICAgICAgICBhd2FpdCBmcy5ta2RpcihkaXJQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUocGVyc2lzdFBhdGgsIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVBlcnNpc3RQYXRoKHBlcnNpc3RQYXRoKSB7XG4gICAgICAgIGNvbnN0IGRpclBhdGggPSBwYXRoLmRpcm5hbWUocGVyc2lzdFBhdGgpO1xuICAgICAgICBpZiAoIWF3YWl0IGV4aXN0cyhkaXJQYXRoKSkge1xuICAgICAgICAgICAgYXdhaXQgZnMubWtkaXIoZGlyUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGEgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVEYXRhID0gYXdhaXQgZnMucmVhZEZpbGUocGVyc2lzdFBhdGgpO1xuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZmlsZURhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE5vIHZhbGlkIGRhdGEgZm91bmQgYXQgcGF0aDogJHtwZXJzaXN0UGF0aH0gc3RhcnRpbmcgbmV3IHN0b3JlLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0b3JlID0gbmV3IFNpbXBsZUtWU3RvcmUoZGF0YSk7XG4gICAgICAgIHN0b3JlLnBlcnNpc3RQYXRoID0gcGVyc2lzdFBhdGg7XG4gICAgICAgIHJldHVybiBzdG9yZTtcbiAgICB9XG4gICAgdG9EaWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbURpY3Qoc2F2ZURpY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVLVlN0b3JlKHNhdmVEaWN0KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJhc2VJbk1lbW9yeUtWU3RvcmUsIEJhc2VLVlN0b3JlLCBTaW1wbGVLVlN0b3JlIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/storage/kv-store/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/tools/dist/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/tools/dist/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionTool: () => (/* binding */ FunctionTool),\n/* harmony export */   tool: () => (/* binding */ tool)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n\n\n\nclass FunctionTool {\n    #fn;\n    #additionalArg;\n    #metadata;\n    #zodType;\n    constructor(fn, metadata, zodType, additionalArg){\n        this.#zodType = null;\n        this.bind = (additionalArg)=>{\n            return new FunctionTool(this.#fn, this.#metadata, this.#zodType ?? undefined, additionalArg);\n        };\n        this.call = (input)=>{\n            if (this.#metadata.requireContext) {\n                const inputWithContext = input;\n                if (!inputWithContext.context) {\n                    throw new Error(\"Tool call requires context, but context parameter is missing\");\n                }\n            }\n            if (this.#zodType) {\n                const result = this.#zodType.safeParse(input);\n                if (result.success) {\n                    if (this.#metadata.requireContext) {\n                        const { context } = input;\n                        return this.#fn.call(null, {\n                            context,\n                            ...result.data\n                        }, this.#additionalArg);\n                    } else {\n                        return this.#fn.call(null, result.data, this.#additionalArg);\n                    }\n                } else {\n                    console.warn(result.error.errors);\n                }\n            }\n            return this.#fn.call(null, input, this.#additionalArg);\n        };\n        this.#fn = fn;\n        this.#metadata = metadata;\n        if (zodType) {\n            this.#zodType = zodType;\n        }\n        this.#additionalArg = additionalArg;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(fnOrConfig, schema) {\n        // Handle the case where an object with execute function is passed\n        if (typeof schema === \"undefined\" && typeof fnOrConfig === \"object\" && fnOrConfig.execute) {\n            const { execute, parameters, ...restConfig } = fnOrConfig;\n            if (parameters instanceof zod__WEBPACK_IMPORTED_MODULE_1__.z.ZodSchema) {\n                const jsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(parameters);\n                return new FunctionTool(execute, {\n                    ...restConfig,\n                    parameters: jsonSchema\n                }, parameters);\n            }\n            return new FunctionTool(execute, fnOrConfig);\n        }\n        // Handle the original cases\n        if (schema && schema.parameters instanceof zod__WEBPACK_IMPORTED_MODULE_1__.z.ZodSchema) {\n            const jsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema.parameters);\n            return new FunctionTool(fnOrConfig, {\n                ...schema,\n                parameters: jsonSchema\n            }, schema.parameters);\n        }\n        return new FunctionTool(fnOrConfig, schema);\n    }\n    get metadata() {\n        return this.#metadata;\n    }\n}\n/**\n * A simpler alias for creating a FunctionTool.\n */ const tool = FunctionTool.from;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS90b29scy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0I7QUFDNkI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxVQUFVO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQ0FBcUM7QUFDekQsc0NBQXNDLGtDQUFDO0FBQ3ZDLG1DQUFtQyxtRUFBZTtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsa0NBQUM7QUFDcEQsK0JBQStCLG1FQUFlO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEIiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS90b29scy9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgem9kVG9Kc29uU2NoZW1hIH0gZnJvbSAnem9kLXRvLWpzb24tc2NoZW1hJztcblxuY2xhc3MgRnVuY3Rpb25Ub29sIHtcbiAgICAjZm47XG4gICAgI2FkZGl0aW9uYWxBcmc7XG4gICAgI21ldGFkYXRhO1xuICAgICN6b2RUeXBlO1xuICAgIGNvbnN0cnVjdG9yKGZuLCBtZXRhZGF0YSwgem9kVHlwZSwgYWRkaXRpb25hbEFyZyl7XG4gICAgICAgIHRoaXMuI3pvZFR5cGUgPSBudWxsO1xuICAgICAgICB0aGlzLmJpbmQgPSAoYWRkaXRpb25hbEFyZyk9PntcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25Ub29sKHRoaXMuI2ZuLCB0aGlzLiNtZXRhZGF0YSwgdGhpcy4jem9kVHlwZSA/PyB1bmRlZmluZWQsIGFkZGl0aW9uYWxBcmcpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbGwgPSAoaW5wdXQpPT57XG4gICAgICAgICAgICBpZiAodGhpcy4jbWV0YWRhdGEucmVxdWlyZUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dFdpdGhDb250ZXh0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dFdpdGhDb250ZXh0LmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9vbCBjYWxsIHJlcXVpcmVzIGNvbnRleHQsIGJ1dCBjb250ZXh0IHBhcmFtZXRlciBpcyBtaXNzaW5nXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLiN6b2RUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy4jem9kVHlwZS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jbWV0YWRhdGEucmVxdWlyZUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgY29udGV4dCB9ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jZm4uY2FsbChudWxsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5yZXN1bHQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy4jYWRkaXRpb25hbEFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jZm4uY2FsbChudWxsLCByZXN1bHQuZGF0YSwgdGhpcy4jYWRkaXRpb25hbEFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4ocmVzdWx0LmVycm9yLmVycm9ycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuI2ZuLmNhbGwobnVsbCwgaW5wdXQsIHRoaXMuI2FkZGl0aW9uYWxBcmcpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLiNmbiA9IGZuO1xuICAgICAgICB0aGlzLiNtZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICBpZiAoem9kVHlwZSkge1xuICAgICAgICAgICAgdGhpcy4jem9kVHlwZSA9IHpvZFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jYWRkaXRpb25hbEFyZyA9IGFkZGl0aW9uYWxBcmc7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgc3RhdGljIGZyb20oZm5PckNvbmZpZywgc2NoZW1hKSB7XG4gICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhbiBvYmplY3Qgd2l0aCBleGVjdXRlIGZ1bmN0aW9uIGlzIHBhc3NlZFxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZm5PckNvbmZpZyA9PT0gXCJvYmplY3RcIiAmJiBmbk9yQ29uZmlnLmV4ZWN1dGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZXhlY3V0ZSwgcGFyYW1ldGVycywgLi4ucmVzdENvbmZpZyB9ID0gZm5PckNvbmZpZztcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzIGluc3RhbmNlb2Ygei5ab2RTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uU2NoZW1hID0gem9kVG9Kc29uU2NoZW1hKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25Ub29sKGV4ZWN1dGUsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVzdENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyczoganNvblNjaGVtYVxuICAgICAgICAgICAgICAgIH0sIHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvblRvb2woZXhlY3V0ZSwgZm5PckNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIHRoZSBvcmlnaW5hbCBjYXNlc1xuICAgICAgICBpZiAoc2NoZW1hICYmIHNjaGVtYS5wYXJhbWV0ZXJzIGluc3RhbmNlb2Ygei5ab2RTY2hlbWEpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb25TY2hlbWEgPSB6b2RUb0pzb25TY2hlbWEoc2NoZW1hLnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvblRvb2woZm5PckNvbmZpZywge1xuICAgICAgICAgICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBqc29uU2NoZW1hXG4gICAgICAgICAgICB9LCBzY2hlbWEucGFyYW1ldGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvblRvb2woZm5PckNvbmZpZywgc2NoZW1hKTtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jbWV0YWRhdGE7XG4gICAgfVxufVxuLyoqXG4gKiBBIHNpbXBsZXIgYWxpYXMgZm9yIGNyZWF0aW5nIGEgRnVuY3Rpb25Ub29sLlxuICovIGNvbnN0IHRvb2wgPSBGdW5jdGlvblRvb2wuZnJvbTtcblxuZXhwb3J0IHsgRnVuY3Rpb25Ub29sLCB0b29sIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/tools/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockLLM: () => (/* binding */ MockLLM),\n/* harmony export */   extractDataUrlComponents: () => (/* binding */ extractDataUrlComponents),\n/* harmony export */   extractImage: () => (/* binding */ extractImage),\n/* harmony export */   extractSingleText: () => (/* binding */ extractSingleText),\n/* harmony export */   extractText: () => (/* binding */ extractText),\n/* harmony export */   imageToDataUrl: () => (/* binding */ imageToDataUrl),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   messagesToHistory: () => (/* binding */ messagesToHistory),\n/* harmony export */   objectEntries: () => (/* binding */ objectEntries),\n/* harmony export */   prettifyError: () => (/* binding */ prettifyError),\n/* harmony export */   streamCallbacks: () => (/* binding */ streamCallbacks),\n/* harmony export */   streamConverter: () => (/* binding */ streamConverter),\n/* harmony export */   streamReducer: () => (/* binding */ streamReducer),\n/* harmony export */   stringifyJSONToMessageContent: () => (/* binding */ stringifyJSONToMessageContent),\n/* harmony export */   toToolDescriptions: () => (/* binding */ toToolDescriptions)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! magic-bytes.js */ \"(rsc)/./node_modules/magic-bytes.js/dist/index.js\");\n\n\n\n/**\n * Extracts just the text whether from\n *  a multi-modal message\n *  a single text message\n *  or a query\n *\n * @param message The message to extract text from.\n * @returns The extracted text\n */ function extractText(message) {\n    if (typeof message === \"object\" && \"query\" in message) {\n        return extractText(message.query);\n    }\n    if (typeof message !== \"string\" && !Array.isArray(message)) {\n        console.warn(\"extractText called with non-MessageContent message, this is likely a bug.\");\n        return `${message}`;\n    } else if (typeof message !== \"string\" && Array.isArray(message)) {\n        // message is of type MessageContentDetail[] - retrieve just the text parts and concatenate them\n        // so we can pass them to the context generator\n        return message.filter((c)=>c.type === \"text\").map((c)=>c.text).join(\"\\n\\n\");\n    } else {\n        return message;\n    }\n}\n/**\n * Extracts a single text from a multi-modal message content\n *\n * @param message The message to extract images from.\n * @returns The extracted images\n */ function extractSingleText(message) {\n    if (message.type === \"text\") {\n        return message.text;\n    }\n    return null;\n}\n/**\n * Extracts an image from a multi-modal message content\n *\n * @param message The message to extract images from.\n * @returns The extracted images\n */ function extractImage(message) {\n    if (message.type === \"image_url\") {\n        return new URL(message.image_url.url);\n    }\n    return null;\n}\nconst extractDataUrlComponents = (dataUrl)=>{\n    const parts = dataUrl.split(\";base64,\");\n    if (parts.length !== 2 || !parts[0].startsWith(\"data:\")) {\n        throw new Error(\"Invalid data URL\");\n    }\n    const mimeType = parts[0].slice(5);\n    const base64 = parts[1];\n    return {\n        mimeType,\n        base64\n    };\n};\nfunction messagesToHistory(messages) {\n    return messages.reduce((acc, message)=>{\n        acc += acc ? \"\\n\" : \"\";\n        if (message.role === \"user\") {\n            acc += `Human: ${message.content}`;\n        } else {\n            acc += `Assistant: ${message.content}`;\n        }\n        return acc;\n    }, \"\");\n}\nfunction toToolDescriptions(tools) {\n    const toolsObj = tools.reduce((acc, tool)=>{\n        acc[tool.name] = tool.description;\n        return acc;\n    }, {});\n    return JSON.stringify(toolsObj, null, 4);\n}\nasync function blobToDataUrl(input) {\n    const buffer = Buffer.from(await input.arrayBuffer());\n    const mimes = (0,magic_bytes_js__WEBPACK_IMPORTED_MODULE_1__.filetypemime)(buffer);\n    if (mimes.length < 1) {\n        throw new Error(\"Unsupported image type\");\n    }\n    return \"data:\" + mimes[0] + \";base64,\" + buffer.toString(\"base64\");\n}\nasync function imageToDataUrl(input) {\n    // first ensure, that the input is a Blob\n    if (input instanceof URL && input.protocol === \"file:\" || typeof input === \"string\") {\n        // string or file URL\n        const dataBuffer = await _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.fs.readFile(input instanceof URL ? input.pathname : input);\n        input = new Blob([\n            dataBuffer\n        ]);\n    } else if (!(input instanceof Blob)) {\n        if (input instanceof URL) {\n            throw new Error(`Unsupported URL with protocol: ${input.protocol}`);\n        } else if (input instanceof Uint8Array) {\n            input = new Blob([\n                input\n            ]); // convert Uint8Array to Blob\n        } else {\n            throw new Error(`Unsupported input type: ${typeof input}`);\n        }\n    }\n    return await blobToDataUrl(input);\n}\n\nclass BaseLLM {\n    async complete(params) {\n        const { prompt, stream, responseFormat } = params;\n        if (stream) {\n            const stream = await this.chat({\n                messages: [\n                    {\n                        content: prompt,\n                        role: \"user\"\n                    }\n                ],\n                stream: true,\n                ...responseFormat ? {\n                    responseFormat\n                } : {}\n            });\n            return streamConverter(stream, (chunk)=>{\n                return {\n                    raw: null,\n                    text: chunk.delta\n                };\n            });\n        }\n        const chatResponse = await this.chat({\n            messages: [\n                {\n                    content: prompt,\n                    role: \"user\"\n                }\n            ],\n            ...responseFormat ? {\n                responseFormat\n            } : {}\n        });\n        return {\n            text: extractText(chatResponse.message.content),\n            raw: chatResponse.raw\n        };\n    }\n}\nclass ToolCallLLM extends BaseLLM {\n}\n\n// TODO: move to a test package\nclass MockLLM extends ToolCallLLM {\n    constructor(options){\n        super(), this.supportToolCall = false;\n        this.options = {\n            timeBetweenToken: options?.timeBetweenToken ?? 20,\n            responseMessage: options?.responseMessage ?? \"This is a mock response\"\n        };\n        this.metadata = options?.metadata ?? {\n            model: \"MockLLM\",\n            temperature: 0.5,\n            topP: 0.5,\n            contextWindow: 1024,\n            tokenizer: undefined,\n            structuredOutput: false\n        };\n    }\n    async chat(params) {\n        const responseMessage = this.options.responseMessage;\n        const timeBetweenToken = this.options.timeBetweenToken;\n        if (params.stream) {\n            return async function*() {\n                for (const char of responseMessage){\n                    yield {\n                        delta: char,\n                        raw: {}\n                    };\n                    await new Promise((resolve)=>setTimeout(resolve, timeBetweenToken));\n                }\n            }();\n        }\n        return {\n            message: {\n                content: responseMessage,\n                role: \"assistant\"\n            },\n            raw: {}\n        };\n    }\n    async complete(params) {\n        const responseMessage = this.options.responseMessage;\n        const timeBetweenToken = this.options.timeBetweenToken;\n        if (params.stream) {\n            return async function*() {\n                for (const char of responseMessage){\n                    yield {\n                        delta: char,\n                        text: char,\n                        raw: {}\n                    };\n                    await new Promise((resolve)=>setTimeout(resolve, timeBetweenToken));\n                }\n            }();\n        }\n        return {\n            text: responseMessage,\n            raw: {}\n        };\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n/**\n * Type safe version of `Object.entries`\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction objectEntries(obj) {\n    return Object.entries(obj);\n}\n\nconst isPromise = (obj)=>{\n    return obj != null && typeof obj === \"object\" && \"then\" in obj;\n};\nconst isAsyncIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.asyncIterator in obj;\n};\nconst isIterable = (obj)=>{\n    return obj != null && typeof obj === \"object\" && Symbol.iterator in obj;\n};\nasync function* streamConverter(stream, converter) {\n    for await (const data of stream){\n        const newData = converter(data);\n        if (newData === null) {\n            return;\n        }\n        yield newData;\n    }\n}\nasync function* streamCallbacks(stream, callbacks) {\n    let value;\n    for await (value of stream){\n        yield value;\n    }\n    if (callbacks.finished) {\n        callbacks.finished(value);\n    }\n}\nasync function* streamReducer(params) {\n    let value = params.initialValue;\n    for await (const data of params.stream){\n        value = params.reducer(value, data);\n        yield data;\n    }\n    if (params.finished) {\n        params.finished(value);\n    }\n}\n/**\n * Prettify an error for AI to read\n */ function prettifyError(error) {\n    if (error instanceof Error) {\n        return `Error(${error.name}): ${error.message}`;\n    } else {\n        return `${error}`;\n    }\n}\nfunction stringifyJSONToMessageContent(value) {\n    return JSON.stringify(value, null, 2).replace(/\"([^\"]*)\"/g, \"$1\");\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/vector-store/dist/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/core/vector-store/dist/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseVectorStore: () => (/* binding */ BaseVectorStore),\n/* harmony export */   FilterCondition: () => (/* binding */ FilterCondition),\n/* harmony export */   FilterOperator: () => (/* binding */ FilterOperator),\n/* harmony export */   VectorStoreQueryMode: () => (/* binding */ VectorStoreQueryMode),\n/* harmony export */   escapeLikeString: () => (/* binding */ escapeLikeString),\n/* harmony export */   metadataDictToNode: () => (/* binding */ metadataDictToNode),\n/* harmony export */   nodeToMetadata: () => (/* binding */ nodeToMetadata),\n/* harmony export */   parseArrayValue: () => (/* binding */ parseArrayValue),\n/* harmony export */   parseNumberValue: () => (/* binding */ parseNumberValue),\n/* harmony export */   parsePrimitiveValue: () => (/* binding */ parsePrimitiveValue),\n/* harmony export */   validateIsFlat: () => (/* binding */ validateIsFlat)\n/* harmony export */ });\n/* harmony import */ var _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../schema/dist/index.js */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n\n\n\nconst DEFAULT_TEXT_KEY = \"text\";\nfunction validateIsFlat(obj) {\n    for(const key in obj){\n        if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            throw new Error(`Value for metadata ${key} must not be another object`);\n        }\n    }\n}\nfunction nodeToMetadata(node, removeText = false, textField = DEFAULT_TEXT_KEY, flatMetadata = false) {\n    const { metadata, embedding, ...rest } = node.toMutableJSON();\n    if (flatMetadata) {\n        validateIsFlat(metadata);\n    }\n    if (removeText) {\n        rest[textField] = \"\";\n    }\n    metadata[\"_node_content\"] = JSON.stringify(rest);\n    metadata[\"_node_type\"] = node.constructor.name.replace(\"_\", \"\"); // remove leading underscore to be compatible with Python\n    metadata[\"document_id\"] = node.sourceNode?.nodeId || \"None\";\n    metadata[\"doc_id\"] = node.sourceNode?.nodeId || \"None\";\n    metadata[\"ref_doc_id\"] = node.sourceNode?.nodeId || \"None\";\n    return metadata;\n}\nfunction metadataDictToNode(metadata, options) {\n    const { _node_content: nodeContent, _node_type: nodeType, document_id, doc_id, ref_doc_id, ...rest } = metadata;\n    let nodeObj;\n    if (!nodeContent) {\n        if (options?.fallback) {\n            nodeObj = options?.fallback;\n        } else {\n            throw new Error(\"Node content not found in metadata.\");\n        }\n    } else {\n        nodeObj = JSON.parse(nodeContent);\n        nodeObj = {\n            ...rest,\n            ...options?.fallback,\n            ...nodeObj\n        };\n        nodeObj.metadata = {\n            ...options?.fallback && \"metadata\" in options.fallback && typeof options.fallback.metadata === \"object\" ? options?.fallback.metadata : {},\n            ...rest\n        };\n    }\n    // Note: we're using the name of the class stored in `_node_type`\n    // and not the type attribute to reconstruct\n    // the node. This way we're compatible with LlamaIndex Python\n    switch(nodeType){\n        case \"IndexNode\":\n            return (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.jsonToNode)(nodeObj, _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.ObjectType.INDEX);\n        default:\n            return (0,_schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.jsonToNode)(nodeObj, _schema_dist_index_js__WEBPACK_IMPORTED_MODULE_1__.ObjectType.TEXT);\n    }\n}\nconst escapeLikeString = (value)=>{\n    return value.replace(/[%_\\\\]/g, \"\\\\$&\");\n};\n\nvar VectorStoreQueryMode = /*#__PURE__*/ function(VectorStoreQueryMode) {\n    VectorStoreQueryMode[\"DEFAULT\"] = \"default\";\n    VectorStoreQueryMode[\"SPARSE\"] = \"sparse\";\n    VectorStoreQueryMode[\"HYBRID\"] = \"hybrid\";\n    // fit learners\n    VectorStoreQueryMode[\"SVM\"] = \"svm\";\n    VectorStoreQueryMode[\"LOGISTIC_REGRESSION\"] = \"logistic_regression\";\n    VectorStoreQueryMode[\"LINEAR_REGRESSION\"] = \"linear_regression\";\n    // maximum marginal relevance\n    VectorStoreQueryMode[\"MMR\"] = \"mmr\";\n    // for Azure AI Search\n    VectorStoreQueryMode[\"SEMANTIC_HYBRID\"] = \"semantic_hybrid\";\n    return VectorStoreQueryMode;\n}({});\nvar FilterOperator = /*#__PURE__*/ function(FilterOperator) {\n    FilterOperator[\"EQ\"] = \"==\";\n    FilterOperator[\"IN\"] = \"in\";\n    FilterOperator[\"GT\"] = \">\";\n    FilterOperator[\"LT\"] = \"<\";\n    FilterOperator[\"NE\"] = \"!=\";\n    FilterOperator[\"GTE\"] = \">=\";\n    FilterOperator[\"LTE\"] = \"<=\";\n    FilterOperator[\"NIN\"] = \"nin\";\n    FilterOperator[\"ANY\"] = \"any\";\n    FilterOperator[\"ALL\"] = \"all\";\n    FilterOperator[\"TEXT_MATCH\"] = \"text_match\";\n    FilterOperator[\"CONTAINS\"] = \"contains\";\n    FilterOperator[\"IS_EMPTY\"] = \"is_empty\";\n    return FilterOperator;\n}({});\nvar FilterCondition = /*#__PURE__*/ function(FilterCondition) {\n    FilterCondition[\"AND\"] = \"and\";\n    FilterCondition[\"OR\"] = \"or\";\n    return FilterCondition;\n}({});\nclass BaseVectorStore {\n    constructor(params){\n        this.embedModel = params?.embeddingModel ?? _global_dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Settings.embedModel;\n    }\n}\nconst parsePrimitiveValue = (value)=>{\n    if (typeof value !== \"number\" && typeof value !== \"string\") {\n        throw new Error(\"Value must be a string or number\");\n    }\n    return value;\n};\nconst parseArrayValue = (value)=>{\n    const isPrimitiveArray = Array.isArray(value) && value.every((v)=>typeof v === \"string\" || typeof v === \"number\");\n    if (!isPrimitiveArray) {\n        throw new Error(\"Value must be an array of strings or numbers\");\n    }\n    return value;\n};\nconst parseNumberValue = (value)=>{\n    if (typeof value !== \"number\") throw new Error(\"Value must be a number\");\n    return value;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvY29yZS92ZWN0b3Itc3RvcmUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQXNEO0FBQ2M7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELEtBQUs7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtCQUErQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZGQUE2RjtBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUpBQXFKO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUVBQVUsVUFBVSw2REFBVTtBQUNqRDtBQUNBLG1CQUFtQixpRUFBVSxVQUFVLDZEQUFVO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsR0FBRztBQUNKO0FBQ0E7QUFDQSxvREFBb0QsMkRBQVE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdOIiwic291cmNlcyI6WyIvaG9tZS9icmVudC9Eb3dubG9hZHMvRW5jb2RlREVBSS9GaW5hbFByb2plY3Qvbm9kZV9tb2R1bGVzL2xsYW1haW5kZXgvbm9kZV9tb2R1bGVzL0BsbGFtYWluZGV4L2NvcmUvdmVjdG9yLXN0b3JlL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9nbG9iYWwvZGlzdC9pbmRleC5qcyc7XG5pbXBvcnQgeyBqc29uVG9Ob2RlLCBPYmplY3RUeXBlIH0gZnJvbSAnLi4vLi4vc2NoZW1hL2Rpc3QvaW5kZXguanMnO1xuXG5jb25zdCBERUZBVUxUX1RFWFRfS0VZID0gXCJ0ZXh0XCI7XG5mdW5jdGlvbiB2YWxpZGF0ZUlzRmxhdChvYmopIHtcbiAgICBmb3IoY29uc3Qga2V5IGluIG9iail7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09IFwib2JqZWN0XCIgJiYgb2JqW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgZm9yIG1ldGFkYXRhICR7a2V5fSBtdXN0IG5vdCBiZSBhbm90aGVyIG9iamVjdGApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gbm9kZVRvTWV0YWRhdGEobm9kZSwgcmVtb3ZlVGV4dCA9IGZhbHNlLCB0ZXh0RmllbGQgPSBERUZBVUxUX1RFWFRfS0VZLCBmbGF0TWV0YWRhdGEgPSBmYWxzZSkge1xuICAgIGNvbnN0IHsgbWV0YWRhdGEsIGVtYmVkZGluZywgLi4ucmVzdCB9ID0gbm9kZS50b011dGFibGVKU09OKCk7XG4gICAgaWYgKGZsYXRNZXRhZGF0YSkge1xuICAgICAgICB2YWxpZGF0ZUlzRmxhdChtZXRhZGF0YSk7XG4gICAgfVxuICAgIGlmIChyZW1vdmVUZXh0KSB7XG4gICAgICAgIHJlc3RbdGV4dEZpZWxkXSA9IFwiXCI7XG4gICAgfVxuICAgIG1ldGFkYXRhW1wiX25vZGVfY29udGVudFwiXSA9IEpTT04uc3RyaW5naWZ5KHJlc3QpO1xuICAgIG1ldGFkYXRhW1wiX25vZGVfdHlwZVwiXSA9IG5vZGUuY29uc3RydWN0b3IubmFtZS5yZXBsYWNlKFwiX1wiLCBcIlwiKTsgLy8gcmVtb3ZlIGxlYWRpbmcgdW5kZXJzY29yZSB0byBiZSBjb21wYXRpYmxlIHdpdGggUHl0aG9uXG4gICAgbWV0YWRhdGFbXCJkb2N1bWVudF9pZFwiXSA9IG5vZGUuc291cmNlTm9kZT8ubm9kZUlkIHx8IFwiTm9uZVwiO1xuICAgIG1ldGFkYXRhW1wiZG9jX2lkXCJdID0gbm9kZS5zb3VyY2VOb2RlPy5ub2RlSWQgfHwgXCJOb25lXCI7XG4gICAgbWV0YWRhdGFbXCJyZWZfZG9jX2lkXCJdID0gbm9kZS5zb3VyY2VOb2RlPy5ub2RlSWQgfHwgXCJOb25lXCI7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xufVxuZnVuY3Rpb24gbWV0YWRhdGFEaWN0VG9Ob2RlKG1ldGFkYXRhLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBfbm9kZV9jb250ZW50OiBub2RlQ29udGVudCwgX25vZGVfdHlwZTogbm9kZVR5cGUsIGRvY3VtZW50X2lkLCBkb2NfaWQsIHJlZl9kb2NfaWQsIC4uLnJlc3QgfSA9IG1ldGFkYXRhO1xuICAgIGxldCBub2RlT2JqO1xuICAgIGlmICghbm9kZUNvbnRlbnQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnM/LmZhbGxiYWNrKSB7XG4gICAgICAgICAgICBub2RlT2JqID0gb3B0aW9ucz8uZmFsbGJhY2s7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIGNvbnRlbnQgbm90IGZvdW5kIGluIG1ldGFkYXRhLlwiKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPYmogPSBKU09OLnBhcnNlKG5vZGVDb250ZW50KTtcbiAgICAgICAgbm9kZU9iaiA9IHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5mYWxsYmFjayxcbiAgICAgICAgICAgIC4uLm5vZGVPYmpcbiAgICAgICAgfTtcbiAgICAgICAgbm9kZU9iai5tZXRhZGF0YSA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmZhbGxiYWNrICYmIFwibWV0YWRhdGFcIiBpbiBvcHRpb25zLmZhbGxiYWNrICYmIHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrLm1ldGFkYXRhID09PSBcIm9iamVjdFwiID8gb3B0aW9ucz8uZmFsbGJhY2subWV0YWRhdGEgOiB7fSxcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gTm90ZTogd2UncmUgdXNpbmcgdGhlIG5hbWUgb2YgdGhlIGNsYXNzIHN0b3JlZCBpbiBgX25vZGVfdHlwZWBcbiAgICAvLyBhbmQgbm90IHRoZSB0eXBlIGF0dHJpYnV0ZSB0byByZWNvbnN0cnVjdFxuICAgIC8vIHRoZSBub2RlLiBUaGlzIHdheSB3ZSdyZSBjb21wYXRpYmxlIHdpdGggTGxhbWFJbmRleCBQeXRob25cbiAgICBzd2l0Y2gobm9kZVR5cGUpe1xuICAgICAgICBjYXNlIFwiSW5kZXhOb2RlXCI6XG4gICAgICAgICAgICByZXR1cm4ganNvblRvTm9kZShub2RlT2JqLCBPYmplY3RUeXBlLklOREVYKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBqc29uVG9Ob2RlKG5vZGVPYmosIE9iamVjdFR5cGUuVEVYVCk7XG4gICAgfVxufVxuY29uc3QgZXNjYXBlTGlrZVN0cmluZyA9ICh2YWx1ZSk9PntcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWyVfXFxcXF0vZywgXCJcXFxcJCZcIik7XG59O1xuXG52YXIgVmVjdG9yU3RvcmVRdWVyeU1vZGUgPSAvKiNfX1BVUkVfXyovIGZ1bmN0aW9uKFZlY3RvclN0b3JlUXVlcnlNb2RlKSB7XG4gICAgVmVjdG9yU3RvcmVRdWVyeU1vZGVbXCJERUZBVUxUXCJdID0gXCJkZWZhdWx0XCI7XG4gICAgVmVjdG9yU3RvcmVRdWVyeU1vZGVbXCJTUEFSU0VcIl0gPSBcInNwYXJzZVwiO1xuICAgIFZlY3RvclN0b3JlUXVlcnlNb2RlW1wiSFlCUklEXCJdID0gXCJoeWJyaWRcIjtcbiAgICAvLyBmaXQgbGVhcm5lcnNcbiAgICBWZWN0b3JTdG9yZVF1ZXJ5TW9kZVtcIlNWTVwiXSA9IFwic3ZtXCI7XG4gICAgVmVjdG9yU3RvcmVRdWVyeU1vZGVbXCJMT0dJU1RJQ19SRUdSRVNTSU9OXCJdID0gXCJsb2dpc3RpY19yZWdyZXNzaW9uXCI7XG4gICAgVmVjdG9yU3RvcmVRdWVyeU1vZGVbXCJMSU5FQVJfUkVHUkVTU0lPTlwiXSA9IFwibGluZWFyX3JlZ3Jlc3Npb25cIjtcbiAgICAvLyBtYXhpbXVtIG1hcmdpbmFsIHJlbGV2YW5jZVxuICAgIFZlY3RvclN0b3JlUXVlcnlNb2RlW1wiTU1SXCJdID0gXCJtbXJcIjtcbiAgICAvLyBmb3IgQXp1cmUgQUkgU2VhcmNoXG4gICAgVmVjdG9yU3RvcmVRdWVyeU1vZGVbXCJTRU1BTlRJQ19IWUJSSURcIl0gPSBcInNlbWFudGljX2h5YnJpZFwiO1xuICAgIHJldHVybiBWZWN0b3JTdG9yZVF1ZXJ5TW9kZTtcbn0oe30pO1xudmFyIEZpbHRlck9wZXJhdG9yID0gLyojX19QVVJFX18qLyBmdW5jdGlvbihGaWx0ZXJPcGVyYXRvcikge1xuICAgIEZpbHRlck9wZXJhdG9yW1wiRVFcIl0gPSBcIj09XCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJJTlwiXSA9IFwiaW5cIjtcbiAgICBGaWx0ZXJPcGVyYXRvcltcIkdUXCJdID0gXCI+XCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJMVFwiXSA9IFwiPFwiO1xuICAgIEZpbHRlck9wZXJhdG9yW1wiTkVcIl0gPSBcIiE9XCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJHVEVcIl0gPSBcIj49XCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJMVEVcIl0gPSBcIjw9XCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJOSU5cIl0gPSBcIm5pblwiO1xuICAgIEZpbHRlck9wZXJhdG9yW1wiQU5ZXCJdID0gXCJhbnlcIjtcbiAgICBGaWx0ZXJPcGVyYXRvcltcIkFMTFwiXSA9IFwiYWxsXCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJURVhUX01BVENIXCJdID0gXCJ0ZXh0X21hdGNoXCI7XG4gICAgRmlsdGVyT3BlcmF0b3JbXCJDT05UQUlOU1wiXSA9IFwiY29udGFpbnNcIjtcbiAgICBGaWx0ZXJPcGVyYXRvcltcIklTX0VNUFRZXCJdID0gXCJpc19lbXB0eVwiO1xuICAgIHJldHVybiBGaWx0ZXJPcGVyYXRvcjtcbn0oe30pO1xudmFyIEZpbHRlckNvbmRpdGlvbiA9IC8qI19fUFVSRV9fKi8gZnVuY3Rpb24oRmlsdGVyQ29uZGl0aW9uKSB7XG4gICAgRmlsdGVyQ29uZGl0aW9uW1wiQU5EXCJdID0gXCJhbmRcIjtcbiAgICBGaWx0ZXJDb25kaXRpb25bXCJPUlwiXSA9IFwib3JcIjtcbiAgICByZXR1cm4gRmlsdGVyQ29uZGl0aW9uO1xufSh7fSk7XG5jbGFzcyBCYXNlVmVjdG9yU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcyl7XG4gICAgICAgIHRoaXMuZW1iZWRNb2RlbCA9IHBhcmFtcz8uZW1iZWRkaW5nTW9kZWwgPz8gU2V0dGluZ3MuZW1iZWRNb2RlbDtcbiAgICB9XG59XG5jb25zdCBwYXJzZVByaW1pdGl2ZVZhbHVlID0gKHZhbHVlKT0+e1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG11c3QgYmUgYSBzdHJpbmcgb3IgbnVtYmVyXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuY29uc3QgcGFyc2VBcnJheVZhbHVlID0gKHZhbHVlKT0+e1xuICAgIGNvbnN0IGlzUHJpbWl0aXZlQXJyYXkgPSBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeSgodik9PnR5cGVvZiB2ID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2ID09PSBcIm51bWJlclwiKTtcbiAgICBpZiAoIWlzUHJpbWl0aXZlQXJyYXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzIG9yIG51bWJlcnNcIik7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCBwYXJzZU51bWJlclZhbHVlID0gKHZhbHVlKT0+e1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IHsgQmFzZVZlY3RvclN0b3JlLCBGaWx0ZXJDb25kaXRpb24sIEZpbHRlck9wZXJhdG9yLCBWZWN0b3JTdG9yZVF1ZXJ5TW9kZSwgZXNjYXBlTGlrZVN0cmluZywgbWV0YWRhdGFEaWN0VG9Ob2RlLCBub2RlVG9NZXRhZGF0YSwgcGFyc2VBcnJheVZhbHVlLCBwYXJzZU51bWJlclZhbHVlLCBwYXJzZVByaW1pdGl2ZVZhbHVlLCB2YWxpZGF0ZUlzRmxhdCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/vector-store/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/node-parser/code/dist/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/node-parser/code/dist/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeSplitter: () => (/* binding */ CodeSplitter),\n/* harmony export */   DEFAULT_MAX_CHARS: () => (/* binding */ DEFAULT_MAX_CHARS)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/node-parser */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js\");\n\n\n\nconst DEFAULT_MAX_CHARS = 1500;\nclass CodeSplitter extends _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_1__.TextSplitter {\n    #parser;\n    constructor(params){\n        super(), this.maxChars = DEFAULT_MAX_CHARS;\n        this.#parser = params.getParser();\n        if (params.maxChars) {\n            this.maxChars = params.maxChars;\n        }\n    }\n    #chunkNode(node, text, lastEnd = 0) {\n        let newChunks = [];\n        let currentChunk = \"\";\n        for (const child of node.children){\n            if (child.endIndex - child.startIndex > this.maxChars) {\n                // Child is too big, recursively chunk the child\n                if (currentChunk.length > 0) {\n                    newChunks.push(currentChunk.trim());\n                    currentChunk = \"\";\n                }\n                newChunks = newChunks.concat(this.#chunkNode(child, text, lastEnd));\n            } else if (currentChunk.length + (child.endIndex - child.startIndex) > this.maxChars) {\n                // Child would make the current chunk too big, so start a new chunk\n                newChunks.push(currentChunk.trim());\n                currentChunk = text.slice(lastEnd, child.endIndex);\n            } else {\n                currentChunk += text.slice(lastEnd, child.endIndex);\n            }\n            lastEnd = child.endIndex;\n        }\n        if (currentChunk.length > 0) {\n            newChunks.push(currentChunk.trim());\n        }\n        return newChunks;\n    }\n    splitText(text) {\n        const callbackManager = _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_0__.Settings.callbackManager;\n        callbackManager.dispatchEvent(\"chunking-start\", {\n            text: [\n                text\n            ]\n        });\n        const tree = this.#parser.parse(text);\n        const rootNode = tree.rootNode;\n        if (rootNode.children.length === 0 || rootNode.children[0]?.type === \"ERROR\") {\n            throw new Error(\"Could not parse code with language\");\n        } else {\n            const chunks = this.#chunkNode(rootNode, text);\n            callbackManager.dispatchEvent(\"chunking-end\", {\n                chunks\n            });\n            return chunks;\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvbm9kZS1wYXJzZXIvY29kZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFDUzs7QUFFNUQ7QUFDQSwyQkFBMkIsc0VBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDZEQUFRO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFMkMiLCJzb3VyY2VzIjpbIi9ob21lL2JyZW50L0Rvd25sb2Fkcy9FbmNvZGVERUFJL0ZpbmFsUHJvamVjdC9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvbm9kZS1wYXJzZXIvY29kZS9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnQGxsYW1haW5kZXgvY29yZS9nbG9iYWwnO1xuaW1wb3J0IHsgVGV4dFNwbGl0dGVyIH0gZnJvbSAnQGxsYW1haW5kZXgvY29yZS9ub2RlLXBhcnNlcic7XG5cbmNvbnN0IERFRkFVTFRfTUFYX0NIQVJTID0gMTUwMDtcbmNsYXNzIENvZGVTcGxpdHRlciBleHRlbmRzIFRleHRTcGxpdHRlciB7XG4gICAgI3BhcnNlcjtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpe1xuICAgICAgICBzdXBlcigpLCB0aGlzLm1heENoYXJzID0gREVGQVVMVF9NQVhfQ0hBUlM7XG4gICAgICAgIHRoaXMuI3BhcnNlciA9IHBhcmFtcy5nZXRQYXJzZXIoKTtcbiAgICAgICAgaWYgKHBhcmFtcy5tYXhDaGFycykge1xuICAgICAgICAgICAgdGhpcy5tYXhDaGFycyA9IHBhcmFtcy5tYXhDaGFycztcbiAgICAgICAgfVxuICAgIH1cbiAgICAjY2h1bmtOb2RlKG5vZGUsIHRleHQsIGxhc3RFbmQgPSAwKSB7XG4gICAgICAgIGxldCBuZXdDaHVua3MgPSBbXTtcbiAgICAgICAgbGV0IGN1cnJlbnRDaHVuayA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbil7XG4gICAgICAgICAgICBpZiAoY2hpbGQuZW5kSW5kZXggLSBjaGlsZC5zdGFydEluZGV4ID4gdGhpcy5tYXhDaGFycykge1xuICAgICAgICAgICAgICAgIC8vIENoaWxkIGlzIHRvbyBiaWcsIHJlY3Vyc2l2ZWx5IGNodW5rIHRoZSBjaGlsZFxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdDaHVua3MucHVzaChjdXJyZW50Q2h1bmsudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENodW5rID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3Q2h1bmtzID0gbmV3Q2h1bmtzLmNvbmNhdCh0aGlzLiNjaHVua05vZGUoY2hpbGQsIHRleHQsIGxhc3RFbmQpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudENodW5rLmxlbmd0aCArIChjaGlsZC5lbmRJbmRleCAtIGNoaWxkLnN0YXJ0SW5kZXgpID4gdGhpcy5tYXhDaGFycykge1xuICAgICAgICAgICAgICAgIC8vIENoaWxkIHdvdWxkIG1ha2UgdGhlIGN1cnJlbnQgY2h1bmsgdG9vIGJpZywgc28gc3RhcnQgYSBuZXcgY2h1bmtcbiAgICAgICAgICAgICAgICBuZXdDaHVua3MucHVzaChjdXJyZW50Q2h1bmsudHJpbSgpKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2h1bmsgPSB0ZXh0LnNsaWNlKGxhc3RFbmQsIGNoaWxkLmVuZEluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENodW5rICs9IHRleHQuc2xpY2UobGFzdEVuZCwgY2hpbGQuZW5kSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEVuZCA9IGNoaWxkLmVuZEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50Q2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbmV3Q2h1bmtzLnB1c2goY3VycmVudENodW5rLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0NodW5rcztcbiAgICB9XG4gICAgc3BsaXRUZXh0KHRleHQpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tNYW5hZ2VyID0gU2V0dGluZ3MuY2FsbGJhY2tNYW5hZ2VyO1xuICAgICAgICBjYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImNodW5raW5nLXN0YXJ0XCIsIHtcbiAgICAgICAgICAgIHRleHQ6IFtcbiAgICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0cmVlID0gdGhpcy4jcGFyc2VyLnBhcnNlKHRleHQpO1xuICAgICAgICBjb25zdCByb290Tm9kZSA9IHRyZWUucm9vdE5vZGU7XG4gICAgICAgIGlmIChyb290Tm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgcm9vdE5vZGUuY2hpbGRyZW5bMF0/LnR5cGUgPT09IFwiRVJST1JcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHBhcnNlIGNvZGUgd2l0aCBsYW5ndWFnZVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rcyA9IHRoaXMuI2NodW5rTm9kZShyb290Tm9kZSwgdGV4dCk7XG4gICAgICAgICAgICBjYWxsYmFja01hbmFnZXIuZGlzcGF0Y2hFdmVudChcImNodW5raW5nLWVuZFwiLCB7XG4gICAgICAgICAgICAgICAgY2h1bmtzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjaHVua3M7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IENvZGVTcGxpdHRlciwgREVGQVVMVF9NQVhfQ0hBUlMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/node-parser/code/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/node-parser/html/dist/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/node-parser/html/dist/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLNodeParser: () => (/* binding */ HTMLNodeParser)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/node-parser */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/node-parser/dist/index.js\");\n/* harmony import */ var _llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/schema */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/schema/dist/index.js\");\n/* harmony import */ var html_to_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! html-to-text */ \"(rsc)/./node_modules/html-to-text/lib/html-to-text.mjs\");\n\n\n\n\nclass HTMLNodeParser extends _llamaindex_core_node_parser__WEBPACK_IMPORTED_MODULE_0__.NodeParser {\n    constructor(params){\n        super(), this.htmlToTextOptions = undefined;\n        if (params?.htmlToTextOptions) {\n            this.htmlToTextOptions = params.htmlToTextOptions;\n        }\n    }\n    parseNodes(documents) {\n        const nodes = [];\n        for (const document of documents){\n            const text = (0,html_to_text__WEBPACK_IMPORTED_MODULE_2__.htmlToText)(document.getContent(_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.MetadataMode.NONE), this.htmlToTextOptions);\n            nodes.push(...(0,_llamaindex_core_schema__WEBPACK_IMPORTED_MODULE_1__.buildNodeFromSplits)([\n                text\n            ], document));\n        }\n        return nodes;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGxhbWFpbmRleC9ub2RlX21vZHVsZXMvQGxsYW1haW5kZXgvbm9kZS1wYXJzZXIvaHRtbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEQ7QUFDa0I7QUFDbEM7O0FBRTFDLDZCQUE2QixvRUFBVTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsd0RBQVUscUJBQXFCLGlFQUFZO0FBQ3BFLDBCQUEwQiw0RUFBbUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQiIsInNvdXJjZXMiOlsiL2hvbWUvYnJlbnQvRG93bmxvYWRzL0VuY29kZURFQUkvRmluYWxQcm9qZWN0L25vZGVfbW9kdWxlcy9sbGFtYWluZGV4L25vZGVfbW9kdWxlcy9AbGxhbWFpbmRleC9ub2RlLXBhcnNlci9odG1sL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZVBhcnNlciB9IGZyb20gJ0BsbGFtYWluZGV4L2NvcmUvbm9kZS1wYXJzZXInO1xuaW1wb3J0IHsgTWV0YWRhdGFNb2RlLCBidWlsZE5vZGVGcm9tU3BsaXRzIH0gZnJvbSAnQGxsYW1haW5kZXgvY29yZS9zY2hlbWEnO1xuaW1wb3J0IHsgaHRtbFRvVGV4dCB9IGZyb20gJ2h0bWwtdG8tdGV4dCc7XG5cbmNsYXNzIEhUTUxOb2RlUGFyc2VyIGV4dGVuZHMgTm9kZVBhcnNlciB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICAgICAgc3VwZXIoKSwgdGhpcy5odG1sVG9UZXh0T3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHBhcmFtcz8uaHRtbFRvVGV4dE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuaHRtbFRvVGV4dE9wdGlvbnMgPSBwYXJhbXMuaHRtbFRvVGV4dE9wdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFyc2VOb2Rlcyhkb2N1bWVudHMpIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpe1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGh0bWxUb1RleHQoZG9jdW1lbnQuZ2V0Q29udGVudChNZXRhZGF0YU1vZGUuTk9ORSksIHRoaXMuaHRtbFRvVGV4dE9wdGlvbnMpO1xuICAgICAgICAgICAgbm9kZXMucHVzaCguLi5idWlsZE5vZGVGcm9tU3BsaXRzKFtcbiAgICAgICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICBdLCBkb2N1bWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IEhUTUxOb2RlUGFyc2VyIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/node-parser/html/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_AVAILABLE_OPENAI_MODELS: () => (/* binding */ ALL_AVAILABLE_OPENAI_MODELS),\n/* harmony export */   ALL_OPENAI_EMBEDDING_MODELS: () => (/* binding */ ALL_OPENAI_EMBEDDING_MODELS),\n/* harmony export */   GPT35_MODELS: () => (/* binding */ GPT35_MODELS),\n/* harmony export */   GPT4_MODELS: () => (/* binding */ GPT4_MODELS),\n/* harmony export */   O1_MODELS: () => (/* binding */ O1_MODELS),\n/* harmony export */   O3_MODELS: () => (/* binding */ O3_MODELS),\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIAgent: () => (/* binding */ OpenAIAgent),\n/* harmony export */   OpenAIAgentWorker: () => (/* binding */ OpenAIAgentWorker),\n/* harmony export */   OpenAIEmbedding: () => (/* binding */ OpenAIEmbedding),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/agent */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/agent/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n/* harmony import */ var _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/decorator */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/decorator/dist/index.js\");\n/* harmony import */ var _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/llms */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/llms/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @llamaindex/env/tokenizers */ \"(rsc)/./node_modules/@llamaindex/env/tokenizers/dist/index.js\");\n/* harmony import */ var openai_helpers_zod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! openai/helpers/zod */ \"(rsc)/./node_modules/openai/helpers/zod.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @llamaindex/core/embeddings */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/embeddings/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar name = \"@llamaindex/openai\";\nvar version = \"0.2.0\";\nvar pkg = {\n\tname: name,\n\tversion: version};\n\n// NOTE we're not supporting the legacy models as they're not available for new deployments\n// https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/legacy-models\n// If you have a need for them, please open an issue on GitHub\nconst ALL_AZURE_OPENAI_CHAT_MODELS = {\n    \"gpt-35-turbo\": {\n        contextWindow: 4096,\n        openAIModel: \"gpt-3.5-turbo\"\n    },\n    \"gpt-35-turbo-16k\": {\n        contextWindow: 16384,\n        openAIModel: \"gpt-3.5-turbo-16k\"\n    },\n    \"gpt-4o\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4o\"\n    },\n    \"gpt-4o-mini\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4o-mini\"\n    },\n    \"gpt-4\": {\n        contextWindow: 8192,\n        openAIModel: \"gpt-4\"\n    },\n    \"gpt-4-32k\": {\n        contextWindow: 32768,\n        openAIModel: \"gpt-4-32k\"\n    },\n    \"gpt-4-turbo\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4-turbo\"\n    },\n    \"gpt-4-turbo-2024-04-09\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4-turbo\"\n    },\n    \"gpt-4-vision-preview\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4-vision-preview\"\n    },\n    \"gpt-4-1106-preview\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4-1106-preview\"\n    },\n    \"gpt-4o-2024-05-13\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4o-2024-05-13\"\n    },\n    \"gpt-4o-mini-2024-07-18\": {\n        contextWindow: 128000,\n        openAIModel: \"gpt-4o-mini-2024-07-18\"\n    }\n};\nconst ALL_AZURE_OPENAI_EMBEDDING_MODELS = {\n    \"text-embedding-ada-002\": {\n        dimensions: 1536,\n        openAIModel: \"text-embedding-ada-002\",\n        maxTokens: 8191\n    },\n    \"text-embedding-3-small\": {\n        dimensions: 1536,\n        dimensionOptions: [\n            512,\n            1536\n        ],\n        openAIModel: \"text-embedding-3-small\",\n        maxTokens: 8191\n    },\n    \"text-embedding-3-large\": {\n        dimensions: 3072,\n        dimensionOptions: [\n            256,\n            1024,\n            3072\n        ],\n        openAIModel: \"text-embedding-3-large\",\n        maxTokens: 8191\n    }\n};\n// Current version list found here - https://learn.microsoft.com/en-us/azure/ai-services/openai/reference\n// const ALL_AZURE_API_VERSIONS = [\n//   \"2022-12-01\",\n//   \"2023-05-15\",\n//   \"2023-06-01-preview\", // Maintained for DALL-E 2\n//   \"2023-10-01-preview\",\n//   \"2024-02-01\",\n//   \"2024-02-15-preview\",\n//   \"2024-03-01-preview\",\n//   \"2024-04-01-preview\",\n//   \"2024-05-01-preview\",\n//   \"2024-06-01\",\n// ];\nconst DEFAULT_API_VERSION = \"2023-05-15\";\n//^ NOTE: this will change over time, if you want to pin it, use a specific version\nfunction getAzureConfigFromEnv(init) {\n    const deployment = init && \"deploymentName\" in init && typeof init.deploymentName === \"string\" ? init?.deploymentName : init?.deployment ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_DEPLOYMENT\") ?? // From Azure docs\n    (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\") ?? // LCJS compatible\n    init?.model; // Fall back to model name, Python compatible\n    return {\n        apiKey: init?.apiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_KEY\") ?? // From Azure docs\n        (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_KEY\") ?? // Python compatible\n        (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_API_KEY\"),\n        endpoint: init?.endpoint ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_ENDPOINT\") ?? // From Azure docs\n        (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_BASE\") ?? // Python compatible\n        (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_API_INSTANCE_NAME\"),\n        apiVersion: init?.apiVersion ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_API_VERSION\") ?? // From Azure docs\n        (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_VERSION\") ?? // Python compatible\n        (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_API_VERSION\") ?? // LCJS compatible\n        DEFAULT_API_VERSION,\n        deployment\n    };\n}\nfunction getAzureModel(openAIModel) {\n    for (const [key, value] of Object.entries(ALL_AZURE_OPENAI_EMBEDDING_MODELS)){\n        if (value.openAIModel === openAIModel) {\n            return key;\n        }\n    }\n    for (const [key, value] of Object.entries(ALL_AZURE_OPENAI_CHAT_MODELS)){\n        if (value.openAIModel === openAIModel) {\n            return key;\n        }\n    }\n    throw new Error(`Unknown model: ${openAIModel}`);\n}\nfunction shouldUseAzure() {\n    return (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_ENDPOINT\") || (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"AZURE_OPENAI_API_INSTANCE_NAME\") || (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_TYPE\") === \"azure\";\n}\n// This mixin adds a User-Agent header to the request for Azure OpenAI\nfunction AzureOpenAIWithUserAgent(Base) {\n    return class AzureOpenAI extends Base {\n        // Define a new public method that wraps the base class's defaultHeaders\n        defaultHeaders(opts) {\n            const baseHeaders = super.defaultHeaders(opts);\n            return {\n                ...baseHeaders,\n                \"User-Agent\": `${pkg.name}/${pkg.version} (node.js/${_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.process.version}; ${_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.process.platform}; ${_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.process.arch}) ${baseHeaders[\"User-Agent\"] || \"\"}`\n            };\n        }\n    };\n}\n\nfunction applyDecs2203RFactory() {\n    function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n        return function addInitializer(initializer) {\n            assertNotFinished(decoratorFinishedRef, \"addInitializer\");\n            assertCallable(initializer, \"An initializer\");\n            initializers.push(initializer);\n        };\n    }\n    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {\n        var kindStr;\n        switch(kind){\n            case 1:\n                kindStr = \"accessor\";\n                break;\n            case 2:\n                kindStr = \"method\";\n                break;\n            case 3:\n                kindStr = \"getter\";\n                break;\n            case 4:\n                kindStr = \"setter\";\n                break;\n            default:\n                kindStr = \"field\";\n        }\n        var ctx = {\n            kind: kindStr,\n            name: isPrivate ? \"#\" + name : name,\n            static: isStatic,\n            private: isPrivate,\n            metadata: metadata\n        };\n        var decoratorFinishedRef = {\n            v: false\n        };\n        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);\n        var get, set;\n        if (kind === 0) {\n            if (isPrivate) {\n                get = desc.get;\n                set = desc.set;\n            } else {\n                get = function() {\n                    return this[name];\n                };\n                set = function(v) {\n                    this[name] = v;\n                };\n            }\n        } else if (kind === 2) {\n            get = function() {\n                return desc.value;\n            };\n        } else {\n            if (kind === 1 || kind === 3) {\n                get = function() {\n                    return desc.get.call(this);\n                };\n            }\n            if (kind === 1 || kind === 4) {\n                set = function(v) {\n                    desc.set.call(this, v);\n                };\n            }\n        }\n        ctx.access = get && set ? {\n            get: get,\n            set: set\n        } : get ? {\n            get: get\n        } : {\n            set: set\n        };\n        try {\n            return dec(value, ctx);\n        } finally{\n            decoratorFinishedRef.v = true;\n        }\n    }\n    function assertNotFinished(decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) {\n            throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n        }\n    }\n    function assertCallable(fn, hint) {\n        if (typeof fn !== \"function\") {\n            throw new TypeError(hint + \" must be a function\");\n        }\n    }\n    function assertValidReturnValue(kind, value) {\n        var type = typeof value;\n        if (kind === 1) {\n            if (type !== \"object\" || value === null) {\n                throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n            }\n            if (value.get !== undefined) {\n                assertCallable(value.get, \"accessor.get\");\n            }\n            if (value.set !== undefined) {\n                assertCallable(value.set, \"accessor.set\");\n            }\n            if (value.init !== undefined) {\n                assertCallable(value.init, \"accessor.init\");\n            }\n        } else if (type !== \"function\") {\n            var hint;\n            if (kind === 0) {\n                hint = \"field\";\n            } else if (kind === 10) {\n                hint = \"class\";\n            } else {\n                hint = \"method\";\n            }\n            throw new TypeError(hint + \" decorators must return a function or void 0\");\n        }\n    }\n    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {\n        var decs = decInfo[0];\n        var desc, init, value;\n        if (isPrivate) {\n            if (kind === 0 || kind === 1) {\n                desc = {\n                    get: decInfo[3],\n                    set: decInfo[4]\n                };\n            } else if (kind === 3) {\n                desc = {\n                    get: decInfo[3]\n                };\n            } else if (kind === 4) {\n                desc = {\n                    set: decInfo[3]\n                };\n            } else {\n                desc = {\n                    value: decInfo[3]\n                };\n            }\n        } else if (kind !== 0) {\n            desc = Object.getOwnPropertyDescriptor(base, name);\n        }\n        if (kind === 1) {\n            value = {\n                get: desc.get,\n                set: desc.set\n            };\n        } else if (kind === 2) {\n            value = desc.value;\n        } else if (kind === 3) {\n            value = desc.get;\n        } else if (kind === 4) {\n            value = desc.set;\n        }\n        var newValue, get, set;\n        if (typeof decs === \"function\") {\n            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n            if (newValue !== void 0) {\n                assertValidReturnValue(kind, newValue);\n                if (kind === 0) {\n                    init = newValue;\n                } else if (kind === 1) {\n                    init = newValue.init;\n                    get = newValue.get || value.get;\n                    set = newValue.set || value.set;\n                    value = {\n                        get: get,\n                        set: set\n                    };\n                } else {\n                    value = newValue;\n                }\n            }\n        } else {\n            for(var i = decs.length - 1; i >= 0; i--){\n                var dec = decs[i];\n                newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);\n                if (newValue !== void 0) {\n                    assertValidReturnValue(kind, newValue);\n                    var newInit;\n                    if (kind === 0) {\n                        newInit = newValue;\n                    } else if (kind === 1) {\n                        newInit = newValue.init;\n                        get = newValue.get || value.get;\n                        set = newValue.set || value.set;\n                        value = {\n                            get: get,\n                            set: set\n                        };\n                    } else {\n                        value = newValue;\n                    }\n                    if (newInit !== void 0) {\n                        if (init === void 0) {\n                            init = newInit;\n                        } else if (typeof init === \"function\") {\n                            init = [\n                                init,\n                                newInit\n                            ];\n                        } else {\n                            init.push(newInit);\n                        }\n                    }\n                }\n            }\n        }\n        if (kind === 0 || kind === 1) {\n            if (init === void 0) {\n                init = function(instance, init) {\n                    return init;\n                };\n            } else if (typeof init !== \"function\") {\n                var ownInitializers = init;\n                init = function(instance, init) {\n                    var value = init;\n                    for(var i = 0; i < ownInitializers.length; i++){\n                        value = ownInitializers[i].call(instance, value);\n                    }\n                    return value;\n                };\n            } else {\n                var originalInitializer = init;\n                init = function(instance, init) {\n                    return originalInitializer.call(instance, init);\n                };\n            }\n            ret.push(init);\n        }\n        if (kind !== 0) {\n            if (kind === 1) {\n                desc.get = value.get;\n                desc.set = value.set;\n            } else if (kind === 2) {\n                desc.value = value;\n            } else if (kind === 3) {\n                desc.get = value;\n            } else if (kind === 4) {\n                desc.set = value;\n            }\n            if (isPrivate) {\n                if (kind === 1) {\n                    ret.push(function(instance, args) {\n                        return value.get.call(instance, args);\n                    });\n                    ret.push(function(instance, args) {\n                        return value.set.call(instance, args);\n                    });\n                } else if (kind === 2) {\n                    ret.push(value);\n                } else {\n                    ret.push(function(instance, args) {\n                        return value.call(instance, args);\n                    });\n                }\n            } else {\n                Object.defineProperty(base, name, desc);\n            }\n        }\n    }\n    function applyMemberDecs(Class, decInfos, metadata) {\n        var ret = [];\n        var protoInitializers;\n        var staticInitializers;\n        var existingProtoNonFields = new Map();\n        var existingStaticNonFields = new Map();\n        for(var i = 0; i < decInfos.length; i++){\n            var decInfo = decInfos[i];\n            if (!Array.isArray(decInfo)) continue;\n            var kind = decInfo[1];\n            var name = decInfo[2];\n            var isPrivate = decInfo.length > 3;\n            var isStatic = kind >= 5;\n            var base;\n            var initializers;\n            if (isStatic) {\n                base = Class;\n                kind = kind - 5;\n                staticInitializers = staticInitializers || [];\n                initializers = staticInitializers;\n            } else {\n                base = Class.prototype;\n                protoInitializers = protoInitializers || [];\n                initializers = protoInitializers;\n            }\n            if (kind !== 0 && !isPrivate) {\n                var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;\n                var existingKind = existingNonFields.get(name) || 0;\n                if (existingKind === true || existingKind === 3 && kind !== 4 || existingKind === 4 && kind !== 3) {\n                    throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n                } else if (!existingKind && kind > 2) {\n                    existingNonFields.set(name, kind);\n                } else {\n                    existingNonFields.set(name, true);\n                }\n            }\n            applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);\n        }\n        pushInitializers(ret, protoInitializers);\n        pushInitializers(ret, staticInitializers);\n        return ret;\n    }\n    function pushInitializers(ret, initializers) {\n        if (initializers) {\n            ret.push(function(instance) {\n                for(var i = 0; i < initializers.length; i++){\n                    initializers[i].call(instance);\n                }\n                return instance;\n            });\n        }\n    }\n    function applyClassDecs(targetClass, classDecs, metadata) {\n        if (classDecs.length > 0) {\n            var initializers = [];\n            var newClass = targetClass;\n            var name = targetClass.name;\n            for(var i = classDecs.length - 1; i >= 0; i--){\n                var decoratorFinishedRef = {\n                    v: false\n                };\n                try {\n                    var nextNewClass = classDecs[i](newClass, {\n                        kind: \"class\",\n                        name: name,\n                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),\n                        metadata\n                    });\n                } finally{\n                    decoratorFinishedRef.v = true;\n                }\n                if (nextNewClass !== undefined) {\n                    assertValidReturnValue(10, nextNewClass);\n                    newClass = nextNewClass;\n                }\n            }\n            return [\n                defineMetadata(newClass, metadata),\n                function() {\n                    for(var i = 0; i < initializers.length; i++){\n                        initializers[i].call(newClass);\n                    }\n                }\n            ];\n        }\n    }\n    function defineMetadata(Class, metadata) {\n        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\"Symbol.metadata\"), {\n            configurable: true,\n            enumerable: true,\n            value: metadata\n        });\n    }\n    return function applyDecs2203R(targetClass, memberDecs, classDecs, parentClass) {\n        if (parentClass !== void 0) {\n            var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\"Symbol.metadata\")];\n        }\n        var metadata = Object.create(parentMetadata === void 0 ? null : parentMetadata);\n        var e = applyMemberDecs(targetClass, memberDecs, metadata);\n        if (!classDecs.length) defineMetadata(targetClass, metadata);\n        return {\n            e: e,\n            get c () {\n                return applyClassDecs(targetClass, classDecs, metadata);\n            }\n        };\n    };\n}\nfunction _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {\n    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);\n}\nvar _initProto;\nconst GPT4_MODELS = {\n    \"chatgpt-4o-latest\": {\n        contextWindow: 128000\n    },\n    \"gpt-4.5-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4.5-preview-2025-02-27\": {\n        contextWindow: 128000\n    },\n    \"gpt-4\": {\n        contextWindow: 8192\n    },\n    \"gpt-4-32k\": {\n        contextWindow: 32768\n    },\n    \"gpt-4-32k-0613\": {\n        contextWindow: 32768\n    },\n    \"gpt-4-turbo\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-turbo-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-1106-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-0125-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-vision-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-2024-05-13\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-mini\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-mini-2024-07-18\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-2024-08-06\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-2024-09-14\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-2024-10-14\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-0613\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-turbo-2024-04-09\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-0314\": {\n        contextWindow: 128000\n    },\n    \"gpt-4-32k-0314\": {\n        contextWindow: 32768\n    },\n    \"gpt-4o-realtime-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-realtime-preview-2024-10-01\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-audio-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-audio-preview-2024-10-01\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-2024-11-20\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-audio-preview-2024-12-17\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-mini-audio-preview\": {\n        contextWindow: 128000\n    },\n    \"gpt-4o-mini-audio-preview-2024-12-17\": {\n        contextWindow: 128000\n    }\n};\n// NOTE we don't currently support gpt-3.5-turbo-instruct and don't plan to in the near future\nconst GPT35_MODELS = {\n    \"gpt-3.5-turbo\": {\n        contextWindow: 16385\n    },\n    \"gpt-3.5-turbo-0613\": {\n        contextWindow: 4096\n    },\n    \"gpt-3.5-turbo-16k\": {\n        contextWindow: 16385\n    },\n    \"gpt-3.5-turbo-16k-0613\": {\n        contextWindow: 16385\n    },\n    \"gpt-3.5-turbo-1106\": {\n        contextWindow: 16385\n    },\n    \"gpt-3.5-turbo-0125\": {\n        contextWindow: 16385\n    },\n    \"gpt-3.5-turbo-0301\": {\n        contextWindow: 16385\n    }\n};\nconst O1_MODELS = {\n    \"o1-preview\": {\n        contextWindow: 128000\n    },\n    \"o1-preview-2024-09-12\": {\n        contextWindow: 128000\n    },\n    \"o1-mini\": {\n        contextWindow: 128000\n    },\n    \"o1-mini-2024-09-12\": {\n        contextWindow: 128000\n    },\n    o1: {\n        contextWindow: 128000\n    },\n    \"o1-2024-12-17\": {\n        contextWindow: 128000\n    }\n};\nconst O3_MODELS = {\n    \"o3-mini\": {\n        contextWindow: 200000\n    },\n    \"o3-mini-2025-01-31\": {\n        contextWindow: 200000\n    }\n};\n/**\n * We currently support GPT-3.5 and GPT-4 models\n */ const ALL_AVAILABLE_OPENAI_MODELS = {\n    ...GPT4_MODELS,\n    ...GPT35_MODELS,\n    ...O1_MODELS,\n    ...O3_MODELS\n};\nfunction isFunctionCallingModel(llm) {\n    let model;\n    if (llm instanceof OpenAI) {\n        model = llm.model;\n    } else if (\"model\" in llm && typeof llm.model === \"string\") {\n        model = llm.model;\n    } else {\n        return false;\n    }\n    const isChatModel = Object.keys(ALL_AVAILABLE_OPENAI_MODELS).includes(model);\n    const isOld = model.includes(\"0314\") || model.includes(\"0301\");\n    const isO1 = model.startsWith(\"o1\");\n    return isChatModel && !isOld && !isO1;\n}\nfunction isReasoningModel(model) {\n    const isO1 = model.startsWith(\"o1\");\n    const isO3 = model.startsWith(\"o3\");\n    return isO1 || isO3;\n}\nfunction isTemperatureSupported(model) {\n    return !model.startsWith(\"o3\");\n}\nclass OpenAI extends _llamaindex_core_llms__WEBPACK_IMPORTED_MODULE_3__.ToolCallLLM {\n    static{\n        ({ e: [_initProto] } = _apply_decs_2203_r(this, [\n            [\n                [\n                    _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_2__.wrapEventCaller,\n                    _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_2__.wrapLLMEvent\n                ],\n                2,\n                \"chat\"\n            ],\n            [\n                _llamaindex_core_decorator__WEBPACK_IMPORTED_MODULE_2__.wrapEventCaller,\n                2,\n                \"streamChat\"\n            ]\n        ], []));\n    }\n    #session;\n    get session() {\n        if (!this.#session) {\n            this.#session = this.lazySession();\n        }\n        return this.#session;\n    }\n    constructor(init){\n        super(), // OpenAI session params\n        this.apiKey = (_initProto(this), undefined), this.baseURL = undefined, this.#session = null;\n        this.model = init?.model ?? \"gpt-4o\";\n        this.temperature = init?.temperature ?? 0.1;\n        this.reasoningEffort = isReasoningModel(this.model) ? init?.reasoningEffort : undefined;\n        this.topP = init?.topP ?? 1;\n        this.maxTokens = init?.maxTokens ?? undefined;\n        this.maxRetries = init?.maxRetries ?? 10;\n        this.timeout = init?.timeout ?? 60 * 1000; // Default is 60 seconds\n        this.additionalChatOptions = init?.additionalChatOptions;\n        this.additionalSessionOptions = init?.additionalSessionOptions;\n        this.apiKey = init?.session?.apiKey ?? init?.apiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_KEY\");\n        this.baseURL = init?.session?.baseURL ?? init?.baseURL ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_BASE_URL\");\n        if (init?.azure || shouldUseAzure()) {\n            const azureConfig = {\n                ...getAzureConfigFromEnv({\n                    model: getAzureModel(this.model)\n                }),\n                ...init?.azure\n            };\n            this.lazySession = async ()=>init?.session ?? __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\")).then(({ AzureOpenAI })=>{\n                    AzureOpenAI = AzureOpenAIWithUserAgent(AzureOpenAI);\n                    return new AzureOpenAI({\n                        maxRetries: this.maxRetries,\n                        timeout: this.timeout,\n                        ...this.additionalSessionOptions,\n                        ...azureConfig\n                    });\n                });\n        } else {\n            this.lazySession = async ()=>init?.session ?? __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\")).then(({ OpenAI })=>{\n                    return new OpenAI({\n                        apiKey: this.apiKey,\n                        baseURL: this.baseURL,\n                        maxRetries: this.maxRetries,\n                        timeout: this.timeout,\n                        ...this.additionalSessionOptions\n                    });\n                });\n        }\n    }\n    get supportToolCall() {\n        return isFunctionCallingModel(this);\n    }\n    get metadata() {\n        const contextWindow = ALL_AVAILABLE_OPENAI_MODELS[this.model]?.contextWindow ?? 1024;\n        return {\n            model: this.model,\n            temperature: this.temperature,\n            topP: this.topP,\n            maxTokens: this.maxTokens,\n            contextWindow,\n            tokenizer: _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_6__.Tokenizers.CL100K_BASE,\n            structuredOutput: true\n        };\n    }\n    static toOpenAIRole(messageType) {\n        switch(messageType){\n            case \"user\":\n                return \"user\";\n            case \"assistant\":\n                return \"assistant\";\n            case \"system\":\n                return \"system\";\n            default:\n                return \"user\";\n        }\n    }\n    static toOpenAIMessage(messages) {\n        return messages.map((message)=>{\n            const options = message.options ?? {};\n            if (\"toolResult\" in options) {\n                return {\n                    tool_call_id: options.toolResult.id,\n                    role: \"tool\",\n                    content: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(message.content)\n                };\n            } else if (\"toolCall\" in options) {\n                return {\n                    role: \"assistant\",\n                    content: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(message.content),\n                    tool_calls: options.toolCall.map((toolCall)=>{\n                        return {\n                            id: toolCall.id,\n                            type: \"function\",\n                            function: {\n                                name: toolCall.name,\n                                arguments: typeof toolCall.input === \"string\" ? toolCall.input : JSON.stringify(toolCall.input)\n                            }\n                        };\n                    })\n                };\n            } else if (message.role === \"user\") {\n                return {\n                    role: \"user\",\n                    content: message.content\n                };\n            }\n            const response = {\n                // fixme(alex): type assertion\n                role: OpenAI.toOpenAIRole(message.role),\n                // fixme: should not extract text, but assert content is string\n                content: (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_4__.extractText)(message.content)\n            };\n            return response;\n        });\n    }\n    async chat(params) {\n        const { messages, stream, tools, responseFormat, additionalChatOptions } = params;\n        const baseRequestParams = {\n            model: this.model,\n            temperature: this.temperature,\n            reasoning_effort: this.reasoningEffort,\n            max_tokens: this.maxTokens,\n            tools: tools?.map(OpenAI.toTool),\n            messages: OpenAI.toOpenAIMessage(messages),\n            top_p: this.topP,\n            ...Object.assign({}, this.additionalChatOptions, additionalChatOptions)\n        };\n        if (Array.isArray(baseRequestParams.tools) && baseRequestParams.tools.length === 0) {\n            // remove empty tools array to avoid OpenAI error\n            delete baseRequestParams.tools;\n        }\n        if (!isTemperatureSupported(baseRequestParams.model)) delete baseRequestParams.temperature;\n        //add response format for the structured output\n        if (responseFormat && this.metadata.structuredOutput) {\n            if (responseFormat instanceof zod__WEBPACK_IMPORTED_MODULE_8__.z.ZodType) baseRequestParams.response_format = (0,openai_helpers_zod__WEBPACK_IMPORTED_MODULE_9__.zodResponseFormat)(responseFormat, \"response_format\");\n            else {\n                baseRequestParams.response_format = responseFormat;\n            }\n        }\n        // Streaming\n        if (stream) {\n            return this.streamChat(baseRequestParams);\n        }\n        // Non-streaming\n        const response = await (await this.session).chat.completions.create({\n            ...baseRequestParams,\n            stream: false\n        });\n        const content = response.choices[0].message?.content ?? \"\";\n        return {\n            raw: response,\n            message: {\n                content,\n                role: response.choices[0].message.role,\n                options: response.choices[0].message?.tool_calls ? {\n                    toolCall: response.choices[0].message.tool_calls.map((toolCall)=>({\n                            id: toolCall.id,\n                            name: toolCall.function.name,\n                            input: toolCall.function.arguments\n                        }))\n                } : {}\n            }\n        };\n    }\n    // todo: this wrapper is ugly, refactor it\n    async *streamChat(baseRequestParams) {\n        const stream = await (await this.session).chat.completions.create({\n            ...baseRequestParams,\n            stream: true\n        });\n        // TODO: add callback to streamConverter and use streamConverter here\n        // this will be used to keep track of the current tool call, make sure input are valid json object.\n        let currentToolCall = null;\n        const toolCallMap = new Map();\n        for await (const part of stream){\n            if (part.choices.length === 0) {\n                if (part.usage) {\n                    yield {\n                        raw: part,\n                        delta: \"\"\n                    };\n                }\n                continue;\n            }\n            const choice = part.choices[0];\n            // skip parts that don't have any content\n            if (!(choice.delta.content || choice.delta.tool_calls || choice.finish_reason)) continue;\n            let shouldEmitToolCall = null;\n            if (choice.delta.tool_calls?.[0].id && currentToolCall && choice.delta.tool_calls?.[0].id !== currentToolCall.id) {\n                shouldEmitToolCall = {\n                    ...currentToolCall,\n                    input: JSON.parse(currentToolCall.input)\n                };\n            }\n            if (choice.delta.tool_calls?.[0].id) {\n                currentToolCall = {\n                    name: choice.delta.tool_calls[0].function.name,\n                    id: choice.delta.tool_calls[0].id,\n                    input: choice.delta.tool_calls[0].function.arguments\n                };\n                toolCallMap.set(choice.delta.tool_calls[0].id, currentToolCall);\n            } else {\n                if (choice.delta.tool_calls?.[0].function?.arguments) {\n                    currentToolCall.input += choice.delta.tool_calls[0].function.arguments;\n                }\n            }\n            const isDone = choice.finish_reason !== null;\n            if (isDone && currentToolCall) {\n                // for the last one, we need to emit the tool call\n                shouldEmitToolCall = {\n                    ...currentToolCall,\n                    input: JSON.parse(currentToolCall.input)\n                };\n            }\n            yield {\n                raw: part,\n                options: shouldEmitToolCall ? {\n                    toolCall: [\n                        shouldEmitToolCall\n                    ]\n                } : currentToolCall ? {\n                    toolCall: [\n                        currentToolCall\n                    ]\n                } : {},\n                delta: choice.delta.content ?? \"\"\n            };\n        }\n        toolCallMap.clear();\n        return;\n    }\n    static toTool(tool) {\n        return {\n            type: \"function\",\n            function: tool.metadata.parameters ? {\n                name: tool.metadata.name,\n                description: tool.metadata.description,\n                parameters: tool.metadata.parameters\n            } : {\n                name: tool.metadata.name,\n                description: tool.metadata.description\n            }\n        };\n    }\n}\n/**\n * Convenience function to create a new OpenAI instance.\n * @param init - Optional initialization parameters for the OpenAI instance.\n * @returns A new OpenAI instance.\n */ const openai = (init)=>new OpenAI(init);\n\nclass OpenAIAgentWorker extends _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.LLMAgentWorker {\n}\nclass OpenAIAgent extends _llamaindex_core_agent__WEBPACK_IMPORTED_MODULE_0__.LLMAgent {\n    constructor(params){\n        const llm = params.llm ?? (_llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.Settings.llm instanceof OpenAI ? _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_1__.Settings.llm : new OpenAI());\n        super({\n            ...params,\n            llm\n        });\n    }\n}\n\nconst ALL_OPENAI_EMBEDDING_MODELS = {\n    \"text-embedding-ada-002\": {\n        dimensions: 1536,\n        maxTokens: 8192,\n        tokenizer: _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_6__.Tokenizers.CL100K_BASE\n    },\n    \"text-embedding-3-small\": {\n        dimensions: 1536,\n        dimensionOptions: [\n            512,\n            1536\n        ],\n        maxTokens: 8192,\n        tokenizer: _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_6__.Tokenizers.CL100K_BASE\n    },\n    \"text-embedding-3-large\": {\n        dimensions: 3072,\n        dimensionOptions: [\n            256,\n            1024,\n            3072\n        ],\n        maxTokens: 8192,\n        tokenizer: _llamaindex_env_tokenizers__WEBPACK_IMPORTED_MODULE_6__.Tokenizers.CL100K_BASE\n    }\n};\nclass OpenAIEmbedding extends _llamaindex_core_embeddings__WEBPACK_IMPORTED_MODULE_7__.BaseEmbedding {\n    #session;\n    get session() {\n        if (!this.#session) {\n            this.#session = this.lazySession();\n        }\n        return this.#session;\n    }\n    /**\n   * OpenAI Embedding\n   * @param init - initial parameters\n   */ constructor(init){\n        super(), // OpenAI session params\n        /** api key */ this.apiKey = undefined, /** base url */ this.baseURL = undefined, this.#session = null, /**\n   * Get embeddings for a batch of texts\n   * @param texts\n   */ this.getTextEmbeddings = async (texts)=>{\n            return this.getOpenAIEmbedding(texts);\n        };\n        this.model = init?.model ?? \"text-embedding-ada-002\";\n        this.dimensions = init?.dimensions; // if no dimensions provided, will be undefined/not sent to OpenAI\n        this.embedBatchSize = init?.embedBatchSize ?? 10;\n        this.maxRetries = init?.maxRetries ?? 10;\n        this.timeout = init?.timeout ?? 60 * 1000; // Default is 60 seconds\n        this.additionalSessionOptions = init?.additionalSessionOptions;\n        // find metadata for model\n        const key = Object.keys(ALL_OPENAI_EMBEDDING_MODELS).find((key)=>key === this.model);\n        if (key) {\n            this.embedInfo = ALL_OPENAI_EMBEDDING_MODELS[key];\n        }\n        if (init?.azure || shouldUseAzure()) {\n            const azureConfig = {\n                ...getAzureConfigFromEnv({\n                    model: getAzureModel(this.model)\n                }),\n                ...init?.azure\n            };\n            this.apiKey = init?.session?.apiKey ?? azureConfig.apiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_KEY\");\n            this.baseURL = init?.session?.baseURL ?? azureConfig.baseURL ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_BASE_URL\");\n            this.lazySession = async ()=>__webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\")).then(async ({ AzureOpenAI })=>{\n                    AzureOpenAI = AzureOpenAIWithUserAgent(AzureOpenAI);\n                    return init?.session ?? new AzureOpenAI({\n                        maxRetries: this.maxRetries,\n                        timeout: this.timeout,\n                        ...this.additionalSessionOptions,\n                        ...azureConfig\n                    });\n                });\n        } else {\n            this.apiKey = init?.session?.apiKey ?? init?.apiKey ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_API_KEY\");\n            this.baseURL = init?.session?.baseURL ?? init?.baseURL ?? (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_5__.getEnv)(\"OPENAI_BASE_URL\");\n            this.lazySession = async ()=>__webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\")).then(({ OpenAI })=>{\n                    return init?.session ?? new OpenAI({\n                        apiKey: this.apiKey,\n                        baseURL: this.baseURL,\n                        maxRetries: this.maxRetries,\n                        timeout: this.timeout,\n                        ...this.additionalSessionOptions\n                    });\n                });\n        }\n    }\n    /**\n   * Get embeddings for a batch of texts\n   * @param texts\n   * @param options\n   */ async getOpenAIEmbedding(input) {\n        // TODO: ensure this for every sub class by calling it in the base class\n        input = this.truncateMaxTokens(input);\n        const { data } = await (await this.session).embeddings.create(this.dimensions ? {\n            model: this.model,\n            dimensions: this.dimensions,\n            input\n        } : {\n            model: this.model,\n            input\n        });\n        return data.map((d)=>d.embedding);\n    }\n    /**\n   * Get embeddings for a single text\n   * @param text\n   */ async getTextEmbedding(text) {\n        return (await this.getOpenAIEmbedding([\n            text\n        ]))[0];\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/openai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/agent/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/agent/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentInput: () => (/* binding */ AgentInput),\n/* harmony export */   AgentOutput: () => (/* binding */ AgentOutput),\n/* harmony export */   AgentSetup: () => (/* binding */ AgentSetup),\n/* harmony export */   AgentStepEvent: () => (/* binding */ AgentStepEvent),\n/* harmony export */   AgentStream: () => (/* binding */ AgentStream),\n/* harmony export */   AgentToolCall: () => (/* binding */ AgentToolCall),\n/* harmony export */   AgentToolCallResult: () => (/* binding */ AgentToolCallResult),\n/* harmony export */   AgentWorkflow: () => (/* binding */ AgentWorkflow),\n/* harmony export */   FunctionAgent: () => (/* binding */ FunctionAgent),\n/* harmony export */   ToolCallsEvent: () => (/* binding */ ToolCallsEvent),\n/* harmony export */   ToolResultsEvent: () => (/* binding */ ToolResultsEvent),\n/* harmony export */   agent: () => (/* binding */ agent),\n/* harmony export */   multiAgent: () => (/* binding */ multiAgent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/core/memory */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/memory/dist/index.js\");\n/* harmony import */ var _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @llamaindex/core/prompts */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/prompts/dist/index.js\");\n/* harmony import */ var _llamaindex_core_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @llamaindex/core/tools */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/tools/dist/index.js\");\n/* harmony import */ var _llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @llamaindex/core/utils */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/utils/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n/* harmony import */ var _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @llamaindex/core/global */ \"(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/core/global/dist/index.js\");\n\n\n\n\n\n\n\n\nclass WorkflowEvent {\n    constructor(data){\n        this.data = data;\n        this.displayName = this.constructor.name;\n    }\n    toString() {\n        return this.displayName;\n    }\n    static or(AEvent, BEvent) {\n        function OrEvent() {\n            throw new Error(\"Cannot instantiate OrEvent\");\n        }\n        OrEvent.prototype = Object.create(AEvent.prototype);\n        Object.getOwnPropertyNames(BEvent.prototype).forEach((property)=>{\n            if (!(property in OrEvent.prototype)) {\n                Object.defineProperty(OrEvent.prototype, property, Object.getOwnPropertyDescriptor(BEvent.prototype, property));\n            }\n        });\n        OrEvent.prototype.constructor = OrEvent;\n        Object.defineProperty(OrEvent, Symbol.hasInstance, {\n            value: function(instance) {\n                return instance instanceof AEvent || instance instanceof BEvent;\n            }\n        });\n        return OrEvent;\n    }\n}\n// These are special events that are used to control the workflow\nclass StartEvent extends WorkflowEvent {\n    constructor(data){\n        super(data);\n    }\n}\nclass StopEvent extends WorkflowEvent {\n    constructor(data){\n        super(data);\n    }\n}\n\nvar _computedKey, _computedKey1;\nfunction flattenEvents(acceptEventTypes, inputEvents) {\n    const eventMap = new Map();\n    for (const event of inputEvents){\n        for (const acceptType of acceptEventTypes){\n            if (event instanceof acceptType && !eventMap.has(acceptType)) {\n                eventMap.set(acceptType, event);\n                break; // Once matched, no need to check other accept types\n            }\n        }\n    }\n    return Array.from(eventMap.values());\n}\n_computedKey = Symbol.asyncIterator, _computedKey1 = Symbol.toStringTag;\nclass WorkflowContext {\n    #steps;\n    #startEvent;\n    #queue;\n    #queueEventTarget;\n    #wait;\n    #timeout;\n    #verbose;\n    #data;\n    #stepCache;\n    #getStepFunction(event) {\n        if (this.#stepCache.has(event)) {\n            return this.#stepCache.get(event);\n        }\n        const set = new Set();\n        const stepInputs = new WeakMap();\n        const stepOutputs = new WeakMap();\n        const res = [\n            set,\n            stepInputs,\n            stepOutputs\n        ];\n        this.#stepCache.set(event, res);\n        for (const [step, { inputs, outputs }] of this.#steps){\n            if (inputs.some((input)=>event instanceof input)) {\n                set.add(step);\n                stepInputs.set(step, inputs);\n                stepOutputs.set(step, outputs);\n            }\n        }\n        return res;\n    }\n    constructor(params){\n        this.#queue = [];\n        this.#queueEventTarget = new EventTarget();\n        this.#timeout = null;\n        this.#verbose = false;\n        this.#stepCache = new Map();\n        // make sure it will only be called once\n        this.#iterator = null;\n        this.#signal = null;\n        this.#sendEvent = (event)=>{\n            this.#queue.push({\n                type: \"event\",\n                event\n            });\n        };\n        this.#requireEvent = async (event)=>{\n            const requestId = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_4__.randomUUID)();\n            this.#queue.push({\n                type: \"requestEvent\",\n                id: requestId,\n                requestEvent: event\n            });\n            return new Promise((resolve)=>{\n                const handler = (event)=>{\n                    if (event instanceof _llamaindex_env__WEBPACK_IMPORTED_MODULE_4__.CustomEvent) {\n                        const { id } = event.detail;\n                        if (requestId === id) {\n                            this.#queueEventTarget.removeEventListener(\"update\", handler);\n                            resolve(event.detail.event);\n                        }\n                    }\n                };\n                this.#queueEventTarget.addEventListener(\"update\", handler);\n            });\n        };\n        this.#pendingInputQueue = [];\n        // if strict mode is enabled, it will throw an error if there's input or output events are not expected\n        this.#strict = false;\n        // PromiseLike implementation, this is following the Promise/A+ spec\n        // It will consume the iterator and resolve the promise once it reaches the StopEvent\n        // If you want to customize the behavior, you can use the async iterator directly\n        this.#resolved = null;\n        this.#rejected = null;\n        this[_computedKey1] = \"Context\";\n        this.#steps = params.steps;\n        this.#startEvent = params.startEvent;\n        if (typeof params.timeout === \"number\") {\n            this.#timeout = params.timeout;\n        }\n        this.#data = params.contextData;\n        this.#verbose = params.verbose ?? false;\n        this.#wait = params.wait;\n        // push start event to the queue\n        const [step] = this.#getStepFunction(this.#startEvent);\n        if (step.size === 0) {\n            throw new TypeError(\"No step found for start event\");\n        }\n        // restore from snapshot\n        if (params.queue) {\n            params.queue.forEach((protocol)=>{\n                this.#queue.push(protocol);\n            });\n        } else {\n            this.#sendEvent(this.#startEvent);\n        }\n        if (params.pendingInputQueue) {\n            this.#pendingInputQueue = params.pendingInputQueue;\n        }\n        if (params.resolved) {\n            this.#resolved = params.resolved;\n        }\n        if (params.rejected) {\n            this.#rejected = params.rejected;\n        }\n    }\n    #iterator;\n    #signal;\n    get #iteratorSingleton() {\n        if (this.#iterator === null) {\n            this.#iterator = this.#createStreamEvents();\n        }\n        return this.#iterator;\n    }\n    [_computedKey]() {\n        return this.#iteratorSingleton;\n    }\n    #sendEvent;\n    #requireEvent;\n    #pendingInputQueue;\n    #strict;\n    strict() {\n        this.#strict = true;\n        return this;\n    }\n    get data() {\n        return this.#data;\n    }\n    /**\n   * Stream events from the start event\n   *\n   * Note that this function will stop once there's no more future events,\n   *  if you want stop immediately once reach a StopEvent, you should handle it in the other side.\n   * @private\n   */ #createStreamEvents() {\n        const isPendingEvents = new WeakSet();\n        const pendingTasks = new Set();\n        const enqueuedEvents = new Set();\n        const stream = new ReadableStream({\n            start: async (controller)=>{\n                while(true){\n                    const eventProtocol = this.#queue.shift();\n                    if (eventProtocol) {\n                        switch(eventProtocol.type){\n                            case \"requestEvent\":\n                                {\n                                    const { id, requestEvent } = eventProtocol;\n                                    const acceptableInput = this.#pendingInputQueue.find((event)=>event instanceof requestEvent);\n                                    if (acceptableInput) {\n                                        // remove the event from the queue, in case of infinite loop\n                                        const protocolIdx = this.#queue.findIndex((protocol)=>protocol.type === \"event\" && protocol.event === acceptableInput);\n                                        if (protocolIdx !== -1) {\n                                            this.#queue.splice(protocolIdx, 1);\n                                        }\n                                        this.#pendingInputQueue.splice(this.#pendingInputQueue.indexOf(acceptableInput), 1);\n                                        this.#queueEventTarget.dispatchEvent(new _llamaindex_env__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(\"update\", {\n                                            detail: {\n                                                id,\n                                                event: acceptableInput\n                                            }\n                                        }));\n                                    } else {\n                                        // push back to the queue as there are not enough events\n                                        this.#queue.push(eventProtocol);\n                                    }\n                                    break;\n                                }\n                            case \"event\":\n                                {\n                                    const { event } = eventProtocol;\n                                    if (isPendingEvents.has(event)) {\n                                        // this event is still processing\n                                        this.#sendEvent(event);\n                                    } else {\n                                        if (!enqueuedEvents.has(event)) {\n                                            controller.enqueue(event);\n                                            enqueuedEvents.add(event);\n                                        }\n                                        const [steps, inputsMap, outputsMap] = this.#getStepFunction(event);\n                                        const nextEventPromises = [\n                                            ...steps\n                                        ].map((step)=>{\n                                            const inputs = [\n                                                ...inputsMap.get(step) ?? []\n                                            ];\n                                            const acceptableInputs = this.#pendingInputQueue.filter((event)=>inputs.some((input)=>event instanceof input));\n                                            const events = flattenEvents(inputs, [\n                                                event,\n                                                ...acceptableInputs\n                                            ]);\n                                            // remove the event from the queue, in case of infinite loop\n                                            events.forEach((event)=>{\n                                                const protocolIdx = this.#queue.findIndex((protocol)=>protocol.type === \"event\" && protocol.event === event);\n                                                if (protocolIdx !== -1) {\n                                                    this.#queue.splice(protocolIdx, 1);\n                                                }\n                                            });\n                                            if (events.length !== inputs.length) {\n                                                if (this.#verbose) {\n                                                    console.log(`Not enough inputs for step ${step.name}, waiting for more events`);\n                                                }\n                                                // not enough to run the step, push back to the queue\n                                                this.#sendEvent(event);\n                                                isPendingEvents.add(event);\n                                                return null;\n                                            }\n                                            if (isPendingEvents.has(event)) {\n                                                isPendingEvents.delete(event);\n                                            }\n                                            if (this.#verbose) {\n                                                console.log(`Running step ${step.name} with inputs ${events}`);\n                                            }\n                                            const data = this.data;\n                                            return step.call(null, {\n                                                get data () {\n                                                    return data;\n                                                },\n                                                sendEvent: this.#sendEvent,\n                                                requireEvent: this.#requireEvent\n                                            }, // @ts-expect-error IDK why\n                                            ...events.sort((a, b)=>{\n                                                const aIndex = inputs.indexOf(a.constructor);\n                                                const bIndex = inputs.indexOf(b.constructor);\n                                                return aIndex - bIndex;\n                                            })).then((nextEvent)=>{\n                                                if (nextEvent === undefined) {\n                                                    return;\n                                                }\n                                                if (this.#verbose) {\n                                                    console.log(`Step ${step.name} completed, next event is ${nextEvent}`);\n                                                }\n                                                const outputs = outputsMap.get(step) ?? [];\n                                                if (!outputs.some((output)=>nextEvent.constructor === output)) {\n                                                    if (this.#strict) {\n                                                        const error = Error(`Step ${step.name} returned an unexpected output event ${nextEvent}`);\n                                                        controller.error(error);\n                                                    } else {\n                                                        console.warn(`Step ${step.name} returned an unexpected output event ${nextEvent}`);\n                                                    }\n                                                }\n                                                if (!(nextEvent instanceof StopEvent)) {\n                                                    this.#pendingInputQueue.unshift(nextEvent);\n                                                    this.#sendEvent(nextEvent);\n                                                }\n                                                return nextEvent;\n                                            });\n                                        }).filter((promise)=>promise !== null);\n                                        nextEventPromises.forEach((promise)=>{\n                                            pendingTasks.add(promise);\n                                            promise.catch((err)=>{\n                                                console.error(\"Error in step\", err);\n                                            }).finally(()=>{\n                                                pendingTasks.delete(promise);\n                                            });\n                                        });\n                                        Promise.race(nextEventPromises).then((fastestNextEvent)=>{\n                                            if (fastestNextEvent === undefined) {\n                                                return;\n                                            }\n                                            if (!enqueuedEvents.has(fastestNextEvent)) {\n                                                controller.enqueue(fastestNextEvent);\n                                                enqueuedEvents.add(fastestNextEvent);\n                                            }\n                                            return fastestNextEvent;\n                                        }).then(async (fastestNextEvent)=>Promise.all(nextEventPromises).then((nextEvents)=>{\n                                                const events = nextEvents.filter((event)=>event !== undefined);\n                                                for (const nextEvent of events){\n                                                    // do not enqueue the same event twice\n                                                    if (fastestNextEvent !== nextEvent) {\n                                                        if (!enqueuedEvents.has(nextEvent)) {\n                                                            controller.enqueue(nextEvent);\n                                                            enqueuedEvents.add(nextEvent);\n                                                        }\n                                                    }\n                                                }\n                                            })).catch((err)=>{\n                                            // when the step raise an error, should go back to the previous step\n                                            this.#sendEvent(event);\n                                            isPendingEvents.add(event);\n                                            controller.error(err);\n                                        });\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                    if (this.#queue.length === 0 && pendingTasks.size === 0) {\n                        if (this.#verbose) {\n                            console.log(\"No more events in the queue\");\n                        }\n                        break;\n                    }\n                    await this.#wait();\n                }\n                controller.close();\n            }\n        });\n        return stream[Symbol.asyncIterator]();\n    }\n    with(data) {\n        return new WorkflowContext({\n            startEvent: this.#startEvent,\n            wait: this.#wait,\n            contextData: data,\n            steps: this.#steps,\n            timeout: this.#timeout,\n            verbose: this.#verbose,\n            queue: this.#queue,\n            pendingInputQueue: this.#pendingInputQueue,\n            resolved: this.#resolved,\n            rejected: this.#rejected\n        });\n    }\n    #resolved;\n    #rejected;\n    async then(onfulfilled, onrejected) {\n        onfulfilled ??= (value)=>value;\n        onrejected ??= (reason)=>{\n            throw reason;\n        };\n        if (this.#resolved !== null) {\n            return Promise.resolve(this.#resolved).then(onfulfilled, onrejected);\n        } else if (this.#rejected !== null) {\n            return Promise.reject(this.#rejected).then(onfulfilled, onrejected);\n        }\n        if (this.#timeout !== null) {\n            const timeout = this.#timeout;\n            this.#signal = AbortSignal.timeout(timeout * 1000);\n        }\n        this.#signal?.addEventListener(\"abort\", ()=>{\n            this.#rejected = new Error(`Operation timed out after ${this.#timeout} seconds`);\n            onrejected?.(this.#rejected);\n        });\n        try {\n            for await (const event of this.#iteratorSingleton){\n                if (this.#rejected !== null) {\n                    return onrejected?.(this.#rejected);\n                }\n                if (event instanceof StartEvent) {\n                    if (this.#verbose) {\n                        console.log(`Starting workflow with event ${event}`);\n                    }\n                }\n                if (event instanceof StopEvent) {\n                    if (this.#verbose && this.#pendingInputQueue.length > 0) {\n                    // fixme: #pendingInputQueue might should be cleanup correctly?\n                    }\n                    this.#resolved = event;\n                    return onfulfilled?.(event);\n                }\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                this.#rejected = err;\n            }\n            return onrejected?.(err);\n        }\n        const nextValue = await this.#iteratorSingleton.next();\n        if (nextValue.done === false) {\n            this.#rejected = new Error(\"Workflow did not complete\");\n            return onrejected?.(this.#rejected);\n        }\n        return onrejected?.(new Error(\"UNREACHABLE\"));\n    }\n    catch(onrejected) {\n        return this.then((v)=>v, onrejected);\n    }\n    finally(onfinally) {\n        return this.then(()=>{\n            onfinally?.();\n        }, ()=>{\n            onfinally?.();\n        });\n    }\n    // for worker thread\n    snapshot() {\n        const state = {\n            startEvent: this.#startEvent,\n            queue: this.#queue,\n            pendingInputQueue: this.#pendingInputQueue,\n            data: this.#data,\n            timeout: this.#timeout,\n            verbose: this.#verbose,\n            resolved: this.#resolved,\n            rejected: this.#rejected\n        };\n        const jsonString = JSON.stringify(state, (_, value)=>{\n            // If value is an instance of a class, serialize only its properties\n            if (value instanceof WorkflowEvent) {\n                return {\n                    data: value.data,\n                    constructor: value.constructor.name\n                };\n            }\n            // value is Subtype of WorkflowEvent\n            if (typeof value === \"object\" && value !== null && value?.prototype instanceof WorkflowEvent) {\n                return {\n                    constructor: value.prototype.constructor.name\n                };\n            }\n            return value;\n        });\n        return new TextEncoder().encode(jsonString).buffer;\n    }\n}\n\nclass Workflow {\n    #steps;\n    #verbose;\n    #timeout;\n    // fixme: allow microtask\n    #nextTick;\n    constructor(params = {}){\n        this.#steps = new Map();\n        this.#verbose = false;\n        this.#timeout = null;\n        this.#nextTick = ()=>new Promise((resolve)=>setTimeout(resolve, 0));\n        if (params.verbose) {\n            this.#verbose = params.verbose;\n        }\n        if (params.timeout) {\n            this.#timeout = params.timeout;\n        }\n        if (params.wait) {\n            this.#nextTick = params.wait;\n        }\n    }\n    addStep(parameters, stepFn) {\n        const { inputs, outputs } = parameters;\n        this.#steps.set(stepFn, {\n            inputs,\n            outputs\n        });\n        return this;\n    }\n    hasStep(stepFn) {\n        return this.#steps.has(stepFn);\n    }\n    removeStep(stepFn) {\n        this.#steps.delete(stepFn);\n        return this;\n    }\n    run(event, data) {\n        const startEvent = event instanceof StartEvent ? event : new StartEvent(event);\n        return new WorkflowContext({\n            startEvent,\n            wait: this.#nextTick,\n            contextData: data,\n            steps: new Map(this.#steps),\n            timeout: this.#timeout,\n            verbose: this.#verbose,\n            queue: undefined,\n            pendingInputQueue: undefined,\n            resolved: null,\n            rejected: null\n        });\n    }\n    recover(data) {\n        const jsonString = new TextDecoder().decode(data);\n        const state = JSON.parse(jsonString);\n        const reconstructedStartEvent = new StartEvent(state.startEvent);\n        const AllEvents = [\n            ...this.#steps\n        ].map(([, { inputs, outputs }])=>[\n                ...inputs,\n                ...outputs ?? []\n            ]).flat();\n        const reconstructedQueue = state.queue.map((protocol)=>{\n            switch(protocol.type){\n                case \"requestEvent\":\n                    {\n                        const { requestEvent, id } = protocol;\n                        const EventType = AllEvents.find((type)=>type.prototype.constructor.name === requestEvent.constructor);\n                        if (!EventType) {\n                            throw new TypeError(`Event type not found: ${requestEvent.constructor}`);\n                        }\n                        return {\n                            type: \"requestEvent\",\n                            id,\n                            requestEvent: EventType\n                        };\n                    }\n                case \"event\":\n                    {\n                        const { event } = protocol;\n                        const EventType = AllEvents.find((type)=>type.prototype.constructor.name === event.constructor);\n                        if (!EventType) {\n                            throw new TypeError(`Event type not found: ${event.constructor}`);\n                        }\n                        return {\n                            type: \"event\",\n                            event: new EventType(event.data)\n                        };\n                    }\n            }\n        });\n        const reconstructedPendingInputQueue = state.pendingInputQueue.map((event)=>{\n            const EventType = AllEvents.find((type)=>type.prototype.constructor.name === event.constructor);\n            if (!EventType) {\n                throw new TypeError(`Event type not found: ${event.constructor}`);\n            }\n            return new EventType(event.data);\n        });\n        return new WorkflowContext({\n            startEvent: reconstructedStartEvent,\n            contextData: state.data,\n            wait: this.#nextTick,\n            steps: this.#steps,\n            timeout: state.timeout,\n            verbose: state.verbose,\n            queue: reconstructedQueue,\n            pendingInputQueue: reconstructedPendingInputQueue,\n            resolved: state.resolved ? new StopEvent(state.resolved) : null,\n            rejected: state.rejected ? new Error(state.rejected) : null\n        });\n    }\n}\n\nclass AgentToolCall extends WorkflowEvent {\n}\n// TODO: Check for if we need a raw tool output\nclass AgentToolCallResult extends WorkflowEvent {\n}\nclass AgentInput extends WorkflowEvent {\n}\nclass AgentSetup extends WorkflowEvent {\n}\nclass AgentStream extends WorkflowEvent {\n}\nclass AgentOutput extends WorkflowEvent {\n}\n\nconst DEFAULT_SYSTEM_PROMPT = \"You are a helpful assistant. Use the provided tools to answer questions.\";\nclass FunctionAgent {\n    constructor({ name, llm, description, tools, canHandoffTo, systemPrompt }){\n        this.name = name ?? \"Agent\";\n        this.llm = llm ?? _llamaindex_core_global__WEBPACK_IMPORTED_MODULE_5__.Settings.llm;\n        if (!this.llm.supportToolCall) {\n            throw new Error(\"FunctionAgent requires an LLM that supports tool calls\");\n        }\n        this.description = description ?? \"A single agent that uses the provided tools or functions.\";\n        this.tools = tools;\n        if (tools.length === 0) {\n            throw new Error(\"FunctionAgent must have at least one tool\");\n        }\n        // Process canHandoffTo to extract agent names\n        this.canHandoffTo = [];\n        if (canHandoffTo) {\n            if (Array.isArray(canHandoffTo)) {\n                if (canHandoffTo.length > 0) {\n                    if (typeof canHandoffTo[0] === \"string\") {\n                        // string[] case\n                        this.canHandoffTo = canHandoffTo;\n                    } else if (canHandoffTo[0] instanceof AgentWorkflow) {\n                        // AgentWorkflow[] case\n                        const workflows = canHandoffTo;\n                        workflows.forEach((workflow)=>{\n                            const agentNames = workflow.getAgents().map((agent)=>agent.name);\n                            this.canHandoffTo.push(...agentNames);\n                        });\n                    } else {\n                        // BaseWorkflowAgent[] case\n                        const agents = canHandoffTo;\n                        this.canHandoffTo = agents.map((agent)=>agent.name);\n                    }\n                }\n            }\n        }\n        const uniqueHandoffAgents = new Set(this.canHandoffTo);\n        if (uniqueHandoffAgents.size !== this.canHandoffTo.length) {\n            throw new Error(\"Duplicate handoff agents\");\n        }\n        this.systemPrompt = systemPrompt ?? DEFAULT_SYSTEM_PROMPT;\n    }\n    async takeStep(ctx, llmInput, tools) {\n        // Get scratchpad from context or initialize if not present\n        const scratchpad = ctx.data.scratchpad;\n        const currentLLMInput = [\n            ...llmInput,\n            ...scratchpad\n        ];\n        const responseStream = await this.llm.chat({\n            messages: currentLLMInput,\n            tools,\n            stream: true\n        });\n        let response = \"\";\n        let lastChunk;\n        const toolCalls = new Map();\n        for await (const chunk of responseStream){\n            response += chunk.delta;\n            ctx.sendEvent(new AgentStream({\n                delta: chunk.delta,\n                response: response,\n                currentAgentName: this.name,\n                raw: chunk.raw\n            }));\n            const toolCallsInChunk = this.getToolCallFromResponseChunk(chunk);\n            if (toolCallsInChunk.length > 0) {\n                // Just upsert the tool calls with the latest one if they exist\n                toolCallsInChunk.forEach((toolCall)=>{\n                    toolCalls.set(toolCall.data.toolId, toolCall);\n                });\n            }\n        }\n        const message = {\n            role: \"assistant\",\n            content: response\n        };\n        if (toolCalls.size > 0) {\n            message.options = {\n                toolCall: Array.from(toolCalls.values()).map((toolCall)=>({\n                        name: toolCall.data.toolName,\n                        input: toolCall.data.toolKwargs,\n                        id: toolCall.data.toolId\n                    }))\n            };\n        }\n        scratchpad.push(message);\n        ctx.data.scratchpad = scratchpad;\n        return new AgentOutput({\n            response: message,\n            toolCalls: Array.from(toolCalls.values()),\n            raw: lastChunk?.raw,\n            currentAgentName: this.name\n        });\n    }\n    async handleToolCallResults(ctx, results) {\n        const scratchpad = ctx.data.scratchpad;\n        for (const result of results){\n            const content = result.data.toolOutput.result;\n            const rawToolMessage = {\n                role: \"user\",\n                content,\n                options: {\n                    toolResult: {\n                        id: result.data.toolId,\n                        result: content,\n                        isError: result.data.toolOutput.isError\n                    }\n                }\n            };\n            ctx.data.scratchpad.push(rawToolMessage);\n        }\n        ctx.data.scratchpad = scratchpad;\n    }\n    async finalize(ctx, output, memory) {\n        // Get scratchpad messages\n        const scratchpad = ctx.data.scratchpad;\n        for (const msg of scratchpad){\n            memory.put(msg);\n        }\n        // Clear scratchpad after finalization\n        ctx.data.scratchpad = [];\n        return output;\n    }\n    getToolCallFromResponseChunk(responseChunk) {\n        const toolCalls = [];\n        const options = responseChunk.options ?? {};\n        if (options && \"toolCall\" in options && Array.isArray(options.toolCall)) {\n            toolCalls.push(...options.toolCall.map((call)=>{\n                // Convert input to arguments format\n                let toolKwargs;\n                if (typeof call.input === \"string\") {\n                    try {\n                        toolKwargs = JSON.parse(call.input);\n                    } catch (e) {\n                        toolKwargs = {\n                            rawInput: call.input\n                        };\n                    }\n                } else {\n                    toolKwargs = call.input;\n                }\n                return new AgentToolCall({\n                    agentName: this.name,\n                    toolName: call.name,\n                    toolKwargs: toolKwargs,\n                    toolId: call.id\n                });\n            }));\n        }\n        const invalidToolCalls = toolCalls.filter((call)=>!this.tools.some((tool)=>tool.metadata.name === call.data.toolName));\n        if (invalidToolCalls.length > 0) {\n            const invalidToolNames = invalidToolCalls.map((call)=>call.data.toolName).join(\", \");\n            throw new Error(`Tools not found: ${invalidToolNames}`);\n        }\n        return toolCalls;\n    }\n}\n\nconst DEFAULT_HANDOFF_PROMPT = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_1__.PromptTemplate({\n    template: `Useful for handing off to another agent.\nIf you are currently not equipped to handle the user's request, or another agent is better suited to handle the request, please hand off to the appropriate agent.\n\nCurrently available agents: \n{agent_info}\n`\n});\nconst DEFAULT_HANDOFF_OUTPUT_PROMPT = new _llamaindex_core_prompts__WEBPACK_IMPORTED_MODULE_1__.PromptTemplate({\n    template: `Agent {to_agent} is now handling the request due to the following reason: {reason}.\\nPlease continue with the current request.`\n});\n// Wrapper events for multiple tool calls and results\nclass ToolCallsEvent extends WorkflowEvent {\n}\nclass ToolResultsEvent extends WorkflowEvent {\n}\nclass AgentStepEvent extends WorkflowEvent {\n}\n/**\n * Create a multi-agent workflow\n * @param params - Parameters for the AgentWorkflow\n * @returns A new AgentWorkflow instance\n */ const multiAgent = (params)=>{\n    return new AgentWorkflow(params);\n};\n/**\n * Create a simple workflow with a single agent and specified tools\n * @param params - Parameters for the single agent workflow\n * @returns A new AgentWorkflow instance\n */ const agent = (params)=>{\n    return AgentWorkflow.fromTools(params);\n};\n/**\n * AgentWorkflow - An event-driven workflow for executing agents with tools\n *\n * This class provides a simple interface for creating and running agent workflows\n * based on the LlamaIndexTS workflow system. It supports single agent workflows\n * with multiple tools.\n */ class AgentWorkflow {\n    constructor({ agents, rootAgent, verbose, timeout }){\n        this.agents = new Map();\n        this.handleInputStep = async (ctx, event)=>{\n            const { userInput, chatHistory } = event.data;\n            const memory = ctx.data.memory;\n            if (chatHistory) {\n                chatHistory.forEach((message)=>{\n                    memory.put(message);\n                });\n            }\n            if (userInput) {\n                const userMessage = {\n                    role: \"user\",\n                    content: userInput\n                };\n                memory.put(userMessage);\n            } else if (chatHistory) {\n                // If no user message, use the last message from chat history as user_msg_str\n                const lastMessage = chatHistory[chatHistory.length - 1];\n                if (lastMessage?.role !== \"user\") {\n                    throw new Error(\"Either provide a user message or a chat history with a user message as the last message\");\n                }\n                ctx.data.userInput = lastMessage.content;\n            } else {\n                throw new Error(\"No user message or chat history provided\");\n            }\n            return new AgentInput({\n                input: await memory.getMessages(),\n                currentAgentName: this.rootAgentName\n            });\n        };\n        this.setupAgent = async (ctx, event)=>{\n            const currentAgentName = event.data.currentAgentName;\n            const agent = this.agents.get(currentAgentName);\n            if (!agent) {\n                throw new Error(`Agent ${currentAgentName} not found`);\n            }\n            const llmInput = event.data.input;\n            if (agent.systemPrompt) {\n                llmInput.unshift({\n                    role: \"system\",\n                    content: agent.systemPrompt\n                });\n            }\n            return new AgentSetup({\n                input: llmInput,\n                currentAgentName: currentAgentName\n            });\n        };\n        this.runAgentStep = async (ctx, event)=>{\n            const agent = this.agents.get(event.data.currentAgentName);\n            if (!agent) {\n                throw new Error(\"No valid agent found\");\n            }\n            if (this.verbose) {\n                console.log(`[Agent ${agent.name}]: Running for input: ${event.data.input[event.data.input.length - 1]?.content}`);\n            }\n            const output = await agent.takeStep(ctx, event.data.input, agent.tools);\n            ctx.sendEvent(output);\n            return new AgentStepEvent({\n                agentName: agent.name,\n                response: output.data.response,\n                toolCalls: output.data.toolCalls\n            });\n        };\n        this.parseAgentOutput = async (ctx, event)=>{\n            const { agentName, response, toolCalls } = event.data;\n            // If no tool calls, return final response\n            if (!toolCalls || toolCalls.length === 0) {\n                if (this.verbose) {\n                    console.log(`[Agent ${agentName}]: No tool calls to process, returning final response`);\n                }\n                const agentOutput = new AgentOutput({\n                    response,\n                    toolCalls: [],\n                    raw: response,\n                    currentAgentName: agentName\n                });\n                const content = await this.agents.get(agentName)?.finalize(ctx, agentOutput, ctx.data.memory);\n                return new StopEvent({\n                    result: content?.data.response.content\n                });\n            }\n            return new ToolCallsEvent({\n                agentName,\n                toolCalls\n            });\n        };\n        this.executeToolCalls = async (ctx, event)=>{\n            const { agentName, toolCalls } = event.data;\n            const agent = this.agents.get(agentName);\n            if (!agent) {\n                throw new Error(`Agent ${agentName} not found`);\n            }\n            const results = [];\n            // Execute each tool call\n            for (const toolCall of toolCalls){\n                // Send single tool call event, useful for UI\n                ctx.sendEvent(toolCall);\n                const toolResult = new AgentToolCallResult({\n                    toolName: toolCall.data.toolName,\n                    toolKwargs: toolCall.data.toolKwargs,\n                    toolId: toolCall.data.toolId,\n                    toolOutput: {\n                        id: toolCall.data.toolId,\n                        result: \"\",\n                        isError: false\n                    },\n                    returnDirect: false\n                });\n                try {\n                    const output = await this.callTool(toolCall, ctx);\n                    toolResult.data.toolOutput.result = (0,_llamaindex_core_utils__WEBPACK_IMPORTED_MODULE_3__.stringifyJSONToMessageContent)(output);\n                    toolResult.data.returnDirect = toolCall.data.toolName === \"handOff\";\n                } catch (error) {\n                    toolResult.data.toolOutput.isError = true;\n                    toolResult.data.toolOutput.result = `Error: ${error}`;\n                }\n                results.push(toolResult);\n                // Send single tool result event, useful for UI\n                ctx.sendEvent(toolResult);\n            }\n            return new ToolResultsEvent({\n                agentName,\n                results\n            });\n        };\n        this.processToolResults = async (ctx, event)=>{\n            const { agentName, results } = event.data;\n            // Get agent\n            const agent = this.agents.get(agentName);\n            if (!agent) {\n                throw new Error(`Agent ${agentName} not found`);\n            }\n            await agent.handleToolCallResults(ctx, results);\n            const directResult = results.find((r)=>r.data.returnDirect);\n            if (directResult) {\n                const isHandoff = directResult.data.toolName === \"handOff\";\n                const output = typeof directResult.data.toolOutput.result === \"string\" ? directResult.data.toolOutput.result : JSON.stringify(directResult.data.toolOutput.result);\n                const agentOutput = new AgentOutput({\n                    response: {\n                        role: \"assistant\",\n                        content: output\n                    },\n                    toolCalls: [],\n                    raw: output,\n                    currentAgentName: agent.name\n                });\n                await agent.finalize(ctx, agentOutput, ctx.data.memory);\n                if (isHandoff) {\n                    const nextAgentName = ctx.data.nextAgentName;\n                    console.log(`[Agent ${agentName}]: Handoff to ${nextAgentName}: ${directResult.data.toolOutput.result}`);\n                    if (nextAgentName) {\n                        ctx.data.currentAgentName = nextAgentName;\n                        ctx.data.nextAgentName = null;\n                        const messages = await ctx.data.memory.getMessages();\n                        return new AgentInput({\n                            input: messages,\n                            currentAgentName: nextAgentName\n                        });\n                    }\n                }\n                return new StopEvent({\n                    result: output\n                });\n            }\n            // Continue with another agent step\n            const messages = await ctx.data.memory.getMessages();\n            return new AgentInput({\n                input: messages,\n                currentAgentName: agent.name\n            });\n        };\n        this.workflow = new Workflow({\n            verbose: verbose ?? false,\n            timeout: timeout ?? 60\n        });\n        this.verbose = verbose ?? false;\n        // Handle AgentWorkflow cases for agents\n        const processedAgents = [];\n        if (agents.length > 0) {\n            if (agents[0] instanceof AgentWorkflow) {\n                // If agents is AgentWorkflow[], extract the BaseWorkflowAgent from each workflow\n                const agentWorkflows = agents;\n                agentWorkflows.forEach((workflow)=>{\n                    const workflowAgents = workflow.getAgents();\n                    processedAgents.push(...workflowAgents);\n                });\n            } else {\n                // Otherwise, agents is already BaseWorkflowAgent[]\n                processedAgents.push(...agents);\n            }\n        }\n        // Handle AgentWorkflow case for rootAgent and set rootAgentName\n        if (rootAgent instanceof AgentWorkflow) {\n            // If rootAgent is an AgentWorkflow, check if it has exactly one agent\n            const rootAgents = rootAgent.getAgents();\n            if (rootAgents.length !== 1) {\n                throw new Error(`Root agent must be a single agent, but it is a workflow with ${rootAgents.length} agents`);\n            }\n            // We know rootAgents[0] exists because we checked length === 1 above\n            this.rootAgentName = rootAgents[0].name;\n        } else {\n            // Otherwise, rootAgent is already a BaseWorkflowAgent\n            this.rootAgentName = rootAgent.name;\n        }\n        // Validate root agent\n        if (!processedAgents.some((a)=>a.name === this.rootAgentName)) {\n            throw new Error(`Root agent ${this.rootAgentName} not found in agents`);\n        }\n        this.addAgents(processedAgents);\n    }\n    addAgents(agents) {\n        const agentNames = new Set(agents.map((a)=>a.name));\n        if (agentNames.size !== agents.length) {\n            throw new Error(\"The agent names must be unique!\");\n        }\n        agents.forEach((agent)=>{\n            this.agents.set(agent.name, agent);\n        });\n        if (agents.length > 1) {\n            agents.forEach((agent)=>{\n                this.validateAgent(agent);\n                this.addHandoffTool(agent);\n            });\n        }\n    }\n    validateAgent(agent) {\n        // Validate that all canHandoffTo agents exist\n        const invalidAgents = agent.canHandoffTo.filter((name)=>!this.agents.has(name));\n        if (invalidAgents.length > 0) {\n            throw new Error(`Agent \"${agent.name}\" references non-existent agents in canHandoffTo: ${invalidAgents.join(\", \")}`);\n        }\n    }\n    addHandoffTool(agent) {\n        if (agent.tools.some((t)=>t.metadata.name === \"handOff\")) {\n            return;\n        }\n        const toHandoffAgents = new Map();\n        agent.canHandoffTo.forEach((name)=>{\n            toHandoffAgents.set(name, this.agents.get(name));\n        });\n        const handoffTool = createHandoffTool(toHandoffAgents);\n        if (agent.canHandoffTo.length > 0 && !agent.tools.some((t)=>t.metadata.name === handoffTool.metadata.name)) {\n            agent.tools.push(handoffTool);\n        }\n    }\n    /**\n   * Adds a new agent to the workflow\n   */ addAgent(agent) {\n        this.agents.set(agent.name, agent);\n        this.validateAgent(agent);\n        this.addHandoffTool(agent);\n        return this;\n    }\n    /**\n   * Gets all agents in this workflow\n   * @returns Array of agents in this workflow\n   */ getAgents() {\n        return Array.from(this.agents.values());\n    }\n    /**\n   * Create a simple workflow with a single agent and specified tools\n   * @param params - Parameters for the single agent workflow\n   * @returns A new AgentWorkflow instance\n   */ static fromTools(params) {\n        const agent = new FunctionAgent({\n            name: params.name,\n            description: params.description,\n            tools: params.tools,\n            llm: params.llm,\n            systemPrompt: params.systemPrompt,\n            canHandoffTo: params.canHandoffTo\n        });\n        const workflow = new AgentWorkflow({\n            agents: [\n                agent\n            ],\n            rootAgent: agent,\n            verbose: params.verbose ?? false,\n            timeout: params.timeout ?? 60\n        });\n        return workflow;\n    }\n    setupWorkflowSteps() {\n        this.workflow.addStep({\n            inputs: [\n                StartEvent\n            ],\n            outputs: [\n                AgentInput\n            ]\n        }, this.handleInputStep);\n        this.workflow.addStep({\n            inputs: [\n                AgentInput\n            ],\n            outputs: [\n                AgentSetup\n            ]\n        }, this.setupAgent);\n        this.workflow.addStep({\n            inputs: [\n                AgentSetup\n            ],\n            outputs: [\n                AgentStepEvent\n            ]\n        }, this.runAgentStep);\n        this.workflow.addStep({\n            inputs: [\n                AgentStepEvent\n            ],\n            outputs: [\n                ToolCallsEvent,\n                StopEvent\n            ]\n        }, this.parseAgentOutput);\n        this.workflow.addStep({\n            inputs: [\n                ToolCallsEvent\n            ],\n            outputs: [\n                ToolResultsEvent,\n                StopEvent\n            ]\n        }, this.executeToolCalls);\n        this.workflow.addStep({\n            inputs: [\n                ToolResultsEvent\n            ],\n            outputs: [\n                AgentInput,\n                StopEvent\n            ]\n        }, this.processToolResults);\n        return this;\n    }\n    callTool(toolCall, ctx) {\n        const tool = this.agents.get(toolCall.data.agentName)?.tools.find((t)=>t.metadata.name === toolCall.data.toolName);\n        if (!tool) {\n            throw new Error(`Tool ${toolCall.data.toolName} not found`);\n        }\n        if (tool.metadata.requireContext) {\n            const input = {\n                context: ctx.data,\n                ...toolCall.data.toolKwargs\n            };\n            return tool.call(input);\n        } else {\n            return tool.call(toolCall.data.toolKwargs);\n        }\n    }\n    run(userInput, params) {\n        if (this.agents.size === 0) {\n            throw new Error(\"No agents added to workflow\");\n        }\n        this.setupWorkflowSteps();\n        const contextData = params?.context ?? {\n            userInput: userInput,\n            memory: new _llamaindex_core_memory__WEBPACK_IMPORTED_MODULE_0__.ChatMemoryBuffer(),\n            scratchpad: [],\n            currentAgentName: this.rootAgentName,\n            agents: Array.from(this.agents.keys()),\n            nextAgentName: null\n        };\n        const result = this.workflow.run({\n            userInput: userInput,\n            chatHistory: params?.chatHistory\n        }, contextData);\n        return result;\n    }\n}\nconst createHandoffTool = (agents)=>{\n    const agentInfo = Array.from(agents.values()).reduce((acc, a)=>{\n        acc[a.name] = a.description;\n        return acc;\n    }, {});\n    return _llamaindex_core_tools__WEBPACK_IMPORTED_MODULE_2__.FunctionTool.from(({ context, toAgent, reason })=>{\n        if (!context) {\n            throw new Error(\"Context is required for handoff\");\n        }\n        const agents = context.agents;\n        if (!agents.includes(toAgent)) {\n            return `Agent ${toAgent} not found. Select a valid agent to hand off to. Valid agents: ${agents.join(\", \")}`;\n        }\n        context.nextAgentName = toAgent;\n        return DEFAULT_HANDOFF_OUTPUT_PROMPT.format({\n            to_agent: toAgent,\n            reason: reason\n        });\n    }, {\n        name: \"handOff\",\n        description: DEFAULT_HANDOFF_PROMPT.format({\n            agent_info: JSON.stringify(agentInfo)\n        }),\n        parameters: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            toAgent: zod__WEBPACK_IMPORTED_MODULE_6__.z.string({\n                description: \"The name of the agent to hand off to\"\n            }),\n            reason: zod__WEBPACK_IMPORTED_MODULE_6__.z.string({\n                description: \"The reason for handing off to the agent\"\n            })\n        }),\n        requireContext: true\n    });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/agent/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StartEvent: () => (/* binding */ StartEvent),\n/* harmony export */   StopEvent: () => (/* binding */ StopEvent),\n/* harmony export */   Workflow: () => (/* binding */ Workflow),\n/* harmony export */   WorkflowContext: () => (/* binding */ WorkflowContext),\n/* harmony export */   WorkflowEvent: () => (/* binding */ WorkflowEvent)\n/* harmony export */ });\n/* harmony import */ var _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @llamaindex/env */ \"(rsc)/./node_modules/@llamaindex/env/dist/index.js\");\n\n\nclass WorkflowEvent {\n    constructor(data){\n        this.data = data;\n        this.displayName = this.constructor.name;\n    }\n    toString() {\n        return this.displayName;\n    }\n    static or(AEvent, BEvent) {\n        function OrEvent() {\n            throw new Error(\"Cannot instantiate OrEvent\");\n        }\n        OrEvent.prototype = Object.create(AEvent.prototype);\n        Object.getOwnPropertyNames(BEvent.prototype).forEach((property)=>{\n            if (!(property in OrEvent.prototype)) {\n                Object.defineProperty(OrEvent.prototype, property, Object.getOwnPropertyDescriptor(BEvent.prototype, property));\n            }\n        });\n        OrEvent.prototype.constructor = OrEvent;\n        Object.defineProperty(OrEvent, Symbol.hasInstance, {\n            value: function(instance) {\n                return instance instanceof AEvent || instance instanceof BEvent;\n            }\n        });\n        return OrEvent;\n    }\n}\n// These are special events that are used to control the workflow\nclass StartEvent extends WorkflowEvent {\n    constructor(data){\n        super(data);\n    }\n}\nclass StopEvent extends WorkflowEvent {\n    constructor(data){\n        super(data);\n    }\n}\n\nvar _computedKey, _computedKey1;\nfunction flattenEvents(acceptEventTypes, inputEvents) {\n    const eventMap = new Map();\n    for (const event of inputEvents){\n        for (const acceptType of acceptEventTypes){\n            if (event instanceof acceptType && !eventMap.has(acceptType)) {\n                eventMap.set(acceptType, event);\n                break; // Once matched, no need to check other accept types\n            }\n        }\n    }\n    return Array.from(eventMap.values());\n}\n_computedKey = Symbol.asyncIterator, _computedKey1 = Symbol.toStringTag;\nclass WorkflowContext {\n    #steps;\n    #startEvent;\n    #queue;\n    #queueEventTarget;\n    #wait;\n    #timeout;\n    #verbose;\n    #data;\n    #stepCache;\n    #getStepFunction(event) {\n        if (this.#stepCache.has(event)) {\n            return this.#stepCache.get(event);\n        }\n        const set = new Set();\n        const stepInputs = new WeakMap();\n        const stepOutputs = new WeakMap();\n        const res = [\n            set,\n            stepInputs,\n            stepOutputs\n        ];\n        this.#stepCache.set(event, res);\n        for (const [step, { inputs, outputs }] of this.#steps){\n            if (inputs.some((input)=>event instanceof input)) {\n                set.add(step);\n                stepInputs.set(step, inputs);\n                stepOutputs.set(step, outputs);\n            }\n        }\n        return res;\n    }\n    constructor(params){\n        this.#queue = [];\n        this.#queueEventTarget = new EventTarget();\n        this.#timeout = null;\n        this.#verbose = false;\n        this.#stepCache = new Map();\n        // make sure it will only be called once\n        this.#iterator = null;\n        this.#signal = null;\n        this.#sendEvent = (event)=>{\n            this.#queue.push({\n                type: \"event\",\n                event\n            });\n        };\n        this.#requireEvent = async (event)=>{\n            const requestId = (0,_llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n            this.#queue.push({\n                type: \"requestEvent\",\n                id: requestId,\n                requestEvent: event\n            });\n            return new Promise((resolve)=>{\n                const handler = (event)=>{\n                    if (event instanceof _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.CustomEvent) {\n                        const { id } = event.detail;\n                        if (requestId === id) {\n                            this.#queueEventTarget.removeEventListener(\"update\", handler);\n                            resolve(event.detail.event);\n                        }\n                    }\n                };\n                this.#queueEventTarget.addEventListener(\"update\", handler);\n            });\n        };\n        this.#pendingInputQueue = [];\n        // if strict mode is enabled, it will throw an error if there's input or output events are not expected\n        this.#strict = false;\n        // PromiseLike implementation, this is following the Promise/A+ spec\n        // It will consume the iterator and resolve the promise once it reaches the StopEvent\n        // If you want to customize the behavior, you can use the async iterator directly\n        this.#resolved = null;\n        this.#rejected = null;\n        this[_computedKey1] = \"Context\";\n        this.#steps = params.steps;\n        this.#startEvent = params.startEvent;\n        if (typeof params.timeout === \"number\") {\n            this.#timeout = params.timeout;\n        }\n        this.#data = params.contextData;\n        this.#verbose = params.verbose ?? false;\n        this.#wait = params.wait;\n        // push start event to the queue\n        const [step] = this.#getStepFunction(this.#startEvent);\n        if (step.size === 0) {\n            throw new TypeError(\"No step found for start event\");\n        }\n        // restore from snapshot\n        if (params.queue) {\n            params.queue.forEach((protocol)=>{\n                this.#queue.push(protocol);\n            });\n        } else {\n            this.#sendEvent(this.#startEvent);\n        }\n        if (params.pendingInputQueue) {\n            this.#pendingInputQueue = params.pendingInputQueue;\n        }\n        if (params.resolved) {\n            this.#resolved = params.resolved;\n        }\n        if (params.rejected) {\n            this.#rejected = params.rejected;\n        }\n    }\n    #iterator;\n    #signal;\n    get #iteratorSingleton() {\n        if (this.#iterator === null) {\n            this.#iterator = this.#createStreamEvents();\n        }\n        return this.#iterator;\n    }\n    [_computedKey]() {\n        return this.#iteratorSingleton;\n    }\n    #sendEvent;\n    #requireEvent;\n    #pendingInputQueue;\n    #strict;\n    strict() {\n        this.#strict = true;\n        return this;\n    }\n    get data() {\n        return this.#data;\n    }\n    /**\n   * Stream events from the start event\n   *\n   * Note that this function will stop once there's no more future events,\n   *  if you want stop immediately once reach a StopEvent, you should handle it in the other side.\n   * @private\n   */ #createStreamEvents() {\n        const isPendingEvents = new WeakSet();\n        const pendingTasks = new Set();\n        const enqueuedEvents = new Set();\n        const stream = new ReadableStream({\n            start: async (controller)=>{\n                while(true){\n                    const eventProtocol = this.#queue.shift();\n                    if (eventProtocol) {\n                        switch(eventProtocol.type){\n                            case \"requestEvent\":\n                                {\n                                    const { id, requestEvent } = eventProtocol;\n                                    const acceptableInput = this.#pendingInputQueue.find((event)=>event instanceof requestEvent);\n                                    if (acceptableInput) {\n                                        // remove the event from the queue, in case of infinite loop\n                                        const protocolIdx = this.#queue.findIndex((protocol)=>protocol.type === \"event\" && protocol.event === acceptableInput);\n                                        if (protocolIdx !== -1) {\n                                            this.#queue.splice(protocolIdx, 1);\n                                        }\n                                        this.#pendingInputQueue.splice(this.#pendingInputQueue.indexOf(acceptableInput), 1);\n                                        this.#queueEventTarget.dispatchEvent(new _llamaindex_env__WEBPACK_IMPORTED_MODULE_0__.CustomEvent(\"update\", {\n                                            detail: {\n                                                id,\n                                                event: acceptableInput\n                                            }\n                                        }));\n                                    } else {\n                                        // push back to the queue as there are not enough events\n                                        this.#queue.push(eventProtocol);\n                                    }\n                                    break;\n                                }\n                            case \"event\":\n                                {\n                                    const { event } = eventProtocol;\n                                    if (isPendingEvents.has(event)) {\n                                        // this event is still processing\n                                        this.#sendEvent(event);\n                                    } else {\n                                        if (!enqueuedEvents.has(event)) {\n                                            controller.enqueue(event);\n                                            enqueuedEvents.add(event);\n                                        }\n                                        const [steps, inputsMap, outputsMap] = this.#getStepFunction(event);\n                                        const nextEventPromises = [\n                                            ...steps\n                                        ].map((step)=>{\n                                            const inputs = [\n                                                ...inputsMap.get(step) ?? []\n                                            ];\n                                            const acceptableInputs = this.#pendingInputQueue.filter((event)=>inputs.some((input)=>event instanceof input));\n                                            const events = flattenEvents(inputs, [\n                                                event,\n                                                ...acceptableInputs\n                                            ]);\n                                            // remove the event from the queue, in case of infinite loop\n                                            events.forEach((event)=>{\n                                                const protocolIdx = this.#queue.findIndex((protocol)=>protocol.type === \"event\" && protocol.event === event);\n                                                if (protocolIdx !== -1) {\n                                                    this.#queue.splice(protocolIdx, 1);\n                                                }\n                                            });\n                                            if (events.length !== inputs.length) {\n                                                if (this.#verbose) {\n                                                    console.log(`Not enough inputs for step ${step.name}, waiting for more events`);\n                                                }\n                                                // not enough to run the step, push back to the queue\n                                                this.#sendEvent(event);\n                                                isPendingEvents.add(event);\n                                                return null;\n                                            }\n                                            if (isPendingEvents.has(event)) {\n                                                isPendingEvents.delete(event);\n                                            }\n                                            if (this.#verbose) {\n                                                console.log(`Running step ${step.name} with inputs ${events}`);\n                                            }\n                                            const data = this.data;\n                                            return step.call(null, {\n                                                get data () {\n                                                    return data;\n                                                },\n                                                sendEvent: this.#sendEvent,\n                                                requireEvent: this.#requireEvent\n                                            }, // @ts-expect-error IDK why\n                                            ...events.sort((a, b)=>{\n                                                const aIndex = inputs.indexOf(a.constructor);\n                                                const bIndex = inputs.indexOf(b.constructor);\n                                                return aIndex - bIndex;\n                                            })).then((nextEvent)=>{\n                                                if (nextEvent === undefined) {\n                                                    return;\n                                                }\n                                                if (this.#verbose) {\n                                                    console.log(`Step ${step.name} completed, next event is ${nextEvent}`);\n                                                }\n                                                const outputs = outputsMap.get(step) ?? [];\n                                                if (!outputs.some((output)=>nextEvent.constructor === output)) {\n                                                    if (this.#strict) {\n                                                        const error = Error(`Step ${step.name} returned an unexpected output event ${nextEvent}`);\n                                                        controller.error(error);\n                                                    } else {\n                                                        console.warn(`Step ${step.name} returned an unexpected output event ${nextEvent}`);\n                                                    }\n                                                }\n                                                if (!(nextEvent instanceof StopEvent)) {\n                                                    this.#pendingInputQueue.unshift(nextEvent);\n                                                    this.#sendEvent(nextEvent);\n                                                }\n                                                return nextEvent;\n                                            });\n                                        }).filter((promise)=>promise !== null);\n                                        nextEventPromises.forEach((promise)=>{\n                                            pendingTasks.add(promise);\n                                            promise.catch((err)=>{\n                                                console.error(\"Error in step\", err);\n                                            }).finally(()=>{\n                                                pendingTasks.delete(promise);\n                                            });\n                                        });\n                                        Promise.race(nextEventPromises).then((fastestNextEvent)=>{\n                                            if (fastestNextEvent === undefined) {\n                                                return;\n                                            }\n                                            if (!enqueuedEvents.has(fastestNextEvent)) {\n                                                controller.enqueue(fastestNextEvent);\n                                                enqueuedEvents.add(fastestNextEvent);\n                                            }\n                                            return fastestNextEvent;\n                                        }).then(async (fastestNextEvent)=>Promise.all(nextEventPromises).then((nextEvents)=>{\n                                                const events = nextEvents.filter((event)=>event !== undefined);\n                                                for (const nextEvent of events){\n                                                    // do not enqueue the same event twice\n                                                    if (fastestNextEvent !== nextEvent) {\n                                                        if (!enqueuedEvents.has(nextEvent)) {\n                                                            controller.enqueue(nextEvent);\n                                                            enqueuedEvents.add(nextEvent);\n                                                        }\n                                                    }\n                                                }\n                                            })).catch((err)=>{\n                                            // when the step raise an error, should go back to the previous step\n                                            this.#sendEvent(event);\n                                            isPendingEvents.add(event);\n                                            controller.error(err);\n                                        });\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                    if (this.#queue.length === 0 && pendingTasks.size === 0) {\n                        if (this.#verbose) {\n                            console.log(\"No more events in the queue\");\n                        }\n                        break;\n                    }\n                    await this.#wait();\n                }\n                controller.close();\n            }\n        });\n        return stream[Symbol.asyncIterator]();\n    }\n    with(data) {\n        return new WorkflowContext({\n            startEvent: this.#startEvent,\n            wait: this.#wait,\n            contextData: data,\n            steps: this.#steps,\n            timeout: this.#timeout,\n            verbose: this.#verbose,\n            queue: this.#queue,\n            pendingInputQueue: this.#pendingInputQueue,\n            resolved: this.#resolved,\n            rejected: this.#rejected\n        });\n    }\n    #resolved;\n    #rejected;\n    async then(onfulfilled, onrejected) {\n        onfulfilled ??= (value)=>value;\n        onrejected ??= (reason)=>{\n            throw reason;\n        };\n        if (this.#resolved !== null) {\n            return Promise.resolve(this.#resolved).then(onfulfilled, onrejected);\n        } else if (this.#rejected !== null) {\n            return Promise.reject(this.#rejected).then(onfulfilled, onrejected);\n        }\n        if (this.#timeout !== null) {\n            const timeout = this.#timeout;\n            this.#signal = AbortSignal.timeout(timeout * 1000);\n        }\n        this.#signal?.addEventListener(\"abort\", ()=>{\n            this.#rejected = new Error(`Operation timed out after ${this.#timeout} seconds`);\n            onrejected?.(this.#rejected);\n        });\n        try {\n            for await (const event of this.#iteratorSingleton){\n                if (this.#rejected !== null) {\n                    return onrejected?.(this.#rejected);\n                }\n                if (event instanceof StartEvent) {\n                    if (this.#verbose) {\n                        console.log(`Starting workflow with event ${event}`);\n                    }\n                }\n                if (event instanceof StopEvent) {\n                    if (this.#verbose && this.#pendingInputQueue.length > 0) {\n                    // fixme: #pendingInputQueue might should be cleanup correctly?\n                    }\n                    this.#resolved = event;\n                    return onfulfilled?.(event);\n                }\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                this.#rejected = err;\n            }\n            return onrejected?.(err);\n        }\n        const nextValue = await this.#iteratorSingleton.next();\n        if (nextValue.done === false) {\n            this.#rejected = new Error(\"Workflow did not complete\");\n            return onrejected?.(this.#rejected);\n        }\n        return onrejected?.(new Error(\"UNREACHABLE\"));\n    }\n    catch(onrejected) {\n        return this.then((v)=>v, onrejected);\n    }\n    finally(onfinally) {\n        return this.then(()=>{\n            onfinally?.();\n        }, ()=>{\n            onfinally?.();\n        });\n    }\n    // for worker thread\n    snapshot() {\n        const state = {\n            startEvent: this.#startEvent,\n            queue: this.#queue,\n            pendingInputQueue: this.#pendingInputQueue,\n            data: this.#data,\n            timeout: this.#timeout,\n            verbose: this.#verbose,\n            resolved: this.#resolved,\n            rejected: this.#rejected\n        };\n        const jsonString = JSON.stringify(state, (_, value)=>{\n            // If value is an instance of a class, serialize only its properties\n            if (value instanceof WorkflowEvent) {\n                return {\n                    data: value.data,\n                    constructor: value.constructor.name\n                };\n            }\n            // value is Subtype of WorkflowEvent\n            if (typeof value === \"object\" && value !== null && value?.prototype instanceof WorkflowEvent) {\n                return {\n                    constructor: value.prototype.constructor.name\n                };\n            }\n            return value;\n        });\n        return new TextEncoder().encode(jsonString).buffer;\n    }\n}\n\nclass Workflow {\n    #steps;\n    #verbose;\n    #timeout;\n    // fixme: allow microtask\n    #nextTick;\n    constructor(params = {}){\n        this.#steps = new Map();\n        this.#verbose = false;\n        this.#timeout = null;\n        this.#nextTick = ()=>new Promise((resolve)=>setTimeout(resolve, 0));\n        if (params.verbose) {\n            this.#verbose = params.verbose;\n        }\n        if (params.timeout) {\n            this.#timeout = params.timeout;\n        }\n        if (params.wait) {\n            this.#nextTick = params.wait;\n        }\n    }\n    addStep(parameters, stepFn) {\n        const { inputs, outputs } = parameters;\n        this.#steps.set(stepFn, {\n            inputs,\n            outputs\n        });\n        return this;\n    }\n    hasStep(stepFn) {\n        return this.#steps.has(stepFn);\n    }\n    removeStep(stepFn) {\n        this.#steps.delete(stepFn);\n        return this;\n    }\n    run(event, data) {\n        const startEvent = event instanceof StartEvent ? event : new StartEvent(event);\n        return new WorkflowContext({\n            startEvent,\n            wait: this.#nextTick,\n            contextData: data,\n            steps: new Map(this.#steps),\n            timeout: this.#timeout,\n            verbose: this.#verbose,\n            queue: undefined,\n            pendingInputQueue: undefined,\n            resolved: null,\n            rejected: null\n        });\n    }\n    recover(data) {\n        const jsonString = new TextDecoder().decode(data);\n        const state = JSON.parse(jsonString);\n        const reconstructedStartEvent = new StartEvent(state.startEvent);\n        const AllEvents = [\n            ...this.#steps\n        ].map(([, { inputs, outputs }])=>[\n                ...inputs,\n                ...outputs ?? []\n            ]).flat();\n        const reconstructedQueue = state.queue.map((protocol)=>{\n            switch(protocol.type){\n                case \"requestEvent\":\n                    {\n                        const { requestEvent, id } = protocol;\n                        const EventType = AllEvents.find((type)=>type.prototype.constructor.name === requestEvent.constructor);\n                        if (!EventType) {\n                            throw new TypeError(`Event type not found: ${requestEvent.constructor}`);\n                        }\n                        return {\n                            type: \"requestEvent\",\n                            id,\n                            requestEvent: EventType\n                        };\n                    }\n                case \"event\":\n                    {\n                        const { event } = protocol;\n                        const EventType = AllEvents.find((type)=>type.prototype.constructor.name === event.constructor);\n                        if (!EventType) {\n                            throw new TypeError(`Event type not found: ${event.constructor}`);\n                        }\n                        return {\n                            type: \"event\",\n                            event: new EventType(event.data)\n                        };\n                    }\n            }\n        });\n        const reconstructedPendingInputQueue = state.pendingInputQueue.map((event)=>{\n            const EventType = AllEvents.find((type)=>type.prototype.constructor.name === event.constructor);\n            if (!EventType) {\n                throw new TypeError(`Event type not found: ${event.constructor}`);\n            }\n            return new EventType(event.data);\n        });\n        return new WorkflowContext({\n            startEvent: reconstructedStartEvent,\n            contextData: state.data,\n            wait: this.#nextTick,\n            steps: this.#steps,\n            timeout: state.timeout,\n            verbose: state.verbose,\n            queue: reconstructedQueue,\n            pendingInputQueue: reconstructedPendingInputQueue,\n            resolved: state.resolved ? new StopEvent(state.resolved) : null,\n            rejected: state.rejected ? new Error(state.rejected) : null\n        });\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/llamaindex/node_modules/@llamaindex/workflow/dist/index.js\n");

/***/ })

};
;